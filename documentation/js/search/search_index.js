var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/AddCreditCardDto.html",[0,0.158,1,3.533]],["body/classes/AddCreditCardDto.html",[0,0.264,1,6.394,2,1.503,3,0.07,4,0.07,5,0.07,6,5.556,7,5.576,8,0.395,9,1.436,10,6.394,11,0.371,12,0.007,13,1.41,14,1.323,15,3.178,16,0.537,17,6.273,18,0.191,19,3.607,20,3.607,21,2.579,22,0.099,23,0.84,24,0.006,25,0.006]],["title/classes/Address.html",[0,0.158,26,3.162]],["body/classes/Address.html",[0,0.162,2,1.135,3,0.053,4,0.053,5,0.053,8,0.299,9,1.197,11,0.488,12,0.007,13,1.549,14,1.738,16,0.706,18,0.197,22,0.06,23,0.634,24,0.005,25,0.005,26,4.998,27,4.209,28,4.159,29,6.522,30,6.522,31,2.43,32,6.522,33,1.05,34,3.231,35,5.021,36,4.735,37,4.735,38,1.827,39,4.232,40,4.735,41,4.735,42,4.209,43,2.638,44,4.735,45,3.594,46,5.734,47,1.859,48,3.863,49,4.735]],["title/modules/AppModule.html",[50,1.015,51,3.533]],["body/modules/AppModule.html",[0,0.07,3,0.023,4,0.023,5,0.023,11,0.122,12,0.007,16,0.176,18,0.275,22,0.026,24,0.003,25,0.003,33,0.335,50,0.749,51,7.141,52,0.711,53,1.344,54,1.831,55,1.831,56,3.981,57,4.394,58,4.394,59,4.394,60,4.394,61,4.394,62,4.394,63,4.172,64,4.394,65,4.394,66,4.394,67,4.394,68,4.394,69,4.394,70,4.394,71,4.394,72,4.394,73,3.981,74,4.394,75,4.394,76,4.394,77,4.394,78,3.412,79,1.407,80,0.847,81,0.827,82,2.06,83,1.88,84,0.427,85,2.06,86,3.423,87,5.115,88,2.06,89,0.389,90,0.299,91,3.423,92,0.419,93,1.403,94,0.244,95,2.06,96,2.161,97,2.87,98,0.726,99,2.06,100,1.831,101,2.06,102,1.68,103,1.339,104,2.06,105,1.68,106,2.06,107,2.06,108,2.06,109,2.06,110,2.06,111,1.68,112,2.06,113,2.06,114,2.06,115,1.283,116,1.568,117,1.478,118,1.831,119,2.456,120,2.06,121,2.06,122,1.831,123,1.568,124,2.06,125,1.68,126,2.06,127,2.06,128,2.06,129,1.831,130,2.06,131,2.06,132,1.568,133,2.06,134,2.06,135,2.06,136,2.06,137,2.331,138,0.522,139,1.478,140,1.568,141,1.68,142,2.605,143,2.06,144,2.049,145,2.06,146,2.06,147,2.06,148,2.06,149,1.831,150,2.06,151,2.06,152,1.014,153,2.06,154,2.06,155,2.06,156,2.06,157,2.06,158,8.748,159,2.06,160,3.423,161,2.06,162,2.06,163,2.06,164,2.06,165,1.831,166,2.06,167,2.06,168,2.06,169,2.06,170,2.06,171,2.06,172,3.423,173,2.06,174,7.63,175,2.06,176,2.06,177,2.06,178,2.06,179,2.06,180,2.06,181,2.06,182,2.06,183,2.06,184,2.06,185,2.06,186,2.06,187,2.06,188,2.06,189,2.06,190,2.06,191,2.06,192,2.06,193,2.06,194,2.06,195,2.06,196,2.06,197,2.06,198,2.06,199,2.06,200,2.06,201,0.573,202,0.791,203,2.06,204,2.06]],["title/controllers/AuthenticationController.html",[205,1.34,206,3.533]],["body/controllers/AuthenticationController.html",[0,0.108,3,0.035,4,0.035,5,0.035,8,0.199,11,0.416,12,0.007,14,1.481,16,0.601,18,0.248,22,0.04,24,0.004,25,0.004,33,1.143,34,2.346,81,1.268,84,0.997,89,1.327,90,1.018,92,1.428,94,0.373,138,2.058,201,0.878,205,0.912,206,3.663,207,2.807,208,1.396,209,2.265,210,3.663,211,4.813,212,4.813,213,3.278,214,3.926,215,2.807,216,4.257,217,3.157,218,3.157,219,3.687,220,3.157,221,3.157,222,3.157,223,1.416,224,3.157,225,3.157,226,3.157,227,3.157,228,3.157,229,3.157,230,3.157,231,2.807,232,4.68,233,4.813,234,3.157,235,4.278,236,1.471,237,1.649,238,2.576,239,1.046,240,1.511,241,1.759,242,1.649,243,3.364,244,2.403,245,2.807,246,2.807,247,2.403,248,3.157,249,1.471,250,2.776,251,1.6,252,2.579,253,1.649,254,2.403,255,3.157,256,3.791,257,3.157,258,3.157,259,1.759,260,0.716,261,1.372,262,1.621,263,3.157,264,2.066,265,2.204,266,3.157,267,3.157,268,1.593,269,3.926,270,3.157,271,4.813,272,3.157,273,4.964,274,2.807,275,4.24,276,3.926,277,1.89,278,2.403,279,2.807,280,2.807,281,2.403,282,4.757,283,2.807,284,2.438,285,3.157,286,3.157,287,3.157,288,3.157,289,4.278,290,3.157,291,3.157,292,3.157,293,2.807]],["title/modules/AuthenticationModule.html",[50,1.015,56,3.018]],["body/modules/AuthenticationModule.html",[0,0.132,3,0.043,4,0.043,5,0.043,12,0.007,18,0.277,22,0.049,24,0.004,25,0.004,50,1.225,52,1.336,53,2.199,56,6.107,63,5.431,78,4.442,79,2.303,80,1.592,81,1.555,83,2.058,94,0.458,96,2.756,98,1.364,103,2.517,129,3.442,201,1.557,202,2.15,206,5.008,213,2.638,243,5.144,244,2.947,250,3.231,294,3.442,295,3.442,296,3.872,297,3.442,298,5.721,299,5.721,300,5.721,301,5.721,302,5.431,303,3.872,304,5.008,305,3.018,306,3.872,307,5.601,308,2.157,309,3.872,310,3.442,311,2.778,312,3.872,313,3.872,314,3.872,315,3.872,316,2.778,317,3.872,318,3.442]],["title/injectables/AuthenticationService.html",[243,2.678,319,0.755]],["body/injectables/AuthenticationService.html",[0,0.08,3,0.026,4,0.026,5,0.026,8,0.148,11,0.406,12,0.007,13,1.541,16,0.612,18,0.218,22,0.03,23,0.314,24,0.003,25,0.003,28,3.777,33,1.117,34,1.368,38,1.845,43,1.305,84,0.788,89,1.297,90,0.995,92,1.395,94,0.277,97,3.035,98,0.825,117,3.967,138,2.007,209,1.68,213,1.595,214,3.103,223,1.413,231,3.381,232,3.967,235,3.381,243,2.194,245,2.082,252,2.88,253,1.223,260,0.863,261,1.533,262,1.335,264,2.235,265,2.055,268,1.477,275,3.122,277,3.64,311,1.68,319,0.619,320,0.731,321,2.082,322,3.804,323,5.529,324,3.804,325,3.804,326,3.804,327,3.804,328,1.783,329,6.1,330,2.342,331,3.804,332,6.08,333,2.342,334,1.726,335,2.342,336,3.804,337,4.915,338,2.342,339,1.305,340,3.967,341,2.895,342,3.804,343,2.342,344,3.804,345,2.342,346,2.342,347,3.804,348,6.513,349,2.342,350,2.082,351,2.082,352,3.103,353,1.911,354,2.082,355,3.594,356,1.783,357,2.342,358,2.082,359,2.277,360,3.804,361,2.342,362,1.402,363,2.342,364,2.277,365,2.277,366,1.911,367,2.082,368,2.646,369,2.076,370,2.082,371,1.68,372,2.342,373,4.803,374,2.342,375,2.342,376,2.342,377,2.342,378,3.271,379,3.381,380,3.655,381,3.804,382,3.381,383,2.342,384,2.342,385,5.529,386,5.529,387,2.342,388,2.342,389,2.342,390,2.342,391,2.342,392,3.804,393,1.911,394,2.342,395,2.342,396,3.804,397,3.381,398,3.381,399,3.804,400,2.082,401,2.082,402,2.082,403,2.342]],["title/interfaces/BookProperties.html",[404,1.865,405,3.533]],["body/interfaces/BookProperties.html",[3,0.073,4,0.073,5,0.073,8,0.409,9,1.467,11,0.468,12,0.007,13,1.685,22,0.083,24,0.006,25,0.006,404,2.607,405,6.019,406,3.498,407,5.771,408,8.877,409,8.877]],["title/interfaces/CarProperties.html",[404,1.865,410,3.533]],["body/interfaces/CarProperties.html",[3,0.071,4,0.071,5,0.071,8,0.397,9,1.44,11,0.52,12,0.007,13,1.6,22,0.08,24,0.006,25,0.006,38,1.784,404,2.53,406,3.395,410,5.909,411,5.599,412,8.786,413,8.786,414,5.909,415,6.299,416,6.299]],["title/controllers/CategoriesController.html",[205,1.34,417,3.533]],["body/controllers/CategoriesController.html",[0,0.129,3,0.042,4,0.042,5,0.042,8,0.238,11,0.422,12,0.007,14,1.597,16,0.648,18,0.241,22,0.048,23,0.505,24,0.004,25,0.004,31,2.147,33,1.159,84,1.138,89,1.346,90,1.033,92,1.539,94,0.446,138,2.159,201,1.049,205,1.09,208,1.669,223,1.908,236,2.56,239,1.82,240,1.806,241,2.102,242,1.971,249,1.758,251,1.912,259,2.102,260,0.856,261,0.888,262,1.049,268,1.718,284,1.912,417,4.184,418,3.355,419,2.873,420,4.887,421,4.887,422,6.332,423,4.887,424,4.887,425,3.355,426,5.111,427,2.453,428,3.774,429,4.559,430,3.774,431,6.214,432,4.887,433,3.774,434,3.774,435,3.774,436,4.887,437,3.774,438,3.774,439,5.111,440,4.887,441,3.774,442,3.079,443,2.873,444,3.355,445,4.417,446,3.355,447,3.355,448,3.355,449,1.971,450,3.355,451,3.774,452,3.774,453,3.774,454,3.774,455,3.774,456,3.774,457,3.774,458,3.774,459,3.774,460,3.774]],["title/modules/CategoriesModule.html",[50,1.015,57,3.331]],["body/modules/CategoriesModule.html",[0,0.2,3,0.066,4,0.066,5,0.066,12,0.007,18,0.269,22,0.075,24,0.005,25,0.005,50,1.622,52,2.019,53,2.911,57,6.472,79,3.049,80,2.406,81,2.351,83,2.151,94,0.692,201,2.061,202,2.847,417,6.195,429,3.376,445,6.145,446,5.203,461,5.203,462,5.203,463,5.853,464,5.853,465,5.203,466,3.26,467,2.351,468,5.853]],["title/injectables/CategoriesService.html",[319,0.755,445,3.162]],["body/injectables/CategoriesService.html",[0,0.09,3,0.03,4,0.03,5,0.047,8,0.166,9,0.776,11,0.382,12,0.007,16,0.588,18,0.22,22,0.034,23,0.353,24,0.003,25,0.003,31,2.663,33,1.05,38,2.318,47,1.035,84,0.866,89,1.219,90,0.936,92,1.464,94,0.312,138,2.154,223,0.776,260,0.598,261,0.62,264,2.119,265,2.599,268,1.464,319,0.681,320,0.823,368,2.488,369,1.953,419,4.505,420,3.719,421,5.262,422,5.262,423,3.719,424,3.719,425,3.719,426,4.247,429,5.111,439,5.165,443,2.007,445,2.849,447,2.344,448,2.344,465,2.344,467,1.059,469,2.344,470,4.183,471,2.637,472,4.183,473,2.637,474,6.106,475,4.183,476,6.106,477,2.151,478,3.413,479,5.871,480,3.413,481,4.183,482,4.183,483,2.637,484,2.637,485,5.919,486,5.919,487,4.183,488,2.637,489,4.183,490,5.919,491,5.2,492,4.183,493,2.637,494,5.919,495,4.183,496,4.183,497,1.469,498,2.255,499,2.007,500,2.637,501,2.637,502,2.637,503,2.637,504,2.637,505,4.242,506,3.542,507,4.183,508,5.2,509,4.183,510,2.637,511,2.637,512,2.637,513,2.637,514,5.2,515,2.637,516,2.637,517,2.344,518,2.637,519,2.344]],["title/classes/Category.html",[0,0.158,429,2.678]],["body/classes/Category.html",[0,0.181,2,1.272,3,0.06,4,0.06,5,0.06,8,0.335,9,1.292,11,0.46,12,0.007,13,1.268,14,1.639,16,0.666,18,0.212,22,0.068,23,0.711,24,0.005,25,0.005,28,4.065,31,2.573,35,4.483,38,1.973,39,4.483,43,2.958,45,3.88,47,2.085,90,1.127,239,2.911,429,4.483,506,5.293,520,4.72,521,5.31,522,5.31,523,4.72,524,5.31,525,6.191,526,4.332,527,5.31]],["title/classes/CategoryNotFoundException.html",[0,0.158,499,3.533]],["body/classes/CategoryNotFoundException.html",[0,0.212,2,1.491,3,0.07,4,0.07,5,0.07,11,0.368,12,0.007,16,0.533,18,0.19,22,0.079,23,0.833,24,0.006,25,0.006,31,2.06,33,1.012,38,2.371,89,1.175,90,0.902,94,0.736,260,1.411,499,6.37,528,5.529,529,3.687,530,6.37,531,6.284,532,6.22,533,5.247,534,6.22,535,5.529]],["title/controllers/ChargeController.html",[205,1.34,536,3.533]],["body/controllers/ChargeController.html",[0,0.179,3,0.059,4,0.059,5,0.059,8,0.33,11,0.31,12,0.007,14,1.104,16,0.448,18,0.26,22,0.067,23,0.701,24,0.005,25,0.005,33,0.852,84,1.429,89,0.989,90,0.759,92,1.064,94,0.619,138,1.954,201,1.455,205,1.511,208,2.315,216,4.038,219,3.501,223,1.541,236,2.438,237,3.603,239,2.285,240,2.505,249,2.438,251,2.652,260,1.188,261,1.232,262,1.455,268,1.188,284,2.652,427,3.403,449,2.734,536,5.251,537,4.654,538,6.861,539,6.9,540,5.235,541,6.244,542,5.235,543,5.235,544,3.02,545,4.452,546,3.756,547,5.235,548,5.235,549,5.235,550,5.235,551,4.654]],["title/modules/ChargeModule.html",[50,1.015,58,3.331]],["body/modules/ChargeModule.html",[0,0.205,3,0.067,4,0.067,5,0.067,12,0.007,18,0.251,22,0.077,24,0.006,25,0.006,50,1.647,52,2.068,53,2.955,58,6.512,79,3.095,80,2.464,81,2.408,83,2.766,94,0.709,201,2.093,202,2.301,536,6.264,552,5.329,553,5.329,554,5.433,555,5.995,556,4.301,557,5.995]],["title/classes/ChatGateway.html",[0,0.158,558,3.533]],["body/classes/ChatGateway.html",[0,0.132,2,0.93,3,0.044,4,0.044,5,0.044,8,0.245,9,1.041,11,0.453,12,0.007,13,1.2,14,1.39,16,0.656,18,0.201,22,0.05,24,0.004,25,0.004,33,1.175,84,1.162,89,1.364,90,1.047,92,1.34,138,2.174,260,1.273,261,0.914,262,1.079,264,1.939,265,2.588,558,4.271,559,3.451,560,3.359,561,6.59,562,6.51,563,5.612,564,6.59,565,6.59,566,3.883,567,5.436,568,5.612,569,6.59,570,5.612,571,8.173,572,3.883,573,3.883,574,5.612,575,3.883,576,3.822,577,3.883,578,5.612,579,3.883,580,6.59,581,5.612,582,3.883,583,5.612,584,3.167,585,3.167,586,3.451,587,6.59,588,3.126,589,3.024,590,3.883,591,3.883,592,5.612,593,3.883,594,3.883]],["title/modules/ChatModule.html",[50,1.015,59,3.331]],["body/modules/ChatModule.html",[0,0.185,3,0.061,4,0.061,5,0.061,12,0.007,18,0.27,22,0.069,24,0.005,25,0.005,50,1.545,52,1.872,53,2.773,56,5.748,59,6.55,79,2.904,80,2.231,81,2.179,83,2.596,94,0.642,102,4.426,201,1.508,202,2.712,466,3.023,467,2.179,558,5.376,567,6.023,586,4.823,589,2.924,595,4.823,596,5.426,597,4.823,598,5.426,599,5.426,600,4.823,601,5.426]],["title/injectables/ChatService.html",[319,0.755,567,3.162]],["body/injectables/ChatService.html",[0,0.13,3,0.043,4,0.043,5,0.043,8,0.241,11,0.387,12,0.007,13,1.189,16,0.614,18,0.261,22,0.049,24,0.004,25,0.004,33,1.063,34,2.946,47,1.501,84,1.149,89,1.234,90,0.947,92,1.328,94,0.452,138,2.166,209,2.743,223,1.922,243,4.579,260,1.259,261,1.306,262,1.063,264,2.109,265,2.207,268,1.482,275,3.607,319,0.903,320,1.192,368,1.829,369,1.435,397,3.398,467,1.535,497,2.129,498,3.862,505,3.118,567,3.779,571,6.765,576,3.779,584,3.118,585,3.118,588,4.239,589,2.06,600,3.398,602,3.398,603,7.167,604,5.549,605,5.549,606,3.398,607,6.532,608,3.823,609,3.823,610,5.549,611,3.823,612,5.549,613,3.823,614,3.398,615,3.118,616,3.823,617,2.205,618,3.823,619,5.549,620,3.823,621,3.823,622,3.823,623,3.823,624,3.823,625,3.823,626,3.823,627,3.823]],["title/classes/CheckVerificationCodeDto.html",[0,0.158,628,3.533]],["body/classes/CheckVerificationCodeDto.html",[0,0.266,2,1.516,3,0.071,4,0.071,5,0.071,8,0.399,9,1.444,11,0.374,12,0.007,13,1.417,14,1.334,15,3.205,16,0.542,18,0.193,19,3.626,20,3.626,21,2.601,22,0.099,23,0.847,24,0.006,25,0.006,628,6.418,629,5.623,630,6.418,631,6.326]],["title/classes/Comment.html",[0,0.158,632,2.779]],["body/classes/Comment.html",[0,0.166,2,1.164,3,0.055,4,0.055,5,0.055,8,0.306,9,1.218,11,0.471,12,0.007,13,1.195,14,1.679,16,0.682,18,0.227,22,0.062,23,0.651,24,0.005,25,0.005,28,4.104,31,2.462,34,2.992,35,4.289,38,1.86,39,4.289,43,3.657,45,3.657,47,1.908,239,2.99,526,3.964,576,5.064,588,4.436,617,2.803,632,4.451,633,4.319,634,5.355,635,4.859,636,4.859,637,4.859,638,4.859,639,5.659,640,4.859,641,4.319]],["title/controllers/CommentsController.html",[205,1.34,642,3.533]],["body/controllers/CommentsController.html",[0,0.147,3,0.048,4,0.048,5,0.048,8,0.271,11,0.357,12,0.007,14,1.272,16,0.517,18,0.264,22,0.055,23,0.575,24,0.004,25,0.004,33,0.982,34,2.17,84,1.249,89,1.14,90,0.875,92,1.226,94,0.508,138,2.09,201,1.195,205,1.241,208,1.9,216,3.72,223,1.775,236,2.002,237,4.157,239,1.998,240,2.057,241,2.394,242,2.244,249,2.002,251,2.177,259,2.394,260,0.975,261,1.419,264,1.265,268,1.368,284,2.177,369,2.265,427,2.793,449,2.244,533,2.927,544,2.479,632,3.611,642,4.591,643,3.82,644,3.82,645,6.032,646,6.97,647,4.298,648,5.423,649,4.298,650,4.298,651,5.752,652,4.298,653,4.109,654,3.82,655,6.97,656,6.97,657,3.083,658,3.083,659,4.298,660,3.083,661,4.298,662,4.298,663,4.298,664,4.298,665,3.82,666,4.298,667,4.298,668,4.298,669,4.298]],["title/modules/CommentsModule.html",[50,1.015,60,3.331]],["body/modules/CommentsModule.html",[0,0.202,3,0.067,4,0.067,5,0.067,12,0.007,18,0.28,22,0.076,24,0.005,25,0.005,50,1.634,52,2.043,60,5.361,83,2.176,94,0.7,201,2.077,202,2.274,466,3.299,467,2.379,632,3.546,642,6.229,657,4.249,670,5.923,671,4.832,672,5.923,673,7.472,674,5.687,675,5.923,676,5.923,677,5.687,678,5.923,679,5.923]],["title/classes/ConfirmEmailDto.html",[0,0.158,680,3.533]],["body/classes/ConfirmEmailDto.html",[0,0.266,2,1.516,3,0.071,4,0.071,5,0.071,8,0.399,9,1.444,11,0.374,12,0.007,13,1.417,14,1.334,15,3.205,16,0.542,18,0.193,19,3.626,20,3.626,21,2.601,22,0.099,23,0.847,24,0.006,25,0.006,277,5.048,680,6.418,681,5.623,682,6.326]],["title/classes/CreateCategoryDto.html",[0,0.158,426,3.331]],["body/classes/CreateCategoryDto.html",[0,0.266,2,1.516,3,0.071,4,0.071,5,0.071,8,0.399,9,1.444,11,0.374,12,0.007,13,1.417,14,1.334,15,3.205,16,0.542,18,0.193,19,3.626,20,3.626,21,2.601,22,0.099,23,0.847,24,0.006,25,0.006,90,1.222,426,6.05,683,5.623,684,6.326]],["title/classes/CreateChargeDto.html",[0,0.158,541,3.533]],["body/classes/CreateChargeDto.html",[0,0.256,2,1.431,3,0.067,4,0.067,5,0.067,8,0.376,9,1.393,10,6.252,11,0.444,12,0.007,13,1.367,14,1.584,15,3.025,16,0.643,18,0.182,19,3.497,20,3.497,21,2.454,22,0.096,23,0.799,24,0.005,25,0.005,38,2.127,541,6.252,685,5.307,686,7.302,687,5.894,688,5.971,689,5.971]],["title/classes/CreateCommentCommand.html",[0,0.158,658,3.331]],["body/classes/CreateCommentCommand.html",[0,0.191,2,1.339,3,0.063,4,0.063,5,0.063,8,0.352,9,1.335,11,0.471,12,0.007,16,0.682,18,0.22,22,0.071,24,0.005,25,0.005,28,3.942,33,0.91,34,3.132,89,1.056,90,0.81,260,1.633,262,2.478,588,4.85,617,3.224,632,5.036,648,6.246,654,4.968,658,5.166,690,4.968,691,5.589,692,5.589,693,5.589,694,5.589]],["title/classes/CreateCommentDto.html",[0,0.158,648,3.331]],["body/classes/CreateCommentDto.html",[0,0.275,2,1.37,3,0.064,4,0.064,5,0.064,8,0.361,9,1.355,11,0.502,12,0.007,13,1.33,14,1.541,15,2.897,16,0.626,18,0.246,19,3.403,20,3.403,21,2.351,22,0.073,23,0.766,24,0.005,25,0.005,239,2.666,576,5.484,648,5.777,695,5.083,696,5.718,697,6.088,698,5.083,699,5.718,700,6.495,701,3.895,702,5.718]],["title/classes/CreateCommentHandler.html",[0,0.158,674,3.533]],["body/classes/CreateCommentHandler.html",[0,0.17,2,1.196,3,0.056,4,0.056,5,0.056,8,0.315,11,0.395,12,0.007,16,0.572,18,0.256,22,0.064,24,0.005,25,0.005,33,1.088,47,1.959,84,1.384,89,1.263,90,0.969,92,1.014,138,1.908,223,1.468,260,1.516,261,1.174,264,1.468,265,2.258,268,1.132,467,2.004,497,2.779,498,4.338,560,4,588,2.779,632,2.987,657,3.58,658,5.775,671,4.07,674,5.086,703,6.698,704,4.435,705,7.535,706,5.94,707,4.435,708,4.989,709,5.94,710,6.683,711,4.989,712,4.989,713,4.989,714,4.989,715,4.989,716,4.435,717,5.451,718,4.989,719,4.989,720,4.989,721,4.989]],["title/classes/CreateLogDto.html",[0,0.158,722,3.533]],["body/classes/CreateLogDto.html",[0,0.211,2,1.478,3,0.069,4,0.069,5,0.069,8,0.389,9,1.421,11,0.493,12,0.007,13,1.664,16,0.714,22,0.098,23,0.826,24,0.006,25,0.006,589,4.493,722,6.346,723,5.483,724,5.193,725,6.346,726,6.169,727,6.169,728,6.169]],["title/classes/CreatePostDto.html",[0,0.158,729,3.331]],["body/classes/CreatePostDto.html",[0,0.254,2,1.408,3,0.066,4,0.066,5,0.066,8,0.37,9,1.379,11,0.44,12,0.007,13,1.56,14,1.568,15,2.977,16,0.637,18,0.179,19,3.798,20,3.798,21,2.416,22,0.095,23,0.787,24,0.005,25,0.005,152,2.892,729,5.851,730,5.223,731,5.301,732,5.301,733,5.223,734,5.876,735,5.876,736,5.876,737,5.876]],["title/classes/CreatePostInput.html",[0,0.158,738,3.533]],["body/classes/CreatePostInput.html",[0,0.191,2,1.344,3,0.063,4,0.063,5,0.063,8,0.354,9,1.339,11,0.472,12,0.007,13,1.587,14,1.683,16,0.683,18,0.171,22,0.072,24,0.005,25,0.005,33,1.175,115,3.494,152,3.552,731,5.187,732,5.187,738,5.493,739,4.987,740,6.51,741,4.577,742,5.61,743,4.692,744,4.987,745,5.61,746,7.11,747,5.61,748,7.218,749,4.27]],["title/classes/CreateProductCategoryDto.html",[0,0.158,750,3.331]],["body/classes/CreateProductCategoryDto.html",[0,0.266,2,1.516,3,0.071,4,0.071,5,0.071,8,0.399,9,1.444,11,0.374,12,0.007,13,1.417,14,1.334,15,3.205,16,0.542,18,0.193,19,3.626,20,3.626,21,2.601,22,0.099,23,0.847,24,0.006,25,0.006,90,1.222,750,6.05,751,5.623,752,6.326]],["title/classes/CreateProductDto.html",[0,0.158,753,3.331]],["body/classes/CreateProductDto.html",[0,0.274,2,1.365,3,0.064,4,0.064,5,0.064,8,0.359,9,1.352,11,0.501,12,0.007,13,1.327,14,1.537,15,2.886,16,0.624,18,0.245,19,3.395,20,3.395,21,2.342,22,0.093,23,0.763,24,0.005,25,0.005,90,1.165,429,4.636,697,6.079,698,5.063,700,6.479,701,3.88,753,5.767,754,5.063,755,5.696,756,5.696,757,5.696]],["title/classes/CreateSubscriberDto.html",[0,0.158,758,3.331]],["body/classes/CreateSubscriberDto.html",[0,0.219,2,1.536,3,0.072,4,0.072,5,0.072,8,0.404,9,1.455,11,0.464,12,0.007,13,1.609,16,0.672,22,0.1,23,0.858,24,0.006,25,0.006,90,1.229,334,3.847,758,6.084,759,5.696,760,6.408,761,6.408]],["title/classes/CreateUserDto.html",[0,0.158,762,3.533]],["body/classes/CreateUserDto.html",[0,0.211,2,1.478,3,0.069,4,0.069,5,0.069,8,0.389,9,1.421,11,0.493,12,0.007,13,1.664,16,0.714,22,0.098,23,0.826,24,0.006,25,0.006,90,1.209,334,3.783,362,4.991,762,6.346,763,5.483,764,6.169,765,6.169,766,6.169]],["title/controllers/CreditCardsController.html",[205,1.34,767,3.533]],["body/controllers/CreditCardsController.html",[0,0.138,1,5.596,3,0.045,4,0.045,5,0.045,6,5.275,8,0.255,11,0.399,12,0.007,14,1.421,16,0.577,18,0.254,22,0.052,23,0.541,24,0.004,25,0.004,33,1.097,84,1.196,89,1.273,90,0.977,92,1.37,94,0.478,125,3.296,138,2.195,201,1.123,205,1.167,208,1.787,216,4.328,219,3.863,223,1.699,236,1.882,237,3.519,238,3.296,239,1.912,240,1.934,249,1.882,251,2.047,260,0.917,261,0.951,262,1.123,265,1.365,268,1.31,269,3.296,284,3.414,427,2.626,449,2.11,544,2.331,545,3.887,546,2.899,551,5.133,767,4.395,768,3.592,769,5.775,770,5.775,771,5.775,772,5.775,773,4.041,774,4.041,775,7.353,776,4.041,777,4.041,778,4.041,779,4.041,780,5.596,781,4.041,782,4.041,783,4.041,784,4.041,785,3.075,786,4.041,787,4.041,788,4.041,789,4.041,790,4.041,791,4.041,792,4.041,793,4.041,794,4.041,795,4.041]],["title/modules/CreditCardsModule.html",[50,1.015,61,3.331]],["body/modules/CreditCardsModule.html",[0,0.204,3,0.067,4,0.067,5,0.067,6,4.284,12,0.007,18,0.251,22,0.076,24,0.005,25,0.005,50,1.642,52,2.06,53,2.948,61,6.505,79,3.087,80,2.454,81,2.398,83,2.759,94,0.706,201,2.087,202,2.292,554,5.428,556,4.284,767,6.252,796,5.971,797,5.971,798,5.971,799,5.971]],["title/injectables/CustomLogger.html",[319,0.755,800,3.331]],["body/injectables/CustomLogger.html",[0,0.102,3,0.033,4,0.033,5,0.033,8,0.188,9,0.854,11,0.446,12,0.007,13,1.727,16,0.646,18,0.209,22,0.038,23,0.399,24,0.003,25,0.003,33,1.177,84,0.953,89,1.366,90,1.048,92,1.391,93,4.659,94,0.352,97,3.333,98,1.05,260,1.044,261,1.324,262,1.564,264,0.877,319,0.749,320,0.93,365,4.328,529,2.203,589,4.702,724,5.804,725,5.206,800,4.036,801,2.649,802,5.626,803,5.819,804,4.604,805,3.657,806,4.604,807,4.093,808,2.98,809,4.816,810,6.328,811,4.604,812,4.604,813,2.98,814,5.188,815,4.604,816,6.328,817,2.98,818,4.604,819,2.98,820,4.604,821,2.98,822,4.604,823,2.98,824,2.98,825,2.98,826,2.431,827,2.98,828,2.649,829,2.98,830,2.98,831,2.03,832,2.98,833,2.98,834,2.649,835,2.98,836,2.98,837,6.841,838,2.98,839,2.98,840,4.604]],["title/classes/DatabaseLogger.html",[0,0.158,841,3.533]],["body/classes/DatabaseLogger.html",[0,0.095,2,0.669,3,0.074,4,0.031,5,0.031,8,0.176,9,0.811,11,0.435,12,0.007,13,1.637,16,0.652,18,0.133,22,0.036,23,0.586,24,0.003,25,0.003,33,1.197,38,1.528,47,1.095,84,0.906,89,1.69,90,1.067,92,1.496,93,4.518,94,0.33,223,1.797,261,1.656,262,1.5,268,1.777,339,1.554,359,1.67,364,1.67,365,2.618,369,1.643,560,2.618,589,3.575,653,5.188,725,4.648,805,4.574,807,5.429,814,5.465,841,4.106,842,2.48,843,5.395,844,5.048,845,4.374,846,4.374,847,4.374,848,4.374,849,4.374,850,4.374,851,4.374,852,2.79,853,4.374,854,7.468,855,2.79,856,4.374,857,2.79,858,4.374,859,2.79,860,4.374,861,2.79,862,4.374,863,2.79,864,3.888,865,4.374,866,2.79,867,4.374,868,2.79,869,2.79,870,6.107,871,2.79,872,5.395,873,2.79,874,2.79,875,4.796,876,2.79,877,2.48,878,2.79]],["title/modules/DatabaseModule.html",[50,1.015,62,3.331]],["body/modules/DatabaseModule.html",[0,0.191,3,0.063,4,0.063,5,0.063,11,0.331,12,0.007,18,0.257,22,0.071,24,0.005,25,0.005,50,1.575,52,1.928,62,5.166,83,2.646,94,0.661,96,3.544,97,3.72,98,1.968,137,3.807,140,4.254,142,4.254,144,3.346,152,2.751,362,3.346,369,2.099,466,3.113,467,2.245,476,4.968,841,6.063,844,4.254,879,5.589,880,5.589,881,5.589,882,5.589,883,5.589,884,4.968,885,5.589,886,5.589,887,5.589,888,5.589,889,5.589,890,5.589,891,5.589]],["title/injectables/ElasticsearchHealthIndicator.html",[319,0.755,892,3.162]],["body/injectables/ElasticsearchHealthIndicator.html",[0,0.17,3,0.056,4,0.056,5,0.056,8,0.315,11,0.395,12,0.007,13,1.372,16,0.572,18,0.23,22,0.064,24,0.005,25,0.005,33,1.088,84,1.384,89,1.263,90,0.969,92,1.014,94,0.59,138,1.908,152,2.455,260,1.516,261,1.174,262,1.387,265,1.686,268,1.132,319,1.088,320,1.556,341,3.797,359,2.987,364,2.987,365,2.987,368,2.388,369,1.874,479,4.795,529,3.198,831,3.398,892,5.133,893,4.435,894,7.535,895,6.683,896,4.435,897,7.678,898,4.989,899,6.683,900,4.989,901,3.58,902,4.989,903,6.683,904,3.797,905,3.797,906,4.989,907,6.683,908,4.989]],["title/controllers/EmailConfirmationController.html",[205,1.34,909,3.533]],["body/controllers/EmailConfirmationController.html",[0,0.16,3,0.053,4,0.053,5,0.053,8,0.295,11,0.378,12,0.007,14,1.349,16,0.548,18,0.25,22,0.06,24,0.005,25,0.005,33,1.041,84,1.324,89,1.208,90,0.927,92,1.3,94,0.553,138,2.146,201,1.3,205,1.35,208,2.068,216,3.857,219,2.901,236,2.178,237,2.442,239,1.548,240,2.238,241,2.605,242,2.442,249,2.178,251,2.369,256,4.738,259,2.605,260,1.061,261,1.1,262,1.3,264,1.376,265,2.463,284,2.369,334,2.901,449,2.442,544,2.697,680,5.965,909,4.868,910,4.156,911,6.966,912,5.217,913,5.685,914,4.676,915,6.396,916,4.676,917,6.396,918,4.676,919,6.396,920,4.676,921,4.676,922,4.676,923,4.156,924,4.156,925,4.676,926,4.676,927,4.676,928,4.676,929,4.676,930,4.676]],["title/guards/EmailConfirmationGuard.html",[785,3.533,931,3.787]],["body/guards/EmailConfirmationGuard.html",[0,0.194,3,0.064,4,0.064,5,0.064,8,0.358,11,0.336,12,0.007,16,0.486,18,0.222,22,0.072,24,0.005,25,0.005,33,0.923,84,1.505,89,1.072,90,0.823,92,1.154,94,0.671,152,2.793,216,3.578,219,2.574,264,1.67,268,1.287,319,1.183,334,2.574,368,2.716,369,2.131,544,3.273,560,3.397,724,4.528,785,5.534,932,5.674,933,5.044,934,8.747,935,5.674,936,6.439,937,5.674,938,4.319,939,4.629,940,5.044,941,5.674,942,5.674,943,5.674]],["title/modules/EmailConfirmationModule.html",[50,1.015,63,3.162]],["body/modules/EmailConfirmationModule.html",[0,0.169,3,0.056,4,0.056,5,0.056,12,0.007,18,0.269,22,0.063,24,0.005,25,0.005,50,1.455,52,1.71,53,2.612,63,6.295,78,4.802,79,2.735,80,2.037,81,1.991,83,2.445,94,0.586,96,3.274,98,1.746,103,3.222,201,1.849,202,2.554,256,6.051,305,3.585,310,4.406,311,3.556,318,4.406,909,5.716,923,4.406,944,4.406,945,4.406,946,4.406,947,4.406,948,5.872,949,4.956,950,4.406,951,4.956]],["title/injectables/EmailConfirmationService.html",[256,3.018,319,0.755]],["body/injectables/EmailConfirmationService.html",[0,0.102,3,0.034,4,0.034,5,0.034,8,0.189,11,0.406,12,0.007,13,1.458,16,0.587,18,0.221,22,0.038,24,0.003,25,0.003,26,2.042,28,3.735,33,1.116,34,1.664,38,1.6,84,0.958,89,1.296,90,0.994,92,1.291,94,0.355,97,3.341,98,1.056,138,2.027,223,0.882,252,3.341,253,1.566,256,3.007,260,1.049,261,1.494,262,1.765,264,2.223,265,2.318,268,1.049,277,3.8,311,2.151,319,0.753,320,0.935,329,6.443,334,3.427,340,2.151,359,1.795,364,1.795,365,1.795,368,3.283,369,2.576,371,3.319,378,4.324,379,2.665,380,3.521,382,2.665,393,2.446,401,2.665,911,5.02,912,2.446,913,4.112,952,2.665,953,4.626,954,4.626,955,4.626,956,2.998,957,4.91,958,2.998,959,4.626,960,2.998,961,4.626,962,2.998,963,4.626,964,2.998,965,4.626,966,2.998,967,3.007,968,3.521,969,2.998,970,2.665,971,4.626,972,2.998,973,3.521,974,2.998,975,3.521,976,2.998,977,2.998,978,2.998,979,2.665,980,2.665,981,2.446,982,2.998,983,4.626,984,5.647,985,4.112,986,2.998,987,2.998,988,2.998,989,2.665,990,2.998,991,2.998,992,2.998,993,2.998,994,2.998]],["title/modules/EmailModule.html",[50,1.015,948,3.162]],["body/modules/EmailModule.html",[0,0.197,3,0.065,4,0.065,5,0.065,12,0.007,18,0.247,22,0.074,24,0.005,25,0.005,50,1.61,52,1.995,53,2.89,79,3.026,80,2.378,81,2.323,83,2.126,94,0.684,96,3.623,98,2.037,201,1.608,202,2.826,305,3.967,948,6.225,957,6.19,995,5.142,996,5.142,997,5.142,998,5.785,999,5.785]],["title/classes/EmailScheduleDto.html",[0,0.158,1000,3.331]],["body/classes/EmailScheduleDto.html",[0,0.239,2,1.286,3,0.06,4,0.06,5,0.06,8,0.338,9,1.301,11,0.49,12,0.007,13,1.659,14,1.747,15,3.553,16,0.709,18,0.164,19,3.639,20,3.639,21,2.207,22,0.09,23,0.719,24,0.005,25,0.005,576,5.321,743,5.078,981,6.373,1000,5.605,1001,4.771,1002,7.812,1003,5.367,1004,7.812,1005,5.367,1006,6.373,1007,5.367,1008,5.367]],["title/controllers/EmailSchedulingController.html",[205,1.34,1009,3.533]],["body/controllers/EmailSchedulingController.html",[0,0.187,3,0.062,4,0.062,5,0.062,8,0.346,11,0.325,12,0.007,14,1.157,16,0.47,18,0.255,22,0.07,23,0.735,24,0.005,25,0.005,33,0.893,84,1.473,89,1.036,90,0.795,92,1.115,94,0.649,138,1.999,201,1.525,205,1.584,208,2.426,236,2.555,239,1.817,240,2.625,249,2.555,251,2.78,260,1.244,261,1.291,262,1.525,284,2.78,334,2.489,449,2.865,924,4.877,1000,5.994,1009,5.415,1010,4.877,1011,7.114,1012,6.324,1013,4.877,1014,5.486,1015,5.486,1016,6.324,1017,5.378,1018,4.877,1019,4.877,1020,5.486,1021,5.486,1022,5.486]],["title/modules/EmailSchedulingModule.html",[50,1.015,64,3.331]],["body/modules/EmailSchedulingModule.html",[0,0.195,3,0.064,4,0.064,5,0.064,12,0.007,18,0.259,22,0.073,24,0.005,25,0.005,50,1.598,52,1.972,53,2.868,64,6.622,79,3.004,80,2.351,81,2.297,83,2.685,94,0.676,201,2.031,202,2.805,948,6.108,950,5.083,1009,6.128,1017,6.108,1018,5.083,1023,5.083,1024,5.718,1025,5.083,1026,5.718,1027,5.718]],["title/injectables/EmailSchedulingService.html",[319,0.755,1017,3.162]],["body/injectables/EmailSchedulingService.html",[0,0.166,3,0.055,4,0.055,5,0.055,8,0.306,11,0.389,12,0.007,16,0.562,18,0.254,22,0.062,23,0.651,24,0.005,25,0.005,33,1.068,84,1.359,89,1.24,90,0.952,92,0.988,93,3.31,94,0.575,111,3.964,260,1.489,261,1.545,262,1.825,264,1.932,319,1.068,320,1.516,369,2.465,743,3.158,957,5.571,970,4.319,975,3.698,980,4.319,981,3.964,1000,5.713,1012,5.836,1013,5.836,1016,4.319,1017,4.472,1019,4.319,1028,4.319,1029,4.859,1030,8.762,1031,4.859,1032,4.859,1033,4.859,1034,4.859,1035,4.859,1036,5.355,1037,4.859,1038,4.859,1039,6.565,1040,4.859,1041,4.859,1042,4.859]],["title/injectables/EmailService.html",[319,0.755,957,3.018]],["body/injectables/EmailService.html",[0,0.169,3,0.056,4,0.056,5,0.056,8,0.312,9,1.234,11,0.444,12,0.007,16,0.643,18,0.245,22,0.063,23,0.664,24,0.005,25,0.005,33,1.083,34,1.783,84,1.378,89,1.257,90,0.965,92,1.008,94,0.586,97,3.812,98,1.746,260,1.509,261,1.889,262,1.378,268,1.124,319,1.083,320,1.546,809,3.772,957,4.324,1043,4.406,1044,7.51,1045,6.653,1046,3.376,1047,6.653,1048,6.653,1049,7.51,1050,4.956,1051,7.51,1052,6.653,1053,4.406,1054,4.956,1055,4.956,1056,4.956,1057,4.956,1058,4.043,1059,4.956,1060,4.956,1061,4.956,1062,4.956]],["title/injectables/ExcludeNullInterceptor.html",[319,0.755,1063,3.787]],["body/injectables/ExcludeNullInterceptor.html",[0,0.189,3,0.062,4,0.062,5,0.062,8,0.35,11,0.328,12,0.007,16,0.475,18,0.256,22,0.071,24,0.005,25,0.005,33,0.903,84,1.484,89,1.048,90,0.804,92,1.128,94,0.656,268,1.258,319,1.166,320,1.73,560,3.321,724,3.455,936,6.385,1063,5.845,1064,4.931,1065,7.166,1066,7.166,1067,7.457,1068,8.389,1069,5.548,1070,7.937,1071,7.166,1072,4.931,1073,5.548,1074,5.548,1075,5.845,1076,5.548,1077,5.548,1078,4.931]],["title/modules/FilesModule.html",[50,1.015,1079,3.331]],["body/modules/FilesModule.html",[0,0.189,3,0.062,4,0.062,5,0.062,12,0.007,18,0.265,22,0.071,24,0.005,25,0.005,50,1.567,52,1.914,53,2.813,79,2.946,80,2.281,81,2.228,83,2.038,94,0.656,96,3.527,98,1.954,202,2.751,305,3.862,466,3.09,467,2.228,1079,6.494,1080,4.931,1081,4.931,1082,4.931,1083,6.448,1084,5.548,1085,5.548,1086,3.779,1087,4.931,1088,5.548]],["title/injectables/FilesService.html",[319,0.755,1083,3.162]],["body/injectables/FilesService.html",[0,0.117,3,0.039,4,0.039,5,0.069,8,0.217,11,0.403,12,0.007,13,1.119,16,0.583,18,0.242,22,0.044,24,0.004,25,0.004,31,1.701,33,1.109,38,2.166,47,1.351,84,1.064,89,1.287,90,0.988,92,1.249,94,0.407,97,3.503,98,1.212,138,2.108,223,1.013,236,1.603,260,1.165,261,1.209,262,0.957,264,2.331,265,2.752,268,0.781,319,0.836,320,1.074,369,2.308,467,1.383,479,4.409,497,1.918,498,3.672,854,6.463,901,4.889,973,2.62,1083,3.499,1086,2.345,1087,3.06,1089,3.06,1090,5.137,1091,5.137,1092,5.137,1093,3.442,1094,3.442,1095,5.137,1096,5.137,1097,3.442,1098,6.48,1099,5.137,1100,3.442,1101,5.137,1102,4.677,1103,6.057,1104,3.442,1105,5.137,1106,7.922,1107,3.06,1108,3.06,1109,3.442,1110,5.462,1111,3.442,1112,3.442,1113,3.442,1114,6.145,1115,6.145,1116,5.137,1117,3.442,1118,3.442,1119,3.442,1120,3.442,1121,3.442,1122,5.137,1123,5.137,1124,3.442,1125,3.442,1126,3.442]],["title/classes/FindOneParams.html",[0,0.158,431,3.331]],["body/classes/FindOneParams.html",[0,0.268,2,1.536,3,0.072,4,0.072,5,0.072,8,0.404,9,1.455,11,0.379,12,0.007,13,1.429,14,1.351,16,0.549,18,0.195,21,2.634,22,0.082,23,0.858,24,0.006,25,0.006,31,2.808,431,6.084,1127,5.696,1128,8.48,1129,6.408]],["title/classes/GetCommentsDto.html",[0,0.158,651,3.533]],["body/classes/GetCommentsDto.html",[0,0.283,2,1.466,3,0.069,4,0.069,5,0.069,8,0.386,9,1.414,11,0.492,12,0.007,14,1.29,16,0.524,18,0.233,21,2.515,22,0.078,23,0.819,24,0.006,25,0.006,33,1.241,38,2.353,533,5.658,651,6.322,701,4.167,1130,5.438,1131,6.118,1132,6.118,1133,5.803]],["title/classes/GetCommentsHandler.html",[0,0.158,677,3.533]],["body/classes/GetCommentsHandler.html",[0,0.172,2,1.208,3,0.057,4,0.057,5,0.057,8,0.318,11,0.398,12,0.007,16,0.576,18,0.257,22,0.064,24,0.005,25,0.005,31,1.669,33,1.095,47,1.979,84,1.393,89,1.271,90,0.975,92,1.025,138,1.918,223,1.483,239,1.669,260,1.526,261,1.186,268,1.526,467,2.024,497,2.808,498,4.355,560,4.028,632,3.017,653,3.433,657,3.616,660,5.798,671,4.111,677,5.121,706,5.981,707,4.48,709,5.981,716,4.48,1134,4.48,1135,7.574,1136,5.04,1137,6.728,1138,5.04,1139,5.04,1140,5.04,1141,5.04,1142,6.728,1143,6.728]],["title/classes/GetCommentsQuery.html",[0,0.158,660,3.331]],["body/classes/GetCommentsQuery.html",[0,0.208,2,1.46,3,0.068,4,0.068,5,0.068,8,0.384,9,1.411,11,0.45,12,0.007,16,0.651,22,0.078,24,0.006,25,0.006,28,3.667,33,1.349,38,2.46,89,1.151,90,0.883,260,1.725,262,2.305,531,4.97,533,5.914,660,5.456,814,4.371,1144,5.416,1145,6.093,1146,6.093]],["title/controllers/GoogleAuthenticationController.html",[205,1.34,1147,3.533]],["body/controllers/GoogleAuthenticationController.html",[0,0.17,3,0.056,4,0.056,5,0.056,8,0.315,11,0.295,12,0.007,14,1.052,16,0.427,18,0.246,22,0.064,24,0.005,25,0.005,33,0.812,34,2.404,84,1.384,89,0.943,90,0.723,92,1.014,94,0.59,138,1.908,201,1.387,205,1.44,208,2.206,209,4.795,210,5.086,219,4.002,223,1.468,236,2.324,237,3.49,239,2.495,241,2.779,242,2.605,259,2.779,260,1.132,261,1.174,262,1.387,264,1.468,265,1.686,268,1.132,273,5.086,275,3.243,276,5.451,282,4.07,1147,5.086,1148,4.435,1149,4.07,1150,4.989,1151,6.126,1152,4.989,1153,6.683,1154,4.989,1155,5.133,1156,4.435,1157,2.689,1158,4.989,1159,4.989,1160,4.989]],["title/modules/GoogleAuthenticationModule.html",[50,1.015,65,3.331]],["body/modules/GoogleAuthenticationModule.html",[0,0.178,3,0.059,4,0.059,5,0.059,12,0.007,18,0.267,22,0.067,24,0.005,25,0.005,50,1.506,52,1.8,53,2.702,56,5.686,65,6.635,78,4.873,79,2.83,80,2.145,81,2.095,83,2.53,94,0.617,96,3.388,98,1.837,102,4.256,103,3.391,201,1.914,202,2.643,305,2.811,1147,5.864,1155,5.958,1156,4.637,1161,4.637,1162,4.637,1163,5.217,1164,5.217,1165,5.217]],["title/injectables/GoogleAuthenticationService.html",[319,0.755,1155,3.162]],["body/injectables/GoogleAuthenticationService.html",[0,0.095,3,0.031,4,0.031,5,0.031,8,0.175,9,0.809,11,0.435,12,0.007,13,1.51,16,0.629,18,0.214,22,0.036,24,0.003,25,0.003,33,1.143,34,2.983,84,0.903,89,1.327,90,1.103,92,1.346,94,0.329,97,3.249,98,0.979,138,2.179,210,3.319,223,1.949,243,4.238,252,3.107,253,1.452,260,0.989,261,1.266,262,1.496,264,2.475,265,2.483,268,1.594,273,4.639,274,2.471,275,1.807,276,4.972,277,3.964,278,2.116,279,2.471,280,2.471,281,2.116,319,0.71,320,0.867,328,2.116,334,3.004,359,1.664,364,1.664,365,2.611,368,2.087,369,2.021,393,2.268,614,2.471,617,1.603,939,3.558,1058,3.558,1149,2.268,1155,2.971,1166,2.471,1167,5.382,1168,4.361,1169,4.361,1170,4.361,1171,4.361,1172,4.361,1173,4.361,1174,2.78,1175,4.361,1176,2.78,1177,4.361,1178,2.78,1179,4.361,1180,2.78,1181,4.361,1182,2.78,1183,4.361,1184,2.471,1185,4.361,1186,2.78,1187,4.361,1188,2.78,1189,4.361,1190,2.78,1191,2.78,1192,2.78,1193,2.78,1194,2.78,1195,2.78,1196,2.78,1197,2.78,1198,2.78,1199,2.78,1200,2.471,1201,2.78,1202,2.78,1203,2.78,1204,4.361,1205,2.78,1206,2.78,1207,2.78,1208,2.78,1209,2.78,1210,2.78]],["title/injectables/GraphqlJwtAuthGuard.html",[319,0.755,1211,3.533]],["body/injectables/GraphqlJwtAuthGuard.html",[0,0.196,3,0.064,4,0.064,5,0.064,8,0.362,11,0.34,12,0.007,16,0.492,18,0.246,22,0.073,24,0.005,25,0.005,33,0.934,84,1.517,89,1.084,90,0.832,92,1.167,94,0.679,115,3.575,250,4.225,264,1.689,268,1.302,308,3.198,319,1.192,320,1.791,529,2.747,724,3.575,936,6.467,1211,5.575,1212,6.511,1213,5.103,1214,7.324,1215,7.324,1216,5.74,1217,4.118,1218,5.74,1219,4.369,1220,5.74,1221,5.74,1222,5.74]],["title/controllers/HealthController.html",[205,1.34,1223,3.533]],["body/controllers/HealthController.html",[0,0.156,3,0.051,4,0.051,5,0.051,8,0.288,12,0.007,14,0.965,16,0.392,18,0.22,22,0.058,23,0.613,24,0.005,25,0.005,84,1.305,92,0.93,94,0.541,117,3.282,201,1.272,205,1.321,208,2.023,260,1.038,261,1.916,268,1.038,480,3.732,892,5.289,904,3.482,1223,5.485,1224,4.067,1225,6.301,1226,7.765,1227,4.575,1228,4.575,1229,7.207,1230,6.301,1231,7.207,1232,7.207,1233,7.207,1234,4.575,1235,4.575,1236,4.575,1237,6.301,1238,5.601,1239,6.301,1240,6.301,1241,4.575,1242,4.575,1243,6.301,1244,7.765,1245,6.301,1246,4.575,1247,4.575,1248,4.575,1249,4.575,1250,4.575,1251,4.575,1252,4.575,1253,4.067,1254,4.575,1255,4.575,1256,4.575,1257,4.575,1258,4.575]],["title/modules/HealthModule.html",[50,1.015,66,3.331]],["body/modules/HealthModule.html",[0,0.189,3,0.062,4,0.062,5,0.062,12,0.007,18,0.265,22,0.071,23,0.74,24,0.005,25,0.005,50,1.563,52,1.906,53,2.806,66,6.576,73,5.776,79,2.939,80,2.272,81,2.22,83,2.627,94,0.654,105,4.509,201,1.987,202,2.744,892,6.16,904,4.206,1223,6.03,1259,4.913,1260,4.913,1261,5.527,1262,5.527,1263,5.527,1264,7.148]],["title/injectables/HttpCacheInterceptor.html",[319,0.755,1265,3.533]],["body/injectables/HttpCacheInterceptor.html",[0,0.189,3,0.062,4,0.062,5,0.062,8,0.35,11,0.328,12,0.007,13,1.305,16,0.475,18,0.169,22,0.071,24,0.005,25,0.005,33,0.903,43,3.992,84,1.484,89,1.048,90,0.804,92,1.128,94,0.656,219,2.517,264,2.109,268,1.625,319,1.166,320,1.73,529,3.429,724,3.455,936,6.385,940,4.931,1265,5.454,1266,4.931,1267,7.937,1268,7.166,1269,7.166,1270,5.548,1271,7.166,1272,7.056,1273,5.548,1274,5.548,1275,5.548,1276,5.548]],["title/injectables/JwtAuthenticationGuard.html",[249,2.162,319,0.755]],["body/injectables/JwtAuthenticationGuard.html",[0,0.229,3,0.075,4,0.075,5,0.075,12,0.007,18,0.246,22,0.086,23,0.897,24,0.006,25,0.006,94,0.792,249,3.753,308,3.73,319,1.311,320,2.089,529,3.204,1217,4.804,1219,5.096,1277,4.561,1278,5.952]],["title/injectables/JwtRefreshGuard.html",[254,3.533,319,0.755]],["body/injectables/JwtRefreshGuard.html",[0,0.226,3,0.075,4,0.075,5,0.075,12,0.007,18,0.244,22,0.085,23,0.889,24,0.006,25,0.006,94,0.785,213,4.52,254,6.1,277,3.973,308,3.697,319,1.304,320,2.07,529,3.176,1217,4.761,1219,5.051,1277,4.52,1279,5.899]],["title/injectables/JwtRefreshTokenStrategy.html",[298,3.331,319,0.755]],["body/injectables/JwtRefreshTokenStrategy.html",[0,0.15,3,0.049,4,0.049,5,0.049,8,0.277,11,0.363,12,0.007,16,0.525,18,0.26,22,0.056,24,0.004,25,0.004,33,0.998,84,1.27,89,1.158,90,0.889,92,0.894,94,0.52,97,3.677,98,1.549,138,1.788,152,2.165,213,5.201,219,3.772,223,1.295,250,3.537,252,3.377,253,2.297,260,1.391,261,1.443,262,1.705,264,1.295,268,1.391,277,2.633,278,3.348,298,4.399,308,2.451,319,0.998,320,1.372,355,4.963,356,3.348,378,4.808,402,3.911,529,2.105,831,2.996,1046,2.996,1157,2.371,1277,4.808,1280,3.911,1281,4.667,1282,5.758,1283,4.399,1284,6.132,1285,4.399,1286,3.589,1287,4.667,1288,3.156,1289,4.667,1290,3.589,1291,3.589,1292,4.399,1293,3.589,1294,4.399,1295,4.399,1296,4.399,1297,4.399]],["title/injectables/JwtStrategy.html",[299,3.331,319,0.755]],["body/injectables/JwtStrategy.html",[0,0.162,3,0.053,4,0.053,5,0.053,8,0.299,11,0.382,12,0.007,16,0.552,18,0.265,22,0.06,24,0.005,25,0.005,33,1.05,84,1.336,89,1.219,90,0.935,92,0.963,94,0.56,97,3.761,98,1.668,138,1.858,219,2.927,223,1.394,250,2.731,252,3.484,253,2.473,260,1.463,261,1.518,262,1.793,268,1.463,299,4.628,308,2.638,319,1.05,320,1.477,355,5.121,356,3.604,378,3.225,529,2.266,831,3.225,1046,3.225,1157,2.552,1281,4.91,1282,5.985,1286,3.863,1287,3.604,1288,3.397,1289,3.604,1290,3.863,1291,3.863,1293,3.863,1298,4.209,1299,4.735,1300,5.734,1301,4.735,1302,4.209,1303,4.209,1304,4.209,1305,4.209]],["title/injectables/JwtTwoFactorGuard.html",[319,0.755,1306,3.533]],["body/injectables/JwtTwoFactorGuard.html",[0,0.225,3,0.074,4,0.074,5,0.074,12,0.007,18,0.244,22,0.084,23,0.885,24,0.006,25,0.006,94,0.781,308,3.68,316,5.735,319,1.301,320,2.061,529,3.162,1217,4.74,1219,5.028,1277,4.5,1306,6.084,1307,5.873,1308,5.873]],["title/injectables/JwtTwoFactorStrategy.html",[300,3.331,319,0.755]],["body/injectables/JwtTwoFactorStrategy.html",[0,0.15,3,0.049,4,0.049,5,0.049,8,0.277,11,0.363,12,0.007,16,0.525,18,0.26,22,0.056,24,0.004,25,0.004,33,0.998,34,2.539,84,1.27,89,1.158,90,0.889,92,0.894,94,0.52,97,3.677,98,1.549,138,1.788,219,2.782,223,1.295,250,3.537,252,3.377,253,2.297,260,1.391,261,1.443,262,1.705,264,1.295,265,1.487,268,1.601,283,3.911,300,4.399,308,2.451,316,5.478,319,0.998,320,1.372,355,4.963,356,3.348,378,2.996,529,2.105,831,2.996,1046,2.996,1157,2.371,1277,4.808,1281,4.667,1282,5.758,1286,3.589,1287,4.667,1288,3.156,1289,4.667,1290,3.589,1291,3.589,1293,3.589,1300,5.451,1303,3.911,1304,3.911,1305,3.911,1308,3.911,1309,3.911,1310,4.399,1311,4.399,1312,4.399]],["title/injectables/LocalAuthenticationGuard.html",[247,3.533,319,0.755]],["body/injectables/LocalAuthenticationGuard.html",[0,0.231,3,0.076,4,0.076,5,0.076,12,0.007,18,0.247,22,0.086,24,0.006,25,0.006,94,0.799,247,6.167,308,3.764,319,1.319,320,2.108,529,3.234,1217,4.848,1313,6.006,1314,6.757]],["title/injectables/LocalStrategy.html",[301,3.331,319,0.755]],["body/injectables/LocalStrategy.html",[0,0.174,3,0.057,4,0.057,5,0.057,8,0.321,11,0.401,12,0.007,13,1.582,16,0.58,18,0.258,22,0.065,24,0.005,25,0.005,33,1.102,34,1.831,84,1.403,89,1.28,90,0.982,92,1.035,94,0.602,138,1.928,243,5.011,244,3.875,260,1.155,268,1.155,301,4.86,308,2.836,319,1.102,320,1.588,334,3.073,362,4.857,479,4.86,529,2.437,606,4.526,617,2.937,831,3.468,1281,5.156,1287,3.875,1288,3.653,1289,3.875,1302,4.526,1315,4.526,1316,5.092,1317,6.774,1318,5.092,1319,4.526,1320,5.092,1321,5.092,1322,5.092]],["title/classes/Log.html",[0,0.158,805,3.018]],["body/classes/Log.html",[0,0.17,2,1.192,3,0.056,4,0.056,5,0.056,8,0.314,9,1.237,11,0.496,12,0.007,13,1.571,14,1.768,16,0.718,18,0.152,22,0.064,23,0.666,24,0.005,25,0.005,28,4.119,31,2.491,35,5.084,38,1.889,39,4.339,45,3.714,47,1.952,589,4.054,724,4.685,725,5.725,743,4.334,805,4.89,1323,4.42,1324,7.523,1325,4.973,1326,6.687,1327,4.973,1328,4.973,1329,4.973,1330,4.973]],["title/classes/LogInDto.html",[0,0.158,1331,3.787]],["body/classes/LogInDto.html",[0,0.255,2,1.419,3,0.067,4,0.067,5,0.067,8,0.373,9,1.386,11,0.442,12,0.007,13,1.565,14,1.576,16,0.64,18,0.181,19,3.48,20,3.48,21,2.435,22,0.095,23,0.793,24,0.005,25,0.005,334,3.713,362,4.9,1006,6.677,1331,6.677,1332,5.265,1333,5.923,1334,5.265,1335,5.923,1336,5.265,1337,5.265]],["title/modules/LoggerModule.html",[50,1.015,67,3.331]],["body/modules/LoggerModule.html",[0,0.185,3,0.061,4,0.061,5,0.061,12,0.007,18,0.269,22,0.069,24,0.005,25,0.005,50,1.541,52,1.865,53,2.766,67,6.618,79,2.897,80,2.223,81,2.171,83,1.987,94,0.639,96,3.468,98,1.904,202,2.705,305,3.798,466,3.012,467,2.171,800,6.802,803,6.017,805,3.514,828,4.806,1338,4.806,1339,4.806,1340,4.806,1341,5.406,1342,4.806,1343,5.406]],["title/injectables/LogsMiddleware.html",[132,3.533,319,0.755]],["body/injectables/LogsMiddleware.html",[0,0.156,3,0.051,4,0.051,5,0.051,8,0.288,9,1.166,11,0.27,12,0.007,16,0.538,18,0.192,22,0.058,23,0.842,24,0.005,25,0.005,33,0.742,84,1.302,89,0.862,90,0.661,92,0.927,93,3.107,94,0.539,132,5.476,219,3.815,261,1.693,262,2,264,2.117,268,1.632,319,1.023,320,1.423,339,2.541,369,2.361,474,5.589,480,5.129,560,2.73,589,2.458,844,5.902,875,4.054,877,4.054,1067,6.894,1157,2.458,1344,4.054,1345,6.287,1346,6.682,1347,7.755,1348,4.561,1349,6.287,1350,4.561,1351,6.287,1352,4.561,1353,6.287,1354,7.755,1355,6.287,1356,4.561,1357,4.561,1358,4.561]],["title/injectables/LogsService.html",[319,0.755,803,3.162]],["body/injectables/LogsService.html",[0,0.174,3,0.057,4,0.057,5,0.057,8,0.321,11,0.401,12,0.007,16,0.58,18,0.258,22,0.065,23,0.682,24,0.005,25,0.005,33,1.102,47,1.999,84,1.403,89,1.28,90,0.982,92,1.035,94,0.602,138,1.928,152,2.506,223,1.498,260,1.537,261,1.198,264,1.498,265,2.289,268,1.155,319,1.102,320,1.588,467,2.045,497,2.836,498,4.373,722,6.176,803,4.614,805,4.403,1342,4.526,1359,4.526,1360,6.774,1361,5.092,1362,5.092,1363,6.774,1364,6.774,1365,5.092,1366,5.092,1367,5.092,1368,6.774,1369,5.092,1370,5.092,1371,4.526,1372,5.092]],["title/classes/Message.html",[0,0.158,589,2.502]],["body/classes/Message.html",[0,0.185,2,1.296,3,0.061,4,0.061,5,0.061,8,0.341,9,1.307,11,0.464,12,0.007,13,1.283,14,1.653,16,0.671,18,0.215,22,0.069,23,0.724,24,0.005,25,0.005,28,4.079,31,2.596,34,2.988,35,4.522,38,1.996,39,4.522,45,3.925,47,2.122,576,5.34,588,4.367,589,4.225,617,3.119,634,4.41,639,5.363,1373,4.806,1374,5.406,1375,5.406,1376,5.406]],["title/classes/ObjectWithIdDto.html",[0,0.158,697,3.331]],["body/classes/ObjectWithIdDto.html",[0,0.268,2,1.536,3,0.072,4,0.072,5,0.072,8,0.404,9,1.455,11,0.379,12,0.007,14,1.351,16,0.549,18,0.195,21,2.634,22,0.082,23,0.858,24,0.006,25,0.006,31,2.808,38,2.223,687,6.084,697,6.084,1377,5.696,1378,6.408]],["title/controllers/OptimizeController.html",[205,1.34,1379,3.533]],["body/controllers/OptimizeController.html",[0,0.139,3,0.046,4,0.046,5,0.046,8,0.258,11,0.344,12,0.007,13,1.234,14,1.227,16,0.498,18,0.248,22,0.052,24,0.004,25,0.004,31,2.245,33,0.947,84,1.205,89,1.1,90,0.844,92,1.183,94,0.483,123,3.109,138,2.056,201,1.136,205,1.179,208,1.807,223,1.713,239,1.353,242,2.133,260,0.927,261,0.961,262,1.136,264,2.298,265,2.291,268,1.538,443,3.109,1036,5.531,1157,3.137,1346,6.179,1379,4.43,1380,3.631,1381,3.631,1382,5.82,1383,5.82,1384,4.085,1385,5.82,1386,4.085,1387,4.085,1388,6.027,1389,4.085,1390,4.085,1391,6.78,1392,3.631,1393,4.085,1394,4.085,1395,5.82,1396,3.631,1397,4.085,1398,5.174,1399,4.085,1400,3.332,1401,4.085,1402,4.085,1403,4.085,1404,4.085,1405,4.085,1406,4.085,1407,4.085,1408,4.085,1409,4.085,1410,4.085,1411,4.085,1412,4.085,1413,4.085,1414,5.82,1415,4.085,1416,4.085,1417,3.332,1418,4.085,1419,4.085,1420,4.085]],["title/modules/OptimizeModule.html",[50,1.015,68,3.331]],["body/modules/OptimizeModule.html",[0,0.201,3,0.066,4,0.066,5,0.066,12,0.007,18,0.262,22,0.075,24,0.005,25,0.005,50,1.63,52,2.035,68,5.347,83,2.168,90,1.08,94,0.698,116,4.49,117,5.347,122,5.244,123,4.49,201,2.072,202,2.265,305,3.179,1379,6.218,1381,5.244,1421,5.9,1422,5.9,1423,5.9,1424,5.9,1425,5.9,1426,5.9,1427,5.9]],["title/classes/PaginationParams.html",[0,0.158,1428,3.533]],["body/classes/PaginationParams.html",[0,0.263,2,1.25,3,0.059,4,0.059,5,0.059,8,0.329,9,1.277,11,0.528,12,0.007,14,1.625,16,0.66,18,0.21,21,2.145,22,0.067,24,0.005,25,0.005,33,1.423,38,2.595,687,5.878,701,3.553,1133,6.236,1428,5.239,1429,4.637,1430,5.864,1431,5.864,1432,5.864,1433,6.884,1434,5.217,1435,5.217,1436,5.217,1437,5.217,1438,5.217,1439,6.884,1440,5.217]],["title/classes/Post.html",[0,0.158,239,1.537]],["body/classes/Post.html",[0,0.115,2,0.804,3,0.038,4,0.038,5,0.038,8,0.318,9,0.935,11,0.513,12,0.007,13,1.379,14,1.776,16,0.721,18,0.205,22,0.043,23,0.449,24,0.004,25,0.004,28,4.127,31,2.004,33,1.095,34,2.594,35,4.16,38,1.906,39,3.492,43,2.808,45,2.808,47,1.318,119,4.828,152,3.728,239,2.228,419,4.607,429,4.769,523,2.984,525,4.481,588,3.748,617,1.936,632,4.534,639,3.837,641,2.984,644,5.381,731,3.935,732,3.935,740,4.938,743,4.374,749,4.607,1326,4.481,1441,2.984,1442,4.607,1443,5.381,1444,3.357,1445,3.357,1446,3.357,1447,3.357,1448,3.357,1449,3.357,1450,2.984,1451,3.357,1452,2.738,1453,3.357,1454,3.357,1455,3.357,1456,3.357,1457,5.041,1458,4.481,1459,3.357,1460,2.984,1461,3.357,1462,3.357,1463,5.041,1464,4.112,1465,3.357,1466,3.357,1467,3.357,1468,3.357,1469,3.357,1470,2.984,1471,3.357,1472,3.357]],["title/classes/Post-1.html",[0,0.132,239,1.279,1473,2.94]],["body/classes/Post-1.html",[0,0.155,2,1.09,3,0.051,4,0.051,5,0.051,8,0.287,9,1.164,11,0.51,12,0.007,13,1.48,14,1.816,16,0.737,18,0.191,22,0.058,24,0.005,25,0.005,31,2.379,33,1.021,34,2.584,38,2.194,115,2.832,152,3.088,239,2.078,588,4.002,731,4.669,732,4.669,740,5.86,741,5.86,743,5.034,744,4.042,746,7.426,749,3.461,1442,5.467,1443,6.386,1474,4.042,1475,4.547,1476,4.547,1477,4.547,1478,4.547,1479,4.547,1480,4.547,1481,4.547,1482,6.386,1483,5.577,1484,4.547]],["title/interfaces/PostCountResult.html",[404,1.865,1485,3.533]],["body/interfaces/PostCountResult.html",[3,0.075,4,0.075,5,0.075,8,0.422,9,1.495,11,0.396,12,0.007,22,0.086,23,0.897,24,0.006,25,0.006,38,2.449,404,2.689,406,3.609,1485,6.579,1486,5.952,1487,7.318]],["title/classes/PostNotFoundException.html",[0,0.158,1488,3.533]],["body/classes/PostNotFoundException.html",[0,0.212,2,1.491,3,0.07,4,0.07,5,0.07,11,0.368,12,0.007,16,0.533,18,0.19,22,0.079,23,0.833,24,0.006,25,0.006,31,2.06,33,1.012,38,2.371,89,1.175,90,0.902,94,0.736,260,1.411,529,3.687,530,6.37,531,6.284,533,5.247,535,5.529,1488,6.37,1489,5.529,1490,6.22,1491,6.22]],["title/interfaces/PostSearchBody.html",[404,1.865,1492,3.331]],["body/interfaces/PostSearchBody.html",[3,0.067,4,0.067,5,0.067,8,0.376,9,1.393,11,0.51,12,0.007,13,1.651,22,0.076,23,0.799,24,0.005,25,0.005,31,2.854,38,2.569,404,2.398,406,3.218,731,5.603,732,5.603,1442,6.561,1492,5.894,1493,5.307]],["title/interfaces/PostSearchResult.html",[404,1.865,1494,3.533]],["body/interfaces/PostSearchResult.html",[3,0.071,4,0.071,5,0.071,8,0.399,9,1.444,11,0.499,12,0.007,18,0.193,22,0.081,23,0.847,24,0.006,25,0.006,38,1.792,339,3.524,404,2.541,406,3.409,414,5.925,1458,5.623,1492,4.539,1494,6.418,1495,5.623,1496,8.03,1497,6.326,1498,6.326]],["title/controllers/PostsController.html",[205,1.34,1499,3.533]],["body/controllers/PostsController.html",[0,0.109,3,0.036,4,0.036,5,0.036,8,0.202,11,0.418,12,0.007,13,1.07,14,1.489,16,0.605,18,0.254,22,0.041,23,0.428,24,0.004,25,0.004,31,1.946,33,1.149,43,1.782,84,1.006,89,1.334,90,1.024,92,1.436,94,0.378,138,2.171,201,0.889,205,0.923,208,1.414,216,3.231,223,1.932,236,2.264,237,3.687,239,2.637,240,1.53,241,1.782,242,1.67,259,1.782,260,0.725,261,0.752,262,0.889,268,1.687,316,2.295,431,5.967,432,4.32,436,4.32,440,4.32,442,2.609,443,2.434,444,2.843,449,1.67,450,2.843,506,2.178,544,1.845,653,3.31,665,2.843,729,4.711,1265,2.434,1272,2.843,1306,2.434,1428,4.997,1430,4.474,1431,3.699,1432,4.474,1499,3.699,1500,2.843,1501,3.699,1502,4.32,1503,4.32,1504,5.225,1505,4.32,1506,2.843,1507,3.198,1508,3.198,1509,3.198,1510,3.198,1511,3.198,1512,3.198,1513,3.198,1514,3.198,1515,3.198,1516,5.225,1517,3.198,1518,4.711,1519,3.198,1520,3.198,1521,3.821,1522,2.609,1523,2.843,1524,2.843,1525,3.198,1526,3.198,1527,2.434,1528,2.843,1529,3.198,1530,3.198,1531,3.198,1532,3.198,1533,3.198,1534,3.198,1535,3.198,1536,3.198,1537,3.198,1538,3.198,1539,3.198,1540,2.843,1541,3.198,1542,3.198,1543,3.198,1544,3.198,1545,3.198]],["title/injectables/PostsLoaders.html",[319,0.755,1546,3.331]],["body/injectables/PostsLoaders.html",[0,0.162,3,0.053,4,0.053,5,0.053,8,0.299,9,1.199,11,0.281,12,0.007,16,0.554,18,0.224,22,0.061,23,0.866,24,0.005,25,0.005,28,3.25,33,0.773,34,2.325,38,1.831,89,0.897,90,0.689,94,0.562,252,3.765,253,2.481,260,1.467,261,1.118,262,2.043,264,2.322,265,2.185,268,1.467,281,4.92,319,1.052,320,1.482,328,3.615,339,2.646,369,2.962,1546,4.638,1547,4.223,1548,7.349,1549,4.75,1550,6.465,1551,6.465,1552,5.747,1553,6.465,1554,6.465,1555,6.465,1556,6.465,1557,6.465,1558,4.75,1559,6.465,1560,5.747,1561,4.75]],["title/modules/PostsModule.html",[50,1.015,69,3.331]],["body/modules/PostsModule.html",[0,0.147,3,0.048,4,0.048,5,0.048,12,0.007,18,0.277,22,0.055,24,0.004,25,0.004,50,1.319,52,1.482,53,2.368,69,6.618,73,5.365,78,4.598,79,2.48,80,1.767,81,1.726,83,2.561,94,0.508,96,2.969,97,3.342,98,1.514,103,2.793,105,3.506,137,2.927,139,3.083,140,3.271,141,3.506,142,3.271,144,2.573,201,1.677,202,2.316,239,1.423,466,2.394,467,1.726,1499,5.305,1521,5.365,1522,3.506,1546,5.922,1562,3.82,1563,3.82,1564,4.298,1565,5.622,1566,4.298,1567,6.032,1568,3.506,1569,3.506,1570,5.362,1571,4.298,1572,4.298,1573,3.506,1574,3.82,1575,4.591,1576,4.298,1577,4.298,1578,4.298,1579,3.82,1580,4.298,1581,4.298,1582,4.298]],["title/classes/PostsResolver.html",[0,0.158,1575,3.533]],["body/classes/PostsResolver.html",[0,0.114,2,0.803,3,0.085,4,0.038,5,0.038,8,0.211,11,0.426,12,0.007,14,1.275,16,0.576,18,0.261,22,0.043,24,0.004,25,0.004,33,0.984,84,1.042,89,1.142,90,0.876,92,1.229,94,0.396,115,2.086,118,2.977,138,1.917,139,2.403,144,2.005,216,2.477,223,1.481,237,1.749,239,2.386,240,1.603,250,1.932,260,1.142,261,1.184,264,2.12,265,2.043,268,1.371,414,3.83,506,4.578,544,1.932,588,1.866,615,2.732,653,3.428,717,4.931,724,4.487,738,5.76,1211,2.549,1501,4.601,1521,4.919,1522,2.732,1575,3.83,1583,2.732,1584,6.727,1585,3.349,1586,6.045,1587,5.975,1588,3.349,1589,3.349,1590,3.349,1591,3.349,1592,3.349,1593,3.349,1594,3.349,1595,6.721,1596,3.349,1597,3.349,1598,3.349,1599,5.033,1600,5.033,1601,5.033,1602,3.349,1603,3.349,1604,3.349,1605,3.349,1606,3.349,1607,5.033,1608,5.033,1609,4.601,1610,2.977,1611,2.403,1612,2.549,1613,2.732,1614,3.349,1615,5.033,1616,3.349,1617,3.349,1618,3.349,1619,3.349,1620,3.349,1621,3.349,1622,3.349,1623,3.349,1624,3.349,1625,3.349,1626,3.349,1627,3.349,1628,3.349]],["title/injectables/PostsSearchService.html",[319,0.755,1565,3.162]],["body/injectables/PostsSearchService.html",[0,0.084,3,0.028,4,0.028,5,0.028,8,0.474,9,0.734,11,0.414,12,0.007,13,1.404,16,0.6,18,0.203,22,0.031,23,0.664,24,0.004,25,0.003,31,2.205,33,1.084,38,2.233,84,0.819,89,1.258,90,0.965,92,1.267,94,0.291,138,2.121,223,1.674,236,3.261,239,2.489,260,0.897,261,0.578,262,0.683,264,2.06,265,1.677,268,1.414,319,0.644,320,0.767,339,2.765,506,2.694,533,2.694,653,4.768,731,3.697,732,3.697,814,2.838,896,2.185,897,5.919,901,1.764,905,1.871,975,3.777,1417,2.005,1430,4.328,1431,4.328,1432,5.068,1442,3.01,1485,1.871,1487,5.085,1492,2.838,1494,1.871,1496,2.185,1516,4.412,1565,2.694,1573,2.005,1629,2.185,1630,3.955,1631,3.955,1632,3.955,1633,3.955,1634,3.955,1635,6.233,1636,2.458,1637,3.955,1638,2.458,1639,3.955,1640,2.458,1641,2.458,1642,2.458,1643,4.048,1644,3.955,1645,2.458,1646,2.458,1647,2.458,1648,2.458,1649,2.458,1650,6.233,1651,4.963,1652,3.955,1653,3.955,1654,3.955,1655,2.458,1656,3.955,1657,2.458,1658,4.412,1659,2.458,1660,2.458,1661,2.458,1662,2.458,1663,2.458,1664,2.458,1665,2.458,1666,2.458,1667,2.185,1668,2.185,1669,2.458,1670,2.458,1671,2.458,1672,2.458,1673,2.458,1674,3.955,1675,2.458,1676,4.963,1677,2.458,1678,2.458,1679,2.458,1680,2.458]],["title/injectables/PostsService.html",[319,0.755,1521,3.018]],["body/injectables/PostsService.html",[0,0.068,3,0.022,4,0.022,5,0.022,8,0.125,9,0.616,11,0.396,12,0.007,13,0.911,16,0.615,18,0.23,22,0.025,23,0.445,24,0.003,25,0.002,31,1.843,33,1.09,34,2.408,38,2.574,47,1.305,84,0.688,89,1.265,90,0.971,92,1.361,94,0.235,138,2.189,144,1.19,223,1.771,239,2.442,260,0.754,261,1.416,262,1.19,264,2.113,265,2.723,268,1.449,319,0.541,320,0.62,339,1.108,368,2.049,369,2.09,467,0.799,478,1.622,497,1.108,498,2.696,505,3.493,517,1.768,519,1.768,588,2.787,617,1.147,717,2.711,729,3.59,809,3.808,814,5.152,844,3.808,975,1.513,1430,5.743,1431,4.861,1432,5.858,1487,4.908,1488,1.513,1501,2.53,1502,2.954,1503,2.954,1504,2.954,1505,2.954,1506,2.954,1518,3.59,1521,2.16,1523,1.768,1524,1.768,1527,1.513,1528,1.768,1565,4.35,1568,4.54,1569,1.622,1573,1.622,1574,1.768,1643,1.622,1658,3.806,1667,1.768,1668,1.768,1681,1.768,1682,5.003,1683,3.324,1684,3.324,1685,1.988,1686,4.282,1687,3.324,1688,3.324,1689,1.988,1690,1.988,1691,3.324,1692,1.988,1693,3.324,1694,1.988,1695,3.324,1696,5.003,1697,1.988,1698,3.324,1699,1.988,1700,3.324,1701,1.988,1702,3.324,1703,1.988,1704,3.324,1705,1.988,1706,1.988,1707,1.988,1708,1.988,1709,1.988,1710,1.988,1711,1.988,1712,1.988,1713,1.988,1714,1.988,1715,1.988,1716,1.988,1717,1.988,1718,1.988,1719,4.948,1720,1.988,1721,1.988,1722,1.988,1723,1.988,1724,3.324,1725,1.988,1726,1.988,1727,4.282,1728,1.988,1729,1.988,1730,1.988,1731,4.282,1732,1.988,1733,4.282,1734,1.988,1735,1.988,1736,1.988,1737,1.988,1738,1.768,1739,1.988,1740,1.988,1741,1.988,1742,1.988,1743,1.988,1744,1.768]],["title/classes/Product.html",[0,0.158,1745,2.891]],["body/classes/Product.html",[0,0.162,2,1.135,3,0.053,4,0.053,5,0.053,8,0.299,9,1.529,11,0.488,12,0.007,13,1.175,14,1.661,16,0.675,18,0.24,22,0.06,23,0.634,24,0.005,25,0.005,28,4.087,31,2.43,35,4.545,38,1.827,39,4.232,43,2.638,45,3.594,47,1.859,90,1.064,405,5.584,410,5.584,429,4.545,634,3.863,639,4.91,1460,4.209,1745,4.57,1746,4.209,1747,5.358,1748,4.735,1749,4.735,1750,4.735,1751,6.451,1752,4.735,1753,4.735,1754,4.735,1755,4.735,1756,4.735]],["title/controllers/ProductCategoriesController.html",[205,1.34,1757,3.533]],["body/controllers/ProductCategoriesController.html",[0,0.175,3,0.058,4,0.058,5,0.058,8,0.323,11,0.303,12,0.007,14,1.435,16,0.583,18,0.248,22,0.065,23,0.686,24,0.005,25,0.005,33,0.834,84,1.409,89,0.969,90,0.743,92,1.384,94,0.606,138,1.934,201,1.425,205,1.48,208,2.267,223,1.509,236,2.388,239,2.253,240,2.453,241,2.856,242,2.677,249,2.388,251,2.598,259,2.856,260,1.163,261,1.206,262,1.425,268,1.544,284,2.598,419,5.179,427,3.333,449,2.677,750,5.838,1745,3.193,1747,4.423,1757,5.179,1758,4.557,1759,5.551,1760,6.638,1761,5.127,1762,5.127,1763,5.127,1764,4.635,1765,4.557,1766,4.557,1767,5.127,1768,3.333,1769,5.127,1770,4.557,1771,5.127]],["title/modules/ProductCategoriesModule.html",[50,1.015,70,3.331]],["body/modules/ProductCategoriesModule.html",[0,0.2,3,0.066,4,0.066,5,0.066,12,0.007,18,0.269,22,0.075,24,0.005,25,0.005,50,1.622,52,2.019,53,2.911,70,6.472,79,3.049,80,2.406,81,2.351,83,2.151,94,0.692,201,2.061,202,2.847,466,3.26,467,2.351,1747,3.805,1757,6.195,1764,6.145,1765,5.203,1772,5.203,1773,5.203,1774,5.853,1775,5.203,1776,5.853,1777,5.853]],["title/injectables/ProductCategoriesService.html",[319,0.755,1764,3.162]],["body/injectables/ProductCategoriesService.html",[0,0.171,3,0.056,4,0.056,5,0.056,8,0.316,11,0.396,12,0.007,16,0.646,18,0.256,22,0.064,23,0.67,24,0.005,25,0.005,33,1.09,47,1.965,84,1.387,89,1.265,90,0.971,92,1.362,94,0.592,138,1.911,223,1.473,260,1.519,261,1.178,264,1.473,265,2.263,268,1.519,319,1.09,320,1.562,429,2.888,467,2.011,497,2.789,498,4.344,750,5.782,1747,3.254,1764,4.562,1766,4.45,1775,4.45,1778,4.45,1779,6.698,1780,8.06,1781,5.006,1782,5.006,1783,6.698,1784,6.698,1785,5.006,1786,5.006,1787,5.006,1788,5.006,1789,6.698,1790,5.006,1791,5.006]],["title/classes/ProductCategory.html",[0,0.158,1747,3.018]],["body/classes/ProductCategory.html",[0,0.181,2,1.272,3,0.06,4,0.06,5,0.06,8,0.335,9,1.292,11,0.46,12,0.007,13,1.268,14,1.639,16,0.666,18,0.212,22,0.068,23,0.711,24,0.005,25,0.005,28,4.065,31,2.573,35,4.483,38,1.973,39,4.483,43,2.958,45,3.88,47,2.085,90,1.127,1452,4.332,1464,5.681,1745,5.475,1747,5.052,1792,4.72,1793,6.908,1794,5.31,1795,5.31,1796,5.31,1797,5.31,1798,5.31]],["title/controllers/ProductsController.html",[205,1.34,1799,3.533]],["body/controllers/ProductsController.html",[0,0.176,3,0.058,4,0.058,5,0.058,8,0.325,11,0.306,12,0.007,14,1.442,16,0.585,18,0.249,22,0.066,23,0.691,24,0.005,25,0.005,33,0.84,84,1.416,89,0.975,90,0.748,92,1.39,94,0.611,138,1.941,201,1.435,205,1.49,208,2.283,223,1.519,236,2.404,239,2.264,240,2.47,241,2.876,242,2.696,249,2.404,251,2.616,259,2.876,260,1.171,261,1.215,262,1.435,268,1.551,284,2.616,427,3.356,449,2.696,753,5.854,1745,4.258,1759,5.577,1760,6.656,1768,4.982,1770,4.589,1793,4.589,1799,5.203,1800,4.589,1801,4.589,1802,5.163,1803,5.163,1804,4.589,1805,4.589,1806,5.163,1807,5.163,1808,5.163]],["title/modules/ProductsModule.html",[50,1.015,71,3.331]],["body/modules/ProductsModule.html",[0,0.2,3,0.066,4,0.066,5,0.066,12,0.007,18,0.269,22,0.075,24,0.005,25,0.005,50,1.622,52,2.019,53,2.911,71,6.472,79,3.049,80,2.406,81,2.351,83,2.151,94,0.692,201,2.061,202,2.847,466,3.26,467,2.351,1745,3.645,1768,5.864,1799,6.195,1805,5.203,1809,5.203,1810,5.203,1811,5.853,1812,5.203,1813,5.853,1814,5.853]],["title/injectables/ProductsService.html",[319,0.755,1768,3.018]],["body/injectables/ProductsService.html",[0,0.171,3,0.056,4,0.056,5,0.056,8,0.316,11,0.396,12,0.007,16,0.646,18,0.256,22,0.064,23,0.67,24,0.005,25,0.005,33,1.09,47,1.965,84,1.387,89,1.265,90,0.971,92,1.362,94,0.592,138,1.911,223,1.473,260,1.519,261,1.178,264,1.473,265,2.263,268,1.519,319,1.09,320,1.562,467,2.011,497,2.789,498,4.344,753,5.782,1745,4.171,1759,5.464,1760,6.575,1768,4.354,1801,5.954,1804,4.45,1812,4.45,1815,4.45,1816,5.006,1817,5.006,1818,6.698,1819,5.006,1820,5.006,1821,5.006,1822,5.006,1823,6.698,1824,5.006,1825,5.006]],["title/modules/PubSubModule.html",[50,1.015,72,3.331]],["body/modules/PubSubModule.html",[0,0.193,3,0.063,4,0.063,5,0.063,12,0.007,18,0.244,22,0.093,24,0.005,25,0.005,50,1.586,52,1.95,72,5.204,83,2.077,94,0.668,96,3.57,97,3.736,98,1.991,137,3.85,139,4.056,140,4.302,141,4.611,142,4.302,144,3.384,202,2.17,264,1.664,305,3.046,369,2.123,1579,5.025,1587,6.447,1609,4.302,1611,4.056,1612,6.43,1826,4.611,1827,7.253,1828,5.025,1829,4.611]],["title/classes/PublicFile.html",[0,0.158,1086,3.162]],["body/classes/PublicFile.html",[0,0.189,2,1.324,3,0.062,4,0.062,5,0.062,8,0.348,9,1.326,11,0.469,12,0.007,13,1.525,14,1.671,16,0.679,18,0.169,22,0.071,23,0.74,24,0.005,25,0.005,28,4.096,31,2.624,35,5.004,38,2.025,39,4.57,45,3.982,47,2.17,901,5.685,973,6.03,1086,5.397,1830,4.913,1831,5.527,1832,5.527,1833,5.527]],["title/classes/RegisterDto.html",[0,0.158,232,3.331]],["body/classes/RegisterDto.html",[0,0.236,2,1.259,3,0.059,4,0.059,5,0.059,8,0.331,9,1.283,11,0.486,12,0.007,13,1.651,14,1.732,15,2.662,16,0.704,18,0.16,19,3.826,20,3.826,21,2.16,22,0.088,23,0.703,24,0.005,25,0.005,90,1.121,232,5.547,334,3.507,362,4.628,1006,6.307,1334,4.67,1336,4.67,1337,4.67,1834,4.67,1835,5.884,1836,5.254,1837,5.254,1838,5.254,1839,5.254,1840,6.916,1841,5.254,1842,5.254,1843,5.254]],["title/interfaces/RequestWithRawBody.html",[404,1.865,1844,3.533]],["body/interfaces/RequestWithRawBody.html",[3,0.072,4,0.072,5,0.072,8,0.406,9,1.459,11,0.381,12,0.007,18,0.196,22,0.082,23,0.862,24,0.006,25,0.006,219,3.855,404,2.585,406,3.468,529,3.765,1102,6.467,1157,3.468,1844,6.467,1845,5.721,1846,8.851]],["title/interfaces/RequestWithUser.html",[216,2.285,404,1.865]],["body/interfaces/RequestWithUser.html",[3,0.071,4,0.071,5,0.071,8,0.401,9,1.448,11,0.376,12,0.007,18,0.238,22,0.081,23,0.851,24,0.006,25,0.006,34,3.388,216,4.158,219,3.833,404,2.552,406,3.424,529,3.735,617,3.665,1157,3.424,1847,5.647]],["title/modules/SearchModule.html",[50,1.015,73,3.018]],["body/modules/SearchModule.html",[0,0.201,3,0.066,4,0.066,5,0.066,12,0.007,18,0.249,22,0.075,24,0.005,25,0.005,50,1.626,52,2.027,73,4.832,83,2.732,94,0.695,96,4.013,97,3.79,98,2.07,137,4.002,138,1.488,144,3.518,305,3.167,362,3.518,884,5.223,905,4.472,1058,4.793,1848,5.876,1849,7.434,1850,5.876,1851,5.876,1852,5.876,1853,5.876,1854,5.876]],["title/classes/SetDefaultCreditCardDto.html",[0,0.158,780,3.533]],["body/classes/SetDefaultCreditCardDto.html",[0,0.264,2,1.503,3,0.07,4,0.07,5,0.07,6,5.556,8,0.395,9,1.436,10,6.394,11,0.371,12,0.007,13,1.41,14,1.323,15,3.178,16,0.537,18,0.191,19,3.607,20,3.607,21,2.579,22,0.099,23,0.84,24,0.006,25,0.006,780,6.394,1855,5.576,1856,6.273]],["title/controllers/SmsController.html",[205,1.34,1857,3.533]],["body/controllers/SmsController.html",[0,0.149,3,0.049,4,0.049,5,0.049,8,0.275,11,0.361,12,0.007,14,1.285,16,0.522,18,0.244,22,0.056,23,0.584,24,0.004,25,0.004,33,0.992,38,1.726,84,1.262,89,1.151,90,0.884,92,1.239,94,0.516,138,2.1,201,1.212,205,1.259,208,1.928,216,4.189,219,3.451,236,2.838,237,2.277,239,1.444,240,2.087,241,2.429,242,2.277,249,2.031,251,2.209,259,2.429,260,0.989,261,1.026,262,1.212,265,2.059,284,3.088,368,2.916,369,2.288,371,4.372,449,2.277,544,2.515,628,5.789,630,3.319,967,2.834,985,5.417,1857,4.638,1858,3.876,1859,3.876,1860,6.094,1861,5.417,1862,4.361,1863,7.025,1864,6.094,1865,7.025,1866,4.361,1867,4.361,1868,4.361,1869,6.094,1870,4.361,1871,4.361,1872,4.785,1873,3.876,1874,4.361,1875,4.361,1876,4.361,1877,6.094,1878,6.094,1879,4.361,1880,4.361,1881,4.361,1882,4.361,1883,4.361]],["title/modules/SmsModule.html",[50,1.015,74,3.331]],["body/modules/SmsModule.html",[0,0.183,3,0.06,4,0.06,5,0.06,12,0.007,18,0.262,22,0.069,24,0.005,25,0.005,50,1.534,52,1.851,53,2.753,74,6.609,78,4.911,79,2.883,80,2.207,81,2.156,83,2.577,94,0.635,96,3.452,98,1.89,103,3.489,201,1.95,202,2.692,305,3.78,1857,5.946,1872,6.418,1873,4.771,1884,4.771,1885,4.771,1886,4.771,1887,5.367,1888,5.367,1889,5.367]],["title/injectables/SmsService.html",[319,0.755,1872,3.162]],["body/injectables/SmsService.html",[0,0.12,3,0.039,4,0.039,5,0.039,8,0.222,9,0.968,11,0.435,12,0.007,13,1.637,16,0.63,18,0.21,22,0.045,23,0.471,24,0.004,25,0.004,33,1.12,38,1.763,84,1.08,89,1.301,90,0.998,92,1.265,94,0.416,97,3.407,98,1.238,138,1.951,223,1.035,236,1.637,252,3.528,253,1.836,260,1.184,261,1.73,262,1.45,264,2.268,265,1.763,268,1.184,319,0.849,320,1.097,340,2.522,368,1.682,369,1.959,398,3.125,589,3.71,630,3.971,967,2.285,1046,2.395,1417,2.868,1835,5.864,1859,3.125,1861,4.638,1872,3.554,1890,3.125,1891,6.222,1892,5.218,1893,5.218,1894,5.218,1895,5.218,1896,6.885,1897,3.516,1898,5.218,1899,3.516,1900,5.218,1901,3.516,1902,5.218,1903,6.12,1904,3.516,1905,3.516,1906,5.218,1907,3.516,1908,3.516,1909,3.516,1910,5.218,1911,5.218,1912,5.218,1913,3.516,1914,4.638,1915,3.516,1916,3.516,1917,3.516,1918,3.516,1919,3.516,1920,3.516,1921,3.125,1922,3.516,1923,5.218,1924,3.516,1925,3.516]],["title/classes/StripeEvent.html",[0,0.158,1926,3.331]],["body/classes/StripeEvent.html",[0,0.215,2,1.51,3,0.071,4,0.071,5,0.071,8,0.397,9,1.44,11,0.373,12,0.007,13,1.414,14,1.328,16,0.539,18,0.192,22,0.08,23,0.843,24,0.006,25,0.006,28,3.722,31,2.787,45,4.325,47,2.473,1926,6.038,1927,5.599,1928,8.416,1929,6.299]],["title/modules/StripeModule.html",[50,1.015,554,2.779]],["body/modules/StripeModule.html",[0,0.199,3,0.065,4,0.065,5,0.065,12,0.007,18,0.248,22,0.074,24,0.005,25,0.005,50,1.618,52,2.011,53,2.904,79,3.041,80,2.397,81,2.342,83,2.142,94,0.689,96,3.641,98,2.053,202,2.84,305,3.987,545,5.499,554,5.48,1930,5.183,1931,5.183,1932,5.183,1933,5.83,1934,5.83]],["title/injectables/StripeService.html",[319,0.755,545,2.678]],["body/injectables/StripeService.html",[0,0.078,3,0.026,4,0.026,5,0.026,8,0.144,9,0.693,10,5.396,11,0.457,12,0.007,13,1.704,16,0.646,18,0.166,22,0.029,23,0.307,24,0.003,25,0.003,28,3.917,33,1.194,38,1.34,84,0.774,89,1.386,90,1.119,92,1.442,94,0.271,97,2.851,98,0.807,125,1.869,138,2.243,152,1.839,223,2.087,260,0.848,261,1.284,264,0.674,265,1.263,268,1.608,319,0.608,320,0.715,334,2.476,359,2.237,364,2.237,365,2.237,366,1.869,368,2.612,369,2.257,378,3.717,530,1.744,538,3.322,545,2.156,686,3.322,912,1.869,967,1.49,1046,1.561,1102,3.601,1719,2.037,1921,2.037,1935,2.037,1936,5.175,1937,3.737,1938,3.737,1939,3.737,1940,3.737,1941,3.737,1942,3.737,1943,3.737,1944,3.737,1945,3.737,1946,7.098,1947,2.292,1948,3.737,1949,2.292,1950,3.737,1951,2.292,1952,3.322,1953,3.737,1954,2.292,1955,3.737,1956,2.292,1957,4.851,1958,3.737,1959,2.292,1960,3.737,1961,2.292,1962,3.737,1963,2.292,1964,4.206,1965,2.037,1966,2.292,1967,2.292,1968,2.292,1969,2.292,1970,2.292,1971,2.292,1972,2.037,1973,3.737,1974,2.292,1975,2.292,1976,2.292,1977,2.292,1978,6.011,1979,3.737,1980,2.292,1981,2.292,1982,2.292,1983,2.292,1984,2.292,1985,2.292,1986,2.292,1987,2.292,1988,2.292,1989,4.731,1990,2.292,1991,2.292,1992,2.292,1993,3.737,1994,2.292,1995,2.292,1996,2.292,1997,2.292,1998,2.292,1999,2.292,2000,2.292,2001,2.292]],["title/controllers/StripeWebhookController.html",[205,1.34,2002,3.533]],["body/controllers/StripeWebhookController.html",[0,0.16,3,0.053,4,0.053,5,0.053,8,0.296,11,0.278,12,0.007,13,1.329,14,0.989,16,0.402,18,0.251,22,0.06,23,0.628,24,0.005,25,0.005,33,0.763,84,1.327,89,0.886,90,0.68,92,0.954,94,0.555,138,1.849,201,1.304,205,1.354,208,2.074,219,3.312,223,1.38,237,3.347,239,2.418,252,3.229,253,2.449,260,1.064,261,1.718,262,2.03,264,1.38,265,1.585,268,1.064,368,2.245,369,1.761,545,4.212,546,3.365,967,3.049,1844,5.972,1936,3.57,1952,7.303,2002,4.878,2003,4.169,2004,4.69,2005,7.301,2006,4.69,2007,4.69,2008,4.69,2009,4.69,2010,4.973,2011,4.169,2012,4.69,2013,4.69,2014,4.69,2015,4.69,2016,4.169,2017,4.69,2018,4.69,2019,6.409,2020,4.69,2021,4.69,2022,4.69]],["title/modules/StripeWebhookModule.html",[50,1.015,75,3.331]],["body/modules/StripeWebhookModule.html",[0,0.179,3,0.059,4,0.059,5,0.059,12,0.007,18,0.272,22,0.067,24,0.005,25,0.005,50,1.509,52,1.806,53,2.709,75,6.639,78,4.878,79,2.837,80,2.152,81,2.103,83,2.535,94,0.619,103,3.403,201,1.918,202,2.649,466,2.916,467,2.103,554,5.241,556,3.756,1926,3.756,2002,5.874,2010,5.964,2011,4.654,2023,4.654,2024,5.235,2025,4.654,2026,5.235,2027,5.235,2028,4.654,2029,5.235]],["title/injectables/StripeWebhookService.html",[319,0.755,2010,3.162]],["body/injectables/StripeWebhookService.html",[0,0.144,3,0.047,4,0.047,5,0.047,8,0.266,11,0.408,12,0.007,13,1.439,16,0.59,18,0.257,22,0.054,23,0.564,24,0.004,25,0.004,31,1.97,33,1.122,47,1.654,84,1.232,89,1.303,90,1,92,1.209,94,0.498,138,1.746,252,3.727,253,2.2,260,1.349,261,1.4,262,1.171,264,2.029,265,2.01,268,0.956,319,0.968,320,1.314,353,3.436,354,3.744,359,2.522,364,2.522,365,2.522,366,3.436,367,3.744,368,2.016,369,1.582,371,3.022,467,1.692,497,2.347,498,4.037,967,2.738,1371,3.744,1926,3.022,1936,4.527,1946,3.436,2010,4.051,2016,5.287,2028,3.744,2030,3.744,2031,5.948,2032,5.948,2033,4.212,2034,4.212,2035,5.948,2036,5.948,2037,4.212,2038,5.948,2039,6.895,2040,4.212,2041,4.212,2042,4.212,2043,4.212,2044,4.212,2045,4.212,2046,4.212,2047,4.212,2048,4.212,2049,5.948,2050,4.212,2051,4.212]],["title/interfaces/Subscriber.html",[404,1.865,2052,3.331]],["body/interfaces/Subscriber.html",[3,0.069,4,0.069,5,0.069,8,0.389,9,1.421,11,0.493,12,0.007,13,1.664,22,0.098,23,0.826,24,0.006,25,0.006,31,2.888,38,2.362,90,1.264,334,3.957,404,2.478,406,3.324,2052,5.982,2053,5.483]],["title/controllers/SubscribersController.html",[205,1.34,2054,3.533]],["body/controllers/SubscribersController.html",[0,0.161,3,0.053,4,0.053,5,0.053,8,0.297,11,0.278,12,0.007,14,1.354,16,0.626,18,0.251,22,0.06,23,0.63,24,0.005,25,0.005,33,0.766,84,1.33,89,0.889,90,0.682,92,1.487,93,3.205,94,0.556,138,2.15,144,2.817,201,1.308,205,1.358,208,2.081,223,1.89,236,2.191,239,2.127,240,2.252,241,2.621,242,2.457,249,2.191,251,2.384,259,2.621,261,1.511,268,1.457,284,2.384,427,3.058,449,2.457,560,2.817,758,5.637,1501,4.889,1540,4.183,2052,4.608,2054,4.889,2055,4.183,2056,4.183,2057,7.858,2058,8.489,2059,4.705,2060,4.705,2061,4.705,2062,4.705,2063,4.183,2064,6.423,2065,3.838,2066,5.566,2067,4.705,2068,4.705,2069,4.705,2070,4.705,2071,4.705,2072,4.705,2073,4.705,2074,4.705]],["title/modules/SubscribersModule.html",[50,1.015,76,3.331]],["body/modules/SubscribersModule.html",[0,0.188,3,0.062,4,0.062,5,0.062,12,0.007,18,0.264,22,0.07,24,0.005,25,0.005,50,1.56,52,1.899,76,5.116,83,2.023,94,0.651,96,3.51,97,3.699,98,1.939,116,4.191,117,3.951,137,3.751,144,3.296,149,4.895,201,1.982,202,2.114,268,1.249,809,4.191,973,4.191,1828,4.895,2054,6.02,2056,4.895,2065,4.492,2075,5.506,2076,5.506,2077,5.506,2078,7.131,2079,5.506,2080,5.506,2081,5.506,2082,4.895,2083,5.506,2084,5.506,2085,5.506]],["title/interfaces/SubscribersService.html",[404,1.865,2066,3.533]],["body/interfaces/SubscribersService.html",[3,0.064,4,0.064,5,0.064,8,0.362,11,0.503,12,0.007,16,0.627,18,0.223,22,0.073,23,0.769,24,0.005,25,0.005,33,1.192,84,1.517,89,1.384,90,1.062,92,1.489,404,2.306,406,3.094,414,5.575,479,6.096,758,6.096,2052,5.255,2063,5.103,2066,6.139,2086,5.103,2087,7.324,2088,7.324,2089,7.324,2090,5.74,2091,7.324,2092,5.74,2093,5.74,2094,5.74]],["title/controllers/SubscriptionsController.html",[205,1.34,2095,3.533]],["body/controllers/SubscriptionsController.html",[0,0.168,3,0.055,4,0.055,5,0.055,8,0.31,11,0.392,12,0.007,14,1.397,16,0.567,18,0.244,22,0.063,23,0.659,24,0.005,25,0.005,33,1.078,84,1.371,89,1.251,90,0.96,92,1.347,94,0.582,138,2.179,201,1.369,205,1.421,208,2.177,216,4.327,219,3.632,223,1.949,237,2.571,239,1.63,240,2.356,249,2.293,251,2.494,260,1.117,261,1.158,262,1.369,268,1.502,284,3.356,449,2.571,544,2.84,1611,3.532,2095,5.041,2096,4.376,2097,5.888,2098,5.888,2099,4.923,2100,4.923,2101,4.923,2102,4.923,2103,4.923,2104,4.923,2105,5.098,2106,4.376,2107,4.923,2108,4.923,2109,4.923,2110,4.923,2111,4.923,2112,4.923,2113,4.923]],["title/modules/SubscriptionsModule.html",[50,1.015,77,3.331]],["body/modules/SubscriptionsModule.html",[0,0.191,3,0.063,4,0.063,5,0.063,12,0.007,18,0.266,22,0.071,24,0.005,25,0.005,50,1.575,52,1.928,53,2.827,77,6.591,79,2.96,80,2.298,81,2.245,83,2.646,94,0.661,96,3.544,98,1.968,201,2.002,202,2.764,554,5.336,556,4.01,2095,6.063,2105,6.071,2106,4.968,2114,4.968,2115,5.589,2116,4.968,2117,5.589,2118,5.589]],["title/injectables/SubscriptionsService.html",[319,0.755,2105,3.162]],["body/injectables/SubscriptionsService.html",[0,0.146,3,0.048,4,0.048,5,0.048,8,0.27,11,0.412,12,0.007,13,1.501,16,0.596,18,0.212,22,0.055,23,0.574,24,0.004,25,0.004,28,3.647,33,1.133,84,1.247,89,1.315,90,1.009,92,1.224,94,0.507,97,3.746,98,1.509,138,2.088,223,1.772,260,1.366,261,1.417,262,1.673,264,2.221,265,2.034,268,1.579,319,0.98,320,1.337,368,2.051,369,2.261,371,3.074,530,3.261,545,4.757,546,3.074,967,2.785,1611,4.319,1946,6.487,1957,5.352,2097,5.352,2098,5.352,2105,4.101,2119,3.809,2120,4.285,2121,4.285,2122,6.02,2123,4.285,2124,6.02,2125,4.285,2126,6.02,2127,6.02,2128,6.02,2129,4.285,2130,6.02,2131,4.285,2132,4.285,2133,4.285]],["title/classes/Timestamp.html",[0,0.158,119,3.331]],["body/classes/Timestamp.html",[0,0.128,2,0.902,3,0.042,4,0.042,5,0.042,8,0.237,9,1.018,11,0.494,12,0.007,13,1.296,16,0.609,18,0.167,22,0.048,23,0.504,24,0.004,25,0.004,33,1.054,38,2.309,84,1.136,89,1.223,90,0.939,92,1.316,115,2.345,119,3.937,264,1.615,268,1.791,339,4.214,359,3.285,364,3.285,369,2.061,477,5.282,560,3.285,743,5.538,864,4.878,1609,2.865,2134,3.346,2135,6.475,2136,5.487,2137,5.487,2138,5.487,2139,5.487,2140,5.487,2141,5.487,2142,4.878,2143,5.487,2144,5.487,2145,3.765,2146,5.487,2147,7.564,2148,3.765,2149,5.487,2150,7.573,2151,3.765,2152,5.487,2153,3.765,2154,3.765,2155,3.765,2156,3.765,2157,3.765,2158,3.765,2159,3.765,2160,5.487,2161,5.487,2162,3.765,2163,3.765,2164,3.765]],["title/interfaces/TokenPayload.html",[355,3.018,404,1.865]],["body/interfaces/TokenPayload.html",[3,0.072,4,0.072,5,0.072,8,0.402,9,1.451,11,0.463,12,0.007,22,0.081,23,0.854,24,0.006,25,0.006,33,1.273,38,2.398,337,7.844,340,6.331,355,5.502,404,2.563,406,3.438,938,6.442,2165,5.672]],["title/classes/TokenVerificationDto.html",[0,0.158,1151,3.533]],["body/classes/TokenVerificationDto.html",[0,0.266,2,1.516,3,0.071,4,0.071,5,0.071,8,0.399,9,1.444,11,0.374,12,0.007,13,1.417,14,1.334,15,3.205,16,0.542,18,0.193,19,3.626,20,3.626,21,2.601,22,0.099,23,0.847,24,0.006,25,0.006,277,5.048,1151,6.418,2166,5.623,2167,6.326]],["title/classes/TwoFactorAuthenticationCodeDto.html",[0,0.158,2168,3.533]],["body/classes/TwoFactorAuthenticationCodeDto.html",[0,0.268,2,1.536,3,0.072,4,0.072,5,0.072,8,0.404,9,1.455,11,0.379,12,0.007,13,1.429,14,1.351,15,3.246,16,0.549,18,0.195,19,3.654,20,3.654,21,2.634,22,0.082,24,0.006,25,0.006,2168,5.972,2169,5.696,2170,6.918,2171,6.408]],["title/controllers/TwoFactorAuthenticationController.html",[205,1.34,304,3.533]],["body/controllers/TwoFactorAuthenticationController.html",[0,0.114,3,0.037,4,0.037,5,0.037,8,0.21,11,0.357,12,0.007,14,1.271,16,0.516,18,0.246,22,0.043,24,0.004,25,0.004,33,0.981,43,2.794,84,1.039,89,1.139,90,0.874,92,1.226,94,0.394,138,2.09,152,1.641,201,0.927,205,0.963,208,1.474,209,3.598,210,4.589,214,4.091,215,2.964,216,4.137,219,3.556,223,1.476,236,2.808,237,3.502,238,2.72,239,1.104,240,1.596,241,1.857,242,1.741,243,3.478,244,2.538,246,2.964,249,1.553,250,1.923,251,1.689,252,2.666,253,1.741,259,1.857,260,0.756,261,1.419,262,1.676,264,1.974,265,1.695,268,1.138,269,4.091,273,3.817,275,2.167,282,2.72,284,3.054,289,5.359,293,2.964,302,4.106,304,3.817,368,2.4,369,1.883,630,3.817,939,2.72,1157,1.797,1346,5.75,1392,2.964,2168,5.966,2170,5.471,2172,2.964,2173,3.334,2174,5.359,2175,3.334,2176,3.334,2177,3.334,2178,3.334,2179,3.334,2180,3.334,2181,5.016,2182,3.334,2183,3.334,2184,3.334,2185,3.334,2186,3.334,2187,3.334,2188,3.334,2189,4.458,2190,3.334,2191,3.334,2192,6.706,2193,5.016,2194,5.016,2195,3.334,2196,3.334]],["title/injectables/TwoFactorAuthenticationService.html",[302,3.162,319,0.755]],["body/injectables/TwoFactorAuthenticationService.html",[0,0.131,3,0.043,4,0.043,5,0.043,8,0.242,11,0.425,12,0.007,13,1.448,16,0.615,18,0.25,22,0.049,24,0.004,25,0.004,28,3.787,33,1.169,34,3.169,84,1.153,89,1.357,90,1.041,92,1.332,94,0.454,97,3.628,98,1.353,138,2.014,223,1.639,252,3.517,253,2.006,260,1.263,261,1.31,262,1.548,264,1.639,265,1.298,268,1.486,277,2.3,281,2.924,302,3.794,319,0.906,320,1.199,328,2.924,380,5.468,617,2.216,1157,2.071,1346,5.468,1398,3.416,2170,4.543,2189,7.069,2197,3.416,2198,5.569,2199,5.569,2200,5.569,2201,3.842,2202,5.569,2203,3.842,2204,5.569,2205,3.842,2206,5.569,2207,3.842,2208,3.842,2209,3.416,2210,3.842,2211,3.416,2212,3.842,2213,3.842,2214,3.842,2215,3.842,2216,3.842,2217,3.842,2218,3.842]],["title/classes/UpdateCategoryDto.html",[0,0.158,439,3.331]],["body/classes/UpdateCategoryDto.html",[0,0.254,2,1.414,3,0.066,4,0.066,5,0.066,8,0.372,9,1.382,11,0.441,12,0.007,13,1.357,14,1.572,16,0.638,18,0.18,19,3.471,20,3.471,21,2.425,22,0.095,23,0.79,24,0.005,25,0.005,31,2.705,38,2.111,90,1.184,439,5.862,687,5.347,1133,6.218,2219,5.244,2220,5.244,2221,5.9,2222,5.244,2223,5.9]],["title/classes/UpdatePostDto.html",[0,0.158,1518,3.331]],["body/classes/UpdatePostDto.html",[0,0.244,2,1.324,3,0.062,4,0.062,5,0.062,8,0.348,9,1.326,11,0.469,12,0.007,13,1.525,14,1.671,16,0.679,18,0.169,19,3.329,20,3.69,21,2.272,22,0.091,23,0.74,24,0.005,25,0.005,31,2.624,38,2.025,152,2.72,687,5.129,731,5.15,732,5.15,733,6.354,1133,6.376,1518,5.685,2220,4.913,2222,4.913,2224,4.913,2225,5.527,2226,5.527,2227,5.527,2228,5.527]],["title/classes/User.html",[0,0.158,34,1.67]],["body/classes/User.html",[0,0.138,2,0.608,3,0.029,4,0.029,5,0.029,8,0.16,9,0.753,11,0.505,12,0.007,13,1.552,14,1.798,16,0.73,18,0.193,22,0.032,23,0.848,24,0.003,25,0.003,26,4.83,28,4.212,31,1.679,33,1.357,34,1.824,35,4.867,38,1.15,39,2.925,42,2.256,43,1.414,45,2.26,46,4.507,47,0.996,90,0.735,152,4.235,239,2.237,334,2.3,341,5.607,362,3.035,506,3.453,526,2.07,701,1.729,749,5.397,938,5.607,1086,3.945,1450,5.63,1452,2.07,1464,3.31,1470,2.256,1835,3.859,2229,2.256,2230,4.507,2231,4.507,2232,4.136,2233,4.136,2234,4.136,2235,4.136,2236,4.507,2237,4.136,2238,4.507,2239,5.792,2240,4.058,2241,2.538,2242,2.538,2243,2.538,2244,2.538,2245,4.058,2246,2.538,2247,2.538,2248,2.538,2249,2.538,2250,5.792,2251,2.538,2252,2.538,2253,2.538,2254,2.538,2255,2.538,2256,2.538,2257,2.538,2258,2.538,2259,2.538,2260,2.538,2261,2.538,2262,5.07,2263,5.07,2264,2.538,2265,2.538,2266,2.538]],["title/classes/User-1.html",[0,0.132,34,1.39,1473,2.94]],["body/classes/User-1.html",[0,0.205,2,1.442,3,0.068,4,0.068,5,0.068,8,0.379,9,1.4,11,0.447,12,0.007,13,1.374,14,1.592,16,0.646,18,0.184,22,0.077,24,0.006,25,0.006,31,2.73,34,2.715,38,2.138,115,3.748,334,3.741,741,4.91,746,7.052,1482,6.709,1483,6.709,2267,5.35,2268,6.019,2269,6.019]],["title/controllers/UsersController.html",[205,1.34,2270,3.533]],["body/controllers/UsersController.html",[0,0.155,3,0.051,4,0.051,5,0.087,8,0.287,11,0.371,12,0.007,14,1.323,16,0.537,18,0.256,22,0.058,24,0.005,25,0.005,33,1.021,84,1.299,89,1.185,90,0.91,92,1.276,94,0.538,138,2.128,201,1.264,205,1.313,208,2.011,216,4.237,219,3.514,223,1.846,237,2.374,239,1.506,240,2.176,242,2.374,249,2.118,251,2.304,252,3.177,260,1.031,261,1.07,262,1.264,268,1.423,284,3.179,442,3.709,449,2.374,544,2.623,1157,3.871,1388,6.386,1400,3.709,1552,4.042,2270,4.775,2271,4.042,2272,5.577,2273,5.577,2274,4.547,2275,4.547,2276,4.547,2277,4.547,2278,4.547,2279,4.547,2280,4.042,2281,6.274,2282,4.547,2283,4.547,2284,4.547,2285,4.547,2286,4.547,2287,4.547,2288,4.547,2289,4.547,2290,4.547,2291,4.547,2292,4.547]],["title/modules/UsersModule.html",[50,1.015,78,2.586]],["body/modules/UsersModule.html",[0,0.17,3,0.056,4,0.056,5,0.056,12,0.007,18,0.269,22,0.064,24,0.005,25,0.005,34,1.789,48,4.056,50,1.458,52,1.715,53,2.618,78,5.151,79,2.741,80,2.044,81,1.997,83,2.45,94,0.588,201,1.853,202,2.56,252,4.119,305,3.593,466,2.77,467,1.997,554,5.165,556,3.568,1079,6.191,2270,5.725,2280,4.42,2293,4.42,2294,4.973,2295,4.42,2296,4.42,2297,4.973,2298,4.973,2299,4.973,2300,4.973]],["title/injectables/UsersService.html",[252,2.053,319,0.755]],["body/injectables/UsersService.html",[0,0.056,3,0.018,4,0.018,5,0.018,8,0.103,11,0.452,12,0.007,13,1.57,16,0.654,18,0.187,22,0.021,24,0.002,25,0.002,31,1.643,33,1.243,34,2.654,38,2.443,47,0.641,48,1.332,84,0.582,89,1.443,90,1.164,92,1.528,94,0.193,138,2.28,152,2.166,223,2.078,252,1.243,260,0.638,261,1.035,262,0.454,264,2.171,265,2.83,268,1.64,278,2.818,319,0.458,320,0.509,334,2.782,340,5.479,350,1.451,351,1.451,352,2.294,358,1.451,359,0.977,364,0.977,365,0.977,368,1.772,369,1.39,370,2.499,380,2.14,400,1.451,467,0.656,478,2.294,497,0.909,498,2.371,545,3.349,546,1.171,762,3.349,854,2.294,1083,3.955,1098,2.499,1102,2.818,1103,3.912,1200,2.499,1738,1.451,1744,1.451,1829,4.737,1914,2.499,1964,2.499,2150,3.292,2174,2.499,2230,4.41,2231,3.292,2232,1.332,2233,1.332,2234,1.332,2235,1.332,2236,3.912,2237,4.047,2238,1.451,2272,2.499,2273,2.499,2301,1.451,2302,2.812,2303,2.812,2304,2.812,2305,2.812,2306,2.812,2307,2.812,2308,2.812,2309,2.812,2310,2.812,2311,2.812,2312,3.703,2313,1.633,2314,1.633,2315,2.812,2316,2.812,2317,3.703,2318,1.633,2319,2.812,2320,1.633,2321,2.812,2322,1.633,2323,2.812,2324,1.633,2325,2.812,2326,1.633,2327,2.812,2328,1.633,2329,2.812,2330,1.633,2331,2.812,2332,1.633,2333,2.812,2334,1.633,2335,2.812,2336,1.633,2337,2.812,2338,1.633,2339,2.812,2340,1.633,2341,2.812,2342,1.633,2343,2.812,2344,1.633,2345,1.633,2346,1.633,2347,1.633,2348,1.633,2349,1.633,2350,3.703,2351,2.812,2352,2.812,2353,1.633,2354,2.812,2355,1.633,2356,1.633,2357,4.4,2358,2.812,2359,2.812,2360,2.812,2361,1.633,2362,3.703,2363,1.633,2364,5.421,2365,1.633,2366,1.633,2367,1.633,2368,1.633,2369,1.633,2370,1.633,2371,1.633,2372,1.633,2373,1.633,2374,1.633,2375,1.633,2376,1.633,2377,1.633,2378,2.812,2379,1.633]],["title/interfaces/VerificationTokenPayload.html",[404,1.865,968,3.533]],["body/interfaces/VerificationTokenPayload.html",[3,0.075,4,0.075,5,0.075,8,0.422,9,1.495,11,0.396,12,0.007,13,1.574,22,0.086,23,0.897,24,0.006,25,0.006,334,4.07,404,2.689,406,3.609,968,6.579,2380,5.952]],["title/coverage.html",[2381,5.192]],["body/coverage.html",[0,0.309,1,1.167,5,0.017,6,2.533,7,1.363,11,0.091,12,0.007,24,0.002,25,0.002,26,1.044,27,1.363,34,0.958,119,1.1,132,1.167,205,2.256,206,1.167,207,1.363,213,1.044,216,0.755,232,1.1,239,0.882,243,0.885,247,1.167,249,0.714,250,0.885,252,0.678,254,1.167,256,0.997,298,1.1,299,1.1,300,1.1,301,1.1,302,1.044,304,1.167,316,1.911,319,1.414,321,1.363,355,0.997,369,0.576,404,2.693,405,1.167,407,1.363,410,1.167,411,1.363,417,1.167,418,1.363,426,1.1,429,0.885,431,1.1,439,1.1,445,1.044,469,1.363,499,1.167,520,1.363,528,1.363,536,1.167,537,1.363,541,1.167,545,0.885,558,1.167,559,1.363,567,1.044,589,0.826,602,1.363,628,1.167,629,1.363,632,0.918,633,1.363,642,1.167,643,1.363,648,1.1,651,1.167,658,1.1,660,1.1,674,1.167,677,1.167,680,1.167,681,1.363,683,1.363,685,1.363,690,1.363,695,1.363,697,1.1,703,1.363,704,1.363,722,1.167,723,1.363,729,1.1,730,1.363,738,1.167,739,1.363,750,1.1,751,1.363,753,1.1,754,1.363,758,1.1,759,1.363,762,1.167,763,1.363,767,1.167,768,1.363,780,1.167,785,1.167,800,1.1,801,1.363,803,1.044,805,0.997,826,1.251,841,1.167,842,1.363,892,1.044,893,1.363,909,1.167,910,1.363,931,1.251,933,1.363,952,1.363,957,0.997,968,1.167,1000,1.1,1001,1.363,1009,1.167,1010,1.363,1017,1.044,1028,1.363,1043,1.363,1063,1.251,1064,1.363,1075,1.251,1083,1.044,1086,1.044,1089,1.363,1127,1.363,1130,1.363,1134,1.363,1144,1.363,1147,1.167,1148,1.363,1151,1.167,1155,1.044,1166,1.363,1211,1.167,1212,1.363,1213,1.363,1223,1.167,1224,1.363,1265,1.167,1266,1.363,1277,3.251,1278,1.363,1279,1.363,1280,1.363,1298,1.363,1306,1.167,1307,1.363,1309,1.363,1313,1.363,1315,1.363,1323,1.363,1331,1.251,1332,1.363,1344,1.363,1359,1.363,1373,1.363,1377,1.363,1379,1.167,1380,1.363,1428,1.167,1429,1.363,1441,1.363,1474,1.363,1485,1.167,1486,1.363,1488,1.167,1489,1.363,1492,1.1,1493,1.363,1494,1.167,1495,1.363,1499,1.167,1500,1.363,1518,1.1,1521,0.997,1527,1.167,1546,1.1,1547,1.363,1565,1.044,1575,1.167,1583,2.172,1612,1.167,1613,1.251,1629,1.363,1643,7.896,1681,1.363,1745,0.955,1746,1.363,1747,0.997,1757,1.167,1758,1.363,1764,1.044,1768,0.997,1778,1.363,1792,1.363,1799,1.167,1800,1.363,1815,1.363,1826,1.251,1830,1.363,1834,1.363,1844,1.167,1845,1.363,1847,1.363,1855,1.363,1857,1.167,1858,1.363,1872,1.044,1890,1.363,1926,1.1,1927,1.363,1935,1.363,2002,1.167,2003,1.363,2010,1.044,2030,1.363,2052,1.1,2053,1.363,2054,1.167,2055,1.363,2066,1.167,2086,1.363,2095,1.167,2096,1.363,2105,1.044,2119,1.363,2134,1.363,2165,1.363,2166,1.363,2168,1.167,2169,1.363,2172,1.363,2197,1.363,2219,1.363,2224,1.363,2229,1.363,2267,1.363,2270,1.167,2271,1.363,2301,1.363,2380,1.363,2381,1.251,2382,1.533,2383,1.533,2384,1.533,2385,5.952,2386,2.663,2387,8.61,2388,6.486,2389,8.431,2390,7.495,2391,1.363,2392,5.234,2393,1.363,2394,7.814,2395,1.533,2396,1.533,2397,4.216,2398,1.363,2399,5.234,2400,1.363,2401,1.363,2402,1.363,2403,3.53,2404,1.363,2405,2.663,2406,1.363,2407,1.363,2408,1.363,2409,1.363,2410,1.363,2411,1.363,2412,1.363,2413,1.363,2414,1.363,2415,1.363,2416,1.533,2417,1.533]],["title/dependencies.html",[53,2.195,2082,3.434]],["body/dependencies.html",[0,0.164,3,0.035,12,0.007,21,1.298,24,0.004,25,0.004,47,1.24,53,1.24,94,0.373,98,1.112,100,2.807,111,2.576,115,1.966,123,2.403,139,3.453,250,2.776,275,3.128,308,1.759,311,2.265,352,2.576,467,1.268,562,3.926,584,2.576,585,2.576,615,2.576,657,2.265,701,2.151,904,2.403,905,2.403,1053,2.807,1072,2.807,1107,2.807,1108,4.278,1110,2.807,1149,3.926,1157,2.594,1184,2.807,1288,4.68,1319,4.278,1396,2.807,1400,3.926,1560,2.807,1568,3.926,1569,5.321,1570,2.807,1609,4.964,1610,2.807,1611,2.265,1829,2.576,1903,2.807,1936,2.403,2065,2.576,2209,2.807,2211,2.807,2418,3.157,2419,3.157,2420,3.157,2421,3.157,2422,3.157,2423,3.157,2424,3.157,2425,3.157,2426,3.157,2427,4.813,2428,3.157,2429,5.832,2430,7.399,2431,4.813,2432,3.157,2433,6.523,2434,3.157,2435,4.813,2436,3.157,2437,3.157,2438,4.813,2439,3.157,2440,3.157,2441,3.157,2442,3.157,2443,3.157,2444,3.157,2445,3.157,2446,3.157,2447,3.157,2448,4.813,2449,3.157,2450,4.813,2451,3.157,2452,3.157,2453,3.157,2454,3.157,2455,3.157,2456,3.157,2457,3.157,2458,3.157,2459,3.157,2460,3.157,2461,3.157,2462,3.157,2463,3.157,2464,5.832,2465,4.813,2466,3.157,2467,3.157,2468,3.157,2469,3.157,2470,3.157,2471,3.157,2472,3.157,2473,3.157,2474,3.157,2475,3.157,2476,3.157,2477,3.157,2478,3.157,2479,4.813,2480,3.157,2481,3.157,2482,3.157,2483,3.157,2484,3.157,2485,3.157,2486,3.157,2487,5.832,2488,3.157,2489,3.157,2490,3.157,2491,3.157,2492,3.157,2493,3.157,2494,3.157,2495,3.157,2496,3.157,2497,3.157,2498,3.157,2499,4.813,2500,3.157,2501,3.157,2502,3.157,2503,3.157,2504,3.157,2505,3.157,2506,3.157,2507,3.157,2508,3.157,2509,3.157,2510,3.157,2511,3.157,2512,3.157,2513,3.157,2514,3.157,2515,3.157,2516,3.157,2517,3.157,2518,3.157,2519,3.157]],["title/miscellaneous/enumerations.html",[2520,2.631,2521,4.97]],["body/miscellaneous/enumerations.html",[8,0.426,12,0.007,24,0.006,25,0.006,339,4.834,353,6.609,1965,7.202,2520,4.602,2521,6.006,2522,6.757,2523,6.757,2524,6.757,2525,6.757,2526,6.757,2527,6.757,2528,6.757,2529,6.757,2530,6.757,2531,6.757]],["title/miscellaneous/functions.html",[2520,2.631,2532,4.97]],["body/miscellaneous/functions.html",[8,0.356,11,0.429,12,0.007,24,0.005,25,0.005,33,1.375,89,1.596,90,1.225,92,1.149,339,3.149,826,5.917,938,5.52,1036,6.533,1075,5.917,1078,5.025,2398,5.025,2400,7.51,2401,5.025,2402,6.447,2406,5.025,2411,5.025,2412,7.119,2413,5.025,2414,5.025,2415,6.447,2520,3.85,2532,5.025,2533,5.653,2534,5.653,2535,5.653,2536,5.653,2537,5.653,2538,5.653,2539,5.653,2540,5.653,2541,5.653,2542,5.653,2543,8.449,2544,5.653]],["title/index.html",[8,0.244,2545,3.863,2546,3.863]],["body/index.html",[4,0.058,12,0.007,24,0.005,25,0.005,116,3.916,477,4.197,498,2.773,562,4.197,588,2.866,834,4.573,979,4.573,1238,4.573,2142,4.573,2381,4.197,2547,5.145,2548,5.145,2549,6.821,2550,5.145,2551,5.145,2552,5.145,2553,5.145,2554,5.145,2555,7.652,2556,5.145,2557,5.145,2558,5.145,2559,8.889,2560,5.145,2561,5.145,2562,5.145,2563,8.713,2564,5.145,2565,6.821,2566,5.145,2567,5.145,2568,5.145,2569,6.821,2570,6.821,2571,5.145,2572,5.145,2573,5.145,2574,6.821,2575,6.821,2576,5.145,2577,5.145,2578,5.145,2579,5.145,2580,5.145,2581,4.573,2582,5.145,2583,5.145,2584,5.145,2585,5.145,2586,5.145,2587,5.145,2588,5.145,2589,5.145,2590,5.145,2591,5.145,2592,5.145,2593,5.145,2594,5.145,2595,5.145]],["title/modules.html",[52,2.195]],["body/modules.html",[12,0.005,24,0.005,25,0.005,51,3.461,52,1.568,56,2.956,57,3.262,58,3.262,59,3.262,60,3.262,61,3.262,62,3.262,63,3.097,64,3.262,65,3.262,66,3.262,67,3.262,68,3.262,69,3.262,70,3.262,71,3.262,72,3.262,73,2.956,74,3.262,75,3.262,76,3.262,77,3.262,78,2.533,554,2.722,948,3.097,1079,3.262,1253,7.468,2581,8.497,2596,9.559,2597,9.559,2598,9.678,2599,8.402]],["title/overview.html",[2600,5.657]],["body/overview.html",[2,0.516,12,0.007,24,0.003,25,0.003,51,7.149,52,0.742,53,1.393,54,1.913,55,1.913,56,5.629,57,4.171,58,4.171,59,4.748,60,3.25,61,4.171,62,3.25,63,5.156,64,4.748,65,5.144,66,4.748,67,4.963,68,3.25,69,5.65,70,4.171,71,4.171,72,3.25,73,3.779,74,4.963,75,5.144,76,3.25,77,4.748,78,4.577,79,1.459,80,0.885,81,0.864,201,0.598,243,3.818,252,2.927,256,4.302,294,1.913,295,1.913,297,1.913,298,3.25,299,3.25,300,3.25,301,3.25,302,3.085,320,0.671,406,1.16,445,3.085,461,1.913,462,1.913,545,3.818,552,1.913,553,1.913,554,4.42,567,3.085,595,1.913,597,1.913,800,4.748,803,3.085,892,3.085,931,1.756,944,1.913,945,1.913,946,1.913,947,1.913,948,4.508,957,4.302,995,1.913,996,1.913,997,1.913,1017,3.085,1023,1.913,1025,1.913,1079,4.49,1080,1.913,1081,1.913,1082,1.913,1083,4.508,1155,3.085,1161,1.913,1162,1.913,1259,1.913,1260,1.913,1338,1.913,1339,1.913,1340,1.913,1473,1.638,1521,2.944,1546,3.25,1562,1.913,1563,1.913,1565,3.085,1764,3.085,1768,2.944,1772,1.913,1773,1.913,1809,1.913,1810,1.913,1872,4.508,1884,1.913,1885,1.913,1886,1.913,1930,1.913,1931,1.913,1932,1.913,1972,1.913,2010,3.085,2023,1.913,2025,1.913,2105,3.085,2114,1.913,2116,1.913,2293,1.913,2295,1.913,2296,1.913,2600,1.913,2601,2.152,2602,2.152,2603,2.152,2604,2.152]],["title/miscellaneous/variables.html",[2520,2.631,2605,4.97]],["body/miscellaneous/variables.html",[8,0.297,11,0.502,12,0.007,13,1.431,23,1.137,24,0.005,25,0.005,26,3.205,29,4.183,30,4.183,31,2.127,32,4.183,34,1.692,90,0.682,165,4.183,268,1.067,334,2.135,339,4.729,341,5.98,362,2.817,901,3.376,989,5.71,1473,4.889,1527,4.889,1583,3.838,1584,4.183,1612,5.566,1613,5.24,1826,3.838,1835,3.581,2232,3.838,2233,3.838,2234,3.838,2235,3.838,2237,3.838,2391,4.183,2393,5.71,2404,4.183,2407,4.183,2408,5.71,2409,4.183,2410,5.71,2520,3.205,2605,4.183,2606,4.705,2607,4.705,2608,4.705,2609,4.705,2610,4.705,2611,4.705,2612,4.705,2613,4.705,2614,4.705,2615,4.705,2616,4.705,2617,4.705,2618,4.705,2619,4.705,2620,4.705,2621,4.705,2622,4.705,2623,4.705,2624,4.705,2625,4.705]]],"invertedIndex":[["",{"_index":12,"title":{},"body":{"classes/AddCreditCardDto.html":{},"classes/Address.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"interfaces/BookProperties.html":{},"interfaces/CarProperties.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"classes/Category.html":{},"classes/CategoryNotFoundException.html":{},"controllers/ChargeController.html":{},"modules/ChargeModule.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/CheckVerificationCodeDto.html":{},"classes/Comment.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostInput.html":{},"classes/CreateProductCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateSubscriberDto.html":{},"classes/CreateUserDto.html":{},"controllers/CreditCardsController.html":{},"modules/CreditCardsModule.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"modules/DatabaseModule.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullInterceptor.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/FindOneParams.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthenticationModule.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/GraphqlJwtAuthGuard.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/Log.html":{},"classes/LogInDto.html":{},"modules/LoggerModule.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"classes/Message.html":{},"classes/ObjectWithIdDto.html":{},"controllers/OptimizeController.html":{},"modules/OptimizeModule.html":{},"classes/PaginationParams.html":{},"classes/Post.html":{},"classes/Post-1.html":{},"interfaces/PostCountResult.html":{},"classes/PostNotFoundException.html":{},"interfaces/PostSearchBody.html":{},"interfaces/PostSearchResult.html":{},"controllers/PostsController.html":{},"injectables/PostsLoaders.html":{},"modules/PostsModule.html":{},"classes/PostsResolver.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"classes/Product.html":{},"controllers/ProductCategoriesController.html":{},"modules/ProductCategoriesModule.html":{},"injectables/ProductCategoriesService.html":{},"classes/ProductCategory.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"modules/PubSubModule.html":{},"classes/PublicFile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithRawBody.html":{},"interfaces/RequestWithUser.html":{},"modules/SearchModule.html":{},"classes/SetDefaultCreditCardDto.html":{},"controllers/SmsController.html":{},"modules/SmsModule.html":{},"injectables/SmsService.html":{},"classes/StripeEvent.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"modules/StripeWebhookModule.html":{},"injectables/StripeWebhookService.html":{},"interfaces/Subscriber.html":{},"controllers/SubscribersController.html":{},"modules/SubscribersModule.html":{},"interfaces/SubscribersService.html":{},"controllers/SubscriptionsController.html":{},"modules/SubscriptionsModule.html":{},"injectables/SubscriptionsService.html":{},"classes/Timestamp.html":{},"interfaces/TokenPayload.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/VerificationTokenPayload.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":1643,"title":{},"body":{"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["0.1.13",{"_index":2512,"title":{},"body":{"dependencies.html":{}}}],["0.12.2",{"_index":2489,"title":{},"body":{"dependencies.html":{}}}],["0.2.38",{"_index":2518,"title":{},"body":{"dependencies.html":{}}}],["0.3.1",{"_index":2488,"title":{},"body":{"dependencies.html":{}}}],["0.4.0",{"_index":2449,"title":{},"body":{"dependencies.html":{}}}],["0.4.1",{"_index":2429,"title":{},"body":{"dependencies.html":{}}}],["0.4.34",{"_index":2439,"title":{},"body":{"dependencies.html":{}}}],["0.5",{"_index":1257,"title":{},"body":{"controllers/HealthController.html":{}}}],["0.5.5",{"_index":2427,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":2478,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":2390,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":2403,"title":{},"body":{"coverage.html":{}}}],["0/17",{"_index":2405,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":2389,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":2387,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":2394,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":2388,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":2385,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":2397,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":2386,"title":{},"body":{"coverage.html":{}}}],["08",{"_index":1971,"title":{},"body":{"injectables/StripeService.html":{}}}],["1",{"_index":1473,"title":{"classes/Post-1.html":{},"classes/User-1.html":{}},"body":{"overview.html":{},"miscellaneous/variables.html":{}}}],["1.0.0",{"_index":2506,"title":{},"body":{"dependencies.html":{}}}],["1.0.1",{"_index":2431,"title":{},"body":{"dependencies.html":{}}}],["1.0.33",{"_index":2468,"title":{},"body":{"dependencies.html":{}}}],["1.1.15",{"_index":2419,"title":{},"body":{"dependencies.html":{}}}],["1.24.4",{"_index":2498,"title":{},"body":{"dependencies.html":{}}}],["1.3.7",{"_index":2424,"title":{},"body":{"dependencies.html":{}}}],["1.4.0",{"_index":2470,"title":{},"body":{"dependencies.html":{}}}],["1.4.2",{"_index":2451,"title":{},"body":{"dependencies.html":{}}}],["1.4.3",{"_index":2461,"title":{},"body":{"dependencies.html":{}}}],["1.4.4",{"_index":2509,"title":{},"body":{"dependencies.html":{}}}],["1.4.5",{"_index":2490,"title":{},"body":{"dependencies.html":{}}}],["1.7.2",{"_index":2453,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":358,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/UsersService.html":{}}}],["1024",{"_index":1244,"title":{},"body":{"controllers/HealthController.html":{}}}],["11",{"_index":2604,"title":{},"body":{"overview.html":{}}}],["12.0.1",{"_index":2504,"title":{},"body":{"dependencies.html":{}}}],["120",{"_index":1581,"title":{},"body":{"modules/PostsModule.html":{}}}],["15.5.0",{"_index":2492,"title":{},"body":{"dependencies.html":{}}}],["17.1.0",{"_index":2455,"title":{},"body":{"dependencies.html":{}}}],["17.1.1",{"_index":2428,"title":{},"body":{"dependencies.html":{}}}],["19",{"_index":2601,"title":{},"body":{"overview.html":{}}}],["2.0.0",{"_index":2487,"title":{},"body":{"dependencies.html":{}}}],["2.0.9",{"_index":2466,"title":{},"body":{"dependencies.html":{}}}],["2.1.12",{"_index":2472,"title":{},"body":{"dependencies.html":{}}}],["2.10.3",{"_index":2447,"title":{},"body":{"dependencies.html":{}}}],["2.19.2",{"_index":2482,"title":{},"body":{"dependencies.html":{}}}],["2.3.1",{"_index":2494,"title":{},"body":{"dependencies.html":{}}}],["2.7.0",{"_index":2441,"title":{},"body":{"dependencies.html":{}}}],["2.724.0",{"_index":2483,"title":{},"body":{"dependencies.html":{}}}],["2020",{"_index":1970,"title":{},"body":{"injectables/StripeService.html":{}}}],["23505",{"_index":2526,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["27",{"_index":1972,"title":{},"body":{"injectables/StripeService.html":{},"overview.html":{}}}],["2fa",{"_index":2173,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["3.0.0",{"_index":2443,"title":{},"body":{"dependencies.html":{}}}],["3.0.2",{"_index":2514,"title":{},"body":{"dependencies.html":{}}}],["3.0.3",{"_index":2467,"title":{},"body":{"dependencies.html":{}}}],["3.15.1",{"_index":2445,"title":{},"body":{"dependencies.html":{}}}],["3.2.1",{"_index":2476,"title":{},"body":{"dependencies.html":{}}}],["3.22.4",{"_index":2485,"title":{},"body":{"dependencies.html":{}}}],["3.3.0",{"_index":2481,"title":{},"body":{"dependencies.html":{}}}],["3.4.0",{"_index":2486,"title":{},"body":{"dependencies.html":{}}}],["3.66.0",{"_index":2517,"title":{},"body":{"dependencies.html":{}}}],["300",{"_index":1243,"title":{},"body":{"controllers/HealthController.html":{}}}],["300mb",{"_index":1239,"title":{},"body":{"controllers/HealthController.html":{}}}],["34",{"_index":2602,"title":{},"body":{"overview.html":{}}}],["3600",{"_index":2616,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4.0.0",{"_index":2505,"title":{},"body":{"dependencies.html":{}}}],["4.0.1",{"_index":2484,"title":{},"body":{"dependencies.html":{}}}],["4.11.0",{"_index":2493,"title":{},"body":{"dependencies.html":{}}}],["4.19.3",{"_index":2459,"title":{},"body":{"dependencies.html":{}}}],["4/7",{"_index":2396,"title":{},"body":{"coverage.html":{}}}],["400",{"_index":1358,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["404",{"_index":1209,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["48",{"_index":2603,"title":{},"body":{"overview.html":{}}}],["48123123123",{"_index":2622,"title":{},"body":{"miscellaneous/variables.html":{}}}],["50",{"_index":1252,"title":{},"body":{"controllers/HealthController.html":{}}}],["500",{"_index":1356,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["57",{"_index":2395,"title":{},"body":{"coverage.html":{}}}],["6.4.0",{"_index":2463,"title":{},"body":{"dependencies.html":{}}}],["6.4.17",{"_index":2503,"title":{},"body":{"dependencies.html":{}}}],["7.0.0",{"_index":2457,"title":{},"body":{"dependencies.html":{}}}],["7.0.1",{"_index":2500,"title":{},"body":{"dependencies.html":{}}}],["7.0.2",{"_index":2496,"title":{},"body":{"dependencies.html":{}}}],["7.11.0",{"_index":2434,"title":{},"body":{"dependencies.html":{}}}],["7.3.1",{"_index":2515,"title":{},"body":{"dependencies.html":{}}}],["7.9.0",{"_index":2421,"title":{},"body":{"dependencies.html":{}}}],["8.0.0",{"_index":2433,"title":{},"body":{"dependencies.html":{}}}],["8.0.1",{"_index":2435,"title":{},"body":{"dependencies.html":{}}}],["8.0.2",{"_index":2436,"title":{},"body":{"dependencies.html":{}}}],["8.0.9",{"_index":2430,"title":{},"body":{"dependencies.html":{}}}],["8.154.0",{"_index":2516,"title":{},"body":{"dependencies.html":{}}}],["8.2.0",{"_index":2508,"title":{},"body":{"dependencies.html":{}}}],["8.3.0",{"_index":2519,"title":{},"body":{"dependencies.html":{}}}],["82.0.0",{"_index":2491,"title":{},"body":{"dependencies.html":{}}}],["9.0.2",{"_index":2502,"title":{},"body":{"dependencies.html":{}}}],["9]\\d{1,14",{"_index":1840,"title":{},"body":{"classes/RegisterDto.html":{}}}],["__dirname",{"_index":889,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["access",{"_index":1726,"title":{},"body":{"injectables/PostsService.html":{}}}],["access_token",{"_index":1194,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["accesstokencookie",{"_index":273,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["accountsid",{"_index":1904,"title":{},"body":{"injectables/SmsService.html":{}}}],["addavatar",{"_index":2272,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["addavatar(@req",{"_index":2286,"title":{},"body":{"controllers/UsersController.html":{}}}],["addavatar(request",{"_index":2274,"title":{},"body":{"controllers/UsersController.html":{}}}],["addavatar(userid",{"_index":2316,"title":{},"body":{"injectables/UsersService.html":{}}}],["addcreditcard",{"_index":770,"title":{},"body":{"controllers/CreditCardsController.html":{}}}],["addcreditcard(@body",{"_index":788,"title":{},"body":{"controllers/CreditCardsController.html":{}}}],["addcreditcard(creditcard",{"_index":773,"title":{},"body":{"controllers/CreditCardsController.html":{}}}],["addcreditcarddto",{"_index":1,"title":{"classes/AddCreditCardDto.html":{}},"body":{"classes/AddCreditCardDto.html":{},"controllers/CreditCardsController.html":{},"coverage.html":{}}}],["address",{"_index":26,"title":{"classes/Address.html":{}},"body":{"classes/Address.html":{},"injectables/EmailConfirmationService.html":{},"classes/User.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["address.entity",{"_index":2264,"title":{},"body":{"classes/User.html":{}}}],["addsubscriber",{"_index":2087,"title":{},"body":{"interfaces/SubscribersService.html":{}}}],["addsubscriber(subscriber",{"_index":2089,"title":{},"body":{"interfaces/SubscribersService.html":{}}}],["adm",{"_index":2474,"title":{},"body":{"dependencies.html":{}}}],["age=${this.configservice.get('jwt_access_token_expiration_time",{"_index":387,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["age=${this.configservice.get('jwt_refresh_token_expiration_time",{"_index":391,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["age=0",{"_index":392,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["allocated",{"_index":1246,"title":{},"body":{"controllers/HealthController.html":{}}}],["already",{"_index":371,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/EmailConfirmationService.html":{},"controllers/SmsController.html":{},"injectables/StripeWebhookService.html":{},"injectables/SubscriptionsService.html":{}}}],["amazing",{"_index":2582,"title":{},"body":{"index.html":{}}}],["amount",{"_index":686,"title":{},"body":{"classes/CreateChargeDto.html":{},"injectables/StripeService.html":{}}}],["amqp",{"_index":2475,"title":{},"body":{"dependencies.html":{}}}],["amqplib",{"_index":2477,"title":{},"body":{"dependencies.html":{}}}],["anyfilesinterceptor",{"_index":1399,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["apiversion",{"_index":1969,"title":{},"body":{"injectables/StripeService.html":{}}}],["apollo",{"_index":2479,"title":{},"body":{"dependencies.html":{}}}],["app",{"_index":2561,"title":{},"body":{"index.html":{}}}],["application",{"_index":977,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["applications",{"_index":2554,"title":{},"body":{"index.html":{}}}],["apply(logsmiddleware",{"_index":203,"title":{},"body":{"modules/AppModule.html":{}}}],["appmodule",{"_index":51,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["approved",{"_index":1920,"title":{},"body":{"injectables/SmsService.html":{}}}],["args",{"_index":1598,"title":{},"body":{"classes/PostsResolver.html":{}}}],["args('input",{"_index":1625,"title":{},"body":{"classes/PostsResolver.html":{}}}],["array",{"_index":1458,"title":{},"body":{"classes/Post.html":{},"interfaces/PostSearchResult.html":{}}}],["asc",{"_index":1668,"title":{},"body":{"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{}}}],["async",{"_index":138,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/ChargeController.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"controllers/CommentsController.html":{},"classes/CreateCommentHandler.html":{},"controllers/CreditCardsController.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"controllers/EmailConfirmationController.html":{},"injectables/EmailConfirmationService.html":{},"controllers/EmailSchedulingController.html":{},"injectables/FilesService.html":{},"classes/GetCommentsHandler.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsService.html":{},"controllers/OptimizeController.html":{},"controllers/PostsController.html":{},"classes/PostsResolver.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"controllers/ProductCategoriesController.html":{},"injectables/ProductCategoriesService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"modules/SearchModule.html":{},"controllers/SmsController.html":{},"injectables/SmsService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/StripeWebhookService.html":{},"controllers/SubscribersController.html":{},"controllers/SubscriptionsController.html":{},"injectables/SubscriptionsService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["attachcreditcard",{"_index":1937,"title":{},"body":{"injectables/StripeService.html":{}}}],["attachcreditcard(paymentmethodid",{"_index":1945,"title":{},"body":{"injectables/StripeService.html":{}}}],["auth",{"_index":1058,"title":{},"body":{"injectables/EmailService.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/SearchModule.html":{}}}],["auth.guard",{"_index":1605,"title":{},"body":{"classes/PostsResolver.html":{}}}],["auth.guard.ts",{"_index":1213,"title":{},"body":{"injectables/GraphqlJwtAuthGuard.html":{},"coverage.html":{}}}],["auth.guard.ts:7",{"_index":1216,"title":{},"body":{"injectables/GraphqlJwtAuthGuard.html":{}}}],["auth.oauth2client",{"_index":1183,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authenticate",{"_index":210,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["authenticate(@body",{"_index":1159,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["authenticate(@req",{"_index":288,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["authenticate(request",{"_index":215,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["authenticate(token",{"_index":1173,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authenticate(tokendata",{"_index":1150,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["authentication",{"_index":209,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/ChatService.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["authentication.controller",{"_index":306,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["authentication.guard",{"_index":251,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/CategoriesController.html":{},"controllers/ChargeController.html":{},"controllers/CommentsController.html":{},"controllers/CreditCardsController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/EmailSchedulingController.html":{},"controllers/ProductCategoriesController.html":{},"controllers/ProductsController.html":{},"controllers/SmsController.html":{},"controllers/SubscribersController.html":{},"controllers/SubscriptionsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{}}}],["authentication.guard.ts",{"_index":1278,"title":{},"body":{"injectables/JwtAuthenticationGuard.html":{},"coverage.html":{}}}],["authentication.service",{"_index":244,"title":{},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/LocalStrategy.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["authentication/authentication.module",{"_index":102,"title":{},"body":{"modules/AppModule.html":{},"modules/ChatModule.html":{},"modules/GoogleAuthenticationModule.html":{}}}],["authentication/authentication.service",{"_index":614,"title":{},"body":{"injectables/ChatService.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["authentication/graphql",{"_index":1604,"title":{},"body":{"classes/PostsResolver.html":{}}}],["authentication/jwt",{"_index":449,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/ChargeController.html":{},"controllers/CommentsController.html":{},"controllers/CreditCardsController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/EmailSchedulingController.html":{},"controllers/PostsController.html":{},"controllers/ProductCategoriesController.html":{},"controllers/ProductsController.html":{},"controllers/SmsController.html":{},"controllers/SubscribersController.html":{},"controllers/SubscriptionsController.html":{},"controllers/UsersController.html":{}}}],["authentication/requestwithuser.interface",{"_index":544,"title":{},"body":{"controllers/ChargeController.html":{},"controllers/CommentsController.html":{},"controllers/CreditCardsController.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"controllers/PostsController.html":{},"classes/PostsResolver.html":{},"controllers/SmsController.html":{},"controllers/SubscriptionsController.html":{},"controllers/UsersController.html":{}}}],["authentication=${token",{"_index":384,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["authenticationcontroller",{"_index":206,"title":{"controllers/AuthenticationController.html":{}},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"coverage.html":{}}}],["authenticationmodule",{"_index":56,"title":{"modules/AuthenticationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/ChatModule.html":{},"modules/GoogleAuthenticationModule.html":{},"modules.html":{},"overview.html":{}}}],["authenticationservice",{"_index":243,"title":{"injectables/AuthenticationService.html":{}},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/ChatService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/LocalStrategy.html":{},"controllers/TwoFactorAuthenticationController.html":{},"coverage.html":{},"overview.html":{}}}],["authenticationtoken",{"_index":624,"title":{},"body":{"injectables/ChatService.html":{}}}],["authenticator",{"_index":2208,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["authenticator.generatesecret",{"_index":2212,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["authenticator.keyuri(user.email",{"_index":2213,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["authenticator.verify",{"_index":2216,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["authguard",{"_index":1217,"title":{},"body":{"injectables/GraphqlJwtAuthGuard.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/LocalAuthenticationGuard.html":{}}}],["authguard('jwt",{"_index":1219,"title":{},"body":{"injectables/GraphqlJwtAuthGuard.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtTwoFactorGuard.html":{}}}],["authguard('local",{"_index":1314,"title":{},"body":{"injectables/LocalAuthenticationGuard.html":{}}}],["author",{"_index":588,"title":{},"body":{"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"classes/Comment.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentHandler.html":{},"classes/Message.html":{},"classes/Post.html":{},"classes/Post-1.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"index.html":{}}}],["author.posts",{"_index":641,"title":{},"body":{"classes/Comment.html":{},"classes/Post.html":{}}}],["authorid",{"_index":1442,"title":{},"body":{"classes/Post.html":{},"classes/Post-1.html":{},"interfaces/PostSearchBody.html":{},"injectables/PostsSearchService.html":{}}}],["authorids",{"_index":1551,"title":{},"body":{"injectables/PostsLoaders.html":{}}}],["authorids.map(authorid",{"_index":1556,"title":{},"body":{"injectables/PostsLoaders.html":{}}}],["authors",{"_index":408,"title":{},"body":{"interfaces/BookProperties.html":{}}}],["authtoken",{"_index":1906,"title":{},"body":{"injectables/SmsService.html":{}}}],["autoschemafile",{"_index":148,"title":{},"body":{"modules/AppModule.html":{}}}],["available",{"_index":1253,"title":{},"body":{"controllers/HealthController.html":{},"modules.html":{}}}],["avatar",{"_index":2230,"title":{},"body":{"classes/User.html":{},"injectables/UsersService.html":{}}}],["await",{"_index":265,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/CategoriesService.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"classes/CreateCommentHandler.html":{},"controllers/CreditCardsController.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"controllers/EmailConfirmationController.html":{},"injectables/EmailConfirmationService.html":{},"injectables/FilesService.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LogsService.html":{},"controllers/OptimizeController.html":{},"injectables/PostsLoaders.html":{},"classes/PostsResolver.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"injectables/ProductCategoriesService.html":{},"injectables/ProductsService.html":{},"controllers/SmsController.html":{},"injectables/SmsService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/StripeWebhookService.html":{},"injectables/SubscriptionsService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"injectables/UsersService.html":{}}}],["aws",{"_index":1107,"title":{},"body":{"injectables/FilesService.html":{},"dependencies.html":{}}}],["aws_access_key_id",{"_index":169,"title":{},"body":{"modules/AppModule.html":{}}}],["aws_public_bucket_name",{"_index":171,"title":{},"body":{"modules/AppModule.html":{}}}],["aws_region",{"_index":168,"title":{},"body":{"modules/AppModule.html":{}}}],["aws_secret_access_key",{"_index":170,"title":{},"body":{"modules/AppModule.html":{}}}],["backers",{"_index":2583,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":967,"title":{},"body":{"injectables/EmailConfirmationService.html":{},"controllers/SmsController.html":{},"injectables/SmsService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/StripeWebhookService.html":{},"injectables/SubscriptionsService.html":{}}}],["badrequestexception('bad",{"_index":994,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["badrequestexception('credit",{"_index":1995,"title":{},"body":{"injectables/StripeService.html":{}}}],["badrequestexception('customer",{"_index":2129,"title":{},"body":{"injectables/SubscriptionsService.html":{}}}],["badrequestexception('email",{"_index":984,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["badrequestexception('missing",{"_index":2014,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["badrequestexception('phone",{"_index":1878,"title":{},"body":{"controllers/SmsController.html":{}}}],["badrequestexception('this",{"_index":2044,"title":{},"body":{"injectables/StripeWebhookService.html":{}}}],["badrequestexception('wrong",{"_index":1921,"title":{},"body":{"injectables/SmsService.html":{},"injectables/StripeService.html":{}}}],["batchauthors",{"_index":1548,"title":{},"body":{"injectables/PostsLoaders.html":{}}}],["bcrypt",{"_index":352,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["bcrypt.compare",{"_index":400,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/UsersService.html":{}}}],["bcrypt.hash(refreshtoken",{"_index":2377,"title":{},"body":{"injectables/UsersService.html":{}}}],["bcrypt.hash(registrationdata.password",{"_index":357,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["body",{"_index":236,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/CategoriesController.html":{},"controllers/ChargeController.html":{},"controllers/CommentsController.html":{},"controllers/CreditCardsController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/EmailSchedulingController.html":{},"injectables/FilesService.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/PostsController.html":{},"injectables/PostsSearchService.html":{},"controllers/ProductCategoriesController.html":{},"controllers/ProductsController.html":{},"controllers/SmsController.html":{},"injectables/SmsService.html":{},"controllers/SubscribersController.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["body.count",{"_index":1657,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["body.hits.hits",{"_index":1670,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["body.hits.total.value",{"_index":1669,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["bookproperties",{"_index":405,"title":{"interfaces/BookProperties.html":{}},"body":{"interfaces/BookProperties.html":{},"classes/Product.html":{},"coverage.html":{}}}],["bool",{"_index":1662,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["boolean",{"_index":938,"title":{},"body":{"guards/EmailConfirmationGuard.html":{},"interfaces/TokenPayload.html":{},"classes/User.html":{},"miscellaneous/functions.html":{}}}],["boolean(configservice.get('graphql_playground",{"_index":147,"title":{},"body":{"modules/AppModule.html":{}}}],["bootstrap",{"_index":2400,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["brand",{"_index":412,"title":{},"body":{"interfaces/CarProperties.html":{}}}],["browse",{"_index":2598,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":2596,"title":{},"body":{"modules.html":{}}}],["bucket",{"_index":1114,"title":{},"body":{"injectables/FilesService.html":{}}}],["buffer",{"_index":1102,"title":{},"body":{"injectables/FilesService.html":{},"interfaces/RequestWithRawBody.html":{},"injectables/StripeService.html":{},"injectables/UsersService.html":{}}}],["buffer.from(job.returnvalue",{"_index":1418,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["building",{"_index":2550,"title":{},"body":{"index.html":{}}}],["bull",{"_index":1396,"title":{},"body":{"controllers/OptimizeController.html":{},"dependencies.html":{}}}],["bullmodule",{"_index":122,"title":{},"body":{"modules/AppModule.html":{},"modules/OptimizeModule.html":{}}}],["bullmodule.forrootasync",{"_index":136,"title":{},"body":{"modules/AppModule.html":{}}}],["bullmodule.registerqueue",{"_index":1423,"title":{},"body":{"modules/OptimizeModule.html":{}}}],["cache",{"_index":1568,"title":{},"body":{"modules/PostsModule.html":{},"injectables/PostsService.html":{},"dependencies.html":{}}}],["cache_key_metadata",{"_index":1271,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["cache_manager",{"_index":1705,"title":{},"body":{"injectables/PostsService.html":{}}}],["cacheinterceptor",{"_index":1267,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["cachekey",{"_index":1272,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{},"controllers/PostsController.html":{}}}],["cachekey(get_posts_cache_key",{"_index":1532,"title":{},"body":{"controllers/PostsController.html":{}}}],["cachemanager",{"_index":1686,"title":{},"body":{"injectables/PostsService.html":{}}}],["cachemodule",{"_index":1571,"title":{},"body":{"modules/PostsModule.html":{}}}],["cachemodule.registerasync",{"_index":1578,"title":{},"body":{"modules/PostsModule.html":{}}}],["cachettl",{"_index":1520,"title":{},"body":{"controllers/PostsController.html":{}}}],["cachettl(120",{"_index":1533,"title":{},"body":{"controllers/PostsController.html":{}}}],["callhandler",{"_index":1068,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["canactivate",{"_index":934,"title":{},"body":{"guards/EmailConfirmationGuard.html":{}}}],["canactivate(context",{"_index":935,"title":{},"body":{"guards/EmailConfirmationGuard.html":{}}}],["card",{"_index":1989,"title":{},"body":{"injectables/StripeService.html":{}}}],["cards",{"_index":769,"title":{},"body":{"controllers/CreditCardsController.html":{}}}],["cards/creditcards.controller.ts",{"_index":768,"title":{},"body":{"controllers/CreditCardsController.html":{},"coverage.html":{}}}],["cards/creditcards.controller.ts:17",{"_index":774,"title":{},"body":{"controllers/CreditCardsController.html":{}}}],["cards/creditcards.controller.ts:24",{"_index":782,"title":{},"body":{"controllers/CreditCardsController.html":{}}}],["cards/creditcards.controller.ts:31",{"_index":778,"title":{},"body":{"controllers/CreditCardsController.html":{}}}],["cards/creditcards.module",{"_index":126,"title":{},"body":{"modules/AppModule.html":{}}}],["cards/creditcards.module.ts",{"_index":798,"title":{},"body":{"modules/CreditCardsModule.html":{}}}],["cards/dto/addcreditcarddto.ts",{"_index":7,"title":{},"body":{"classes/AddCreditCardDto.html":{},"coverage.html":{}}}],["cards/dto/addcreditcarddto.ts:6",{"_index":17,"title":{},"body":{"classes/AddCreditCardDto.html":{}}}],["cards/dto/setdefaultcreditcard.dto.ts",{"_index":1855,"title":{},"body":{"classes/SetDefaultCreditCardDto.html":{},"coverage.html":{}}}],["cards/dto/setdefaultcreditcard.dto.ts:6",{"_index":1856,"title":{},"body":{"classes/SetDefaultCreditCardDto.html":{}}}],["carproperties",{"_index":410,"title":{"interfaces/CarProperties.html":{}},"body":{"interfaces/CarProperties.html":{},"classes/Product.html":{},"coverage.html":{}}}],["cascade",{"_index":2240,"title":{},"body":{"classes/User.html":{}}}],["case",{"_index":2615,"title":{},"body":{"miscellaneous/variables.html":{}}}],["catch",{"_index":364,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/DatabaseLogger.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"injectables/EmailConfirmationService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/StripeService.html":{},"injectables/StripeWebhookService.html":{},"classes/Timestamp.html":{},"injectables/UsersService.html":{}}}],["categories",{"_index":419,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/Post.html":{},"controllers/ProductCategoriesController.html":{}}}],["categories.controller",{"_index":464,"title":{},"body":{"modules/CategoriesModule.html":{}}}],["categories.service",{"_index":446,"title":{},"body":{"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{}}}],["categories/categories.module",{"_index":104,"title":{},"body":{"modules/AppModule.html":{}}}],["categories/category.entity",{"_index":1466,"title":{},"body":{"classes/Post.html":{}}}],["categoriescontroller",{"_index":417,"title":{"controllers/CategoriesController.html":{}},"body":{"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"coverage.html":{}}}],["categoriesmodule",{"_index":57,"title":{"modules/CategoriesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CategoriesModule.html":{},"modules.html":{},"overview.html":{}}}],["categoriesrepository",{"_index":503,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["categoriesservice",{"_index":445,"title":{"injectables/CategoriesService.html":{}},"body":{"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"coverage.html":{},"overview.html":{}}}],["categoriesservice.getcategorybyid(1",{"_index":491,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["category",{"_index":429,"title":{"classes/Category.html":{}},"body":{"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"classes/Category.html":{},"classes/CreateProductDto.html":{},"classes/Post.html":{},"classes/Product.html":{},"injectables/ProductCategoriesService.html":{},"coverage.html":{}}}],["category.entity",{"_index":465,"title":{},"body":{"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{}}}],["category.posts",{"_index":1471,"title":{},"body":{"classes/Post.html":{}}}],["category.products",{"_index":1756,"title":{},"body":{"classes/Product.html":{}}}],["categorynotfoundexception",{"_index":499,"title":{"classes/CategoryNotFoundException.html":{}},"body":{"injectables/CategoriesService.html":{},"classes/CategoryNotFoundException.html":{},"coverage.html":{}}}],["categorynotfoundexception(id",{"_index":508,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["channel",{"_index":1915,"title":{},"body":{"injectables/SmsService.html":{}}}],["charge",{"_index":538,"title":{},"body":{"controllers/ChargeController.html":{},"injectables/StripeService.html":{}}}],["charge(amount",{"_index":1948,"title":{},"body":{"injectables/StripeService.html":{}}}],["charge.controller",{"_index":557,"title":{},"body":{"modules/ChargeModule.html":{}}}],["charge.paymentmethodid",{"_index":550,"title":{},"body":{"controllers/ChargeController.html":{}}}],["charge/charge.module",{"_index":124,"title":{},"body":{"modules/AppModule.html":{}}}],["chargecontroller",{"_index":536,"title":{"controllers/ChargeController.html":{}},"body":{"controllers/ChargeController.html":{},"modules/ChargeModule.html":{},"coverage.html":{}}}],["chargemodule",{"_index":58,"title":{"modules/ChargeModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ChargeModule.html":{},"modules.html":{},"overview.html":{}}}],["chat.gateway",{"_index":599,"title":{},"body":{"modules/ChatModule.html":{}}}],["chat.service",{"_index":586,"title":{},"body":{"classes/ChatGateway.html":{},"modules/ChatModule.html":{}}}],["chat/chat.module",{"_index":113,"title":{},"body":{"modules/AppModule.html":{}}}],["chatgateway",{"_index":558,"title":{"classes/ChatGateway.html":{}},"body":{"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"coverage.html":{}}}],["chatmodule",{"_index":59,"title":{"modules/ChatModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ChatModule.html":{},"modules.html":{},"overview.html":{}}}],["chatservice",{"_index":567,"title":{"injectables/ChatService.html":{}},"body":{"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"coverage.html":{},"overview.html":{}}}],["check",{"_index":1226,"title":{},"body":{"controllers/HealthController.html":{}}}],["checkverificationcode",{"_index":1860,"title":{},"body":{"controllers/SmsController.html":{}}}],["checkverificationcode(@req",{"_index":1880,"title":{},"body":{"controllers/SmsController.html":{}}}],["checkverificationcode(request",{"_index":1862,"title":{},"body":{"controllers/SmsController.html":{}}}],["checkverificationcode.dto",{"_index":1874,"title":{},"body":{"controllers/SmsController.html":{}}}],["checkverificationcodedto",{"_index":628,"title":{"classes/CheckVerificationCodeDto.html":{}},"body":{"classes/CheckVerificationCodeDto.html":{},"controllers/SmsController.html":{},"coverage.html":{}}}],["chosen",{"_index":1990,"title":{},"body":{"injectables/StripeService.html":{}}}],["city",{"_index":29,"title":{},"body":{"classes/Address.html":{},"miscellaneous/variables.html":{}}}],["cityname",{"_index":2624,"title":{},"body":{"miscellaneous/variables.html":{}}}],["class",{"_index":0,"title":{"classes/AddCreditCardDto.html":{},"classes/Address.html":{},"classes/Category.html":{},"classes/CategoryNotFoundException.html":{},"classes/ChatGateway.html":{},"classes/CheckVerificationCodeDto.html":{},"classes/Comment.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostInput.html":{},"classes/CreateProductCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateSubscriberDto.html":{},"classes/CreateUserDto.html":{},"classes/DatabaseLogger.html":{},"classes/EmailScheduleDto.html":{},"classes/FindOneParams.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"classes/Log.html":{},"classes/LogInDto.html":{},"classes/Message.html":{},"classes/ObjectWithIdDto.html":{},"classes/PaginationParams.html":{},"classes/Post.html":{},"classes/Post-1.html":{},"classes/PostNotFoundException.html":{},"classes/PostsResolver.html":{},"classes/Product.html":{},"classes/ProductCategory.html":{},"classes/PublicFile.html":{},"classes/RegisterDto.html":{},"classes/SetDefaultCreditCardDto.html":{},"classes/StripeEvent.html":{},"classes/Timestamp.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"classes/User.html":{},"classes/User-1.html":{}},"body":{"classes/AddCreditCardDto.html":{},"classes/Address.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"classes/Category.html":{},"classes/CategoryNotFoundException.html":{},"controllers/ChargeController.html":{},"modules/ChargeModule.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/CheckVerificationCodeDto.html":{},"classes/Comment.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostInput.html":{},"classes/CreateProductCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateSubscriberDto.html":{},"classes/CreateUserDto.html":{},"controllers/CreditCardsController.html":{},"modules/CreditCardsModule.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"modules/DatabaseModule.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullInterceptor.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/FindOneParams.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthenticationModule.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/GraphqlJwtAuthGuard.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/Log.html":{},"classes/LogInDto.html":{},"modules/LoggerModule.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"classes/Message.html":{},"classes/ObjectWithIdDto.html":{},"controllers/OptimizeController.html":{},"modules/OptimizeModule.html":{},"classes/PaginationParams.html":{},"classes/Post.html":{},"classes/Post-1.html":{},"classes/PostNotFoundException.html":{},"controllers/PostsController.html":{},"injectables/PostsLoaders.html":{},"modules/PostsModule.html":{},"classes/PostsResolver.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"classes/Product.html":{},"controllers/ProductCategoriesController.html":{},"modules/ProductCategoriesModule.html":{},"injectables/ProductCategoriesService.html":{},"classes/ProductCategory.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"modules/PubSubModule.html":{},"classes/PublicFile.html":{},"classes/RegisterDto.html":{},"modules/SearchModule.html":{},"classes/SetDefaultCreditCardDto.html":{},"controllers/SmsController.html":{},"modules/SmsModule.html":{},"injectables/SmsService.html":{},"classes/StripeEvent.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"modules/StripeWebhookModule.html":{},"injectables/StripeWebhookService.html":{},"controllers/SubscribersController.html":{},"modules/SubscribersModule.html":{},"controllers/SubscriptionsController.html":{},"modules/SubscriptionsModule.html":{},"injectables/SubscriptionsService.html":{},"classes/Timestamp.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AddCreditCardDto.html":{},"classes/Address.html":{},"classes/Category.html":{},"classes/CategoryNotFoundException.html":{},"classes/ChatGateway.html":{},"classes/CheckVerificationCodeDto.html":{},"classes/Comment.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostInput.html":{},"classes/CreateProductCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateSubscriberDto.html":{},"classes/CreateUserDto.html":{},"classes/DatabaseLogger.html":{},"classes/EmailScheduleDto.html":{},"classes/FindOneParams.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"classes/Log.html":{},"classes/LogInDto.html":{},"classes/Message.html":{},"classes/ObjectWithIdDto.html":{},"classes/PaginationParams.html":{},"classes/Post.html":{},"classes/Post-1.html":{},"classes/PostNotFoundException.html":{},"classes/PostsResolver.html":{},"classes/Product.html":{},"classes/ProductCategory.html":{},"classes/PublicFile.html":{},"classes/RegisterDto.html":{},"classes/SetDefaultCreditCardDto.html":{},"classes/StripeEvent.html":{},"classes/Timestamp.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"overview.html":{}}}],["classserializerinterceptor",{"_index":241,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/CategoriesController.html":{},"controllers/CommentsController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/PostsController.html":{},"controllers/ProductCategoriesController.html":{},"controllers/ProductsController.html":{},"controllers/SmsController.html":{},"controllers/SubscribersController.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["clearcache",{"_index":1682,"title":{},"body":{"injectables/PostsService.html":{}}}],["click",{"_index":978,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["client",{"_index":2070,"title":{},"body":{"controllers/SubscribersController.html":{}}}],["clientgrpc",{"_index":2064,"title":{},"body":{"controllers/SubscribersController.html":{}}}],["clientid",{"_index":1185,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["clientproxyfactory",{"_index":2077,"title":{},"body":{"modules/SubscribersModule.html":{}}}],["clientproxyfactory.create",{"_index":2080,"title":{},"body":{"modules/SubscribersModule.html":{}}}],["clientsecret",{"_index":1187,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["cluster_appmodule",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authenticationmodule",{"_index":294,"title":{},"body":{"modules/AuthenticationModule.html":{},"overview.html":{}}}],["cluster_authenticationmodule_exports",{"_index":295,"title":{},"body":{"modules/AuthenticationModule.html":{},"overview.html":{}}}],["cluster_authenticationmodule_imports",{"_index":296,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["cluster_authenticationmodule_providers",{"_index":297,"title":{},"body":{"modules/AuthenticationModule.html":{},"overview.html":{}}}],["cluster_categoriesmodule",{"_index":461,"title":{},"body":{"modules/CategoriesModule.html":{},"overview.html":{}}}],["cluster_categoriesmodule_providers",{"_index":462,"title":{},"body":{"modules/CategoriesModule.html":{},"overview.html":{}}}],["cluster_chargemodule",{"_index":552,"title":{},"body":{"modules/ChargeModule.html":{},"overview.html":{}}}],["cluster_chargemodule_imports",{"_index":553,"title":{},"body":{"modules/ChargeModule.html":{},"overview.html":{}}}],["cluster_chatmodule",{"_index":595,"title":{},"body":{"modules/ChatModule.html":{},"overview.html":{}}}],["cluster_chatmodule_imports",{"_index":596,"title":{},"body":{"modules/ChatModule.html":{}}}],["cluster_chatmodule_providers",{"_index":597,"title":{},"body":{"modules/ChatModule.html":{},"overview.html":{}}}],["cluster_creditcardsmodule",{"_index":796,"title":{},"body":{"modules/CreditCardsModule.html":{}}}],["cluster_creditcardsmodule_imports",{"_index":797,"title":{},"body":{"modules/CreditCardsModule.html":{}}}],["cluster_emailconfirmationmodule",{"_index":944,"title":{},"body":{"modules/EmailConfirmationModule.html":{},"overview.html":{}}}],["cluster_emailconfirmationmodule_exports",{"_index":946,"title":{},"body":{"modules/EmailConfirmationModule.html":{},"overview.html":{}}}],["cluster_emailconfirmationmodule_imports",{"_index":947,"title":{},"body":{"modules/EmailConfirmationModule.html":{},"overview.html":{}}}],["cluster_emailconfirmationmodule_providers",{"_index":945,"title":{},"body":{"modules/EmailConfirmationModule.html":{},"overview.html":{}}}],["cluster_emailmodule",{"_index":995,"title":{},"body":{"modules/EmailModule.html":{},"overview.html":{}}}],["cluster_emailmodule_exports",{"_index":997,"title":{},"body":{"modules/EmailModule.html":{},"overview.html":{}}}],["cluster_emailmodule_providers",{"_index":996,"title":{},"body":{"modules/EmailModule.html":{},"overview.html":{}}}],["cluster_emailschedulingmodule",{"_index":1023,"title":{},"body":{"modules/EmailSchedulingModule.html":{},"overview.html":{}}}],["cluster_emailschedulingmodule_imports",{"_index":1024,"title":{},"body":{"modules/EmailSchedulingModule.html":{}}}],["cluster_emailschedulingmodule_providers",{"_index":1025,"title":{},"body":{"modules/EmailSchedulingModule.html":{},"overview.html":{}}}],["cluster_filesmodule",{"_index":1080,"title":{},"body":{"modules/FilesModule.html":{},"overview.html":{}}}],["cluster_filesmodule_exports",{"_index":1082,"title":{},"body":{"modules/FilesModule.html":{},"overview.html":{}}}],["cluster_filesmodule_providers",{"_index":1081,"title":{},"body":{"modules/FilesModule.html":{},"overview.html":{}}}],["cluster_googleauthenticationmodule",{"_index":1161,"title":{},"body":{"modules/GoogleAuthenticationModule.html":{},"overview.html":{}}}],["cluster_googleauthenticationmodule_imports",{"_index":1163,"title":{},"body":{"modules/GoogleAuthenticationModule.html":{}}}],["cluster_googleauthenticationmodule_providers",{"_index":1162,"title":{},"body":{"modules/GoogleAuthenticationModule.html":{},"overview.html":{}}}],["cluster_healthmodule",{"_index":1259,"title":{},"body":{"modules/HealthModule.html":{},"overview.html":{}}}],["cluster_healthmodule_imports",{"_index":1261,"title":{},"body":{"modules/HealthModule.html":{}}}],["cluster_healthmodule_providers",{"_index":1260,"title":{},"body":{"modules/HealthModule.html":{},"overview.html":{}}}],["cluster_loggermodule",{"_index":1338,"title":{},"body":{"modules/LoggerModule.html":{},"overview.html":{}}}],["cluster_loggermodule_exports",{"_index":1340,"title":{},"body":{"modules/LoggerModule.html":{},"overview.html":{}}}],["cluster_loggermodule_providers",{"_index":1339,"title":{},"body":{"modules/LoggerModule.html":{},"overview.html":{}}}],["cluster_postsmodule",{"_index":1562,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_imports",{"_index":1564,"title":{},"body":{"modules/PostsModule.html":{}}}],["cluster_postsmodule_providers",{"_index":1563,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_productcategoriesmodule",{"_index":1772,"title":{},"body":{"modules/ProductCategoriesModule.html":{},"overview.html":{}}}],["cluster_productcategoriesmodule_providers",{"_index":1773,"title":{},"body":{"modules/ProductCategoriesModule.html":{},"overview.html":{}}}],["cluster_productsmodule",{"_index":1809,"title":{},"body":{"modules/ProductsModule.html":{},"overview.html":{}}}],["cluster_productsmodule_providers",{"_index":1810,"title":{},"body":{"modules/ProductsModule.html":{},"overview.html":{}}}],["cluster_smsmodule",{"_index":1884,"title":{},"body":{"modules/SmsModule.html":{},"overview.html":{}}}],["cluster_smsmodule_exports",{"_index":1886,"title":{},"body":{"modules/SmsModule.html":{},"overview.html":{}}}],["cluster_smsmodule_imports",{"_index":1887,"title":{},"body":{"modules/SmsModule.html":{}}}],["cluster_smsmodule_providers",{"_index":1885,"title":{},"body":{"modules/SmsModule.html":{},"overview.html":{}}}],["cluster_stripemodule",{"_index":1930,"title":{},"body":{"modules/StripeModule.html":{},"overview.html":{}}}],["cluster_stripemodule_exports",{"_index":1932,"title":{},"body":{"modules/StripeModule.html":{},"overview.html":{}}}],["cluster_stripemodule_providers",{"_index":1931,"title":{},"body":{"modules/StripeModule.html":{},"overview.html":{}}}],["cluster_stripewebhookmodule",{"_index":2023,"title":{},"body":{"modules/StripeWebhookModule.html":{},"overview.html":{}}}],["cluster_stripewebhookmodule_imports",{"_index":2024,"title":{},"body":{"modules/StripeWebhookModule.html":{}}}],["cluster_stripewebhookmodule_providers",{"_index":2025,"title":{},"body":{"modules/StripeWebhookModule.html":{},"overview.html":{}}}],["cluster_subscriptionsmodule",{"_index":2114,"title":{},"body":{"modules/SubscriptionsModule.html":{},"overview.html":{}}}],["cluster_subscriptionsmodule_imports",{"_index":2115,"title":{},"body":{"modules/SubscriptionsModule.html":{}}}],["cluster_subscriptionsmodule_providers",{"_index":2116,"title":{},"body":{"modules/SubscriptionsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":2293,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":2296,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_imports",{"_index":2294,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_providers",{"_index":2295,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["code",{"_index":630,"title":{},"body":{"classes/CheckVerificationCodeDto.html":{},"controllers/SmsController.html":{},"injectables/SmsService.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["code')@useguards(jwtauthenticationguard",{"_index":1866,"title":{},"body":{"controllers/SmsController.html":{}}}],["column",{"_index":35,"title":{},"body":{"classes/Address.html":{},"classes/Category.html":{},"classes/Comment.html":{},"classes/Log.html":{},"classes/Message.html":{},"classes/Post.html":{},"classes/Product.html":{},"classes/ProductCategory.html":{},"classes/PublicFile.html":{},"classes/User.html":{}}}],["column('text",{"_index":1457,"title":{},"body":{"classes/Post.html":{}}}],["column({default",{"_index":2250,"title":{},"body":{"classes/User.html":{}}}],["column({nullable",{"_index":1450,"title":{},"body":{"classes/Post.html":{},"classes/User.html":{}}}],["column({type",{"_index":1460,"title":{},"body":{"classes/Post.html":{},"classes/Product.html":{}}}],["column({unique",{"_index":2247,"title":{},"body":{"classes/User.html":{}}}],["command",{"_index":712,"title":{},"body":{"classes/CreateCommentHandler.html":{}}}],["command.author",{"_index":720,"title":{},"body":{"classes/CreateCommentHandler.html":{}}}],["command.comment",{"_index":719,"title":{},"body":{"classes/CreateCommentHandler.html":{}}}],["commandbus",{"_index":655,"title":{},"body":{"controllers/CommentsController.html":{}}}],["commandhandler",{"_index":713,"title":{},"body":{"classes/CreateCommentHandler.html":{}}}],["commandhandler(createcommentcommand",{"_index":715,"title":{},"body":{"classes/CreateCommentHandler.html":{}}}],["commands/handlers/create",{"_index":675,"title":{},"body":{"modules/CommentsModule.html":{}}}],["commands/implementations/createcomment.command",{"_index":659,"title":{},"body":{"controllers/CommentsController.html":{}}}],["comment",{"_index":632,"title":{"classes/Comment.html":{}},"body":{"classes/Comment.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentHandler.html":{},"classes/GetCommentsHandler.html":{},"classes/Post.html":{},"coverage.html":{}}}],["comment.entity",{"_index":671,"title":{},"body":{"modules/CommentsModule.html":{},"classes/CreateCommentHandler.html":{},"classes/GetCommentsHandler.html":{}}}],["comment.handler",{"_index":676,"title":{},"body":{"modules/CommentsModule.html":{}}}],["comment.handler.ts",{"_index":704,"title":{},"body":{"classes/CreateCommentHandler.html":{},"coverage.html":{}}}],["comment.handler.ts:14",{"_index":711,"title":{},"body":{"classes/CreateCommentHandler.html":{}}}],["comment.handler.ts:8",{"_index":708,"title":{},"body":{"classes/CreateCommentHandler.html":{}}}],["comment.post",{"_index":1472,"title":{},"body":{"classes/Post.html":{}}}],["comments",{"_index":644,"title":{},"body":{"controllers/CommentsController.html":{},"classes/Post.html":{}}}],["comments.controller",{"_index":672,"title":{},"body":{"modules/CommentsModule.html":{}}}],["comments/comment.entity",{"_index":1467,"title":{},"body":{"classes/Post.html":{}}}],["comments/comments.module",{"_index":107,"title":{},"body":{"modules/AppModule.html":{}}}],["commentscontroller",{"_index":642,"title":{"controllers/CommentsController.html":{}},"body":{"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"coverage.html":{}}}],["commentsmodule",{"_index":60,"title":{"modules/CommentsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CommentsModule.html":{},"modules.html":{},"overview.html":{}}}],["commentsrepository",{"_index":709,"title":{},"body":{"classes/CreateCommentHandler.html":{},"classes/GetCommentsHandler.html":{}}}],["compodoc/compodoc",{"_index":2418,"title":{},"body":{"dependencies.html":{}}}],["configmodule",{"_index":96,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/DatabaseModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/EmailModule.html":{},"modules/FilesModule.html":{},"modules/GoogleAuthenticationModule.html":{},"modules/LoggerModule.html":{},"modules/PostsModule.html":{},"modules/PubSubModule.html":{},"modules/SearchModule.html":{},"modules/SmsModule.html":{},"modules/StripeModule.html":{},"modules/SubscribersModule.html":{},"modules/SubscriptionsModule.html":{}}}],["configmodule.forroot",{"_index":154,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":97,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthenticationService.html":{},"injectables/CustomLogger.html":{},"modules/DatabaseModule.html":{},"injectables/EmailConfirmationService.html":{},"injectables/EmailService.html":{},"injectables/FilesService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"modules/PostsModule.html":{},"modules/PubSubModule.html":{},"modules/SearchModule.html":{},"injectables/SmsService.html":{},"injectables/StripeService.html":{},"modules/SubscribersModule.html":{},"injectables/SubscriptionsService.html":{},"injectables/TwoFactorAuthenticationService.html":{}}}],["configservice.get('elasticsearch_node",{"_index":1852,"title":{},"body":{"modules/SearchModule.html":{}}}],["configservice.get('elasticsearch_password",{"_index":1854,"title":{},"body":{"modules/SearchModule.html":{}}}],["configservice.get('elasticsearch_username",{"_index":1853,"title":{},"body":{"modules/SearchModule.html":{}}}],["configservice.get('email_password",{"_index":1061,"title":{},"body":{"injectables/EmailService.html":{}}}],["configservice.get('email_service",{"_index":1057,"title":{},"body":{"injectables/EmailService.html":{}}}],["configservice.get('email_user",{"_index":1059,"title":{},"body":{"injectables/EmailService.html":{}}}],["configservice.get('grpc_connection_url",{"_index":2085,"title":{},"body":{"modules/SubscribersModule.html":{}}}],["configservice.get('jwt_access_token_secret",{"_index":1304,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["configservice.get('jwt_refresh_token_secret",{"_index":1294,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["configservice.get('node_env",{"_index":830,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["configservice.get('postgres_db",{"_index":887,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('postgres_host",{"_index":882,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('postgres_password",{"_index":886,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('postgres_port",{"_index":883,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('postgres_user",{"_index":885,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('redis_host",{"_index":141,"title":{},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules/PubSubModule.html":{}}}],["configservice.get('redis_port",{"_index":1579,"title":{},"body":{"modules/PostsModule.html":{},"modules/PubSubModule.html":{}}}],["configservice.get('twilio_account_sid",{"_index":1905,"title":{},"body":{"injectables/SmsService.html":{}}}],["configservice.get('twilio_auth_token",{"_index":1907,"title":{},"body":{"injectables/SmsService.html":{}}}],["configure",{"_index":85,"title":{},"body":{"modules/AppModule.html":{}}}],["configure(consumer",{"_index":86,"title":{},"body":{"modules/AppModule.html":{}}}],["confirm",{"_index":912,"title":{},"body":{"controllers/EmailConfirmationController.html":{},"injectables/EmailConfirmationService.html":{},"injectables/StripeService.html":{}}}],["confirm(@body",{"_index":925,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["confirm(confirmationdata",{"_index":914,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["confirmation",{"_index":911,"title":{},"body":{"controllers/EmailConfirmationController.html":{},"injectables/EmailConfirmationService.html":{}}}],["confirmationdata",{"_index":917,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["confirmed",{"_index":985,"title":{},"body":{"injectables/EmailConfirmationService.html":{},"controllers/SmsController.html":{}}}],["confirmemail",{"_index":953,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["confirmemail(email",{"_index":959,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["confirmemail.dto",{"_index":922,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["confirmemaildto",{"_index":680,"title":{"classes/ConfirmEmailDto.html":{}},"body":{"classes/ConfirmEmailDto.html":{},"controllers/EmailConfirmationController.html":{},"coverage.html":{}}}],["confirmphonenumber",{"_index":1892,"title":{},"body":{"injectables/SmsService.html":{}}}],["confirmphonenumber(userid",{"_index":1895,"title":{},"body":{"injectables/SmsService.html":{}}}],["connectedsocket",{"_index":580,"title":{},"body":{"classes/ChatGateway.html":{}}}],["connection",{"_index":1829,"title":{},"body":{"modules/PubSubModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["consolelogger",{"_index":802,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["consoleloggeroptions",{"_index":810,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["const",{"_index":264,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/CategoriesService.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"controllers/CommentsController.html":{},"classes/CreateCommentHandler.html":{},"injectables/CustomLogger.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailConfirmationService.html":{},"injectables/EmailSchedulingService.html":{},"injectables/FilesService.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/GraphqlJwtAuthGuard.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"controllers/OptimizeController.html":{},"injectables/PostsLoaders.html":{},"classes/PostsResolver.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"injectables/ProductCategoriesService.html":{},"injectables/ProductsService.html":{},"modules/PubSubModule.html":{},"injectables/SmsService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/StripeWebhookService.html":{},"injectables/SubscriptionsService.html":{},"classes/Timestamp.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"injectables/UsersService.html":{}}}],["constructeventfrompayload",{"_index":1938,"title":{},"body":{"injectables/StripeService.html":{}}}],["constructeventfrompayload(signature",{"_index":1950,"title":{},"body":{"injectables/StripeService.html":{}}}],["constructor",{"_index":260,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CategoryNotFoundException.html":{},"controllers/ChargeController.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"controllers/CommentsController.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentHandler.html":{},"controllers/CreditCardsController.html":{},"injectables/CustomLogger.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"controllers/EmailConfirmationController.html":{},"injectables/EmailConfirmationService.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/FilesService.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/HealthController.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsService.html":{},"controllers/OptimizeController.html":{},"classes/PostNotFoundException.html":{},"controllers/PostsController.html":{},"injectables/PostsLoaders.html":{},"classes/PostsResolver.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"controllers/ProductCategoriesController.html":{},"injectables/ProductCategoriesService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"controllers/SmsController.html":{},"injectables/SmsService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/StripeWebhookService.html":{},"controllers/SubscriptionsController.html":{},"injectables/SubscriptionsService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor(@inject('subscribers_package",{"_index":2069,"title":{},"body":{"controllers/SubscribersController.html":{}}}],["constructor(authenticationservice",{"_index":606,"title":{},"body":{"injectables/ChatService.html":{},"injectables/LocalStrategy.html":{}}}],["constructor(chatservice",{"_index":566,"title":{},"body":{"classes/ChatGateway.html":{}}}],["constructor(comment",{"_index":691,"title":{},"body":{"classes/CreateCommentCommand.html":{}}}],["constructor(commentsrepository",{"_index":707,"title":{},"body":{"classes/CreateCommentHandler.html":{},"classes/GetCommentsHandler.html":{}}}],["constructor(configservice",{"_index":1046,"title":{},"body":{"injectables/EmailService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/SmsService.html":{},"injectables/StripeService.html":{}}}],["constructor(context",{"_index":808,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["constructor(elasticsearchservice",{"_index":896,"title":{},"body":{"injectables/ElasticsearchHealthIndicator.html":{},"injectables/PostsSearchService.html":{}}}],["constructor(emailservice",{"_index":1029,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["constructor(eventsrepository",{"_index":2033,"title":{},"body":{"injectables/StripeWebhookService.html":{}}}],["constructor(jwtservice",{"_index":956,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["constructor(logsrepository",{"_index":1361,"title":{},"body":{"injectables/LogsService.html":{}}}],["constructor(postid",{"_index":531,"title":{},"body":{"classes/CategoryNotFoundException.html":{},"classes/GetCommentsQuery.html":{},"classes/PostNotFoundException.html":{}}}],["constructor(postsrepository",{"_index":1685,"title":{},"body":{"injectables/PostsService.html":{}}}],["constructor(postsservice",{"_index":1585,"title":{},"body":{"classes/PostsResolver.html":{}}}],["constructor(private",{"_index":1320,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(productcategoriesrepository",{"_index":1781,"title":{},"body":{"injectables/ProductCategoriesService.html":{}}}],["constructor(productsrepository",{"_index":1816,"title":{},"body":{"injectables/ProductsService.html":{}}}],["constructor(publicfilesrepository",{"_index":1093,"title":{},"body":{"injectables/FilesService.html":{}}}],["constructor(stripeservice",{"_index":2120,"title":{},"body":{"injectables/SubscriptionsService.html":{}}}],["constructor(usersrepository",{"_index":2313,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(usersservice",{"_index":328,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PostsLoaders.html":{},"injectables/TwoFactorAuthenticationService.html":{}}}],["consumer",{"_index":91,"title":{},"body":{"modules/AppModule.html":{}}}],["content",{"_index":576,"title":{},"body":{"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"classes/Comment.html":{},"classes/CreateCommentDto.html":{},"classes/EmailScheduleDto.html":{},"classes/Message.html":{}}}],["context",{"_index":724,"title":{},"body":{"classes/CreateLogDto.html":{},"injectables/CustomLogger.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/GraphqlJwtAuthGuard.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/Log.html":{},"classes/PostsResolver.html":{}}}],["context.gethandler",{"_index":1274,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["context.req.user",{"_index":1627,"title":{},"body":{"classes/PostsResolver.html":{}}}],["context.switchtohttp().getrequest",{"_index":940,"title":{},"body":{"guards/EmailConfirmationGuard.html":{},"injectables/HttpCacheInterceptor.html":{}}}],["controller",{"_index":205,"title":{"controllers/AuthenticationController.html":{},"controllers/CategoriesController.html":{},"controllers/ChargeController.html":{},"controllers/CommentsController.html":{},"controllers/CreditCardsController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/EmailSchedulingController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/HealthController.html":{},"controllers/OptimizeController.html":{},"controllers/PostsController.html":{},"controllers/ProductCategoriesController.html":{},"controllers/ProductsController.html":{},"controllers/SmsController.html":{},"controllers/StripeWebhookController.html":{},"controllers/SubscribersController.html":{},"controllers/SubscriptionsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AuthenticationController.html":{},"controllers/CategoriesController.html":{},"controllers/ChargeController.html":{},"controllers/CommentsController.html":{},"controllers/CreditCardsController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/EmailSchedulingController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/HealthController.html":{},"controllers/OptimizeController.html":{},"controllers/PostsController.html":{},"controllers/ProductCategoriesController.html":{},"controllers/ProductsController.html":{},"controllers/SmsController.html":{},"controllers/StripeWebhookController.html":{},"controllers/SubscribersController.html":{},"controllers/SubscriptionsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('2fa",{"_index":2186,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["controller('authentication",{"_index":258,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["controller('categories",{"_index":451,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["controller('charge",{"_index":547,"title":{},"body":{"controllers/ChargeController.html":{}}}],["controller('comments",{"_index":663,"title":{},"body":{"controllers/CommentsController.html":{}}}],["controller('credit",{"_index":787,"title":{},"body":{"controllers/CreditCardsController.html":{}}}],["controller('email",{"_index":924,"title":{},"body":{"controllers/EmailConfirmationController.html":{},"controllers/EmailSchedulingController.html":{}}}],["controller('google",{"_index":1158,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["controller('health",{"_index":1234,"title":{},"body":{"controllers/HealthController.html":{}}}],["controller('optimize",{"_index":1401,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["controller('posts",{"_index":1530,"title":{},"body":{"controllers/PostsController.html":{}}}],["controller('product",{"_index":1767,"title":{},"body":{"controllers/ProductCategoriesController.html":{}}}],["controller('products",{"_index":1806,"title":{},"body":{"controllers/ProductsController.html":{}}}],["controller('sms",{"_index":1875,"title":{},"body":{"controllers/SmsController.html":{}}}],["controller('subscribers",{"_index":2068,"title":{},"body":{"controllers/SubscribersController.html":{}}}],["controller('subscriptions",{"_index":2107,"title":{},"body":{"controllers/SubscriptionsController.html":{}}}],["controller('users",{"_index":2283,"title":{},"body":{"controllers/UsersController.html":{}}}],["controller('webhook",{"_index":2012,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["controllers",{"_index":201,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"controllers/ChargeController.html":{},"modules/ChargeModule.html":{},"modules/ChatModule.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"controllers/CreditCardsController.html":{},"modules/CreditCardsModule.html":{},"controllers/EmailConfirmationController.html":{},"modules/EmailConfirmationModule.html":{},"modules/EmailModule.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthenticationModule.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/OptimizeController.html":{},"modules/OptimizeModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/ProductCategoriesController.html":{},"modules/ProductCategoriesModule.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"controllers/SmsController.html":{},"modules/SmsModule.html":{},"controllers/StripeWebhookController.html":{},"modules/StripeWebhookModule.html":{},"controllers/SubscribersController.html":{},"modules/SubscribersModule.html":{},"controllers/SubscriptionsController.html":{},"modules/SubscriptionsModule.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["cookie",{"_index":275,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/ChatService.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"dependencies.html":{}}}],["core",{"_index":2480,"title":{},"body":{"dependencies.html":{}}}],["count",{"_index":1487,"title":{},"body":{"interfaces/PostCountResult.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{}}}],["count(query",{"_index":1634,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["country",{"_index":30,"title":{},"body":{"classes/Address.html":{},"miscellaneous/variables.html":{}}}],["countryname",{"_index":2625,"title":{},"body":{"miscellaneous/variables.html":{}}}],["coverage",{"_index":2381,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["cqrsmodule",{"_index":673,"title":{},"body":{"modules/CommentsModule.html":{}}}],["create",{"_index":1914,"title":{},"body":{"injectables/SmsService.html":{},"injectables/UsersService.html":{}}}],["create(userdata",{"_index":2319,"title":{},"body":{"injectables/UsersService.html":{}}}],["create({to",{"_index":1917,"title":{},"body":{"injectables/SmsService.html":{}}}],["createcategory",{"_index":420,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{}}}],["createcategory(@body",{"_index":455,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["createcategory(category",{"_index":425,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{}}}],["createcategorydto",{"_index":426,"title":{"classes/CreateCategoryDto.html":{}},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CreateCategoryDto.html":{},"coverage.html":{}}}],["createcharge",{"_index":539,"title":{},"body":{"controllers/ChargeController.html":{}}}],["createcharge(@body",{"_index":548,"title":{},"body":{"controllers/ChargeController.html":{}}}],["createcharge(charge",{"_index":540,"title":{},"body":{"controllers/ChargeController.html":{}}}],["createchargedto",{"_index":541,"title":{"classes/CreateChargeDto.html":{}},"body":{"controllers/ChargeController.html":{},"classes/CreateChargeDto.html":{},"coverage.html":{}}}],["createcomment",{"_index":645,"title":{},"body":{"controllers/CommentsController.html":{}}}],["createcomment(@body",{"_index":664,"title":{},"body":{"controllers/CommentsController.html":{}}}],["createcomment(comment",{"_index":647,"title":{},"body":{"controllers/CommentsController.html":{}}}],["createcommentcommand",{"_index":658,"title":{"classes/CreateCommentCommand.html":{}},"body":{"controllers/CommentsController.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentHandler.html":{},"coverage.html":{}}}],["createcommentcommand(comment",{"_index":667,"title":{},"body":{"controllers/CommentsController.html":{}}}],["createcommentdto",{"_index":648,"title":{"classes/CreateCommentDto.html":{}},"body":{"controllers/CommentsController.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"coverage.html":{}}}],["createcommenthandler",{"_index":674,"title":{"classes/CreateCommentHandler.html":{}},"body":{"modules/CommentsModule.html":{},"classes/CreateCommentHandler.html":{},"coverage.html":{}}}],["createcustomer",{"_index":1939,"title":{},"body":{"injectables/StripeService.html":{}}}],["createcustomer(name",{"_index":1953,"title":{},"body":{"injectables/StripeService.html":{}}}],["createdat",{"_index":1443,"title":{},"body":{"classes/Post.html":{},"classes/Post-1.html":{}}}],["createdatecolumn",{"_index":1326,"title":{},"body":{"classes/Log.html":{},"classes/Post.html":{}}}],["createdatecolumn({type",{"_index":1454,"title":{},"body":{"classes/Post.html":{}}}],["createduser",{"_index":360,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["createduser.password",{"_index":363,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["createevent",{"_index":2031,"title":{},"body":{"injectables/StripeWebhookService.html":{}}}],["createevent(id",{"_index":2036,"title":{},"body":{"injectables/StripeWebhookService.html":{}}}],["createlog",{"_index":1360,"title":{},"body":{"injectables/LogsService.html":{}}}],["createlog(log",{"_index":1364,"title":{},"body":{"injectables/LogsService.html":{}}}],["createlogdto",{"_index":722,"title":{"classes/CreateLogDto.html":{}},"body":{"classes/CreateLogDto.html":{},"injectables/LogsService.html":{},"coverage.html":{}}}],["createmonthlysubscription",{"_index":2097,"title":{},"body":{"controllers/SubscriptionsController.html":{},"injectables/SubscriptionsService.html":{}}}],["createmonthlysubscription(@req",{"_index":2109,"title":{},"body":{"controllers/SubscriptionsController.html":{}}}],["createmonthlysubscription(customerid",{"_index":2122,"title":{},"body":{"injectables/SubscriptionsService.html":{}}}],["createmonthlysubscription(request",{"_index":2099,"title":{},"body":{"controllers/SubscriptionsController.html":{}}}],["createpost",{"_index":1501,"title":{},"body":{"controllers/PostsController.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"controllers/SubscribersController.html":{}}}],["createpost(@body",{"_index":1540,"title":{},"body":{"controllers/PostsController.html":{},"controllers/SubscribersController.html":{}}}],["createpost(createpostinput",{"_index":1589,"title":{},"body":{"classes/PostsResolver.html":{}}}],["createpost(post",{"_index":1506,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["createpost(subscriber",{"_index":2059,"title":{},"body":{"controllers/SubscribersController.html":{}}}],["createpostdto",{"_index":729,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["createpostinput",{"_index":738,"title":{"classes/CreatePostInput.html":{}},"body":{"classes/CreatePostInput.html":{},"classes/PostsResolver.html":{},"coverage.html":{}}}],["createproduct",{"_index":1759,"title":{},"body":{"controllers/ProductCategoriesController.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["createproduct(@body",{"_index":1770,"title":{},"body":{"controllers/ProductCategoriesController.html":{},"controllers/ProductsController.html":{}}}],["createproduct(product",{"_index":1801,"title":{},"body":{"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["createproduct(productcategory",{"_index":1761,"title":{},"body":{"controllers/ProductCategoriesController.html":{}}}],["createproductcategory",{"_index":1779,"title":{},"body":{"injectables/ProductCategoriesService.html":{}}}],["createproductcategory(category",{"_index":1784,"title":{},"body":{"injectables/ProductCategoriesService.html":{}}}],["createproductcategorydto",{"_index":750,"title":{"classes/CreateProductCategoryDto.html":{}},"body":{"classes/CreateProductCategoryDto.html":{},"controllers/ProductCategoriesController.html":{},"injectables/ProductCategoriesService.html":{},"coverage.html":{}}}],["createproductdto",{"_index":753,"title":{"classes/CreateProductDto.html":{}},"body":{"classes/CreateProductDto.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"coverage.html":{}}}],["createsubscriberdto",{"_index":758,"title":{"classes/CreateSubscriberDto.html":{}},"body":{"classes/CreateSubscriberDto.html":{},"controllers/SubscribersController.html":{},"interfaces/SubscribersService.html":{},"coverage.html":{}}}],["createsubscription",{"_index":1940,"title":{},"body":{"injectables/StripeService.html":{}}}],["createsubscription(priceid",{"_index":1955,"title":{},"body":{"injectables/StripeService.html":{}}}],["createtransport",{"_index":1052,"title":{},"body":{"injectables/EmailService.html":{}}}],["createuserdto",{"_index":762,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createwithgoogle",{"_index":2302,"title":{},"body":{"injectables/UsersService.html":{}}}],["createwithgoogle(email",{"_index":2321,"title":{},"body":{"injectables/UsersService.html":{}}}],["creationdate",{"_index":1324,"title":{},"body":{"classes/Log.html":{}}}],["credentials",{"_index":397,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ChatService.html":{}}}],["credit",{"_index":125,"title":{},"body":{"modules/AppModule.html":{},"controllers/CreditCardsController.html":{},"injectables/StripeService.html":{}}}],["creditcard",{"_index":775,"title":{},"body":{"controllers/CreditCardsController.html":{}}}],["creditcards.controller",{"_index":799,"title":{},"body":{"modules/CreditCardsModule.html":{}}}],["creditcardscontroller",{"_index":767,"title":{"controllers/CreditCardsController.html":{}},"body":{"controllers/CreditCardsController.html":{},"modules/CreditCardsModule.html":{},"coverage.html":{}}}],["creditcardsmodule",{"_index":61,"title":{"modules/CreditCardsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CreditCardsModule.html":{},"modules.html":{},"overview.html":{}}}],["cron",{"_index":1034,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["cronjob",{"_index":1033,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["cronjob(date",{"_index":1037,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["ctx",{"_index":1220,"title":{},"body":{"injectables/GraphqlJwtAuthGuard.html":{}}}],["ctx._source.${key}='${value",{"_index":1678,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["ctx.getcontext().req",{"_index":1222,"title":{},"body":{"injectables/GraphqlJwtAuthGuard.html":{}}}],["currency",{"_index":1980,"title":{},"body":{"injectables/StripeService.html":{}}}],["currenthashedrefreshtoken",{"_index":2231,"title":{},"body":{"classes/User.html":{},"injectables/UsersService.html":{}}}],["customer",{"_index":1978,"title":{},"body":{"injectables/StripeService.html":{}}}],["customer.subscription.created",{"_index":2021,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["customer.subscription.updated",{"_index":2020,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["customerid",{"_index":1946,"title":{},"body":{"injectables/StripeService.html":{},"injectables/StripeWebhookService.html":{},"injectables/SubscriptionsService.html":{}}}],["customlogger",{"_index":800,"title":{"injectables/CustomLogger.html":{}},"body":{"injectables/CustomLogger.html":{},"modules/LoggerModule.html":{},"coverage.html":{},"overview.html":{}}}],["customscalar",{"_index":2135,"title":{},"body":{"classes/Timestamp.html":{}}}],["data",{"_index":1371,"title":{},"body":{"injectables/LogsService.html":{},"injectables/StripeWebhookService.html":{}}}],["data.customer",{"_index":2048,"title":{},"body":{"injectables/StripeWebhookService.html":{}}}],["data.latest_invoice",{"_index":2000,"title":{},"body":{"injectables/StripeService.html":{}}}],["data.latest_invoice.payment_intent",{"_index":2001,"title":{},"body":{"injectables/StripeService.html":{}}}],["data.status",{"_index":2050,"title":{},"body":{"injectables/StripeWebhookService.html":{}}}],["database",{"_index":476,"title":{},"body":{"injectables/CategoriesService.html":{},"modules/DatabaseModule.html":{}}}],["database/database.module",{"_index":101,"title":{},"body":{"modules/AppModule.html":{}}}],["database/postgreserrorcode.enum",{"_index":354,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/StripeWebhookService.html":{}}}],["databaselogger",{"_index":841,"title":{"classes/DatabaseLogger.html":{}},"body":{"classes/DatabaseLogger.html":{},"modules/DatabaseModule.html":{},"coverage.html":{}}}],["databasemodule",{"_index":62,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules.html":{},"overview.html":{}}}],["databuffer",{"_index":1105,"title":{},"body":{"injectables/FilesService.html":{}}}],["dataloader",{"_index":1560,"title":{},"body":{"injectables/PostsLoaders.html":{},"dependencies.html":{}}}],["dataloader(async",{"_index":1550,"title":{},"body":{"injectables/PostsLoaders.html":{}}}],["date",{"_index":743,"title":{},"body":{"classes/CreatePostInput.html":{},"classes/EmailScheduleDto.html":{},"injectables/EmailSchedulingService.html":{},"classes/Log.html":{},"classes/Post.html":{},"classes/Post-1.html":{},"classes/Timestamp.html":{}}}],["date(emailschedule.date",{"_index":1035,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["date(number",{"_index":2160,"title":{},"body":{"classes/Timestamp.html":{}}}],["debug",{"_index":804,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["debug(message",{"_index":812,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["decodeconfirmationtoken",{"_index":954,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["decodeconfirmationtoken(token",{"_index":961,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["decorators",{"_index":14,"title":{},"body":{"classes/AddCreditCardDto.html":{},"classes/Address.html":{},"controllers/AuthenticationController.html":{},"controllers/CategoriesController.html":{},"classes/Category.html":{},"controllers/ChargeController.html":{},"classes/ChatGateway.html":{},"classes/CheckVerificationCodeDto.html":{},"classes/Comment.html":{},"controllers/CommentsController.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostInput.html":{},"classes/CreateProductCategoryDto.html":{},"classes/CreateProductDto.html":{},"controllers/CreditCardsController.html":{},"controllers/EmailConfirmationController.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"classes/FindOneParams.html":{},"classes/GetCommentsDto.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/HealthController.html":{},"classes/Log.html":{},"classes/LogInDto.html":{},"classes/Message.html":{},"classes/ObjectWithIdDto.html":{},"controllers/OptimizeController.html":{},"classes/PaginationParams.html":{},"classes/Post.html":{},"classes/Post-1.html":{},"controllers/PostsController.html":{},"classes/PostsResolver.html":{},"classes/Product.html":{},"controllers/ProductCategoriesController.html":{},"classes/ProductCategory.html":{},"controllers/ProductsController.html":{},"classes/PublicFile.html":{},"classes/RegisterDto.html":{},"classes/SetDefaultCreditCardDto.html":{},"controllers/SmsController.html":{},"classes/StripeEvent.html":{},"controllers/StripeWebhookController.html":{},"controllers/SubscribersController.html":{},"controllers/SubscriptionsController.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"controllers/UsersController.html":{}}}],["default",{"_index":23,"title":{},"body":{"classes/AddCreditCardDto.html":{},"classes/Address.html":{},"injectables/AuthenticationService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/Category.html":{},"classes/CategoryNotFoundException.html":{},"controllers/ChargeController.html":{},"classes/CheckVerificationCodeDto.html":{},"classes/Comment.html":{},"controllers/CommentsController.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateProductCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateSubscriberDto.html":{},"classes/CreateUserDto.html":{},"controllers/CreditCardsController.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"classes/FindOneParams.html":{},"classes/GetCommentsDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtTwoFactorGuard.html":{},"classes/Log.html":{},"classes/LogInDto.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"classes/Message.html":{},"classes/ObjectWithIdDto.html":{},"classes/Post.html":{},"interfaces/PostCountResult.html":{},"classes/PostNotFoundException.html":{},"interfaces/PostSearchBody.html":{},"interfaces/PostSearchResult.html":{},"controllers/PostsController.html":{},"injectables/PostsLoaders.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"classes/Product.html":{},"controllers/ProductCategoriesController.html":{},"injectables/ProductCategoriesService.html":{},"classes/ProductCategory.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"classes/PublicFile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithRawBody.html":{},"interfaces/RequestWithUser.html":{},"classes/SetDefaultCreditCardDto.html":{},"controllers/SmsController.html":{},"injectables/SmsService.html":{},"classes/StripeEvent.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/StripeWebhookService.html":{},"interfaces/Subscriber.html":{},"controllers/SubscribersController.html":{},"interfaces/SubscribersService.html":{},"controllers/SubscriptionsController.html":{},"injectables/SubscriptionsService.html":{},"classes/Timestamp.html":{},"interfaces/TokenPayload.html":{},"classes/TokenVerificationDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"classes/User.html":{},"interfaces/VerificationTokenPayload.html":{},"miscellaneous/variables.html":{}}}],["default_payment_method",{"_index":1986,"title":{},"body":{"injectables/StripeService.html":{}}}],["defined",{"_index":16,"title":{},"body":{"classes/AddCreditCardDto.html":{},"classes/Address.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/Category.html":{},"classes/CategoryNotFoundException.html":{},"controllers/ChargeController.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"classes/CheckVerificationCodeDto.html":{},"classes/Comment.html":{},"controllers/CommentsController.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostInput.html":{},"classes/CreateProductCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateSubscriberDto.html":{},"classes/CreateUserDto.html":{},"controllers/CreditCardsController.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailConfirmationService.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/FilesService.html":{},"classes/FindOneParams.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/GraphqlJwtAuthGuard.html":{},"controllers/HealthController.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Log.html":{},"classes/LogInDto.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"classes/Message.html":{},"classes/ObjectWithIdDto.html":{},"controllers/OptimizeController.html":{},"classes/PaginationParams.html":{},"classes/Post.html":{},"classes/Post-1.html":{},"classes/PostNotFoundException.html":{},"controllers/PostsController.html":{},"injectables/PostsLoaders.html":{},"classes/PostsResolver.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"classes/Product.html":{},"controllers/ProductCategoriesController.html":{},"injectables/ProductCategoriesService.html":{},"classes/ProductCategory.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"classes/PublicFile.html":{},"classes/RegisterDto.html":{},"classes/SetDefaultCreditCardDto.html":{},"controllers/SmsController.html":{},"injectables/SmsService.html":{},"classes/StripeEvent.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/StripeWebhookService.html":{},"controllers/SubscribersController.html":{},"interfaces/SubscribersService.html":{},"controllers/SubscriptionsController.html":{},"injectables/SubscriptionsService.html":{},"classes/Timestamp.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["definition",{"_index":495,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["delete",{"_index":442,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["delete(':id",{"_index":432,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/PostsController.html":{}}}],["delete('avatar",{"_index":2290,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete('avatar')@useguards(jwtauthenticationguard",{"_index":2278,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleteavatar",{"_index":2273,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["deleteavatar(@req",{"_index":2291,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleteavatar(request",{"_index":2277,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleteavatar(userid",{"_index":2323,"title":{},"body":{"injectables/UsersService.html":{}}}],["deletecategory",{"_index":421,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{}}}],["deletecategory(@param",{"_index":459,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["deletecategory(id",{"_index":472,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["deletecategory(undefined",{"_index":430,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["deletecategorybyid",{"_index":470,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["deletecategorybyid(id",{"_index":482,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["deletepost",{"_index":1502,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["deletepost(@param",{"_index":1544,"title":{},"body":{"controllers/PostsController.html":{}}}],["deletepost(id",{"_index":1691,"title":{},"body":{"injectables/PostsService.html":{}}}],["deletepost(undefined",{"_index":1509,"title":{},"body":{"controllers/PostsController.html":{}}}],["deletepublicfile",{"_index":1090,"title":{},"body":{"injectables/FilesService.html":{}}}],["deletepublicfile(fileid",{"_index":1096,"title":{},"body":{"injectables/FilesService.html":{}}}],["deletepublicfilewithqueryrunner",{"_index":1091,"title":{},"body":{"injectables/FilesService.html":{}}}],["deletepublicfilewithqueryrunner(fileid",{"_index":1099,"title":{},"body":{"injectables/FilesService.html":{}}}],["deleteresponse",{"_index":517,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/PostsService.html":{}}}],["deleteresponse.affected",{"_index":519,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/PostsService.html":{}}}],["deletes",{"_index":475,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["dependencies",{"_index":53,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/CategoriesModule.html":{},"modules/ChargeModule.html":{},"modules/ChatModule.html":{},"modules/CreditCardsModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"modules/FilesModule.html":{},"modules/GoogleAuthenticationModule.html":{},"modules/HealthModule.html":{},"modules/LoggerModule.html":{},"modules/PostsModule.html":{},"modules/ProductCategoriesModule.html":{},"modules/ProductsModule.html":{},"modules/SmsModule.html":{},"modules/StripeModule.html":{},"modules/StripeWebhookModule.html":{},"modules/SubscriptionsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deprecated",{"_index":515,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["description",{"_index":477,"title":{},"body":{"injectables/CategoriesService.html":{},"classes/Timestamp.html":{},"index.html":{}}}],["development",{"_index":2562,"title":{},"body":{"index.html":{}}}],["disk",{"_index":1249,"title":{},"body":{"controllers/HealthController.html":{}}}],["diskhealthindicator",{"_index":1233,"title":{},"body":{"controllers/HealthController.html":{}}}],["documentation",{"_index":2382,"title":{},"body":{"coverage.html":{}}}],["donecallback",{"_index":2543,"title":{},"body":{"miscellaneous/functions.html":{}}}],["dto/addcreditcarddto",{"_index":783,"title":{},"body":{"controllers/CreditCardsController.html":{}}}],["dto/createcategory.dto",{"_index":447,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{}}}],["dto/createcharge.dto",{"_index":543,"title":{},"body":{"controllers/ChargeController.html":{}}}],["dto/createcomment.dto",{"_index":654,"title":{},"body":{"controllers/CommentsController.html":{},"classes/CreateCommentCommand.html":{}}}],["dto/createlog.dto",{"_index":1366,"title":{},"body":{"injectables/LogsService.html":{}}}],["dto/createpost.dto",{"_index":1523,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["dto/createproduct.dto",{"_index":1804,"title":{},"body":{"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["dto/createproductcategory.dto",{"_index":1766,"title":{},"body":{"controllers/ProductCategoriesController.html":{},"injectables/ProductCategoriesService.html":{}}}],["dto/createsubscriber.dto",{"_index":2063,"title":{},"body":{"controllers/SubscribersController.html":{},"interfaces/SubscribersService.html":{}}}],["dto/createuser.dto",{"_index":2347,"title":{},"body":{"injectables/UsersService.html":{}}}],["dto/emailschedule.dto",{"_index":1019,"title":{},"body":{"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{}}}],["dto/getcomments.dto",{"_index":662,"title":{},"body":{"controllers/CommentsController.html":{}}}],["dto/register.dto",{"_index":245,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["dto/setdefaultcreditcard.dto",{"_index":784,"title":{},"body":{"controllers/CreditCardsController.html":{}}}],["dto/twofactorauthenticationcode.dto",{"_index":2185,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["dto/updatecategory.dto",{"_index":448,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{}}}],["dto/updatepost.dto",{"_index":1524,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["e2e",{"_index":2571,"title":{},"body":{"index.html":{}}}],["each",{"_index":737,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["eager",{"_index":2239,"title":{},"body":{"classes/User.html":{}}}],["efficient",{"_index":2551,"title":{},"body":{"index.html":{}}}],["elastic/elasticsearch",{"_index":2420,"title":{},"body":{"dependencies.html":{}}}],["elasticsearch_node",{"_index":173,"title":{},"body":{"modules/AppModule.html":{}}}],["elasticsearch_password",{"_index":176,"title":{},"body":{"modules/AppModule.html":{}}}],["elasticsearch_username",{"_index":175,"title":{},"body":{"modules/AppModule.html":{}}}],["elasticsearchhealthindicator",{"_index":892,"title":{"injectables/ElasticsearchHealthIndicator.html":{}},"body":{"injectables/ElasticsearchHealthIndicator.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"coverage.html":{},"overview.html":{}}}],["elasticsearchmodule",{"_index":1849,"title":{},"body":{"modules/SearchModule.html":{}}}],["elasticsearchmodule.registerasync",{"_index":1850,"title":{},"body":{"modules/SearchModule.html":{}}}],["elasticsearchservice",{"_index":897,"title":{},"body":{"injectables/ElasticsearchHealthIndicator.html":{},"injectables/PostsSearchService.html":{}}}],["email",{"_index":334,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/CreateSubscriberDto.html":{},"classes/CreateUserDto.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailConfirmationService.html":{},"controllers/EmailSchedulingController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"classes/RegisterDto.html":{},"injectables/StripeService.html":{},"interfaces/Subscriber.html":{},"classes/User.html":{},"classes/User-1.html":{},"injectables/UsersService.html":{},"interfaces/VerificationTokenPayload.html":{},"miscellaneous/variables.html":{}}}],["email.service",{"_index":999,"title":{},"body":{"modules/EmailModule.html":{}}}],["email/email.module",{"_index":950,"title":{},"body":{"modules/EmailConfirmationModule.html":{},"modules/EmailSchedulingModule.html":{}}}],["email/email.service",{"_index":970,"title":{},"body":{"injectables/EmailConfirmationService.html":{},"injectables/EmailSchedulingService.html":{}}}],["email_confirmation_url",{"_index":194,"title":{},"body":{"modules/AppModule.html":{}}}],["email_password",{"_index":184,"title":{},"body":{"modules/AppModule.html":{}}}],["email_service",{"_index":182,"title":{},"body":{"modules/AppModule.html":{}}}],["email_user",{"_index":183,"title":{},"body":{"modules/AppModule.html":{}}}],["emailconfirmation.controller",{"_index":951,"title":{},"body":{"modules/EmailConfirmationModule.html":{}}}],["emailconfirmation.service",{"_index":923,"title":{},"body":{"controllers/EmailConfirmationController.html":{},"modules/EmailConfirmationModule.html":{}}}],["emailconfirmation/emailconfirmation.guard",{"_index":786,"title":{},"body":{"controllers/CreditCardsController.html":{}}}],["emailconfirmation/emailconfirmation.module",{"_index":129,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{}}}],["emailconfirmation/emailconfirmation.service",{"_index":257,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["emailconfirmationcontroller",{"_index":909,"title":{"controllers/EmailConfirmationController.html":{}},"body":{"controllers/EmailConfirmationController.html":{},"modules/EmailConfirmationModule.html":{},"coverage.html":{}}}],["emailconfirmationguard",{"_index":785,"title":{"guards/EmailConfirmationGuard.html":{}},"body":{"controllers/CreditCardsController.html":{},"guards/EmailConfirmationGuard.html":{},"coverage.html":{}}}],["emailconfirmationmodule",{"_index":63,"title":{"modules/EmailConfirmationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/EmailConfirmationModule.html":{},"modules.html":{},"overview.html":{}}}],["emailconfirmationservice",{"_index":256,"title":{"injectables/EmailConfirmationService.html":{}},"body":{"controllers/AuthenticationController.html":{},"controllers/EmailConfirmationController.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"coverage.html":{},"overview.html":{}}}],["emailmodule",{"_index":948,"title":{"modules/EmailModule.html":{}},"body":{"modules/EmailConfirmationModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"modules.html":{},"overview.html":{}}}],["emailschedule",{"_index":1016,"title":{},"body":{"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{}}}],["emailschedule.content",{"_index":1040,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["emailschedule.recipient",{"_index":1038,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["emailschedule.subject",{"_index":1039,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["emailscheduledto",{"_index":1000,"title":{"classes/EmailScheduleDto.html":{}},"body":{"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"coverage.html":{}}}],["emailscheduling.controller",{"_index":1027,"title":{},"body":{"modules/EmailSchedulingModule.html":{}}}],["emailscheduling.service",{"_index":1018,"title":{},"body":{"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{}}}],["emailscheduling/emailscheduling.module",{"_index":112,"title":{},"body":{"modules/AppModule.html":{}}}],["emailschedulingcontroller",{"_index":1009,"title":{"controllers/EmailSchedulingController.html":{}},"body":{"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"coverage.html":{}}}],["emailschedulingmodule",{"_index":64,"title":{"modules/EmailSchedulingModule.html":{}},"body":{"modules/AppModule.html":{},"modules/EmailSchedulingModule.html":{},"modules.html":{},"overview.html":{}}}],["emailschedulingservice",{"_index":1017,"title":{"injectables/EmailSchedulingService.html":{}},"body":{"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"coverage.html":{},"overview.html":{}}}],["emailservice",{"_index":957,"title":{"injectables/EmailService.html":{}},"body":{"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"coverage.html":{},"overview.html":{}}}],["engine",{"_index":413,"title":{},"body":{"interfaces/CarProperties.html":{}}}],["entities",{"_index":888,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["entity",{"_index":45,"title":{},"body":{"classes/Address.html":{},"classes/Category.html":{},"classes/Comment.html":{},"classes/Log.html":{},"classes/Message.html":{},"classes/Post.html":{},"classes/Product.html":{},"classes/ProductCategory.html":{},"classes/PublicFile.html":{},"classes/StripeEvent.html":{},"classes/User.html":{}}}],["entity{.ts,.js",{"_index":890,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["enumerations",{"_index":2521,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["environment",{"_index":829,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["epoch",{"_index":2144,"title":{},"body":{"classes/Timestamp.html":{}}}],["error",{"_index":365,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"injectables/EmailConfirmationService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/StripeService.html":{},"injectables/StripeWebhookService.html":{},"injectables/UsersService.html":{}}}],["error(message",{"_index":815,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["error.status",{"_index":1208,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["error?.code",{"_index":366,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/StripeService.html":{},"injectables/StripeWebhookService.html":{}}}],["error?.name",{"_index":991,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["error?.type",{"_index":1987,"title":{},"body":{"injectables/StripeService.html":{}}}],["event",{"_index":2016,"title":{},"body":{"controllers/StripeWebhookController.html":{},"injectables/StripeWebhookService.html":{}}}],["event.data.object",{"_index":2046,"title":{},"body":{"injectables/StripeWebhookService.html":{}}}],["event.type",{"_index":2019,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["eventsrepository",{"_index":2035,"title":{},"body":{"injectables/StripeWebhookService.html":{}}}],["example",{"_index":490,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["exceed",{"_index":1251,"title":{},"body":{"controllers/HealthController.html":{}}}],["exceptions/categorynotfound.exception",{"_index":500,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["exceptions/postnotfound.exception",{"_index":1706,"title":{},"body":{"injectables/PostsService.html":{}}}],["exclude",{"_index":2263,"title":{},"body":{"classes/User.html":{}}}],["excludenullinterceptor",{"_index":1063,"title":{"injectables/ExcludeNullInterceptor.html":{}},"body":{"injectables/ExcludeNullInterceptor.html":{},"coverage.html":{}}}],["execute",{"_index":706,"title":{},"body":{"classes/CreateCommentHandler.html":{},"classes/GetCommentsHandler.html":{}}}],["execute(command",{"_index":710,"title":{},"body":{"classes/CreateCommentHandler.html":{}}}],["execute(query",{"_index":1137,"title":{},"body":{"classes/GetCommentsHandler.html":{}}}],["executioncontext",{"_index":936,"title":{},"body":{"guards/EmailConfirmationGuard.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/GraphqlJwtAuthGuard.html":{},"injectables/HttpCacheInterceptor.html":{}}}],["exist",{"_index":478,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["exists",{"_index":372,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["expand",{"_index":1999,"title":{},"body":{"injectables/StripeService.html":{}}}],["expired",{"_index":993,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["expiresin",{"_index":382,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/EmailConfirmationService.html":{}}}],["export",{"_index":22,"title":{},"body":{"classes/AddCreditCardDto.html":{},"classes/Address.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"interfaces/BookProperties.html":{},"interfaces/CarProperties.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"classes/Category.html":{},"classes/CategoryNotFoundException.html":{},"controllers/ChargeController.html":{},"modules/ChargeModule.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/CheckVerificationCodeDto.html":{},"classes/Comment.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostInput.html":{},"classes/CreateProductCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateSubscriberDto.html":{},"classes/CreateUserDto.html":{},"controllers/CreditCardsController.html":{},"modules/CreditCardsModule.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"modules/DatabaseModule.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullInterceptor.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/FindOneParams.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthenticationModule.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/GraphqlJwtAuthGuard.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/Log.html":{},"classes/LogInDto.html":{},"modules/LoggerModule.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"classes/Message.html":{},"classes/ObjectWithIdDto.html":{},"controllers/OptimizeController.html":{},"modules/OptimizeModule.html":{},"classes/PaginationParams.html":{},"classes/Post.html":{},"classes/Post-1.html":{},"interfaces/PostCountResult.html":{},"classes/PostNotFoundException.html":{},"interfaces/PostSearchBody.html":{},"interfaces/PostSearchResult.html":{},"controllers/PostsController.html":{},"injectables/PostsLoaders.html":{},"modules/PostsModule.html":{},"classes/PostsResolver.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"classes/Product.html":{},"controllers/ProductCategoriesController.html":{},"modules/ProductCategoriesModule.html":{},"injectables/ProductCategoriesService.html":{},"classes/ProductCategory.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"modules/PubSubModule.html":{},"classes/PublicFile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithRawBody.html":{},"interfaces/RequestWithUser.html":{},"modules/SearchModule.html":{},"classes/SetDefaultCreditCardDto.html":{},"controllers/SmsController.html":{},"modules/SmsModule.html":{},"injectables/SmsService.html":{},"classes/StripeEvent.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"modules/StripeWebhookModule.html":{},"injectables/StripeWebhookService.html":{},"interfaces/Subscriber.html":{},"controllers/SubscribersController.html":{},"modules/SubscribersModule.html":{},"interfaces/SubscribersService.html":{},"controllers/SubscriptionsController.html":{},"modules/SubscriptionsModule.html":{},"injectables/SubscriptionsService.html":{},"classes/Timestamp.html":{},"interfaces/TokenPayload.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/VerificationTokenPayload.html":{}}}],["exports",{"_index":305,"title":{},"body":{"modules/AuthenticationModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/EmailModule.html":{},"modules/FilesModule.html":{},"modules/GoogleAuthenticationModule.html":{},"modules/LoggerModule.html":{},"modules/OptimizeModule.html":{},"modules/PubSubModule.html":{},"modules/SearchModule.html":{},"modules/SmsModule.html":{},"modules/StripeModule.html":{},"modules/UsersModule.html":{}}}],["express",{"_index":1157,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LogsMiddleware.html":{},"controllers/OptimizeController.html":{},"interfaces/RequestWithRawBody.html":{},"interfaces/RequestWithUser.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["express.multer.file",{"_index":1388,"title":{},"body":{"controllers/OptimizeController.html":{},"controllers/UsersController.html":{}}}],["extends",{"_index":529,"title":{},"body":{"classes/CategoryNotFoundException.html":{},"injectables/CustomLogger.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"injectables/GraphqlJwtAuthGuard.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/PostNotFoundException.html":{},"interfaces/RequestWithRawBody.html":{},"interfaces/RequestWithUser.html":{}}}],["extractjwt",{"_index":1286,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["extractjwt.fromextractors([(request",{"_index":1291,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["factor",{"_index":1308,"title":{},"body":{"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["factor.guard",{"_index":1529,"title":{},"body":{"controllers/PostsController.html":{}}}],["factor.guard.ts",{"_index":1307,"title":{},"body":{"injectables/JwtTwoFactorGuard.html":{},"coverage.html":{}}}],["factor.strategy",{"_index":317,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["factor.strategy.ts",{"_index":1309,"title":{},"body":{"injectables/JwtTwoFactorStrategy.html":{},"coverage.html":{}}}],["factor.strategy.ts:13",{"_index":1310,"title":{},"body":{"injectables/JwtTwoFactorStrategy.html":{}}}],["factor.strategy.ts:26",{"_index":1311,"title":{},"body":{"injectables/JwtTwoFactorStrategy.html":{}}}],["failed",{"_index":908,"title":{},"body":{"injectables/ElasticsearchHealthIndicator.html":{}}}],["false",{"_index":341,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"classes/User.html":{},"miscellaneous/variables.html":{}}}],["fetches",{"_index":485,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["field",{"_index":746,"title":{},"body":{"classes/CreatePostInput.html":{},"classes/Post-1.html":{},"classes/User-1.html":{}}}],["field(undefined",{"_index":741,"title":{},"body":{"classes/CreatePostInput.html":{},"classes/Post-1.html":{},"classes/User-1.html":{}}}],["field({nullable",{"_index":744,"title":{},"body":{"classes/CreatePostInput.html":{},"classes/Post-1.html":{}}}],["fields",{"_index":1635,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AddCreditCardDto.html":{},"classes/Address.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"interfaces/BookProperties.html":{},"interfaces/CarProperties.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"classes/Category.html":{},"classes/CategoryNotFoundException.html":{},"controllers/ChargeController.html":{},"modules/ChargeModule.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/CheckVerificationCodeDto.html":{},"classes/Comment.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostInput.html":{},"classes/CreateProductCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateSubscriberDto.html":{},"classes/CreateUserDto.html":{},"controllers/CreditCardsController.html":{},"modules/CreditCardsModule.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"modules/DatabaseModule.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullInterceptor.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/FindOneParams.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthenticationModule.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/GraphqlJwtAuthGuard.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/Log.html":{},"classes/LogInDto.html":{},"modules/LoggerModule.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"classes/Message.html":{},"classes/ObjectWithIdDto.html":{},"controllers/OptimizeController.html":{},"modules/OptimizeModule.html":{},"classes/PaginationParams.html":{},"classes/Post.html":{},"classes/Post-1.html":{},"interfaces/PostCountResult.html":{},"classes/PostNotFoundException.html":{},"interfaces/PostSearchBody.html":{},"interfaces/PostSearchResult.html":{},"controllers/PostsController.html":{},"injectables/PostsLoaders.html":{},"modules/PostsModule.html":{},"classes/PostsResolver.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"classes/Product.html":{},"controllers/ProductCategoriesController.html":{},"modules/ProductCategoriesModule.html":{},"injectables/ProductCategoriesService.html":{},"classes/ProductCategory.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"modules/PubSubModule.html":{},"classes/PublicFile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithRawBody.html":{},"interfaces/RequestWithUser.html":{},"modules/SearchModule.html":{},"classes/SetDefaultCreditCardDto.html":{},"controllers/SmsController.html":{},"modules/SmsModule.html":{},"injectables/SmsService.html":{},"classes/StripeEvent.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"modules/StripeWebhookModule.html":{},"injectables/StripeWebhookService.html":{},"interfaces/Subscriber.html":{},"controllers/SubscribersController.html":{},"modules/SubscribersModule.html":{},"interfaces/SubscribersService.html":{},"controllers/SubscriptionsController.html":{},"modules/SubscriptionsModule.html":{},"injectables/SubscriptionsService.html":{},"classes/Timestamp.html":{},"interfaces/TokenPayload.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/VerificationTokenPayload.html":{},"coverage.html":{}}}],["file.buffer",{"_index":2288,"title":{},"body":{"controllers/UsersController.html":{}}}],["file.key",{"_index":1123,"title":{},"body":{"injectables/FilesService.html":{}}}],["file.originalname",{"_index":2289,"title":{},"body":{"controllers/UsersController.html":{}}}],["file]{@link",{"_index":512,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["fileid",{"_index":1098,"title":{},"body":{"injectables/FilesService.html":{},"injectables/UsersService.html":{}}}],["fileinterceptor",{"_index":2282,"title":{},"body":{"controllers/UsersController.html":{}}}],["filename",{"_index":1103,"title":{},"body":{"injectables/FilesService.html":{},"injectables/UsersService.html":{}}}],["files",{"_index":1391,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["files.service",{"_index":1085,"title":{},"body":{"modules/FilesModule.html":{}}}],["files/files.module",{"_index":2298,"title":{},"body":{"modules/UsersModule.html":{}}}],["files/files.service",{"_index":2348,"title":{},"body":{"injectables/UsersService.html":{}}}],["files/publicfile.entity",{"_index":2265,"title":{},"body":{"classes/User.html":{}}}],["filesmodule",{"_index":1079,"title":{"modules/FilesModule.html":{}},"body":{"modules/FilesModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["filesservice",{"_index":1083,"title":{"injectables/FilesService.html":{}},"body":{"modules/FilesModule.html":{},"injectables/FilesService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["filter",{"_index":1663,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["finally",{"_index":2375,"title":{},"body":{"injectables/UsersService.html":{}}}],["find",{"_index":1743,"title":{},"body":{"injectables/PostsService.html":{}}}],["findmanyoptions",{"_index":1696,"title":{},"body":{"injectables/PostsService.html":{}}}],["findmanyoptions['where",{"_index":1715,"title":{},"body":{"injectables/PostsService.html":{}}}],["findoneparams",{"_index":431,"title":{"classes/FindOneParams.html":{}},"body":{"controllers/CategoriesController.html":{},"classes/FindOneParams.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["first",{"_index":943,"title":{},"body":{"guards/EmailConfirmationGuard.html":{}}}],["forroutes",{"_index":204,"title":{},"body":{"modules/AppModule.html":{}}}],["found",{"_index":535,"title":{},"body":{"classes/CategoryNotFoundException.html":{},"classes/PostNotFoundException.html":{}}}],["framework",{"_index":2549,"title":{},"body":{"index.html":{}}}],["frontend_url",{"_index":189,"title":{},"body":{"modules/AppModule.html":{}}}],["fuel",{"_index":415,"title":{},"body":{"interfaces/CarProperties.html":{}}}],["function",{"_index":2399,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":2532,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generatetwofactorauthenticationsecret",{"_index":2198,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["generatetwofactorauthenticationsecret(user",{"_index":2202,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["get(':id",{"_index":436,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/PostsController.html":{}}}],["get('image/:id",{"_index":1385,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["get('monthly",{"_index":2111,"title":{},"body":{"controllers/SubscriptionsController.html":{}}}],["get('monthly')@useguards(jwtauthenticationguard",{"_index":2103,"title":{},"body":{"controllers/SubscriptionsController.html":{}}}],["get('refresh",{"_index":291,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["get()@healthcheck",{"_index":1227,"title":{},"body":{"controllers/HealthController.html":{}}}],["get()@useguards(emailconfirmationguard)@useguards(jwtauthenticationguard",{"_index":777,"title":{},"body":{"controllers/CreditCardsController.html":{}}}],["get(key",{"_index":2613,"title":{},"body":{"miscellaneous/variables.html":{}}}],["get_posts_cache",{"_index":2612,"title":{},"body":{"miscellaneous/variables.html":{}}}],["get_posts_cache_key",{"_index":1527,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getallcategories",{"_index":422,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{}}}],["getallmessages",{"_index":603,"title":{},"body":{"injectables/ChatService.html":{}}}],["getallproductcategories",{"_index":1780,"title":{},"body":{"injectables/ProductCategoriesService.html":{}}}],["getallproducts",{"_index":1760,"title":{},"body":{"controllers/ProductCategoriesController.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["getallsubscribers",{"_index":2088,"title":{},"body":{"interfaces/SubscribersService.html":{}}}],["getallsubscribers(params",{"_index":2091,"title":{},"body":{"interfaces/SubscribersService.html":{}}}],["getauthenticateduser",{"_index":322,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getauthenticateduser(email",{"_index":331,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getbyemail",{"_index":2303,"title":{},"body":{"injectables/UsersService.html":{}}}],["getbyemail(email",{"_index":2325,"title":{},"body":{"injectables/UsersService.html":{}}}],["getbyid",{"_index":2304,"title":{},"body":{"injectables/UsersService.html":{}}}],["getbyid(id",{"_index":2327,"title":{},"body":{"injectables/UsersService.html":{}}}],["getbyids",{"_index":2305,"title":{},"body":{"injectables/UsersService.html":{}}}],["getbyids(ids",{"_index":2329,"title":{},"body":{"injectables/UsersService.html":{}}}],["getcategorybyid",{"_index":423,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{}}}],["getcategorybyid(@param",{"_index":453,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["getcategorybyid(id",{"_index":487,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["getcategorybyid(undefined",{"_index":435,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["getcomments",{"_index":646,"title":{},"body":{"controllers/CommentsController.html":{}}}],["getcomments(undefined",{"_index":650,"title":{},"body":{"controllers/CommentsController.html":{}}}],["getcommentsdto",{"_index":651,"title":{"classes/GetCommentsDto.html":{}},"body":{"controllers/CommentsController.html":{},"classes/GetCommentsDto.html":{},"coverage.html":{}}}],["getcommentshandler",{"_index":677,"title":{"classes/GetCommentsHandler.html":{}},"body":{"modules/CommentsModule.html":{},"classes/GetCommentsHandler.html":{},"coverage.html":{}}}],["getcommentsquery",{"_index":660,"title":{"classes/GetCommentsQuery.html":{}},"body":{"controllers/CommentsController.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"coverage.html":{}}}],["getcommentsquery(postid",{"_index":669,"title":{},"body":{"controllers/CommentsController.html":{}}}],["getcookiesforlogout",{"_index":323,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getcookiesforuser",{"_index":1168,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["getcookiesforuser(user",{"_index":1175,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["getcookiewithjwtaccesstoken",{"_index":324,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getcookiewithjwtaccesstoken(userid",{"_index":336,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getcookiewithjwtrefreshtoken",{"_index":325,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getcookiewithjwtrefreshtoken(userid",{"_index":342,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getcreditcards",{"_index":771,"title":{},"body":{"controllers/CreditCardsController.html":{}}}],["getcreditcards(@req",{"_index":794,"title":{},"body":{"controllers/CreditCardsController.html":{}}}],["getcreditcards(request",{"_index":776,"title":{},"body":{"controllers/CreditCardsController.html":{}}}],["getjobresult",{"_index":1382,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["getjobresult(@res",{"_index":1410,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["getjobresult(response",{"_index":1384,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["getloglevels",{"_index":826,"title":{},"body":{"injectables/CustomLogger.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["getloglevels(environment",{"_index":833,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["getloglevels(isproduction",{"_index":2539,"title":{},"body":{"miscellaneous/functions.html":{}}}],["getmonthlysubscription",{"_index":2098,"title":{},"body":{"controllers/SubscriptionsController.html":{},"injectables/SubscriptionsService.html":{}}}],["getmonthlysubscription(@req",{"_index":2112,"title":{},"body":{"controllers/SubscriptionsController.html":{}}}],["getmonthlysubscription(customerid",{"_index":2124,"title":{},"body":{"injectables/SubscriptionsService.html":{}}}],["getmonthlysubscription(request",{"_index":2102,"title":{},"body":{"controllers/SubscriptionsController.html":{}}}],["getpostbyid",{"_index":1503,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getpostbyid(@param",{"_index":1537,"title":{},"body":{"controllers/PostsController.html":{}}}],["getpostbyid(id",{"_index":1693,"title":{},"body":{"injectables/PostsService.html":{}}}],["getpostbyid(undefined",{"_index":1511,"title":{},"body":{"controllers/PostsController.html":{}}}],["getposts",{"_index":1504,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getposts(offset",{"_index":1695,"title":{},"body":{"injectables/PostsService.html":{}}}],["getposts(search",{"_index":1513,"title":{},"body":{"controllers/PostsController.html":{}}}],["getpostswithauthors",{"_index":1683,"title":{},"body":{"injectables/PostsService.html":{}}}],["getpostswithauthors(offset",{"_index":1698,"title":{},"body":{"injectables/PostsService.html":{}}}],["getrequest",{"_index":1214,"title":{},"body":{"injectables/GraphqlJwtAuthGuard.html":{}}}],["getrequest(context",{"_index":1215,"title":{},"body":{"injectables/GraphqlJwtAuthGuard.html":{}}}],["getsubscribers",{"_index":2057,"title":{},"body":{"controllers/SubscribersController.html":{}}}],["getting",{"_index":2545,"title":{"index.html":{}},"body":{}}],["getuserdata",{"_index":1169,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["getuserdata(token",{"_index":1177,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["getuserfromauthenticationtoken",{"_index":326,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getuserfromauthenticationtoken(token",{"_index":344,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getuserfromsocket",{"_index":604,"title":{},"body":{"injectables/ChatService.html":{}}}],["getuserfromsocket(socket",{"_index":610,"title":{},"body":{"injectables/ChatService.html":{}}}],["getuserifrefreshtokenmatches",{"_index":2306,"title":{},"body":{"injectables/UsersService.html":{}}}],["getuserifrefreshtokenmatches(refreshtoken",{"_index":2331,"title":{},"body":{"injectables/UsersService.html":{}}}],["given",{"_index":489,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["global",{"_index":1827,"title":{},"body":{"modules/PubSubModule.html":{}}}],["google",{"_index":1149,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"dependencies.html":{}}}],["google.auth.oauth2",{"_index":1190,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["google.oauth2('v2').userinfo",{"_index":1192,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["google_auth_client_id",{"_index":199,"title":{},"body":{"modules/AppModule.html":{}}}],["google_auth_client_secret",{"_index":200,"title":{},"body":{"modules/AppModule.html":{}}}],["googleapis",{"_index":1184,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"dependencies.html":{}}}],["googleauthentication.controller",{"_index":1165,"title":{},"body":{"modules/GoogleAuthenticationModule.html":{}}}],["googleauthentication.service",{"_index":1156,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthenticationModule.html":{}}}],["googleauthentication/googleauthentication.module",{"_index":131,"title":{},"body":{"modules/AppModule.html":{}}}],["googleauthenticationcontroller",{"_index":1147,"title":{"controllers/GoogleAuthenticationController.html":{}},"body":{"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthenticationModule.html":{},"coverage.html":{}}}],["googleauthenticationmodule",{"_index":65,"title":{"modules/GoogleAuthenticationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/GoogleAuthenticationModule.html":{},"modules.html":{},"overview.html":{}}}],["googleauthenticationservice",{"_index":1155,"title":{"injectables/GoogleAuthenticationService.html":{}},"body":{"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthenticationModule.html":{},"injectables/GoogleAuthenticationService.html":{},"coverage.html":{},"overview.html":{}}}],["gqlexecutioncontext",{"_index":1218,"title":{},"body":{"injectables/GraphqlJwtAuthGuard.html":{}}}],["gqlexecutioncontext.create(context",{"_index":1221,"title":{},"body":{"injectables/GraphqlJwtAuthGuard.html":{}}}],["graph",{"_index":2599,"title":{},"body":{"modules.html":{}}}],["graphql",{"_index":1609,"title":{},"body":{"classes/PostsResolver.html":{},"modules/PubSubModule.html":{},"classes/Timestamp.html":{},"dependencies.html":{}}}],["graphql_playground",{"_index":185,"title":{},"body":{"modules/AppModule.html":{}}}],["graphqljwtauthguard",{"_index":1211,"title":{"injectables/GraphqlJwtAuthGuard.html":{}},"body":{"injectables/GraphqlJwtAuthGuard.html":{},"classes/PostsResolver.html":{},"coverage.html":{}}}],["graphqlmodule",{"_index":114,"title":{},"body":{"modules/AppModule.html":{}}}],["graphqlmodule.forrootasync",{"_index":145,"title":{},"body":{"modules/AppModule.html":{}}}],["graphqlresolveinfo",{"_index":1595,"title":{},"body":{"classes/PostsResolver.html":{}}}],["grow",{"_index":2578,"title":{},"body":{"index.html":{}}}],["grpc",{"_index":2497,"title":{},"body":{"dependencies.html":{}}}],["grpc/grpc",{"_index":2422,"title":{},"body":{"dependencies.html":{}}}],["grpc/proto",{"_index":2425,"title":{},"body":{"dependencies.html":{}}}],["grpc_connection_url",{"_index":179,"title":{},"body":{"modules/AppModule.html":{}}}],["gt",{"_index":1665,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["guard",{"_index":931,"title":{"guards/EmailConfirmationGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":932,"title":{},"body":{"guards/EmailConfirmationGuard.html":{}}}],["handle",{"_index":1076,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["handleconnection",{"_index":563,"title":{},"body":{"classes/ChatGateway.html":{}}}],["handleconnection(socket",{"_index":570,"title":{},"body":{"classes/ChatGateway.html":{}}}],["handleincomingevents",{"_index":2005,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["handleincomingevents(signature",{"_index":2006,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["handleregistereduser",{"_index":1170,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["handleregistereduser(user",{"_index":1179,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["hapi/joi",{"_index":100,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["hash",{"_index":2620,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hashedpassword",{"_index":348,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["header",{"_index":2015,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["headers",{"_index":2008,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["headers('stripe",{"_index":2013,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["health",{"_index":1225,"title":{},"body":{"controllers/HealthController.html":{}}}],["health.controller",{"_index":1263,"title":{},"body":{"modules/HealthModule.html":{}}}],["health/health.module",{"_index":135,"title":{},"body":{"modules/AppModule.html":{}}}],["healthcheck",{"_index":1230,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcheckerror",{"_index":903,"title":{},"body":{"injectables/ElasticsearchHealthIndicator.html":{}}}],["healthcheckservice",{"_index":1229,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcontroller",{"_index":1223,"title":{"controllers/HealthController.html":{}},"body":{"controllers/HealthController.html":{},"modules/HealthModule.html":{},"coverage.html":{}}}],["healthindicator",{"_index":894,"title":{},"body":{"injectables/ElasticsearchHealthIndicator.html":{}}}],["healthindicatorresult",{"_index":902,"title":{},"body":{"injectables/ElasticsearchHealthIndicator.html":{}}}],["healthmodule",{"_index":66,"title":{"modules/HealthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/HealthModule.html":{},"modules.html":{},"overview.html":{}}}],["heap",{"_index":1242,"title":{},"body":{"controllers/HealthController.html":{}}}],["here",{"_index":979,"title":{},"body":{"injectables/EmailConfirmationService.html":{},"index.html":{}}}],["hits",{"_index":1496,"title":{},"body":{"interfaces/PostSearchResult.html":{},"injectables/PostsSearchService.html":{}}}],["hits.map((item",{"_index":1671,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["host",{"_index":140,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/PostsModule.html":{},"modules/PubSubModule.html":{}}}],["httpcache.interceptor",{"_index":1526,"title":{},"body":{"controllers/PostsController.html":{}}}],["httpcacheinterceptor",{"_index":1265,"title":{"injectables/HttpCacheInterceptor.html":{}},"body":{"injectables/HttpCacheInterceptor.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["httpcode",{"_index":238,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/CreditCardsController.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["httpcode(200",{"_index":269,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/CreditCardsController.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["httpcode(200)@useguards(localauthenticationguard)@post('log",{"_index":221,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["httpexception",{"_index":350,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/UsersService.html":{}}}],["httpexception('something",{"_index":374,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["httpexception('user",{"_index":370,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/UsersService.html":{}}}],["httpexception('wrong",{"_index":396,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["httponly",{"_index":385,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["https://nestjs.com",{"_index":2592,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":351,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/UsersService.html":{}}}],["httpstatus.bad_request",{"_index":373,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["httpstatus.internal_server_error",{"_index":377,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["httpstatus.not_found",{"_index":2352,"title":{},"body":{"injectables/UsersService.html":{}}}],["icommandhandler",{"_index":705,"title":{},"body":{"classes/CreateCommentHandler.html":{}}}],["id",{"_index":31,"title":{},"body":{"classes/Address.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/Category.html":{},"classes/CategoryNotFoundException.html":{},"classes/Comment.html":{},"injectables/FilesService.html":{},"classes/FindOneParams.html":{},"classes/GetCommentsHandler.html":{},"classes/Log.html":{},"classes/Message.html":{},"classes/ObjectWithIdDto.html":{},"controllers/OptimizeController.html":{},"classes/Post.html":{},"classes/Post-1.html":{},"classes/PostNotFoundException.html":{},"interfaces/PostSearchBody.html":{},"controllers/PostsController.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"classes/Product.html":{},"classes/ProductCategory.html":{},"classes/PublicFile.html":{},"classes/StripeEvent.html":{},"injectables/StripeWebhookService.html":{},"interfaces/Subscriber.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["identifier",{"_index":2383,"title":{},"body":{"coverage.html":{}}}],["ids",{"_index":1738,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["ids.length",{"_index":1741,"title":{},"body":{"injectables/PostsService.html":{}}}],["ignore",{"_index":501,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["image",{"_index":1424,"title":{},"body":{"modules/OptimizeModule.html":{}}}],["image.processor.js",{"_index":1427,"title":{},"body":{"modules/OptimizeModule.html":{}}}],["imagebuffer",{"_index":2317,"title":{},"body":{"injectables/UsersService.html":{}}}],["imagemin",{"_index":2499,"title":{},"body":{"dependencies.html":{}}}],["imageprocessor",{"_index":2402,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["imageprocessor(job",{"_index":2542,"title":{},"body":{"miscellaneous/functions.html":{}}}],["imagequeue",{"_index":1403,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["implementations/createcomment.command",{"_index":714,"title":{},"body":{"classes/CreateCommentHandler.html":{}}}],["implementations/getcomments.query",{"_index":1140,"title":{},"body":{"classes/GetCommentsHandler.html":{}}}],["implements",{"_index":560,"title":{},"body":{"classes/ChatGateway.html":{},"classes/CreateCommentHandler.html":{},"classes/DatabaseLogger.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/ExcludeNullInterceptor.html":{},"classes/GetCommentsHandler.html":{},"injectables/LogsMiddleware.html":{},"controllers/SubscribersController.html":{},"classes/Timestamp.html":{}}}],["import",{"_index":18,"title":{},"body":{"classes/AddCreditCardDto.html":{},"classes/Address.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"classes/Category.html":{},"classes/CategoryNotFoundException.html":{},"controllers/ChargeController.html":{},"modules/ChargeModule.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/CheckVerificationCodeDto.html":{},"classes/Comment.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommentHandler.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostInput.html":{},"classes/CreateProductCategoryDto.html":{},"classes/CreateProductDto.html":{},"controllers/CreditCardsController.html":{},"modules/CreditCardsModule.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"modules/DatabaseModule.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullInterceptor.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/FindOneParams.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthenticationModule.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/GraphqlJwtAuthGuard.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/Log.html":{},"classes/LogInDto.html":{},"modules/LoggerModule.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"classes/Message.html":{},"classes/ObjectWithIdDto.html":{},"controllers/OptimizeController.html":{},"modules/OptimizeModule.html":{},"classes/PaginationParams.html":{},"classes/Post.html":{},"classes/Post-1.html":{},"classes/PostNotFoundException.html":{},"interfaces/PostSearchResult.html":{},"controllers/PostsController.html":{},"injectables/PostsLoaders.html":{},"modules/PostsModule.html":{},"classes/PostsResolver.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"classes/Product.html":{},"controllers/ProductCategoriesController.html":{},"modules/ProductCategoriesModule.html":{},"injectables/ProductCategoriesService.html":{},"classes/ProductCategory.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"modules/PubSubModule.html":{},"classes/PublicFile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithRawBody.html":{},"interfaces/RequestWithUser.html":{},"modules/SearchModule.html":{},"classes/SetDefaultCreditCardDto.html":{},"controllers/SmsController.html":{},"modules/SmsModule.html":{},"injectables/SmsService.html":{},"classes/StripeEvent.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"modules/StripeWebhookModule.html":{},"injectables/StripeWebhookService.html":{},"controllers/SubscribersController.html":{},"modules/SubscribersModule.html":{},"interfaces/SubscribersService.html":{},"controllers/SubscriptionsController.html":{},"modules/SubscriptionsModule.html":{},"injectables/SubscriptionsService.html":{},"classes/Timestamp.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":83,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/CategoriesModule.html":{},"modules/ChargeModule.html":{},"modules/ChatModule.html":{},"modules/CommentsModule.html":{},"modules/CreditCardsModule.html":{},"modules/DatabaseModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"modules/FilesModule.html":{},"modules/GoogleAuthenticationModule.html":{},"modules/HealthModule.html":{},"modules/LoggerModule.html":{},"modules/OptimizeModule.html":{},"modules/PostsModule.html":{},"modules/ProductCategoriesModule.html":{},"modules/ProductsModule.html":{},"modules/PubSubModule.html":{},"modules/SearchModule.html":{},"modules/SmsModule.html":{},"modules/StripeModule.html":{},"modules/StripeWebhookModule.html":{},"modules/SubscribersModule.html":{},"modules/SubscriptionsModule.html":{},"modules/UsersModule.html":{}}}],["in(ids",{"_index":1744,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["index",{"_index":8,"title":{"index.html":{}},"body":{"classes/AddCreditCardDto.html":{},"classes/Address.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"interfaces/BookProperties.html":{},"interfaces/CarProperties.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/Category.html":{},"controllers/ChargeController.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"classes/CheckVerificationCodeDto.html":{},"classes/Comment.html":{},"controllers/CommentsController.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostInput.html":{},"classes/CreateProductCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateSubscriberDto.html":{},"classes/CreateUserDto.html":{},"controllers/CreditCardsController.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailConfirmationService.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/FilesService.html":{},"classes/FindOneParams.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/GraphqlJwtAuthGuard.html":{},"controllers/HealthController.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Log.html":{},"classes/LogInDto.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"classes/Message.html":{},"classes/ObjectWithIdDto.html":{},"controllers/OptimizeController.html":{},"classes/PaginationParams.html":{},"classes/Post.html":{},"classes/Post-1.html":{},"interfaces/PostCountResult.html":{},"interfaces/PostSearchBody.html":{},"interfaces/PostSearchResult.html":{},"controllers/PostsController.html":{},"injectables/PostsLoaders.html":{},"classes/PostsResolver.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"classes/Product.html":{},"controllers/ProductCategoriesController.html":{},"injectables/ProductCategoriesService.html":{},"classes/ProductCategory.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"classes/PublicFile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithRawBody.html":{},"interfaces/RequestWithUser.html":{},"classes/SetDefaultCreditCardDto.html":{},"controllers/SmsController.html":{},"injectables/SmsService.html":{},"classes/StripeEvent.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/StripeWebhookService.html":{},"interfaces/Subscriber.html":{},"controllers/SubscribersController.html":{},"interfaces/SubscribersService.html":{},"controllers/SubscriptionsController.html":{},"injectables/SubscriptionsService.html":{},"classes/Timestamp.html":{},"interfaces/TokenPayload.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"interfaces/VerificationTokenPayload.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["index('post_authorid_index",{"_index":1468,"title":{},"body":{"classes/Post.html":{}}}],["index('post_authorid_index')@manytoone(undefined",{"_index":1444,"title":{},"body":{"classes/Post.html":{}}}],["indexpost",{"_index":1630,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["indexpost(post",{"_index":1637,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AddCreditCardDto.html":{},"classes/Address.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"interfaces/BookProperties.html":{},"interfaces/CarProperties.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"classes/Category.html":{},"classes/CategoryNotFoundException.html":{},"controllers/ChargeController.html":{},"modules/ChargeModule.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/CheckVerificationCodeDto.html":{},"classes/Comment.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostInput.html":{},"classes/CreateProductCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateSubscriberDto.html":{},"classes/CreateUserDto.html":{},"controllers/CreditCardsController.html":{},"modules/CreditCardsModule.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"modules/DatabaseModule.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullInterceptor.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/FindOneParams.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthenticationModule.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/GraphqlJwtAuthGuard.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/Log.html":{},"classes/LogInDto.html":{},"modules/LoggerModule.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"classes/Message.html":{},"classes/ObjectWithIdDto.html":{},"controllers/OptimizeController.html":{},"modules/OptimizeModule.html":{},"classes/PaginationParams.html":{},"classes/Post.html":{},"classes/Post-1.html":{},"interfaces/PostCountResult.html":{},"classes/PostNotFoundException.html":{},"interfaces/PostSearchBody.html":{},"interfaces/PostSearchResult.html":{},"controllers/PostsController.html":{},"injectables/PostsLoaders.html":{},"modules/PostsModule.html":{},"classes/PostsResolver.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"classes/Product.html":{},"controllers/ProductCategoriesController.html":{},"modules/ProductCategoriesModule.html":{},"injectables/ProductCategoriesService.html":{},"classes/ProductCategory.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"modules/PubSubModule.html":{},"classes/PublicFile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithRawBody.html":{},"interfaces/RequestWithUser.html":{},"modules/SearchModule.html":{},"classes/SetDefaultCreditCardDto.html":{},"controllers/SmsController.html":{},"modules/SmsModule.html":{},"injectables/SmsService.html":{},"classes/StripeEvent.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"modules/StripeWebhookModule.html":{},"injectables/StripeWebhookService.html":{},"interfaces/Subscriber.html":{},"controllers/SubscribersController.html":{},"modules/SubscribersModule.html":{},"interfaces/SubscribersService.html":{},"controllers/SubscriptionsController.html":{},"modules/SubscriptionsModule.html":{},"injectables/SubscriptionsService.html":{},"classes/Timestamp.html":{},"interfaces/TokenPayload.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/VerificationTokenPayload.html":{},"dependencies.html":{}}}],["info.returntype",{"_index":1618,"title":{},"body":{"classes/PostsResolver.html":{}}}],["initiatephonenumberverification",{"_index":1861,"title":{},"body":{"controllers/SmsController.html":{},"injectables/SmsService.html":{}}}],["initiatephonenumberverification(@req",{"_index":1876,"title":{},"body":{"controllers/SmsController.html":{}}}],["initiatephonenumberverification(phonenumber",{"_index":1898,"title":{},"body":{"injectables/SmsService.html":{}}}],["initiatephonenumberverification(request",{"_index":1868,"title":{},"body":{"controllers/SmsController.html":{}}}],["inject",{"_index":144,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/PostsModule.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"modules/PubSubModule.html":{},"modules/SearchModule.html":{},"controllers/SubscribersController.html":{},"modules/SubscribersModule.html":{}}}],["inject(cache_manager",{"_index":1709,"title":{},"body":{"injectables/PostsService.html":{}}}],["inject(pub_sub",{"_index":1614,"title":{},"body":{"classes/PostsResolver.html":{}}}],["injectable",{"_index":319,"title":{"injectables/AuthenticationService.html":{},"injectables/CategoriesService.html":{},"injectables/ChatService.html":{},"injectables/CustomLogger.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"injectables/EmailConfirmationService.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/FilesService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/GraphqlJwtAuthGuard.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"injectables/PostsLoaders.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"injectables/ProductCategoriesService.html":{},"injectables/ProductsService.html":{},"injectables/SmsService.html":{},"injectables/StripeService.html":{},"injectables/StripeWebhookService.html":{},"injectables/SubscriptionsService.html":{},"injectables/TwoFactorAuthenticationService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AuthenticationService.html":{},"injectables/CategoriesService.html":{},"injectables/ChatService.html":{},"injectables/CustomLogger.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailConfirmationService.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/FilesService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/GraphqlJwtAuthGuard.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"injectables/PostsLoaders.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"injectables/ProductCategoriesService.html":{},"injectables/ProductsService.html":{},"injectables/SmsService.html":{},"injectables/StripeService.html":{},"injectables/StripeWebhookService.html":{},"injectables/SubscriptionsService.html":{},"injectables/TwoFactorAuthenticationService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":320,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/CategoriesService.html":{},"injectables/ChatService.html":{},"injectables/CustomLogger.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"injectables/EmailConfirmationService.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/FilesService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/GraphqlJwtAuthGuard.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"injectables/PostsLoaders.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"injectables/ProductCategoriesService.html":{},"injectables/ProductsService.html":{},"injectables/SmsService.html":{},"injectables/StripeService.html":{},"injectables/StripeWebhookService.html":{},"injectables/SubscriptionsService.html":{},"injectables/TwoFactorAuthenticationService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectqueue",{"_index":1394,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["injectqueue('image",{"_index":1402,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["injectrepository",{"_index":497,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/ChatService.html":{},"classes/CreateCommentHandler.html":{},"injectables/FilesService.html":{},"classes/GetCommentsHandler.html":{},"injectables/LogsService.html":{},"injectables/PostsService.html":{},"injectables/ProductCategoriesService.html":{},"injectables/ProductsService.html":{},"injectables/StripeWebhookService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(category",{"_index":502,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["injectrepository(comment",{"_index":716,"title":{},"body":{"classes/CreateCommentHandler.html":{},"classes/GetCommentsHandler.html":{}}}],["injectrepository(log",{"_index":1367,"title":{},"body":{"injectables/LogsService.html":{}}}],["injectrepository(message",{"_index":618,"title":{},"body":{"injectables/ChatService.html":{}}}],["injectrepository(post",{"_index":1708,"title":{},"body":{"injectables/PostsService.html":{}}}],["injectrepository(product",{"_index":1821,"title":{},"body":{"injectables/ProductsService.html":{}}}],["injectrepository(productcategory",{"_index":1787,"title":{},"body":{"injectables/ProductCategoriesService.html":{}}}],["injectrepository(publicfile",{"_index":1111,"title":{},"body":{"injectables/FilesService.html":{}}}],["injectrepository(stripeevent",{"_index":2041,"title":{},"body":{"injectables/StripeWebhookService.html":{}}}],["injectrepository(user",{"_index":2349,"title":{},"body":{"injectables/UsersService.html":{}}}],["inline",{"_index":1680,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["inputs/post.input",{"_index":1603,"title":{},"body":{"classes/PostsResolver.html":{}}}],["inputtype",{"_index":748,"title":{},"body":{"classes/CreatePostInput.html":{}}}],["installation",{"_index":2558,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":2560,"title":{},"body":{"index.html":{}}}],["installsubscriptionhandlers",{"_index":151,"title":{},"body":{"modules/AppModule.html":{}}}],["instanceof",{"_index":2157,"title":{},"body":{"classes/Timestamp.html":{}}}],["instead",{"_index":481,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["int",{"_index":1482,"title":{},"body":{"classes/Post-1.html":{},"classes/User-1.html":{}}}],["integer",{"_index":2139,"title":{},"body":{"classes/Timestamp.html":{}}}],["intercept",{"_index":1065,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["intercept(context",{"_index":1066,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["interface",{"_index":404,"title":{"interfaces/BookProperties.html":{},"interfaces/CarProperties.html":{},"interfaces/PostCountResult.html":{},"interfaces/PostSearchBody.html":{},"interfaces/PostSearchResult.html":{},"interfaces/RequestWithRawBody.html":{},"interfaces/RequestWithUser.html":{},"interfaces/Subscriber.html":{},"interfaces/SubscribersService.html":{},"interfaces/TokenPayload.html":{},"interfaces/VerificationTokenPayload.html":{}},"body":{"interfaces/BookProperties.html":{},"interfaces/CarProperties.html":{},"interfaces/PostCountResult.html":{},"interfaces/PostSearchBody.html":{},"interfaces/PostSearchResult.html":{},"interfaces/RequestWithRawBody.html":{},"interfaces/RequestWithUser.html":{},"interfaces/Subscriber.html":{},"interfaces/SubscribersService.html":{},"interfaces/TokenPayload.html":{},"interfaces/VerificationTokenPayload.html":{},"coverage.html":{}}}],["interfaces",{"_index":406,"title":{},"body":{"interfaces/BookProperties.html":{},"interfaces/CarProperties.html":{},"interfaces/PostCountResult.html":{},"interfaces/PostSearchBody.html":{},"interfaces/PostSearchResult.html":{},"interfaces/RequestWithRawBody.html":{},"interfaces/RequestWithUser.html":{},"interfaces/Subscriber.html":{},"interfaces/SubscribersService.html":{},"interfaces/TokenPayload.html":{},"interfaces/VerificationTokenPayload.html":{},"overview.html":{}}}],["internalservererrorexception",{"_index":1964,"title":{},"body":{"injectables/StripeService.html":{},"injectables/UsersService.html":{}}}],["invalidrequest",{"_index":2528,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["invoice_settings",{"_index":1985,"title":{},"body":{"injectables/StripeService.html":{}}}],["iqueryhandler",{"_index":1135,"title":{},"body":{"classes/GetCommentsHandler.html":{}}}],["iscodevalid",{"_index":2192,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["iscompleted",{"_index":1414,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["iscreatinglogs",{"_index":1372,"title":{},"body":{"injectables/LogsService.html":{}}}],["isdatestring",{"_index":1004,"title":{},"body":{"classes/EmailScheduleDto.html":{}}}],["isemail",{"_index":1006,"title":{},"body":{"classes/EmailScheduleDto.html":{},"classes/LogInDto.html":{},"classes/RegisterDto.html":{}}}],["isemailconfirmed",{"_index":2232,"title":{},"body":{"classes/User.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["ishealthy",{"_index":895,"title":{},"body":{"injectables/ElasticsearchHealthIndicator.html":{}}}],["ishealthy(key",{"_index":899,"title":{},"body":{"injectables/ElasticsearchHealthIndicator.html":{}}}],["isnotempty",{"_index":20,"title":{},"body":{"classes/AddCreditCardDto.html":{},"classes/CheckVerificationCodeDto.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateProductCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/EmailScheduleDto.html":{},"classes/LogInDto.html":{},"classes/RegisterDto.html":{},"classes/SetDefaultCreditCardDto.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{}}}],["isnumber",{"_index":687,"title":{},"body":{"classes/CreateChargeDto.html":{},"classes/ObjectWithIdDto.html":{},"classes/PaginationParams.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{}}}],["isnumber()@isoptional",{"_index":2220,"title":{},"body":{"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{}}}],["isnumberstring",{"_index":1128,"title":{},"body":{"classes/FindOneParams.html":{}}}],["isoptional",{"_index":1133,"title":{},"body":{"classes/GetCommentsDto.html":{},"classes/PaginationParams.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{}}}],["isoptional()@type(undefined)@isnumber()@min(0",{"_index":1435,"title":{},"body":{"classes/PaginationParams.html":{}}}],["isoptional()@type(undefined)@isnumber()@min(1",{"_index":1433,"title":{},"body":{"classes/PaginationParams.html":{}}}],["ispasswordmatching",{"_index":399,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["isphonenumberconfirmed",{"_index":2233,"title":{},"body":{"classes/User.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["isproduction",{"_index":2540,"title":{},"body":{"miscellaneous/functions.html":{}}}],["isrefreshtokenmatching",{"_index":2378,"title":{},"body":{"injectables/UsersService.html":{}}}],["isregisteredwithgoogle",{"_index":2234,"title":{},"body":{"classes/User.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["issecondfactorauthenticated",{"_index":337,"title":{},"body":{"injectables/AuthenticationService.html":{},"interfaces/TokenPayload.html":{}}}],["isstring",{"_index":19,"title":{},"body":{"classes/AddCreditCardDto.html":{},"classes/CheckVerificationCodeDto.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateProductCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/EmailScheduleDto.html":{},"classes/LogInDto.html":{},"classes/RegisterDto.html":{},"classes/SetDefaultCreditCardDto.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{}}}],["isstring()@isnotempty",{"_index":15,"title":{},"body":{"classes/AddCreditCardDto.html":{},"classes/CheckVerificationCodeDto.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateProductCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/EmailScheduleDto.html":{},"classes/RegisterDto.html":{},"classes/SetDefaultCreditCardDto.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{}}}],["isstring()@isnotempty()@isoptional",{"_index":2222,"title":{},"body":{"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{}}}],["isstring()@isnotempty()@matches(/^\\+[1",{"_index":1839,"title":{},"body":{"classes/RegisterDto.html":{}}}],["isstring()@isnotempty()@minlength(7",{"_index":1334,"title":{},"body":{"classes/LogInDto.html":{},"classes/RegisterDto.html":{}}}],["isstring({each",{"_index":733,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/UpdatePostDto.html":{}}}],["istwofactorauthenticationcodevalid",{"_index":2199,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["istwofactorauthenticationcodevalid(twofactorauthenticationcode",{"_index":2204,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["istwofactorauthenticationenabled",{"_index":2235,"title":{},"body":{"classes/User.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["item._source",{"_index":1672,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["items",{"_index":1719,"title":{},"body":{"injectables/PostsService.html":{},"injectables/StripeService.html":{}}}],["job",{"_index":1036,"title":{},"body":{"injectables/EmailSchedulingService.html":{},"controllers/OptimizeController.html":{},"miscellaneous/functions.html":{}}}],["job.id",{"_index":1409,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["job.iscompleted",{"_index":1415,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["job.start",{"_index":1042,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["jobid",{"_index":1408,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["john",{"_index":2619,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi",{"_index":99,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.number",{"_index":172,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.number().required",{"_index":160,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.object",{"_index":156,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string",{"_index":174,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().required",{"_index":158,"title":{},"body":{"modules/AppModule.html":{}}}],["join",{"_index":116,"title":{},"body":{"modules/AppModule.html":{},"modules/OptimizeModule.html":{},"modules/SubscribersModule.html":{},"index.html":{}}}],["join(__dirname",{"_index":1426,"title":{},"body":{"modules/OptimizeModule.html":{}}}],["join(process.cwd",{"_index":149,"title":{},"body":{"modules/AppModule.html":{},"modules/SubscribersModule.html":{}}}],["joincolumn",{"_index":2262,"title":{},"body":{"classes/User.html":{}}}],["joincolumn()@onetoone(undefined",{"_index":2243,"title":{},"body":{"classes/User.html":{}}}],["jointable",{"_index":1463,"title":{},"body":{"classes/Post.html":{}}}],["js",{"_index":2423,"title":{},"body":{"dependencies.html":{}}}],["json.stringify(parameters",{"_index":878,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["jsonb",{"_index":1751,"title":{},"body":{"classes/Product.html":{}}}],["jwt",{"_index":250,"title":{},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/GraphqlJwtAuthGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"classes/PostsResolver.html":{},"controllers/TwoFactorAuthenticationController.html":{},"coverage.html":{},"dependencies.html":{}}}],["jwt.strategy",{"_index":312,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["jwt_access_token_expiration_time",{"_index":165,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["jwt_access_token_secret",{"_index":164,"title":{},"body":{"modules/AppModule.html":{}}}],["jwt_refresh_token_expiration_time",{"_index":167,"title":{},"body":{"modules/AppModule.html":{}}}],["jwt_refresh_token_secret",{"_index":166,"title":{},"body":{"modules/AppModule.html":{}}}],["jwt_verification_token_expiration_time",{"_index":193,"title":{},"body":{"modules/AppModule.html":{}}}],["jwt_verification_token_secret",{"_index":192,"title":{},"body":{"modules/AppModule.html":{}}}],["jwtauthenticationguard",{"_index":249,"title":{"injectables/JwtAuthenticationGuard.html":{}},"body":{"controllers/AuthenticationController.html":{},"controllers/CategoriesController.html":{},"controllers/ChargeController.html":{},"controllers/CommentsController.html":{},"controllers/CreditCardsController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/EmailSchedulingController.html":{},"injectables/JwtAuthenticationGuard.html":{},"controllers/ProductCategoriesController.html":{},"controllers/ProductsController.html":{},"controllers/SmsController.html":{},"controllers/SubscribersController.html":{},"controllers/SubscriptionsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":1290,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["jwtmodule",{"_index":310,"title":{},"body":{"modules/AuthenticationModule.html":{},"modules/EmailConfirmationModule.html":{}}}],["jwtmodule.register",{"_index":318,"title":{},"body":{"modules/AuthenticationModule.html":{},"modules/EmailConfirmationModule.html":{}}}],["jwtrefreshguard",{"_index":254,"title":{"injectables/JwtRefreshGuard.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/JwtRefreshGuard.html":{},"coverage.html":{}}}],["jwtrefreshtokenstrategy",{"_index":298,"title":{"injectables/JwtRefreshTokenStrategy.html":{}},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["jwtservice",{"_index":329,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/EmailConfirmationService.html":{}}}],["jwtstrategy",{"_index":299,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["jwttwofactorguard",{"_index":1306,"title":{"injectables/JwtTwoFactorGuard.html":{}},"body":{"injectables/JwtTwoFactorGuard.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["jwttwofactorstrategy",{"_index":300,"title":{"injectables/JwtTwoFactorStrategy.html":{}},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtTwoFactorStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":2589,"title":{},"body":{"index.html":{}}}],["key",{"_index":901,"title":{},"body":{"injectables/ElasticsearchHealthIndicator.html":{},"injectables/FilesService.html":{},"injectables/PostsSearchService.html":{},"classes/PublicFile.html":{},"miscellaneous/variables.html":{}}}],["key.startswith(get_posts_cache_key",{"_index":1713,"title":{},"body":{"injectables/PostsService.html":{}}}],["keys",{"_index":1710,"title":{},"body":{"injectables/PostsService.html":{}}}],["keys.foreach((key",{"_index":1712,"title":{},"body":{"injectables/PostsService.html":{}}}],["kind",{"_index":2155,"title":{},"body":{"classes/Timestamp.html":{}}}],["kind.int",{"_index":2162,"title":{},"body":{"classes/Timestamp.html":{}}}],["kind.string",{"_index":2163,"title":{},"body":{"classes/Timestamp.html":{}}}],["level",{"_index":725,"title":{},"body":{"classes/CreateLogDto.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"classes/Log.html":{}}}],["license",{"_index":2595,"title":{},"body":{"index.html":{}}}],["licensed",{"_index":2575,"title":{},"body":{"index.html":{}}}],["limit",{"_index":1430,"title":{},"body":{"classes/PaginationParams.html":{},"controllers/PostsController.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{}}}],["link",{"_index":928,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["link')@useguards(jwtauthenticationguard",{"_index":920,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["list",{"_index":486,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["listcreditcards",{"_index":1941,"title":{},"body":{"injectables/StripeService.html":{}}}],["listcreditcards(customerid",{"_index":1958,"title":{},"body":{"injectables/StripeService.html":{}}}],["listenformessages",{"_index":564,"title":{},"body":{"classes/ChatGateway.html":{}}}],["listenformessages(content",{"_index":573,"title":{},"body":{"classes/ChatGateway.html":{}}}],["listsubscriptions",{"_index":1942,"title":{},"body":{"injectables/StripeService.html":{}}}],["listsubscriptions(priceid",{"_index":1960,"title":{},"body":{"injectables/StripeService.html":{}}}],["literal",{"_index":414,"title":{},"body":{"interfaces/CarProperties.html":{},"interfaces/PostSearchResult.html":{},"classes/PostsResolver.html":{},"interfaces/SubscribersService.html":{}}}],["loader",{"_index":2426,"title":{},"body":{"dependencies.html":{}}}],["loaders/posts.loaders",{"_index":1577,"title":{},"body":{"modules/PostsModule.html":{}}}],["local",{"_index":1319,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["local.strategy",{"_index":309,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["localauthentication.guard",{"_index":248,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["localauthenticationguard",{"_index":247,"title":{"injectables/LocalAuthenticationGuard.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/LocalAuthenticationGuard.html":{},"coverage.html":{}}}],["localstrategy",{"_index":301,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthenticationModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["log",{"_index":805,"title":{"classes/Log.html":{}},"body":{"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"classes/Log.html":{},"modules/LoggerModule.html":{},"injectables/LogsService.html":{},"coverage.html":{}}}],["log(level",{"_index":853,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["log(message",{"_index":818,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["log.entity",{"_index":1342,"title":{},"body":{"modules/LoggerModule.html":{},"injectables/LogsService.html":{}}}],["logger",{"_index":844,"title":{},"body":{"classes/DatabaseLogger.html":{},"modules/DatabaseModule.html":{},"injectables/LogsMiddleware.html":{},"injectables/PostsService.html":{}}}],["logger('http",{"_index":1349,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["logger(postsservice.name",{"_index":1704,"title":{},"body":{"injectables/PostsService.html":{}}}],["logger.service",{"_index":825,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logger/logger.module",{"_index":134,"title":{},"body":{"modules/AppModule.html":{}}}],["loggermodule",{"_index":67,"title":{"modules/LoggerModule.html":{}},"body":{"modules/AppModule.html":{},"modules/LoggerModule.html":{},"modules.html":{},"overview.html":{}}}],["login",{"_index":211,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["login(@req",{"_index":272,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["login(request",{"_index":220,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["logindto",{"_index":1331,"title":{"classes/LogInDto.html":{}},"body":{"classes/LogInDto.html":{},"coverage.html":{}}}],["loglevel",{"_index":2541,"title":{},"body":{"miscellaneous/functions.html":{}}}],["loglevels",{"_index":832,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logmigration",{"_index":845,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logmigration(message",{"_index":856,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logout",{"_index":212,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["logout(@req",{"_index":285,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["logout(request",{"_index":224,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["logquery",{"_index":846,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logquery(query",{"_index":858,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logqueryerror",{"_index":847,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logqueryerror(error",{"_index":860,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logqueryslow",{"_index":848,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logqueryslow(time",{"_index":862,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logs.service",{"_index":828,"title":{},"body":{"injectables/CustomLogger.html":{},"modules/LoggerModule.html":{}}}],["logschemabuild",{"_index":849,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logschemabuild(message",{"_index":865,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logsmiddleware",{"_index":132,"title":{"injectables/LogsMiddleware.html":{}},"body":{"modules/AppModule.html":{},"injectables/LogsMiddleware.html":{},"coverage.html":{}}}],["logsrepository",{"_index":1363,"title":{},"body":{"injectables/LogsService.html":{}}}],["logsservice",{"_index":803,"title":{"injectables/LogsService.html":{}},"body":{"injectables/CustomLogger.html":{},"modules/LoggerModule.html":{},"injectables/LogsService.html":{},"coverage.html":{},"overview.html":{}}}],["mail",{"_index":1051,"title":{},"body":{"injectables/EmailService.html":{}}}],["mail.options",{"_index":1049,"title":{},"body":{"injectables/EmailService.html":{}}}],["manager",{"_index":1569,"title":{},"body":{"modules/PostsModule.html":{},"injectables/PostsService.html":{},"dependencies.html":{}}}],["manytomany",{"_index":525,"title":{},"body":{"classes/Category.html":{},"classes/Post.html":{}}}],["manytomany(undefined",{"_index":523,"title":{},"body":{"classes/Category.html":{},"classes/Post.html":{}}}],["manytoone",{"_index":639,"title":{},"body":{"classes/Comment.html":{},"classes/Message.html":{},"classes/Post.html":{},"classes/Product.html":{}}}],["manytoone(undefined",{"_index":634,"title":{},"body":{"classes/Comment.html":{},"classes/Message.html":{},"classes/Product.html":{}}}],["map",{"_index":1073,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["map(users.map(user",{"_index":1555,"title":{},"body":{"injectables/PostsLoaders.html":{}}}],["markemailasconfirmed",{"_index":2307,"title":{},"body":{"injectables/UsersService.html":{}}}],["markemailasconfirmed(email",{"_index":2333,"title":{},"body":{"injectables/UsersService.html":{}}}],["markphonenumberasconfirmed",{"_index":2308,"title":{},"body":{"injectables/UsersService.html":{}}}],["markphonenumberasconfirmed(userid",{"_index":2335,"title":{},"body":{"injectables/UsersService.html":{}}}],["match",{"_index":1674,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["matches",{"_index":1842,"title":{},"body":{"classes/RegisterDto.html":{}}}],["matches(/^\\+[1",{"_index":1843,"title":{},"body":{"classes/RegisterDto.html":{}}}],["matching",{"_index":25,"title":{},"body":{"classes/AddCreditCardDto.html":{},"classes/Address.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"interfaces/BookProperties.html":{},"interfaces/CarProperties.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"classes/Category.html":{},"classes/CategoryNotFoundException.html":{},"controllers/ChargeController.html":{},"modules/ChargeModule.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/CheckVerificationCodeDto.html":{},"classes/Comment.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostInput.html":{},"classes/CreateProductCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateSubscriberDto.html":{},"classes/CreateUserDto.html":{},"controllers/CreditCardsController.html":{},"modules/CreditCardsModule.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"modules/DatabaseModule.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullInterceptor.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/FindOneParams.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthenticationModule.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/GraphqlJwtAuthGuard.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/Log.html":{},"classes/LogInDto.html":{},"modules/LoggerModule.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"classes/Message.html":{},"classes/ObjectWithIdDto.html":{},"controllers/OptimizeController.html":{},"modules/OptimizeModule.html":{},"classes/PaginationParams.html":{},"classes/Post.html":{},"classes/Post-1.html":{},"interfaces/PostCountResult.html":{},"classes/PostNotFoundException.html":{},"interfaces/PostSearchBody.html":{},"interfaces/PostSearchResult.html":{},"controllers/PostsController.html":{},"injectables/PostsLoaders.html":{},"modules/PostsModule.html":{},"classes/PostsResolver.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"classes/Product.html":{},"controllers/ProductCategoriesController.html":{},"modules/ProductCategoriesModule.html":{},"injectables/ProductCategoriesService.html":{},"classes/ProductCategory.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"modules/PubSubModule.html":{},"classes/PublicFile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithRawBody.html":{},"interfaces/RequestWithUser.html":{},"modules/SearchModule.html":{},"classes/SetDefaultCreditCardDto.html":{},"controllers/SmsController.html":{},"modules/SmsModule.html":{},"injectables/SmsService.html":{},"classes/StripeEvent.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"modules/StripeWebhookModule.html":{},"injectables/StripeWebhookService.html":{},"interfaces/Subscriber.html":{},"controllers/SubscribersController.html":{},"modules/SubscribersModule.html":{},"interfaces/SubscribersService.html":{},"controllers/SubscriptionsController.html":{},"modules/SubscriptionsModule.html":{},"injectables/SubscriptionsService.html":{},"classes/Timestamp.html":{},"interfaces/TokenPayload.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/VerificationTokenPayload.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["max",{"_index":386,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["memory",{"_index":1240,"title":{},"body":{"controllers/HealthController.html":{}}}],["memoryhealthindicator",{"_index":1232,"title":{},"body":{"controllers/HealthController.html":{}}}],["message",{"_index":589,"title":{"classes/Message.html":{}},"body":{"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/CreateLogDto.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"classes/Log.html":{},"injectables/LogsMiddleware.html":{},"classes/Message.html":{},"injectables/SmsService.html":{},"coverage.html":{}}}],["message.entity",{"_index":600,"title":{},"body":{"modules/ChatModule.html":{},"injectables/ChatService.html":{}}}],["messagebody",{"_index":581,"title":{},"body":{"classes/ChatGateway.html":{}}}],["messages",{"_index":592,"title":{},"body":{"classes/ChatGateway.html":{}}}],["messagesrepository",{"_index":607,"title":{},"body":{"injectables/ChatService.html":{}}}],["metadata",{"_index":2511,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":474,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/LogsMiddleware.html":{}}}],["methods",{"_index":84,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/ChargeController.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"controllers/CommentsController.html":{},"classes/CreateCommentHandler.html":{},"controllers/CreditCardsController.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailConfirmationService.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/FilesService.html":{},"classes/GetCommentsHandler.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/GraphqlJwtAuthGuard.html":{},"controllers/HealthController.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"controllers/OptimizeController.html":{},"controllers/PostsController.html":{},"classes/PostsResolver.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"controllers/ProductCategoriesController.html":{},"injectables/ProductCategoriesService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"controllers/SmsController.html":{},"injectables/SmsService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/StripeWebhookService.html":{},"controllers/SubscribersController.html":{},"interfaces/SubscribersService.html":{},"controllers/SubscriptionsController.html":{},"injectables/SubscriptionsService.html":{},"classes/Timestamp.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["middlewareconsumer",{"_index":87,"title":{},"body":{"modules/AppModule.html":{}}}],["milliseconds",{"_index":2141,"title":{},"body":{"classes/Timestamp.html":{}}}],["min",{"_index":1438,"title":{},"body":{"classes/PaginationParams.html":{}}}],["min(0",{"_index":1440,"title":{},"body":{"classes/PaginationParams.html":{}}}],["min(1",{"_index":1439,"title":{},"body":{"classes/PaginationParams.html":{}}}],["minlength",{"_index":1336,"title":{},"body":{"classes/LogInDto.html":{},"classes/RegisterDto.html":{}}}],["minlength(7",{"_index":1337,"title":{},"body":{"classes/LogInDto.html":{},"classes/RegisterDto.html":{}}}],["miscellaneous",{"_index":2520,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":2574,"title":{},"body":{"index.html":{}}}],["mockedconfigservice",{"_index":2408,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mockedjwtservice",{"_index":2410,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mockeduser",{"_index":2393,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mode",{"_index":2565,"title":{},"body":{"index.html":{}}}],["models/post.model",{"_index":1602,"title":{},"body":{"classes/PostsResolver.html":{}}}],["module",{"_index":50,"title":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/CategoriesModule.html":{},"modules/ChargeModule.html":{},"modules/ChatModule.html":{},"modules/CommentsModule.html":{},"modules/CreditCardsModule.html":{},"modules/DatabaseModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"modules/FilesModule.html":{},"modules/GoogleAuthenticationModule.html":{},"modules/HealthModule.html":{},"modules/LoggerModule.html":{},"modules/OptimizeModule.html":{},"modules/PostsModule.html":{},"modules/ProductCategoriesModule.html":{},"modules/ProductsModule.html":{},"modules/PubSubModule.html":{},"modules/SearchModule.html":{},"modules/SmsModule.html":{},"modules/StripeModule.html":{},"modules/StripeWebhookModule.html":{},"modules/SubscribersModule.html":{},"modules/SubscriptionsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/CategoriesModule.html":{},"modules/ChargeModule.html":{},"modules/ChatModule.html":{},"modules/CommentsModule.html":{},"modules/CreditCardsModule.html":{},"modules/DatabaseModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"modules/FilesModule.html":{},"modules/GoogleAuthenticationModule.html":{},"modules/HealthModule.html":{},"modules/LoggerModule.html":{},"modules/OptimizeModule.html":{},"modules/PostsModule.html":{},"modules/ProductCategoriesModule.html":{},"modules/ProductsModule.html":{},"modules/PubSubModule.html":{},"modules/SearchModule.html":{},"modules/SmsModule.html":{},"modules/StripeModule.html":{},"modules/StripeWebhookModule.html":{},"modules/SubscribersModule.html":{},"modules/SubscriptionsModule.html":{},"modules/UsersModule.html":{}}}],["modules",{"_index":52,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/CategoriesModule.html":{},"modules/ChargeModule.html":{},"modules/ChatModule.html":{},"modules/CommentsModule.html":{},"modules/CreditCardsModule.html":{},"modules/DatabaseModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"modules/FilesModule.html":{},"modules/GoogleAuthenticationModule.html":{},"modules/HealthModule.html":{},"modules/LoggerModule.html":{},"modules/OptimizeModule.html":{},"modules/PostsModule.html":{},"modules/ProductCategoriesModule.html":{},"modules/ProductsModule.html":{},"modules/PubSubModule.html":{},"modules/SearchModule.html":{},"modules/SmsModule.html":{},"modules/StripeModule.html":{},"modules/StripeWebhookModule.html":{},"modules/SubscribersModule.html":{},"modules/SubscriptionsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["monthly_subscription_price_id",{"_index":190,"title":{},"body":{"modules/AppModule.html":{}}}],["monthlysubscriptionstatus",{"_index":2236,"title":{},"body":{"classes/User.html":{},"injectables/UsersService.html":{}}}],["more",{"_index":1238,"title":{},"body":{"controllers/HealthController.html":{},"index.html":{}}}],["morethan",{"_index":1707,"title":{},"body":{"injectables/PostsService.html":{}}}],["morethan(startid",{"_index":1717,"title":{},"body":{"injectables/PostsService.html":{}}}],["multi_match",{"_index":1656,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["mutation",{"_index":1599,"title":{},"body":{"classes/PostsResolver.html":{}}}],["mutation(undefined)@useguards(graphqljwtauthguard",{"_index":1590,"title":{},"body":{"classes/PostsResolver.html":{}}}],["myśliwiec",{"_index":2590,"title":{},"body":{"index.html":{}}}],["name",{"_index":90,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/Category.html":{},"classes/CategoryNotFoundException.html":{},"controllers/ChargeController.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"controllers/CommentsController.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateProductCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateSubscriberDto.html":{},"classes/CreateUserDto.html":{},"controllers/CreditCardsController.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailConfirmationService.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/FilesService.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/GraphqlJwtAuthGuard.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"controllers/OptimizeController.html":{},"modules/OptimizeModule.html":{},"classes/PostNotFoundException.html":{},"controllers/PostsController.html":{},"injectables/PostsLoaders.html":{},"classes/PostsResolver.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"classes/Product.html":{},"controllers/ProductCategoriesController.html":{},"injectables/ProductCategoriesService.html":{},"classes/ProductCategory.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"classes/RegisterDto.html":{},"controllers/SmsController.html":{},"injectables/SmsService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/StripeWebhookService.html":{},"interfaces/Subscriber.html":{},"controllers/SubscribersController.html":{},"interfaces/SubscribersService.html":{},"controllers/SubscriptionsController.html":{},"injectables/SubscriptionsService.html":{},"classes/Timestamp.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateCategoryDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["nest",{"_index":2555,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":2594,"title":{},"body":{"index.html":{}}}],["nestinterceptor",{"_index":1071,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["nestjs/bull",{"_index":123,"title":{},"body":{"modules/AppModule.html":{},"controllers/OptimizeController.html":{},"modules/OptimizeModule.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":94,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"classes/CategoryNotFoundException.html":{},"controllers/ChargeController.html":{},"modules/ChargeModule.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"controllers/CreditCardsController.html":{},"modules/CreditCardsModule.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"modules/DatabaseModule.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullInterceptor.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthenticationModule.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/GraphqlJwtAuthGuard.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"modules/LoggerModule.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"controllers/OptimizeController.html":{},"modules/OptimizeModule.html":{},"classes/PostNotFoundException.html":{},"controllers/PostsController.html":{},"injectables/PostsLoaders.html":{},"modules/PostsModule.html":{},"classes/PostsResolver.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"controllers/ProductCategoriesController.html":{},"modules/ProductCategoriesModule.html":{},"injectables/ProductCategoriesService.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"modules/PubSubModule.html":{},"modules/SearchModule.html":{},"controllers/SmsController.html":{},"modules/SmsModule.html":{},"injectables/SmsService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"modules/StripeWebhookModule.html":{},"injectables/StripeWebhookService.html":{},"controllers/SubscribersController.html":{},"modules/SubscribersModule.html":{},"controllers/SubscriptionsController.html":{},"modules/SubscriptionsModule.html":{},"injectables/SubscriptionsService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/common/services/console",{"_index":824,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["nestjs/config",{"_index":98,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/CustomLogger.html":{},"modules/DatabaseModule.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"modules/GoogleAuthenticationModule.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"modules/LoggerModule.html":{},"modules/PostsModule.html":{},"modules/PubSubModule.html":{},"modules/SearchModule.html":{},"modules/SmsModule.html":{},"injectables/SmsService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/SubscribersModule.html":{},"modules/SubscriptionsModule.html":{},"injectables/SubscriptionsService.html":{},"injectables/TwoFactorAuthenticationService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":2432,"title":{},"body":{"dependencies.html":{}}}],["nestjs/cqrs",{"_index":657,"title":{},"body":{"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"classes/CreateCommentHandler.html":{},"classes/GetCommentsHandler.html":{},"dependencies.html":{}}}],["nestjs/elasticsearch",{"_index":905,"title":{},"body":{"injectables/ElasticsearchHealthIndicator.html":{},"injectables/PostsSearchService.html":{},"modules/SearchModule.html":{},"dependencies.html":{}}}],["nestjs/graphql",{"_index":115,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostInput.html":{},"injectables/GraphqlJwtAuthGuard.html":{},"classes/Post-1.html":{},"classes/PostsResolver.html":{},"classes/Timestamp.html":{},"classes/User-1.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":311,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"dependencies.html":{}}}],["nestjs/microservices",{"_index":2065,"title":{},"body":{"controllers/SubscribersController.html":{},"modules/SubscribersModule.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":308,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/GraphqlJwtAuthGuard.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1400,"title":{},"body":{"controllers/OptimizeController.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/schedule",{"_index":111,"title":{},"body":{"modules/AppModule.html":{},"injectables/EmailSchedulingService.html":{},"dependencies.html":{}}}],["nestjs/terminus",{"_index":904,"title":{},"body":{"injectables/ElasticsearchHealthIndicator.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":467,"title":{},"body":{"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"modules/CommentsModule.html":{},"classes/CreateCommentHandler.html":{},"modules/DatabaseModule.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/GetCommentsHandler.html":{},"modules/LoggerModule.html":{},"injectables/LogsService.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/ProductCategoriesModule.html":{},"injectables/ProductCategoriesService.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"modules/StripeWebhookModule.html":{},"injectables/StripeWebhookService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/websockets",{"_index":584,"title":{},"body":{"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"dependencies.html":{}}}],["nestlogger",{"_index":869,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["nestlogger('sql",{"_index":851,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["nestmiddleware",{"_index":1351,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["new",{"_index":369,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/CategoriesService.html":{},"injectables/ChatService.html":{},"controllers/CommentsController.html":{},"classes/DatabaseLogger.html":{},"modules/DatabaseModule.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailConfirmationService.html":{},"injectables/EmailSchedulingService.html":{},"injectables/FilesService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/LogsMiddleware.html":{},"injectables/PostsLoaders.html":{},"injectables/PostsService.html":{},"modules/PubSubModule.html":{},"controllers/SmsController.html":{},"injectables/SmsService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/StripeWebhookService.html":{},"injectables/SubscriptionsService.html":{},"classes/Timestamp.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["newbody",{"_index":1675,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["newcategory",{"_index":509,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["newfile",{"_index":1116,"title":{},"body":{"injectables/FilesService.html":{}}}],["newlog",{"_index":1368,"title":{},"body":{"injectables/LogsService.html":{}}}],["newmessage",{"_index":619,"title":{},"body":{"injectables/ChatService.html":{}}}],["newpost",{"_index":717,"title":{},"body":{"classes/CreateCommentHandler.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{}}}],["newproduct",{"_index":1823,"title":{},"body":{"injectables/ProductsService.html":{}}}],["newproductcategory",{"_index":1789,"title":{},"body":{"injectables/ProductCategoriesService.html":{}}}],["newuser",{"_index":2357,"title":{},"body":{"injectables/UsersService.html":{}}}],["next",{"_index":1067,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{},"injectables/LogsMiddleware.html":{}}}],["nextfunction",{"_index":1347,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["node",{"_index":1851,"title":{},"body":{"modules/SearchModule.html":{}}}],["node.js",{"_index":2548,"title":{},"body":{"index.html":{}}}],["nodemailer",{"_index":1053,"title":{},"body":{"injectables/EmailService.html":{},"dependencies.html":{}}}],["nodemailer/lib/mailer",{"_index":1054,"title":{},"body":{"injectables/EmailService.html":{}}}],["nodemailertransport",{"_index":1044,"title":{},"body":{"injectables/EmailService.html":{}}}],["notfoundexception",{"_index":530,"title":{},"body":{"classes/CategoryNotFoundException.html":{},"classes/PostNotFoundException.html":{},"injectables/StripeService.html":{},"injectables/SubscriptionsService.html":{}}}],["notfoundexception('customer",{"_index":2132,"title":{},"body":{"injectables/SubscriptionsService.html":{}}}],["npm",{"_index":2559,"title":{},"body":{"index.html":{}}}],["null",{"_index":2150,"title":{},"body":{"classes/Timestamp.html":{},"injectables/UsersService.html":{}}}],["nullable",{"_index":749,"title":{},"body":{"classes/CreatePostInput.html":{},"classes/Post.html":{},"classes/Post-1.html":{},"classes/User.html":{}}}],["number",{"_index":38,"title":{},"body":{"classes/Address.html":{},"injectables/AuthenticationService.html":{},"interfaces/CarProperties.html":{},"injectables/CategoriesService.html":{},"classes/Category.html":{},"classes/CategoryNotFoundException.html":{},"classes/Comment.html":{},"classes/CreateChargeDto.html":{},"classes/DatabaseLogger.html":{},"injectables/EmailConfirmationService.html":{},"injectables/FilesService.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsQuery.html":{},"classes/Log.html":{},"classes/Message.html":{},"classes/ObjectWithIdDto.html":{},"classes/PaginationParams.html":{},"classes/Post.html":{},"classes/Post-1.html":{},"interfaces/PostCountResult.html":{},"classes/PostNotFoundException.html":{},"interfaces/PostSearchBody.html":{},"interfaces/PostSearchResult.html":{},"injectables/PostsLoaders.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"classes/Product.html":{},"classes/ProductCategory.html":{},"classes/PublicFile.html":{},"controllers/SmsController.html":{},"injectables/SmsService.html":{},"injectables/StripeService.html":{},"interfaces/Subscriber.html":{},"classes/Timestamp.html":{},"interfaces/TokenPayload.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"injectables/UsersService.html":{}}}],["number(configservice.get('redis_port",{"_index":143,"title":{},"body":{"modules/AppModule.html":{}}}],["number(value",{"_index":2159,"title":{},"body":{"classes/Timestamp.html":{}}}],["number(valuenode.value",{"_index":2164,"title":{},"body":{"classes/Timestamp.html":{}}}],["numberofcylinders",{"_index":416,"title":{},"body":{"interfaces/CarProperties.html":{}}}],["oauth20",{"_index":2465,"title":{},"body":{"dependencies.html":{}}}],["oauthclient",{"_index":1167,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["object",{"_index":989,"title":{},"body":{"injectables/EmailConfirmationService.html":{},"miscellaneous/variables.html":{}}}],["object.entries(newbody).reduce((result",{"_index":1677,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["objecttype",{"_index":1483,"title":{},"body":{"classes/Post-1.html":{},"classes/User-1.html":{}}}],["objectwithiddto",{"_index":697,"title":{"classes/ObjectWithIdDto.html":{}},"body":{"classes/CreateCommentDto.html":{},"classes/CreateProductDto.html":{},"classes/ObjectWithIdDto.html":{},"coverage.html":{}}}],["observable",{"_index":1070,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["off_session",{"_index":1982,"title":{},"body":{"injectables/StripeService.html":{}}}],["offset",{"_index":1431,"title":{},"body":{"classes/PaginationParams.html":{},"controllers/PostsController.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{}}}],["on')@httpcode(200)@useguards(jwtauthenticationguard",{"_index":2182,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["onetomany",{"_index":1464,"title":{},"body":{"classes/Post.html":{},"classes/ProductCategory.html":{},"classes/User.html":{}}}],["onetomany(undefined",{"_index":1452,"title":{},"body":{"classes/Post.html":{},"classes/ProductCategory.html":{},"classes/User.html":{}}}],["onetoone",{"_index":46,"title":{},"body":{"classes/Address.html":{},"classes/User.html":{}}}],["onetoone(undefined",{"_index":42,"title":{},"body":{"classes/Address.html":{},"classes/User.html":{}}}],["ongatewayconnection",{"_index":561,"title":{},"body":{"classes/ChatGateway.html":{}}}],["onmoduleinit",{"_index":2058,"title":{},"body":{"controllers/SubscribersController.html":{}}}],["open",{"_index":2576,"title":{},"body":{"index.html":{}}}],["optimize",{"_index":1381,"title":{},"body":{"controllers/OptimizeController.html":{},"modules/OptimizeModule.html":{}}}],["optimize.controller",{"_index":1422,"title":{},"body":{"modules/OptimizeModule.html":{}}}],["optimize/optimize.module",{"_index":121,"title":{},"body":{"modules/AppModule.html":{}}}],["optimizecontroller",{"_index":1379,"title":{"controllers/OptimizeController.html":{}},"body":{"controllers/OptimizeController.html":{},"modules/OptimizeModule.html":{},"coverage.html":{}}}],["optimizemodule",{"_index":68,"title":{"modules/OptimizeModule.html":{}},"body":{"modules/AppModule.html":{},"modules/OptimizeModule.html":{},"modules.html":{},"overview.html":{}}}],["optional",{"_index":33,"title":{},"body":{"classes/Address.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CategoryNotFoundException.html":{},"controllers/ChargeController.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"controllers/CommentsController.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentHandler.html":{},"classes/CreatePostInput.html":{},"controllers/CreditCardsController.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailConfirmationService.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/FilesService.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/GraphqlJwtAuthGuard.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"controllers/OptimizeController.html":{},"classes/PaginationParams.html":{},"classes/Post.html":{},"classes/Post-1.html":{},"classes/PostNotFoundException.html":{},"controllers/PostsController.html":{},"injectables/PostsLoaders.html":{},"classes/PostsResolver.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"controllers/ProductCategoriesController.html":{},"injectables/ProductCategoriesService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"controllers/SmsController.html":{},"injectables/SmsService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/StripeWebhookService.html":{},"controllers/SubscribersController.html":{},"interfaces/SubscribersService.html":{},"controllers/SubscriptionsController.html":{},"injectables/SubscriptionsService.html":{},"classes/Timestamp.html":{},"interfaces/TokenPayload.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":809,"title":{},"body":{"injectables/CustomLogger.html":{},"injectables/EmailService.html":{},"injectables/PostsService.html":{},"modules/SubscribersModule.html":{}}}],["order",{"_index":1667,"title":{},"body":{"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{}}}],["originalurl",{"_index":1353,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["otpauthurl",{"_index":2189,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{}}}],["otplib",{"_index":2209,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{},"dependencies.html":{}}}],["out",{"_index":81,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"modules/CategoriesModule.html":{},"modules/ChargeModule.html":{},"modules/ChatModule.html":{},"modules/CreditCardsModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"modules/FilesModule.html":{},"modules/GoogleAuthenticationModule.html":{},"modules/HealthModule.html":{},"modules/LoggerModule.html":{},"modules/PostsModule.html":{},"modules/ProductCategoriesModule.html":{},"modules/ProductsModule.html":{},"modules/SmsModule.html":{},"modules/StripeModule.html":{},"modules/StripeWebhookModule.html":{},"modules/SubscriptionsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["out')@httpcode(200",{"_index":226,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["overview",{"_index":2600,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":2082,"title":{"dependencies.html":{}},"body":{"modules/SubscribersModule.html":{}}}],["paginationparams",{"_index":1428,"title":{"classes/PaginationParams.html":{}},"body":{"classes/PaginationParams.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["paragraphs",{"_index":731,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostInput.html":{},"classes/Post.html":{},"classes/Post-1.html":{},"interfaces/PostSearchBody.html":{},"injectables/PostsSearchService.html":{},"classes/UpdatePostDto.html":{}}}],["param",{"_index":443,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/OptimizeController.html":{},"controllers/PostsController.html":{}}}],["param('id",{"_index":1411,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["parameters",{"_index":89,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CategoryNotFoundException.html":{},"controllers/ChargeController.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"controllers/CommentsController.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentHandler.html":{},"controllers/CreditCardsController.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailConfirmationService.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/FilesService.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/GraphqlJwtAuthGuard.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"controllers/OptimizeController.html":{},"classes/PostNotFoundException.html":{},"controllers/PostsController.html":{},"injectables/PostsLoaders.html":{},"classes/PostsResolver.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"controllers/ProductCategoriesController.html":{},"injectables/ProductCategoriesService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"controllers/SmsController.html":{},"injectables/SmsService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/StripeWebhookService.html":{},"controllers/SubscribersController.html":{},"interfaces/SubscribersService.html":{},"controllers/SubscriptionsController.html":{},"injectables/SubscriptionsService.html":{},"classes/Timestamp.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":2093,"title":{},"body":{"interfaces/SubscribersService.html":{}}}],["parse",{"_index":615,"title":{},"body":{"injectables/ChatService.html":{},"classes/PostsResolver.html":{},"dependencies.html":{}}}],["parse(cookie",{"_index":625,"title":{},"body":{"injectables/ChatService.html":{}}}],["parsedinfo",{"_index":1615,"title":{},"body":{"classes/PostsResolver.html":{}}}],["parseliteral",{"_index":2136,"title":{},"body":{"classes/Timestamp.html":{}}}],["parseliteral(valuenode",{"_index":2146,"title":{},"body":{"classes/Timestamp.html":{}}}],["parser",{"_index":2450,"title":{},"body":{"dependencies.html":{}}}],["parseresolveinfo",{"_index":1606,"title":{},"body":{"classes/PostsResolver.html":{}}}],["parseresolveinfo(info",{"_index":1616,"title":{},"body":{"classes/PostsResolver.html":{}}}],["parsevalue",{"_index":2137,"title":{},"body":{"classes/Timestamp.html":{}}}],["parsevalue(value",{"_index":2149,"title":{},"body":{"classes/Timestamp.html":{}}}],["pass",{"_index":1060,"title":{},"body":{"injectables/EmailService.html":{}}}],["passport",{"_index":1288,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":307,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["passportstrategy",{"_index":1289,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":1302,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passreqtocallback",{"_index":1295,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["password",{"_index":362,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"classes/RegisterDto.html":{},"modules/SearchModule.html":{},"classes/User.html":{},"miscellaneous/variables.html":{}}}],["patch",{"_index":444,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/PostsController.html":{}}}],["patch(':id",{"_index":440,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/PostsController.html":{}}}],["path",{"_index":117,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthenticationService.html":{},"controllers/HealthController.html":{},"modules/OptimizeModule.html":{},"modules/SubscribersModule.html":{}}}],["payload",{"_index":378,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/EmailConfirmationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/StripeService.html":{}}}],["payload.email",{"_index":990,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["payload.issecondfactorauthenticated",{"_index":1312,"title":{},"body":{"injectables/JwtTwoFactorStrategy.html":{}}}],["payload.userid",{"_index":402,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{}}}],["payment_method",{"_index":1979,"title":{},"body":{"injectables/StripeService.html":{}}}],["paymentmethodid",{"_index":10,"title":{},"body":{"classes/AddCreditCardDto.html":{},"classes/CreateChargeDto.html":{},"classes/SetDefaultCreditCardDto.html":{},"injectables/StripeService.html":{}}}],["pg",{"_index":2507,"title":{},"body":{"dependencies.html":{}}}],["phonenumber",{"_index":1835,"title":{},"body":{"classes/RegisterDto.html":{},"injectables/SmsService.html":{},"classes/User.html":{},"miscellaneous/variables.html":{}}}],["pipe(map(value",{"_index":1077,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["pipeqrcodestream",{"_index":2200,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["pipeqrcodestream(stream",{"_index":2206,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["plaintextpassword",{"_index":332,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["playground",{"_index":146,"title":{},"body":{"modules/AppModule.html":{}}}],["please",{"_index":2585,"title":{},"body":{"index.html":{}}}],["pngquant",{"_index":2501,"title":{},"body":{"dependencies.html":{}}}],["port",{"_index":142,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/PostsModule.html":{},"modules/PubSubModule.html":{}}}],["post",{"_index":239,"title":{"classes/Post.html":{},"classes/Post-1.html":{}},"body":{"controllers/AuthenticationController.html":{},"controllers/CategoriesController.html":{},"classes/Category.html":{},"controllers/ChargeController.html":{},"classes/Comment.html":{},"controllers/CommentsController.html":{},"classes/CreateCommentDto.html":{},"controllers/CreditCardsController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/EmailSchedulingController.html":{},"classes/GetCommentsHandler.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/OptimizeController.html":{},"classes/Post.html":{},"classes/Post-1.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"classes/PostsResolver.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"controllers/ProductCategoriesController.html":{},"controllers/ProductsController.html":{},"controllers/SmsController.html":{},"controllers/StripeWebhookController.html":{},"controllers/SubscribersController.html":{},"controllers/SubscriptionsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["post('authenticate",{"_index":2196,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["post('authenticate')@httpcode(200)@useguards(jwtauthenticationguard",{"_index":2175,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["post('avatar",{"_index":2284,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('avatar')@useguards(jwtauthenticationguard)@useinterceptors(undefined",{"_index":2275,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('check",{"_index":1864,"title":{},"body":{"controllers/SmsController.html":{}}}],["post('confirm",{"_index":915,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["post('default",{"_index":790,"title":{},"body":{"controllers/CreditCardsController.html":{}}}],["post('default')@httpcode(200)@useguards(jwtauthenticationguard",{"_index":781,"title":{},"body":{"controllers/CreditCardsController.html":{}}}],["post('generate",{"_index":2187,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["post('generate')@useguards(jwtauthenticationguard",{"_index":2178,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["post('image",{"_index":1404,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["post('image')@useinterceptors(undefined",{"_index":1389,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["post('initiate",{"_index":1869,"title":{},"body":{"controllers/SmsController.html":{}}}],["post('log",{"_index":271,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["post('monthly",{"_index":2108,"title":{},"body":{"controllers/SubscriptionsController.html":{}}}],["post('monthly')@useguards(jwtauthenticationguard",{"_index":2100,"title":{},"body":{"controllers/SubscriptionsController.html":{}}}],["post('register",{"_index":233,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["post('resend",{"_index":919,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["post('schedule",{"_index":1020,"title":{},"body":{"controllers/EmailSchedulingController.html":{}}}],["post('schedule')@useguards(jwtauthenticationguard",{"_index":1014,"title":{},"body":{"controllers/EmailSchedulingController.html":{}}}],["post('turn",{"_index":2181,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["post()@useguards(jwtauthenticationguard",{"_index":427,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/ChargeController.html":{},"controllers/CommentsController.html":{},"controllers/CreditCardsController.html":{},"controllers/ProductCategoriesController.html":{},"controllers/ProductsController.html":{},"controllers/SubscribersController.html":{}}}],["post()@useguards(jwttwofactorguard",{"_index":1507,"title":{},"body":{"controllers/PostsController.html":{}}}],["post.author",{"_index":1470,"title":{},"body":{"classes/Post.html":{},"classes/User.html":{}}}],["post.author.id",{"_index":1654,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["post.categories",{"_index":527,"title":{},"body":{"classes/Category.html":{}}}],["post.comments",{"_index":640,"title":{},"body":{"classes/Comment.html":{}}}],["post.entity",{"_index":1573,"title":{},"body":{"modules/PostsModule.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{}}}],["post.id",{"_index":1651,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["post.paragraphs",{"_index":1653,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["post.title",{"_index":1652,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["post_added_event",{"_index":1613,"title":{},"body":{"classes/PostsResolver.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["postadded",{"_index":1584,"title":{},"body":{"classes/PostsResolver.html":{},"miscellaneous/variables.html":{}}}],["postcountresult",{"_index":1485,"title":{"interfaces/PostCountResult.html":{}},"body":{"interfaces/PostCountResult.html":{},"injectables/PostsSearchService.html":{},"coverage.html":{}}}],["postgres",{"_index":881,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["postgres_db",{"_index":163,"title":{},"body":{"modules/AppModule.html":{}}}],["postgres_host",{"_index":157,"title":{},"body":{"modules/AppModule.html":{}}}],["postgres_password",{"_index":162,"title":{},"body":{"modules/AppModule.html":{}}}],["postgres_port",{"_index":159,"title":{},"body":{"modules/AppModule.html":{}}}],["postgres_user",{"_index":161,"title":{},"body":{"modules/AppModule.html":{}}}],["postgreserrorcode",{"_index":353,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/StripeWebhookService.html":{},"miscellaneous/enumerations.html":{}}}],["postgreserrorcode.uniqueviolation",{"_index":367,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/StripeWebhookService.html":{}}}],["postid",{"_index":533,"title":{},"body":{"classes/CategoryNotFoundException.html":{},"controllers/CommentsController.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsQuery.html":{},"classes/PostNotFoundException.html":{},"injectables/PostsSearchService.html":{}}}],["postnotfoundexception",{"_index":1488,"title":{"classes/PostNotFoundException.html":{}},"body":{"classes/PostNotFoundException.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["postnotfoundexception(id",{"_index":1727,"title":{},"body":{"injectables/PostsService.html":{}}}],["posts",{"_index":506,"title":{},"body":{"injectables/CategoriesService.html":{},"classes/Category.html":{},"controllers/PostsController.html":{},"classes/PostsResolver.html":{},"injectables/PostsSearchService.html":{},"classes/User.html":{}}}],["posts(info",{"_index":1594,"title":{},"body":{"classes/PostsResolver.html":{}}}],["posts.controller",{"_index":1572,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts.items",{"_index":1622,"title":{},"body":{"classes/PostsResolver.html":{}}}],["posts.resolver",{"_index":1576,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts.service",{"_index":1522,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"classes/PostsResolver.html":{}}}],["posts/post.entity",{"_index":526,"title":{},"body":{"classes/Category.html":{},"classes/Comment.html":{},"classes/User.html":{}}}],["posts/posts.module",{"_index":95,"title":{},"body":{"modules/AppModule.html":{}}}],["postscachekey.constant",{"_index":1528,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["postscontroller",{"_index":1499,"title":{"controllers/PostsController.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postsearchbody",{"_index":1492,"title":{"interfaces/PostSearchBody.html":{}},"body":{"interfaces/PostSearchBody.html":{},"interfaces/PostSearchResult.html":{},"injectables/PostsSearchService.html":{},"coverage.html":{}}}],["postsearchbody.interface",{"_index":1497,"title":{},"body":{"interfaces/PostSearchResult.html":{}}}],["postsearchresult",{"_index":1494,"title":{"interfaces/PostSearchResult.html":{}},"body":{"interfaces/PostSearchResult.html":{},"injectables/PostsSearchService.html":{},"coverage.html":{}}}],["postsloaders",{"_index":1546,"title":{"injectables/PostsLoaders.html":{}},"body":{"injectables/PostsLoaders.html":{},"modules/PostsModule.html":{},"coverage.html":{},"overview.html":{}}}],["postsmodule",{"_index":69,"title":{"modules/PostsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsrepository",{"_index":1688,"title":{},"body":{"injectables/PostsService.html":{}}}],["postsresolver",{"_index":1575,"title":{"classes/PostsResolver.html":{}},"body":{"modules/PostsModule.html":{},"classes/PostsResolver.html":{},"coverage.html":{}}}],["postssearch.service",{"_index":1574,"title":{},"body":{"modules/PostsModule.html":{},"injectables/PostsService.html":{}}}],["postssearchservice",{"_index":1565,"title":{"injectables/PostsSearchService.html":{}},"body":{"modules/PostsModule.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["postsservice",{"_index":1521,"title":{"injectables/PostsService.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["prefix",{"_index":208,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/CategoriesController.html":{},"controllers/ChargeController.html":{},"controllers/CommentsController.html":{},"controllers/CreditCardsController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/EmailSchedulingController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/HealthController.html":{},"controllers/OptimizeController.html":{},"controllers/PostsController.html":{},"controllers/ProductCategoriesController.html":{},"controllers/ProductsController.html":{},"controllers/SmsController.html":{},"controllers/StripeWebhookController.html":{},"controllers/SubscribersController.html":{},"controllers/SubscriptionsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{}}}],["price",{"_index":1993,"title":{},"body":{"injectables/StripeService.html":{}}}],["priceid",{"_index":1957,"title":{},"body":{"injectables/StripeService.html":{},"injectables/SubscriptionsService.html":{}}}],["primarycolumn",{"_index":1928,"title":{},"body":{"classes/StripeEvent.html":{}}}],["primarygeneratedcolumn",{"_index":39,"title":{},"body":{"classes/Address.html":{},"classes/Category.html":{},"classes/Comment.html":{},"classes/Log.html":{},"classes/Message.html":{},"classes/Post.html":{},"classes/Product.html":{},"classes/ProductCategory.html":{},"classes/PublicFile.html":{},"classes/User.html":{}}}],["private",{"_index":261,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/ChargeController.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"controllers/CommentsController.html":{},"classes/CreateCommentHandler.html":{},"controllers/CreditCardsController.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"controllers/EmailConfirmationController.html":{},"injectables/EmailConfirmationService.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/FilesService.html":{},"classes/GetCommentsHandler.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/HealthController.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"controllers/OptimizeController.html":{},"controllers/PostsController.html":{},"injectables/PostsLoaders.html":{},"classes/PostsResolver.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"controllers/ProductCategoriesController.html":{},"injectables/ProductCategoriesService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"controllers/SmsController.html":{},"injectables/SmsService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/StripeWebhookService.html":{},"controllers/SubscribersController.html":{},"controllers/SubscriptionsController.html":{},"injectables/SubscriptionsService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["process",{"_index":1237,"title":{},"body":{"controllers/HealthController.html":{}}}],["processed",{"_index":2045,"title":{},"body":{"injectables/StripeWebhookService.html":{}}}],["processimage",{"_index":1383,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["processimage(@uploadedfiles",{"_index":1406,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["processimage(files",{"_index":1387,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["processors",{"_index":1425,"title":{},"body":{"modules/OptimizeModule.html":{}}}],["processsubscriptionupdate",{"_index":2032,"title":{},"body":{"injectables/StripeWebhookService.html":{}}}],["processsubscriptionupdate(event",{"_index":2038,"title":{},"body":{"injectables/StripeWebhookService.html":{}}}],["product",{"_index":1745,"title":{"classes/Product.html":{}},"body":{"classes/Product.html":{},"controllers/ProductCategoriesController.html":{},"classes/ProductCategory.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"coverage.html":{}}}],["product.category",{"_index":1798,"title":{},"body":{"classes/ProductCategory.html":{}}}],["product.entity",{"_index":1812,"title":{},"body":{"modules/ProductsModule.html":{},"injectables/ProductsService.html":{}}}],["productcategories.controller",{"_index":1776,"title":{},"body":{"modules/ProductCategoriesModule.html":{}}}],["productcategories.service",{"_index":1765,"title":{},"body":{"controllers/ProductCategoriesController.html":{},"modules/ProductCategoriesModule.html":{}}}],["productcategories/productcategories.module",{"_index":108,"title":{},"body":{"modules/AppModule.html":{}}}],["productcategories/productcategory.entity",{"_index":1753,"title":{},"body":{"classes/Product.html":{}}}],["productcategoriescontroller",{"_index":1757,"title":{"controllers/ProductCategoriesController.html":{}},"body":{"controllers/ProductCategoriesController.html":{},"modules/ProductCategoriesModule.html":{},"coverage.html":{}}}],["productcategoriesmodule",{"_index":70,"title":{"modules/ProductCategoriesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ProductCategoriesModule.html":{},"modules.html":{},"overview.html":{}}}],["productcategoriesrepository",{"_index":1783,"title":{},"body":{"injectables/ProductCategoriesService.html":{}}}],["productcategoriesservice",{"_index":1764,"title":{"injectables/ProductCategoriesService.html":{}},"body":{"controllers/ProductCategoriesController.html":{},"modules/ProductCategoriesModule.html":{},"injectables/ProductCategoriesService.html":{},"coverage.html":{},"overview.html":{}}}],["productcategory",{"_index":1747,"title":{"classes/ProductCategory.html":{}},"body":{"classes/Product.html":{},"controllers/ProductCategoriesController.html":{},"modules/ProductCategoriesModule.html":{},"injectables/ProductCategoriesService.html":{},"classes/ProductCategory.html":{},"coverage.html":{}}}],["productcategory.entity",{"_index":1775,"title":{},"body":{"modules/ProductCategoriesModule.html":{},"injectables/ProductCategoriesService.html":{}}}],["production",{"_index":834,"title":{},"body":{"injectables/CustomLogger.html":{},"index.html":{}}}],["products",{"_index":1793,"title":{},"body":{"classes/ProductCategory.html":{},"controllers/ProductsController.html":{}}}],["products.controller",{"_index":1813,"title":{},"body":{"modules/ProductsModule.html":{}}}],["products.service",{"_index":1805,"title":{},"body":{"controllers/ProductsController.html":{},"modules/ProductsModule.html":{}}}],["products/product.entity",{"_index":1797,"title":{},"body":{"classes/ProductCategory.html":{}}}],["products/products.module",{"_index":109,"title":{},"body":{"modules/AppModule.html":{}}}],["productscontroller",{"_index":1799,"title":{"controllers/ProductsController.html":{}},"body":{"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"coverage.html":{}}}],["productsmodule",{"_index":71,"title":{"modules/ProductsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ProductsModule.html":{},"modules.html":{},"overview.html":{}}}],["productsrepository",{"_index":1818,"title":{},"body":{"injectables/ProductsService.html":{}}}],["productsservice",{"_index":1768,"title":{"injectables/ProductsService.html":{}},"body":{"controllers/ProductCategoriesController.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"coverage.html":{},"overview.html":{}}}],["progressive",{"_index":2547,"title":{},"body":{"index.html":{}}}],["project",{"_index":2577,"title":{},"body":{"index.html":{}}}],["promise",{"_index":479,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"injectables/FilesService.html":{},"injectables/LocalStrategy.html":{},"interfaces/SubscribersService.html":{}}}],["properties",{"_index":9,"title":{},"body":{"classes/AddCreditCardDto.html":{},"classes/Address.html":{},"interfaces/BookProperties.html":{},"interfaces/CarProperties.html":{},"injectables/CategoriesService.html":{},"classes/Category.html":{},"classes/ChatGateway.html":{},"classes/CheckVerificationCodeDto.html":{},"classes/Comment.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostInput.html":{},"classes/CreateProductCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateSubscriberDto.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"classes/EmailScheduleDto.html":{},"injectables/EmailService.html":{},"classes/FindOneParams.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsQuery.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/Log.html":{},"classes/LogInDto.html":{},"injectables/LogsMiddleware.html":{},"classes/Message.html":{},"classes/ObjectWithIdDto.html":{},"classes/PaginationParams.html":{},"classes/Post.html":{},"classes/Post-1.html":{},"interfaces/PostCountResult.html":{},"interfaces/PostSearchBody.html":{},"interfaces/PostSearchResult.html":{},"injectables/PostsLoaders.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"classes/Product.html":{},"classes/ProductCategory.html":{},"classes/PublicFile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithRawBody.html":{},"interfaces/RequestWithUser.html":{},"classes/SetDefaultCreditCardDto.html":{},"injectables/SmsService.html":{},"classes/StripeEvent.html":{},"injectables/StripeService.html":{},"interfaces/Subscriber.html":{},"classes/Timestamp.html":{},"interfaces/TokenPayload.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"interfaces/VerificationTokenPayload.html":{}}}],["protopath",{"_index":2083,"title":{},"body":{"modules/SubscribersModule.html":{}}}],["provide",{"_index":1828,"title":{},"body":{"modules/PubSubModule.html":{},"modules/SubscribersModule.html":{}}}],["provided",{"_index":398,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/SmsService.html":{}}}],["providers",{"_index":202,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/CategoriesModule.html":{},"modules/ChargeModule.html":{},"modules/ChatModule.html":{},"modules/CommentsModule.html":{},"modules/CreditCardsModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"modules/FilesModule.html":{},"modules/GoogleAuthenticationModule.html":{},"modules/HealthModule.html":{},"modules/LoggerModule.html":{},"modules/OptimizeModule.html":{},"modules/PostsModule.html":{},"modules/ProductCategoriesModule.html":{},"modules/ProductsModule.html":{},"modules/PubSubModule.html":{},"modules/SmsModule.html":{},"modules/StripeModule.html":{},"modules/StripeWebhookModule.html":{},"modules/SubscribersModule.html":{},"modules/SubscriptionsModule.html":{},"modules/UsersModule.html":{}}}],["pub_sub",{"_index":1612,"title":{},"body":{"classes/PostsResolver.html":{},"modules/PubSubModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["public",{"_index":28,"title":{},"body":{"classes/Address.html":{},"injectables/AuthenticationService.html":{},"classes/Category.html":{},"classes/Comment.html":{},"classes/CreateCommentCommand.html":{},"injectables/EmailConfirmationService.html":{},"classes/GetCommentsQuery.html":{},"classes/Log.html":{},"classes/Message.html":{},"classes/Post.html":{},"injectables/PostsLoaders.html":{},"classes/Product.html":{},"classes/ProductCategory.html":{},"classes/PublicFile.html":{},"classes/StripeEvent.html":{},"injectables/StripeService.html":{},"injectables/SubscriptionsService.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/User.html":{}}}],["publicationyear",{"_index":409,"title":{},"body":{"interfaces/BookProperties.html":{}}}],["publicfile",{"_index":1086,"title":{"classes/PublicFile.html":{}},"body":{"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/PublicFile.html":{},"classes/User.html":{},"coverage.html":{}}}],["publicfile.entity",{"_index":1087,"title":{},"body":{"modules/FilesModule.html":{},"injectables/FilesService.html":{}}}],["publicfilesrepository",{"_index":1095,"title":{},"body":{"injectables/FilesService.html":{}}}],["pubsub",{"_index":1586,"title":{},"body":{"classes/PostsResolver.html":{}}}],["pubsub/pubsub.module",{"_index":118,"title":{},"body":{"modules/AppModule.html":{},"classes/PostsResolver.html":{}}}],["pubsubmodule",{"_index":72,"title":{"modules/PubSubModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PubSubModule.html":{},"modules.html":{},"overview.html":{}}}],["qrcode",{"_index":2211,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{},"dependencies.html":{}}}],["queries/handlers/getcomments.handler",{"_index":678,"title":{},"body":{"modules/CommentsModule.html":{}}}],["queries/implementations/getcomments.query",{"_index":661,"title":{},"body":{"controllers/CommentsController.html":{}}}],["query",{"_index":653,"title":{},"body":{"controllers/CommentsController.html":{},"classes/DatabaseLogger.html":{},"classes/GetCommentsHandler.html":{},"controllers/PostsController.html":{},"classes/PostsResolver.html":{},"injectables/PostsSearchService.html":{}}}],["query('search",{"_index":1534,"title":{},"body":{"controllers/PostsController.html":{}}}],["query(undefined",{"_index":1596,"title":{},"body":{"classes/PostsResolver.html":{}}}],["query.postid",{"_index":1142,"title":{},"body":{"classes/GetCommentsHandler.html":{}}}],["querybus",{"_index":656,"title":{},"body":{"controllers/CommentsController.html":{}}}],["queryhandler",{"_index":1139,"title":{},"body":{"classes/GetCommentsHandler.html":{}}}],["queryhandler(getcommentsquery",{"_index":1141,"title":{},"body":{"classes/GetCommentsHandler.html":{}}}],["queryrunner",{"_index":854,"title":{},"body":{"classes/DatabaseLogger.html":{},"injectables/FilesService.html":{},"injectables/UsersService.html":{}}}],["queryrunner.committransaction",{"_index":2373,"title":{},"body":{"injectables/UsersService.html":{}}}],["queryrunner.connect",{"_index":2369,"title":{},"body":{"injectables/UsersService.html":{}}}],["queryrunner.manager.delete(publicfile",{"_index":1126,"title":{},"body":{"injectables/FilesService.html":{}}}],["queryrunner.manager.findone(publicfile",{"_index":1125,"title":{},"body":{"injectables/FilesService.html":{}}}],["queryrunner.manager.update(user",{"_index":2371,"title":{},"body":{"injectables/UsersService.html":{}}}],["queryrunner.release",{"_index":2376,"title":{},"body":{"injectables/UsersService.html":{}}}],["queryrunner.rollbacktransaction",{"_index":2374,"title":{},"body":{"injectables/UsersService.html":{}}}],["queryrunner.starttransaction",{"_index":2370,"title":{},"body":{"injectables/UsersService.html":{}}}],["queryrunner?.data?.iscreatinglogs",{"_index":870,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["queue",{"_index":1395,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["range",{"_index":1664,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["rawbody",{"_index":1846,"title":{},"body":{"interfaces/RequestWithRawBody.html":{}}}],["rawbodymiddleware",{"_index":2412,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["read",{"_index":2586,"title":{},"body":{"index.html":{}}}],["readable",{"_index":1397,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["readable.from(result",{"_index":1419,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["readonly",{"_index":262,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/CategoriesController.html":{},"controllers/ChargeController.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"classes/CreateCommentCommand.html":{},"controllers/CreditCardsController.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"controllers/EmailConfirmationController.html":{},"injectables/EmailConfirmationService.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/FilesService.html":{},"classes/GetCommentsQuery.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LogsMiddleware.html":{},"controllers/OptimizeController.html":{},"controllers/PostsController.html":{},"injectables/PostsLoaders.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"controllers/ProductCategoriesController.html":{},"controllers/ProductsController.html":{},"controllers/SmsController.html":{},"injectables/SmsService.html":{},"controllers/StripeWebhookController.html":{},"injectables/StripeWebhookService.html":{},"controllers/SubscriptionsController.html":{},"injectables/SubscriptionsService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["receiverphonenumber",{"_index":1902,"title":{},"body":{"injectables/SmsService.html":{}}}],["recipient",{"_index":1002,"title":{},"body":{"classes/EmailScheduleDto.html":{}}}],["recursivelystripnullvalues",{"_index":1075,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["recursivelystripnullvalues(value",{"_index":1078,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{},"miscellaneous/functions.html":{}}}],["redis",{"_index":139,"title":{},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"classes/PostsResolver.html":{},"modules/PubSubModule.html":{},"dependencies.html":{}}}],["redis_host",{"_index":180,"title":{},"body":{"modules/AppModule.html":{}}}],["redis_port",{"_index":181,"title":{},"body":{"modules/AppModule.html":{}}}],["redispubsub",{"_index":1587,"title":{},"body":{"classes/PostsResolver.html":{},"modules/PubSubModule.html":{}}}],["redisstore",{"_index":1567,"title":{},"body":{"modules/PostsModule.html":{}}}],["reflect",{"_index":2510,"title":{},"body":{"dependencies.html":{}}}],["refresh",{"_index":213,"title":{},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"coverage.html":{}}}],["refresh(@req",{"_index":292,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["refresh(request",{"_index":228,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["refresh.guard",{"_index":255,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["refresh.guard.ts",{"_index":1279,"title":{},"body":{"injectables/JwtRefreshGuard.html":{},"coverage.html":{}}}],["refresh=${token",{"_index":390,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["refreshtoken",{"_index":278,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/UsersService.html":{}}}],["refreshtokencookie",{"_index":276,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["register",{"_index":214,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["register(@body",{"_index":263,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["register(@res",{"_index":2188,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["register(registrationdata",{"_index":231,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["register(response",{"_index":2177,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["registerdto",{"_index":232,"title":{"classes/RegisterDto.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/RegisterDto.html":{},"coverage.html":{}}}],["registeruser",{"_index":1171,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["registeruser(token",{"_index":1181,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["registrationdata",{"_index":235,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["relationid",{"_index":1465,"title":{},"body":{"classes/Post.html":{}}}],["relationid((post",{"_index":1469,"title":{},"body":{"classes/Post.html":{}}}],["relationid(undefined",{"_index":1446,"title":{},"body":{"classes/Post.html":{}}}],["relations",{"_index":505,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/ChatService.html":{},"injectables/PostsService.html":{}}}],["remove",{"_index":1631,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["remove(postid",{"_index":1639,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["removerefreshtoken",{"_index":2309,"title":{},"body":{"injectables/UsersService.html":{}}}],["removerefreshtoken(userid",{"_index":2337,"title":{},"body":{"injectables/UsersService.html":{}}}],["repository",{"_index":498,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/ChatService.html":{},"classes/CreateCommentHandler.html":{},"injectables/FilesService.html":{},"classes/GetCommentsHandler.html":{},"injectables/LogsService.html":{},"injectables/PostsService.html":{},"injectables/ProductCategoriesService.html":{},"injectables/ProductsService.html":{},"injectables/StripeWebhookService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["represents",{"_index":2140,"title":{},"body":{"classes/Timestamp.html":{}}}],["req",{"_index":237,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/ChargeController.html":{},"controllers/CommentsController.html":{},"controllers/CreditCardsController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/PostsController.html":{},"classes/PostsResolver.html":{},"controllers/SmsController.html":{},"controllers/StripeWebhookController.html":{},"controllers/SubscriptionsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{}}}],["req.user",{"_index":665,"title":{},"body":{"controllers/CommentsController.html":{},"controllers/PostsController.html":{}}}],["request",{"_index":219,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/ChargeController.html":{},"controllers/CreditCardsController.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LogsMiddleware.html":{},"interfaces/RequestWithRawBody.html":{},"interfaces/RequestWithUser.html":{},"controllers/SmsController.html":{},"controllers/StripeWebhookController.html":{},"controllers/SubscriptionsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{}}}],["request._parsedurl.query",{"_index":1275,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["request.cookies?.refresh",{"_index":1296,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["request.rawbody",{"_index":2018,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["request.res.setheader('set",{"_index":282,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["request.user",{"_index":289,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["request.user.isphonenumberconfirmed",{"_index":1877,"title":{},"body":{"controllers/SmsController.html":{}}}],["request.user.phonenumber",{"_index":1882,"title":{},"body":{"controllers/SmsController.html":{}}}],["request.user.stripecustomerid",{"_index":551,"title":{},"body":{"controllers/ChargeController.html":{},"controllers/CreditCardsController.html":{}}}],["request.user?.isemailconfirmed",{"_index":941,"title":{},"body":{"guards/EmailConfirmationGuard.html":{}}}],["request?.cookies?.authentication",{"_index":1303,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["request?.cookies?.refresh",{"_index":1292,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["requestallmessages",{"_index":565,"title":{},"body":{"classes/ChatGateway.html":{}}}],["requestallmessages(socket",{"_index":577,"title":{},"body":{"classes/ChatGateway.html":{}}}],["requestwithrawbody",{"_index":1844,"title":{"interfaces/RequestWithRawBody.html":{}},"body":{"interfaces/RequestWithRawBody.html":{},"controllers/StripeWebhookController.html":{},"coverage.html":{}}}],["requestwithrawbody.interface",{"_index":2009,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["requestwithuser",{"_index":216,"title":{"interfaces/RequestWithUser.html":{}},"body":{"controllers/AuthenticationController.html":{},"controllers/ChargeController.html":{},"controllers/CommentsController.html":{},"controllers/CreditCardsController.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"controllers/PostsController.html":{},"classes/PostsResolver.html":{},"interfaces/RequestWithUser.html":{},"controllers/SmsController.html":{},"controllers/SubscriptionsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["requestwithuser.interface",{"_index":246,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["required",{"_index":496,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["res",{"_index":1392,"title":{},"body":{"controllers/OptimizeController.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["resendconfirmationlink",{"_index":913,"title":{},"body":{"controllers/EmailConfirmationController.html":{},"injectables/EmailConfirmationService.html":{}}}],["resendconfirmationlink(@req",{"_index":929,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["resendconfirmationlink(request",{"_index":918,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["resendconfirmationlink(userid",{"_index":963,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["reset",{"_index":80,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/CategoriesModule.html":{},"modules/ChargeModule.html":{},"modules/ChatModule.html":{},"modules/CreditCardsModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"modules/FilesModule.html":{},"modules/GoogleAuthenticationModule.html":{},"modules/HealthModule.html":{},"modules/LoggerModule.html":{},"modules/PostsModule.html":{},"modules/ProductCategoriesModule.html":{},"modules/ProductsModule.html":{},"modules/SmsModule.html":{},"modules/StripeModule.html":{},"modules/StripeWebhookModule.html":{},"modules/SubscriptionsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resolve",{"_index":1610,"title":{},"body":{"classes/PostsResolver.html":{},"dependencies.html":{}}}],["resolver",{"_index":1600,"title":{},"body":{"classes/PostsResolver.html":{}}}],["resolvetree",{"_index":1607,"title":{},"body":{"classes/PostsResolver.html":{}}}],["resource_missing",{"_index":2531,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["resourcemissing",{"_index":2530,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["response",{"_index":1346,"title":{},"body":{"injectables/LogsMiddleware.html":{},"controllers/OptimizeController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{}}}],["response.on('finish",{"_index":1352,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["response.sendstatus(202",{"_index":1416,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["response.sendstatus(404",{"_index":1413,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["result",{"_index":1417,"title":{},"body":{"controllers/OptimizeController.html":{},"injectables/PostsSearchService.html":{},"injectables/SmsService.html":{}}}],["result.id",{"_index":1740,"title":{},"body":{"injectables/PostsService.html":{}}}],["result.status",{"_index":1919,"title":{},"body":{"injectables/SmsService.html":{}}}],["result.valid",{"_index":1918,"title":{},"body":{"injectables/SmsService.html":{}}}],["results",{"_index":24,"title":{},"body":{"classes/AddCreditCardDto.html":{},"classes/Address.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"interfaces/BookProperties.html":{},"interfaces/CarProperties.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"classes/Category.html":{},"classes/CategoryNotFoundException.html":{},"controllers/ChargeController.html":{},"modules/ChargeModule.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/CheckVerificationCodeDto.html":{},"classes/Comment.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostInput.html":{},"classes/CreateProductCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateSubscriberDto.html":{},"classes/CreateUserDto.html":{},"controllers/CreditCardsController.html":{},"modules/CreditCardsModule.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"modules/DatabaseModule.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullInterceptor.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/FindOneParams.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthenticationModule.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/GraphqlJwtAuthGuard.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/Log.html":{},"classes/LogInDto.html":{},"modules/LoggerModule.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"classes/Message.html":{},"classes/ObjectWithIdDto.html":{},"controllers/OptimizeController.html":{},"modules/OptimizeModule.html":{},"classes/PaginationParams.html":{},"classes/Post.html":{},"classes/Post-1.html":{},"interfaces/PostCountResult.html":{},"classes/PostNotFoundException.html":{},"interfaces/PostSearchBody.html":{},"interfaces/PostSearchResult.html":{},"controllers/PostsController.html":{},"injectables/PostsLoaders.html":{},"modules/PostsModule.html":{},"classes/PostsResolver.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"classes/Product.html":{},"controllers/ProductCategoriesController.html":{},"modules/ProductCategoriesModule.html":{},"injectables/ProductCategoriesService.html":{},"classes/ProductCategory.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"modules/PubSubModule.html":{},"classes/PublicFile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithRawBody.html":{},"interfaces/RequestWithUser.html":{},"modules/SearchModule.html":{},"classes/SetDefaultCreditCardDto.html":{},"controllers/SmsController.html":{},"modules/SmsModule.html":{},"injectables/SmsService.html":{},"classes/StripeEvent.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"modules/StripeWebhookModule.html":{},"injectables/StripeWebhookService.html":{},"interfaces/Subscriber.html":{},"controllers/SubscribersController.html":{},"modules/SubscribersModule.html":{},"interfaces/SubscribersService.html":{},"controllers/SubscriptionsController.html":{},"modules/SubscriptionsModule.html":{},"injectables/SubscriptionsService.html":{},"classes/Timestamp.html":{},"interfaces/TokenPayload.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/VerificationTokenPayload.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["results.map(result",{"_index":1739,"title":{},"body":{"injectables/PostsService.html":{}}}],["return",{"_index":268,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/ChargeController.html":{},"injectables/ChatService.html":{},"controllers/CommentsController.html":{},"classes/CreateCommentHandler.html":{},"controllers/CreditCardsController.html":{},"classes/DatabaseLogger.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailConfirmationService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/FilesService.html":{},"classes/GetCommentsHandler.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/GraphqlJwtAuthGuard.html":{},"controllers/HealthController.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"controllers/OptimizeController.html":{},"controllers/PostsController.html":{},"injectables/PostsLoaders.html":{},"classes/PostsResolver.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"controllers/ProductCategoriesController.html":{},"injectables/ProductCategoriesService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"injectables/SmsService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/StripeWebhookService.html":{},"controllers/SubscribersController.html":{},"modules/SubscribersModule.html":{},"controllers/SubscriptionsController.html":{},"injectables/SubscriptionsService.html":{},"classes/Timestamp.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":92,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/ChargeController.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"controllers/CommentsController.html":{},"classes/CreateCommentHandler.html":{},"controllers/CreditCardsController.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailConfirmationService.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/FilesService.html":{},"classes/GetCommentsHandler.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/GraphqlJwtAuthGuard.html":{},"controllers/HealthController.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"controllers/OptimizeController.html":{},"controllers/PostsController.html":{},"classes/PostsResolver.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"controllers/ProductCategoriesController.html":{},"injectables/ProductCategoriesService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"controllers/SmsController.html":{},"injectables/SmsService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/StripeWebhookService.html":{},"controllers/SubscribersController.html":{},"interfaces/SubscribersService.html":{},"controllers/SubscriptionsController.html":{},"injectables/SubscriptionsService.html":{},"classes/Timestamp.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["rimraf",{"_index":2513,"title":{},"body":{"dependencies.html":{}}}],["rss",{"_index":1245,"title":{},"body":{"controllers/HealthController.html":{}}}],["run",{"_index":2563,"title":{},"body":{"index.html":{}}}],["runincluster",{"_index":2415,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["runincluster(bootstrap",{"_index":2544,"title":{},"body":{"miscellaneous/functions.html":{}}}],["rxjs",{"_index":1072,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":1074,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["s3",{"_index":1106,"title":{},"body":{"injectables/FilesService.html":{}}}],["s3.deleteobject",{"_index":1122,"title":{},"body":{"injectables/FilesService.html":{}}}],["s3.upload",{"_index":1113,"title":{},"body":{"injectables/FilesService.html":{}}}],["savemessage",{"_index":605,"title":{},"body":{"injectables/ChatService.html":{}}}],["savemessage(content",{"_index":612,"title":{},"body":{"injectables/ChatService.html":{}}}],["scalable",{"_index":2552,"title":{},"body":{"index.html":{}}}],["scalar",{"_index":2154,"title":{},"body":{"classes/Timestamp.html":{}}}],["scalar('timestamp",{"_index":2156,"title":{},"body":{"classes/Timestamp.html":{}}}],["scheduleddate",{"_index":740,"title":{},"body":{"classes/CreatePostInput.html":{},"classes/Post.html":{},"classes/Post-1.html":{}}}],["scheduleemail",{"_index":1012,"title":{},"body":{"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{}}}],["scheduleemail(@body",{"_index":1021,"title":{},"body":{"controllers/EmailSchedulingController.html":{}}}],["scheduleemail(emailschedule",{"_index":1013,"title":{},"body":{"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{}}}],["schedulemodule",{"_index":110,"title":{},"body":{"modules/AppModule.html":{}}}],["schedulemodule.forroot",{"_index":153,"title":{},"body":{"modules/AppModule.html":{}}}],["schedulerregistry",{"_index":1030,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["scheduling",{"_index":1011,"title":{},"body":{"controllers/EmailSchedulingController.html":{}}}],["scope",{"_index":1559,"title":{},"body":{"injectables/PostsLoaders.html":{}}}],["scope.request",{"_index":1561,"title":{},"body":{"injectables/PostsLoaders.html":{}}}],["script",{"_index":1676,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["sdk",{"_index":1108,"title":{},"body":{"injectables/FilesService.html":{},"dependencies.html":{}}}],["search",{"_index":1516,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsSearchService.html":{}}}],["search(text",{"_index":1641,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["search/search.module",{"_index":105,"title":{},"body":{"modules/AppModule.html":{},"modules/HealthModule.html":{},"modules/PostsModule.html":{}}}],["searchforposts",{"_index":1684,"title":{},"body":{"injectables/PostsService.html":{}}}],["searchforposts(text",{"_index":1700,"title":{},"body":{"injectables/PostsService.html":{}}}],["searchmodule",{"_index":73,"title":{"modules/SearchModule.html":{}},"body":{"modules/AppModule.html":{},"modules/HealthModule.html":{},"modules/PostsModule.html":{},"modules/SearchModule.html":{},"modules.html":{},"overview.html":{}}}],["secret",{"_index":380,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/EmailConfirmationService.html":{},"injectables/TwoFactorAuthenticationService.html":{},"injectables/UsersService.html":{}}}],["secretorkey",{"_index":1293,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["see",{"_index":494,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["senderphonenumber",{"_index":1923,"title":{},"body":{"injectables/SmsService.html":{}}}],["sendmail",{"_index":1045,"title":{},"body":{"injectables/EmailService.html":{}}}],["sendmail(options",{"_index":1048,"title":{},"body":{"injectables/EmailService.html":{}}}],["sendmessage",{"_index":1893,"title":{},"body":{"injectables/SmsService.html":{}}}],["sendmessage(receiverphonenumber",{"_index":1900,"title":{},"body":{"injectables/SmsService.html":{}}}],["sendverificationlink",{"_index":955,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["sendverificationlink(email",{"_index":965,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["separatecount",{"_index":1658,"title":{},"body":{"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{}}}],["serialize",{"_index":2138,"title":{},"body":{"classes/Timestamp.html":{}}}],["serialize(value",{"_index":2152,"title":{},"body":{"classes/Timestamp.html":{}}}],["server",{"_index":562,"title":{},"body":{"classes/ChatGateway.html":{},"dependencies.html":{},"index.html":{}}}],["service",{"_index":1056,"title":{},"body":{"injectables/EmailService.html":{}}}],["servicesid",{"_index":1910,"title":{},"body":{"injectables/SmsService.html":{}}}],["set",{"_index":1996,"title":{},"body":{"injectables/StripeService.html":{}}}],["setcurrentrefreshtoken",{"_index":2310,"title":{},"body":{"injectables/UsersService.html":{}}}],["setcurrentrefreshtoken(refreshtoken",{"_index":2339,"title":{},"body":{"injectables/UsersService.html":{}}}],["setdefaultcard",{"_index":772,"title":{},"body":{"controllers/CreditCardsController.html":{}}}],["setdefaultcard(@body",{"_index":791,"title":{},"body":{"controllers/CreditCardsController.html":{}}}],["setdefaultcard(creditcard",{"_index":779,"title":{},"body":{"controllers/CreditCardsController.html":{}}}],["setdefaultcreditcard",{"_index":1943,"title":{},"body":{"injectables/StripeService.html":{}}}],["setdefaultcreditcard(paymentmethodid",{"_index":1962,"title":{},"body":{"injectables/StripeService.html":{}}}],["setdefaultcreditcarddto",{"_index":780,"title":{"classes/SetDefaultCreditCardDto.html":{}},"body":{"controllers/CreditCardsController.html":{},"classes/SetDefaultCreditCardDto.html":{},"coverage.html":{}}}],["settwofactorauthenticationsecret",{"_index":2311,"title":{},"body":{"injectables/UsersService.html":{}}}],["settwofactorauthenticationsecret(secret",{"_index":2341,"title":{},"body":{"injectables/UsersService.html":{}}}],["side",{"_index":2553,"title":{},"body":{"index.html":{}}}],["sign",{"_index":2617,"title":{},"body":{"miscellaneous/variables.html":{}}}],["signature",{"_index":1952,"title":{},"body":{"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{}}}],["simplifiedinfo",{"_index":1617,"title":{},"body":{"classes/PostsResolver.html":{}}}],["simplifiedinfo.fields",{"_index":1619,"title":{},"body":{"classes/PostsResolver.html":{}}}],["simplifyparsedresolveinfofragmentwithtype",{"_index":1608,"title":{},"body":{"classes/PostsResolver.html":{}}}],["size",{"_index":1661,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["skip",{"_index":1721,"title":{},"body":{"injectables/PostsService.html":{}}}],["sms",{"_index":1859,"title":{},"body":{"controllers/SmsController.html":{},"injectables/SmsService.html":{}}}],["sms.controller",{"_index":1889,"title":{},"body":{"modules/SmsModule.html":{}}}],["sms.service",{"_index":1873,"title":{},"body":{"controllers/SmsController.html":{},"modules/SmsModule.html":{}}}],["sms/sms.module",{"_index":130,"title":{},"body":{"modules/AppModule.html":{}}}],["smscontroller",{"_index":1857,"title":{"controllers/SmsController.html":{}},"body":{"controllers/SmsController.html":{},"modules/SmsModule.html":{},"coverage.html":{}}}],["smsmodule",{"_index":74,"title":{"modules/SmsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/SmsModule.html":{},"modules.html":{},"overview.html":{}}}],["smsservice",{"_index":1872,"title":{"injectables/SmsService.html":{}},"body":{"controllers/SmsController.html":{},"modules/SmsModule.html":{},"injectables/SmsService.html":{},"coverage.html":{},"overview.html":{}}}],["socket",{"_index":571,"title":{},"body":{"classes/ChatGateway.html":{},"injectables/ChatService.html":{}}}],["socket.emit('send_all_messages",{"_index":594,"title":{},"body":{"classes/ChatGateway.html":{}}}],["socket.handshake.headers.cookie",{"_index":623,"title":{},"body":{"injectables/ChatService.html":{}}}],["socket.io",{"_index":585,"title":{},"body":{"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"dependencies.html":{}}}],["sort",{"_index":1666,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AddCreditCardDto.html":{},"classes/Address.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"interfaces/BookProperties.html":{},"interfaces/CarProperties.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"classes/Category.html":{},"classes/CategoryNotFoundException.html":{},"controllers/ChargeController.html":{},"modules/ChargeModule.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/CheckVerificationCodeDto.html":{},"classes/Comment.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostInput.html":{},"classes/CreateProductCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateSubscriberDto.html":{},"classes/CreateUserDto.html":{},"controllers/CreditCardsController.html":{},"modules/CreditCardsModule.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"modules/DatabaseModule.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullInterceptor.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/FindOneParams.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthenticationModule.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/GraphqlJwtAuthGuard.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/Log.html":{},"classes/LogInDto.html":{},"modules/LoggerModule.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"classes/Message.html":{},"classes/ObjectWithIdDto.html":{},"controllers/OptimizeController.html":{},"modules/OptimizeModule.html":{},"classes/PaginationParams.html":{},"classes/Post.html":{},"classes/Post-1.html":{},"interfaces/PostCountResult.html":{},"classes/PostNotFoundException.html":{},"interfaces/PostSearchBody.html":{},"interfaces/PostSearchResult.html":{},"controllers/PostsController.html":{},"injectables/PostsLoaders.html":{},"modules/PostsModule.html":{},"classes/PostsResolver.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"classes/Product.html":{},"controllers/ProductCategoriesController.html":{},"modules/ProductCategoriesModule.html":{},"injectables/ProductCategoriesService.html":{},"classes/ProductCategory.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"modules/PubSubModule.html":{},"classes/PublicFile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithRawBody.html":{},"interfaces/RequestWithUser.html":{},"modules/SearchModule.html":{},"classes/SetDefaultCreditCardDto.html":{},"controllers/SmsController.html":{},"modules/SmsModule.html":{},"injectables/SmsService.html":{},"classes/StripeEvent.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"modules/StripeWebhookModule.html":{},"injectables/StripeWebhookService.html":{},"interfaces/Subscriber.html":{},"controllers/SubscribersController.html":{},"modules/SubscribersModule.html":{},"interfaces/SubscribersService.html":{},"controllers/SubscriptionsController.html":{},"modules/SubscriptionsModule.html":{},"injectables/SubscriptionsService.html":{},"classes/Timestamp.html":{},"interfaces/TokenPayload.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/VerificationTokenPayload.html":{},"index.html":{}}}],["space",{"_index":1254,"title":{},"body":{"controllers/HealthController.html":{}}}],["sponsors",{"_index":2580,"title":{},"body":{"index.html":{}}}],["src/.../config.service.ts",{"_index":2607,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../getloglevels.ts",{"_index":2534,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../image.processor.ts",{"_index":2535,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../jwt.service.ts",{"_index":2608,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":2533,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../postgreserrorcode.enum.ts",{"_index":2522,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../posts.resolver.ts",{"_index":2610,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../postscachekey.constant.ts",{"_index":2606,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../pubsub.module.ts",{"_index":2611,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../rawbody.middleware.ts",{"_index":2536,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../recursivelystripnullvalues.ts",{"_index":2537,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../runincluster.ts",{"_index":2538,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../stripeerror.enum.ts",{"_index":2523,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../user.mock.ts",{"_index":2609,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.module.ts",{"_index":82,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.module.ts:131",{"_index":88,"title":{},"body":{"modules/AppModule.html":{}}}],["src/authentication/authentication.controller.ts",{"_index":207,"title":{},"body":{"controllers/AuthenticationController.html":{},"coverage.html":{}}}],["src/authentication/authentication.controller.ts:29",{"_index":234,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/authentication/authentication.controller.ts:38",{"_index":222,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/authentication/authentication.controller.ts:60",{"_index":227,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/authentication/authentication.controller.ts:67",{"_index":218,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/authentication/authentication.controller.ts:73",{"_index":230,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/authentication/authentication.module.ts",{"_index":303,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["src/authentication/authentication.service.ts",{"_index":321,"title":{},"body":{"injectables/AuthenticationService.html":{},"coverage.html":{}}}],["src/authentication/authentication.service.ts:11",{"_index":330,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:18",{"_index":346,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:35",{"_index":338,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:44",{"_index":343,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:57",{"_index":335,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:64",{"_index":333,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:74",{"_index":349,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:84",{"_index":345,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/dto/login.dto.ts",{"_index":1332,"title":{},"body":{"classes/LogInDto.html":{},"coverage.html":{}}}],["src/authentication/dto/login.dto.ts:10",{"_index":1335,"title":{},"body":{"classes/LogInDto.html":{}}}],["src/authentication/dto/login.dto.ts:5",{"_index":1333,"title":{},"body":{"classes/LogInDto.html":{}}}],["src/authentication/dto/register.dto.ts",{"_index":1834,"title":{},"body":{"classes/RegisterDto.html":{},"coverage.html":{}}}],["src/authentication/dto/register.dto.ts:14",{"_index":1838,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/authentication/dto/register.dto.ts:19",{"_index":1841,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/authentication/dto/register.dto.ts:5",{"_index":1836,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/authentication/dto/register.dto.ts:9",{"_index":1837,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/authentication/graphql",{"_index":1212,"title":{},"body":{"injectables/GraphqlJwtAuthGuard.html":{},"coverage.html":{}}}],["src/authentication/jwt",{"_index":1277,"title":{},"body":{"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"coverage.html":{}}}],["src/authentication/jwt.strategy.ts",{"_index":1298,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/authentication/jwt.strategy.ts:10",{"_index":1299,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/authentication/jwt.strategy.ts:23",{"_index":1301,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/authentication/local.strategy.ts",{"_index":1315,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/authentication/local.strategy.ts:14",{"_index":1318,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/authentication/local.strategy.ts:8",{"_index":1316,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/authentication/localauthentication.guard.ts",{"_index":1313,"title":{},"body":{"injectables/LocalAuthenticationGuard.html":{},"coverage.html":{}}}],["src/authentication/requestwithuser.interface.ts",{"_index":1847,"title":{},"body":{"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["src/authentication/tests/user.mock.ts",{"_index":2391,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/authentication/tokenpayload.interface.ts",{"_index":2165,"title":{},"body":{"interfaces/TokenPayload.html":{},"coverage.html":{}}}],["src/authentication/twofactor/dto/twofactorauthenticationcode.dto.ts",{"_index":2169,"title":{},"body":{"classes/TwoFactorAuthenticationCodeDto.html":{},"coverage.html":{}}}],["src/authentication/twofactor/dto/twofactorauthenticationcode.dto.ts:6",{"_index":2171,"title":{},"body":{"classes/TwoFactorAuthenticationCodeDto.html":{}}}],["src/authentication/twofactor/twofactorauthentication.controller.ts",{"_index":2172,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{},"coverage.html":{}}}],["src/authentication/twofactor/twofactorauthentication.controller.ts:31",{"_index":2179,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["src/authentication/twofactor/twofactorauthentication.controller.ts:40",{"_index":2183,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["src/authentication/twofactor/twofactorauthentication.controller.ts:56",{"_index":2176,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["src/authentication/twofactor/twofactorauthentication.service.ts",{"_index":2197,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{},"coverage.html":{}}}],["src/authentication/twofactor/twofactorauthentication.service.ts:10",{"_index":2201,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["src/authentication/twofactor/twofactorauthentication.service.ts:16",{"_index":2203,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["src/authentication/twofactor/twofactorauthentication.service.ts:29",{"_index":2205,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["src/authentication/twofactor/twofactorauthentication.service.ts:36",{"_index":2207,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["src/categories/categories.controller.ts",{"_index":418,"title":{},"body":{"controllers/CategoriesController.html":{},"coverage.html":{}}}],["src/categories/categories.controller.ts:26",{"_index":434,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["src/categories/categories.controller.ts:31",{"_index":437,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["src/categories/categories.controller.ts:37",{"_index":428,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["src/categories/categories.controller.ts:42",{"_index":441,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["src/categories/categories.controller.ts:47",{"_index":433,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["src/categories/categories.module.ts",{"_index":463,"title":{},"body":{"modules/CategoriesModule.html":{}}}],["src/categories/categories.service.ts",{"_index":469,"title":{},"body":{"injectables/CategoriesService.html":{},"coverage.html":{}}}],["src/categories/categories.service.ts:24",{"_index":484,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/categories/categories.service.ts:34",{"_index":488,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/categories/categories.service.ts:42",{"_index":471,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/categories/categories.service.ts:51",{"_index":493,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/categories/categories.service.ts:63",{"_index":483,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/categories/categories.service.ts:71",{"_index":473,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/categories/category.entity.ts",{"_index":520,"title":{},"body":{"classes/Category.html":{},"coverage.html":{}}}],["src/categories/category.entity.ts:10",{"_index":522,"title":{},"body":{"classes/Category.html":{}}}],["src/categories/category.entity.ts:13",{"_index":524,"title":{},"body":{"classes/Category.html":{}}}],["src/categories/category.entity.ts:7",{"_index":521,"title":{},"body":{"classes/Category.html":{}}}],["src/categories/dto/createcategory.dto.ts",{"_index":683,"title":{},"body":{"classes/CreateCategoryDto.html":{},"coverage.html":{}}}],["src/categories/dto/createcategory.dto.ts:6",{"_index":684,"title":{},"body":{"classes/CreateCategoryDto.html":{}}}],["src/categories/dto/updatecategory.dto.ts",{"_index":2219,"title":{},"body":{"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["src/categories/dto/updatecategory.dto.ts:11",{"_index":2223,"title":{},"body":{"classes/UpdateCategoryDto.html":{}}}],["src/categories/dto/updatecategory.dto.ts:6",{"_index":2221,"title":{},"body":{"classes/UpdateCategoryDto.html":{}}}],["src/categories/exceptions/categorynotfound.exception.ts",{"_index":528,"title":{},"body":{"classes/CategoryNotFoundException.html":{},"coverage.html":{}}}],["src/categories/exceptions/categorynotfound.exception.ts:3",{"_index":532,"title":{},"body":{"classes/CategoryNotFoundException.html":{}}}],["src/charge/charge.controller.ts",{"_index":537,"title":{},"body":{"controllers/ChargeController.html":{},"coverage.html":{}}}],["src/charge/charge.controller.ts:15",{"_index":542,"title":{},"body":{"controllers/ChargeController.html":{}}}],["src/charge/charge.module.ts",{"_index":555,"title":{},"body":{"modules/ChargeModule.html":{}}}],["src/charge/dto/createcharge.dto.ts",{"_index":685,"title":{},"body":{"classes/CreateChargeDto.html":{},"coverage.html":{}}}],["src/charge/dto/createcharge.dto.ts:6",{"_index":689,"title":{},"body":{"classes/CreateChargeDto.html":{}}}],["src/charge/dto/createcharge.dto.ts:9",{"_index":688,"title":{},"body":{"classes/CreateChargeDto.html":{}}}],["src/chat/chat.gateway.ts",{"_index":559,"title":{},"body":{"classes/ChatGateway.html":{},"coverage.html":{}}}],["src/chat/chat.gateway.ts:14",{"_index":568,"title":{},"body":{"classes/ChatGateway.html":{}}}],["src/chat/chat.gateway.ts:21",{"_index":572,"title":{},"body":{"classes/ChatGateway.html":{}}}],["src/chat/chat.gateway.ts:26",{"_index":575,"title":{},"body":{"classes/ChatGateway.html":{}}}],["src/chat/chat.gateway.ts:37",{"_index":579,"title":{},"body":{"classes/ChatGateway.html":{}}}],["src/chat/chat.module.ts",{"_index":598,"title":{},"body":{"modules/ChatModule.html":{}}}],["src/chat/chat.service.ts",{"_index":602,"title":{},"body":{"injectables/ChatService.html":{},"coverage.html":{}}}],["src/chat/chat.service.ts:12",{"_index":608,"title":{},"body":{"injectables/ChatService.html":{}}}],["src/chat/chat.service.ts:20",{"_index":613,"title":{},"body":{"injectables/ChatService.html":{}}}],["src/chat/chat.service.ts:29",{"_index":609,"title":{},"body":{"injectables/ChatService.html":{}}}],["src/chat/chat.service.ts:35",{"_index":611,"title":{},"body":{"injectables/ChatService.html":{}}}],["src/chat/message.entity.ts",{"_index":1373,"title":{},"body":{"classes/Message.html":{},"coverage.html":{}}}],["src/chat/message.entity.ts:10",{"_index":1375,"title":{},"body":{"classes/Message.html":{}}}],["src/chat/message.entity.ts:13",{"_index":1374,"title":{},"body":{"classes/Message.html":{}}}],["src/chat/message.entity.ts:7",{"_index":1376,"title":{},"body":{"classes/Message.html":{}}}],["src/comments/commands/handlers/create",{"_index":703,"title":{},"body":{"classes/CreateCommentHandler.html":{},"coverage.html":{}}}],["src/comments/commands/implementations/createcomment.command.ts",{"_index":690,"title":{},"body":{"classes/CreateCommentCommand.html":{},"coverage.html":{}}}],["src/comments/commands/implementations/createcomment.command.ts:4",{"_index":692,"title":{},"body":{"classes/CreateCommentCommand.html":{}}}],["src/comments/commands/implementations/createcomment.command.ts:6",{"_index":694,"title":{},"body":{"classes/CreateCommentCommand.html":{}}}],["src/comments/commands/implementations/createcomment.command.ts:7",{"_index":693,"title":{},"body":{"classes/CreateCommentCommand.html":{}}}],["src/comments/comment.entity.ts",{"_index":633,"title":{},"body":{"classes/Comment.html":{},"coverage.html":{}}}],["src/comments/comment.entity.ts:11",{"_index":636,"title":{},"body":{"classes/Comment.html":{}}}],["src/comments/comment.entity.ts:14",{"_index":638,"title":{},"body":{"classes/Comment.html":{}}}],["src/comments/comment.entity.ts:17",{"_index":635,"title":{},"body":{"classes/Comment.html":{}}}],["src/comments/comment.entity.ts:8",{"_index":637,"title":{},"body":{"classes/Comment.html":{}}}],["src/comments/comments.controller.ts",{"_index":643,"title":{},"body":{"controllers/CommentsController.html":{},"coverage.html":{}}}],["src/comments/comments.controller.ts:28",{"_index":649,"title":{},"body":{"controllers/CommentsController.html":{}}}],["src/comments/comments.controller.ts:36",{"_index":652,"title":{},"body":{"controllers/CommentsController.html":{}}}],["src/comments/comments.module.ts",{"_index":670,"title":{},"body":{"modules/CommentsModule.html":{}}}],["src/comments/dto/createcomment.dto.ts",{"_index":695,"title":{},"body":{"classes/CreateCommentDto.html":{},"coverage.html":{}}}],["src/comments/dto/createcomment.dto.ts:12",{"_index":699,"title":{},"body":{"classes/CreateCommentDto.html":{}}}],["src/comments/dto/createcomment.dto.ts:8",{"_index":696,"title":{},"body":{"classes/CreateCommentDto.html":{}}}],["src/comments/dto/getcomments.dto.ts",{"_index":1130,"title":{},"body":{"classes/GetCommentsDto.html":{},"coverage.html":{}}}],["src/comments/dto/getcomments.dto.ts:7",{"_index":1132,"title":{},"body":{"classes/GetCommentsDto.html":{}}}],["src/comments/queries/handlers/getcomments.handler.ts",{"_index":1134,"title":{},"body":{"classes/GetCommentsHandler.html":{},"coverage.html":{}}}],["src/comments/queries/handlers/getcomments.handler.ts:14",{"_index":1138,"title":{},"body":{"classes/GetCommentsHandler.html":{}}}],["src/comments/queries/handlers/getcomments.handler.ts:8",{"_index":1136,"title":{},"body":{"classes/GetCommentsHandler.html":{}}}],["src/comments/queries/implementations/getcomments.query.ts",{"_index":1144,"title":{},"body":{"classes/GetCommentsQuery.html":{},"coverage.html":{}}}],["src/comments/queries/implementations/getcomments.query.ts:1",{"_index":1145,"title":{},"body":{"classes/GetCommentsQuery.html":{}}}],["src/comments/queries/implementations/getcomments.query.ts:3",{"_index":1146,"title":{},"body":{"classes/GetCommentsQuery.html":{}}}],["src/credit",{"_index":6,"title":{},"body":{"classes/AddCreditCardDto.html":{},"controllers/CreditCardsController.html":{},"modules/CreditCardsModule.html":{},"classes/SetDefaultCreditCardDto.html":{},"coverage.html":{}}}],["src/database/database.module.ts",{"_index":879,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["src/database/databaselogger.ts",{"_index":842,"title":{},"body":{"classes/DatabaseLogger.html":{},"coverage.html":{}}}],["src/database/databaselogger.ts:13",{"_index":861,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["src/database/databaselogger.ts:19",{"_index":863,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["src/database/databaselogger.ts:25",{"_index":857,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["src/database/databaselogger.ts:28",{"_index":866,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["src/database/databaselogger.ts:31",{"_index":855,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["src/database/databaselogger.ts:45",{"_index":868,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["src/database/databaselogger.ts:5",{"_index":852,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["src/database/databaselogger.ts:7",{"_index":859,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["src/database/postgreserrorcode.enum.ts",{"_index":2524,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/email/email.module.ts",{"_index":998,"title":{},"body":{"modules/EmailModule.html":{}}}],["src/email/email.service.ts",{"_index":1043,"title":{},"body":{"injectables/EmailService.html":{},"coverage.html":{}}}],["src/email/email.service.ts:22",{"_index":1050,"title":{},"body":{"injectables/EmailService.html":{}}}],["src/email/email.service.ts:8",{"_index":1047,"title":{},"body":{"injectables/EmailService.html":{}}}],["src/emailconfirmation/confirmemail.dto.ts",{"_index":681,"title":{},"body":{"classes/ConfirmEmailDto.html":{},"coverage.html":{}}}],["src/emailconfirmation/confirmemail.dto.ts:6",{"_index":682,"title":{},"body":{"classes/ConfirmEmailDto.html":{}}}],["src/emailconfirmation/emailconfirmation.controller.ts",{"_index":910,"title":{},"body":{"controllers/EmailConfirmationController.html":{},"coverage.html":{}}}],["src/emailconfirmation/emailconfirmation.controller.ts:23",{"_index":916,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["src/emailconfirmation/emailconfirmation.controller.ts:30",{"_index":921,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["src/emailconfirmation/emailconfirmation.guard.ts",{"_index":933,"title":{},"body":{"guards/EmailConfirmationGuard.html":{},"coverage.html":{}}}],["src/emailconfirmation/emailconfirmation.guard.ts:6",{"_index":937,"title":{},"body":{"guards/EmailConfirmationGuard.html":{}}}],["src/emailconfirmation/emailconfirmation.module.ts",{"_index":949,"title":{},"body":{"modules/EmailConfirmationModule.html":{}}}],["src/emailconfirmation/emailconfirmation.service.ts",{"_index":952,"title":{},"body":{"injectables/EmailConfirmationService.html":{},"coverage.html":{}}}],["src/emailconfirmation/emailconfirmation.service.ts:17",{"_index":966,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["src/emailconfirmation/emailconfirmation.service.ts:35",{"_index":964,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["src/emailconfirmation/emailconfirmation.service.ts:43",{"_index":960,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["src/emailconfirmation/emailconfirmation.service.ts:51",{"_index":962,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["src/emailconfirmation/emailconfirmation.service.ts:9",{"_index":958,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["src/emailconfirmation/verificationtokenpayload.interface.ts",{"_index":2380,"title":{},"body":{"interfaces/VerificationTokenPayload.html":{},"coverage.html":{}}}],["src/emailscheduling/dto/emailschedule.dto.ts",{"_index":1001,"title":{},"body":{"classes/EmailScheduleDto.html":{},"coverage.html":{}}}],["src/emailscheduling/dto/emailschedule.dto.ts:13",{"_index":1003,"title":{},"body":{"classes/EmailScheduleDto.html":{}}}],["src/emailscheduling/dto/emailschedule.dto.ts:16",{"_index":1005,"title":{},"body":{"classes/EmailScheduleDto.html":{}}}],["src/emailscheduling/dto/emailschedule.dto.ts:5",{"_index":1007,"title":{},"body":{"classes/EmailScheduleDto.html":{}}}],["src/emailscheduling/dto/emailschedule.dto.ts:9",{"_index":1008,"title":{},"body":{"classes/EmailScheduleDto.html":{}}}],["src/emailscheduling/emailscheduling.controller.ts",{"_index":1010,"title":{},"body":{"controllers/EmailSchedulingController.html":{},"coverage.html":{}}}],["src/emailscheduling/emailscheduling.controller.ts:19",{"_index":1015,"title":{},"body":{"controllers/EmailSchedulingController.html":{}}}],["src/emailscheduling/emailscheduling.module.ts",{"_index":1026,"title":{},"body":{"modules/EmailSchedulingModule.html":{}}}],["src/emailscheduling/emailscheduling.service.ts",{"_index":1028,"title":{},"body":{"injectables/EmailSchedulingService.html":{},"coverage.html":{}}}],["src/emailscheduling/emailscheduling.service.ts:14",{"_index":1032,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["src/emailscheduling/emailscheduling.service.ts:8",{"_index":1031,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["src/files/files.module.ts",{"_index":1084,"title":{},"body":{"modules/FilesModule.html":{}}}],["src/files/files.service.ts",{"_index":1089,"title":{},"body":{"injectables/FilesService.html":{},"coverage.html":{}}}],["src/files/files.service.ts:10",{"_index":1094,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/files/files.service.ts:17",{"_index":1104,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/files/files.service.ts:34",{"_index":1097,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/files/files.service.ts:44",{"_index":1100,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/files/publicfile.entity.ts",{"_index":1830,"title":{},"body":{"classes/PublicFile.html":{},"coverage.html":{}}}],["src/files/publicfile.entity.ts:12",{"_index":1832,"title":{},"body":{"classes/PublicFile.html":{}}}],["src/files/publicfile.entity.ts:6",{"_index":1831,"title":{},"body":{"classes/PublicFile.html":{}}}],["src/files/publicfile.entity.ts:9",{"_index":1833,"title":{},"body":{"classes/PublicFile.html":{}}}],["src/googleauthentication/googleauthentication.controller.ts",{"_index":1148,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"coverage.html":{}}}],["src/googleauthentication/googleauthentication.controller.ts:19",{"_index":1152,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["src/googleauthentication/googleauthentication.module.ts",{"_index":1164,"title":{},"body":{"modules/GoogleAuthenticationModule.html":{}}}],["src/googleauthentication/googleauthentication.service.ts",{"_index":1166,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"coverage.html":{}}}],["src/googleauthentication/googleauthentication.service.ts:10",{"_index":1172,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["src/googleauthentication/googleauthentication.service.ts:25",{"_index":1178,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["src/googleauthentication/googleauthentication.service.ts:39",{"_index":1176,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["src/googleauthentication/googleauthentication.service.ts:54",{"_index":1180,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["src/googleauthentication/googleauthentication.service.ts:71",{"_index":1182,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["src/googleauthentication/googleauthentication.service.ts:80",{"_index":1174,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["src/googleauthentication/tokenverification.dto.ts",{"_index":2166,"title":{},"body":{"classes/TokenVerificationDto.html":{},"coverage.html":{}}}],["src/googleauthentication/tokenverification.dto.ts:6",{"_index":2167,"title":{},"body":{"classes/TokenVerificationDto.html":{}}}],["src/health/elasticsearchhealthindicator.ts",{"_index":893,"title":{},"body":{"injectables/ElasticsearchHealthIndicator.html":{},"coverage.html":{}}}],["src/health/elasticsearchhealthindicator.ts:13",{"_index":900,"title":{},"body":{"injectables/ElasticsearchHealthIndicator.html":{}}}],["src/health/elasticsearchhealthindicator.ts:6",{"_index":898,"title":{},"body":{"injectables/ElasticsearchHealthIndicator.html":{}}}],["src/health/health.controller.ts",{"_index":1224,"title":{},"body":{"controllers/HealthController.html":{},"coverage.html":{}}}],["src/health/health.controller.ts:24",{"_index":1228,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/health/health.module.ts",{"_index":1262,"title":{},"body":{"modules/HealthModule.html":{}}}],["src/logger/customlogger.ts",{"_index":801,"title":{},"body":{"injectables/CustomLogger.html":{},"coverage.html":{}}}],["src/logger/customlogger.ts:30",{"_index":819,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["src/logger/customlogger.ts:39",{"_index":817,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["src/logger/customlogger.ts:48",{"_index":823,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["src/logger/customlogger.ts:57",{"_index":813,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["src/logger/customlogger.ts:66",{"_index":821,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["src/logger/customlogger.ts:9",{"_index":811,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["src/logger/dto/createlog.dto.ts",{"_index":723,"title":{},"body":{"classes/CreateLogDto.html":{},"coverage.html":{}}}],["src/logger/dto/createlog.dto.ts:2",{"_index":726,"title":{},"body":{"classes/CreateLogDto.html":{}}}],["src/logger/dto/createlog.dto.ts:3",{"_index":728,"title":{},"body":{"classes/CreateLogDto.html":{}}}],["src/logger/dto/createlog.dto.ts:4",{"_index":727,"title":{},"body":{"classes/CreateLogDto.html":{}}}],["src/logger/log.entity.ts",{"_index":1323,"title":{},"body":{"classes/Log.html":{},"coverage.html":{}}}],["src/logger/log.entity.ts:12",{"_index":1330,"title":{},"body":{"classes/Log.html":{}}}],["src/logger/log.entity.ts:15",{"_index":1329,"title":{},"body":{"classes/Log.html":{}}}],["src/logger/log.entity.ts:18",{"_index":1327,"title":{},"body":{"classes/Log.html":{}}}],["src/logger/log.entity.ts:6",{"_index":1328,"title":{},"body":{"classes/Log.html":{}}}],["src/logger/log.entity.ts:9",{"_index":1325,"title":{},"body":{"classes/Log.html":{}}}],["src/logger/logger.module.ts",{"_index":1341,"title":{},"body":{"modules/LoggerModule.html":{}}}],["src/logger/logs.service.ts",{"_index":1359,"title":{},"body":{"injectables/LogsService.html":{},"coverage.html":{}}}],["src/logger/logs.service.ts:14",{"_index":1365,"title":{},"body":{"injectables/LogsService.html":{}}}],["src/logger/logs.service.ts:8",{"_index":1362,"title":{},"body":{"injectables/LogsService.html":{}}}],["src/main.ts",{"_index":2398,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/optimize/image.processor.ts",{"_index":2401,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/optimize/optimize.controller.ts",{"_index":1380,"title":{},"body":{"controllers/OptimizeController.html":{},"coverage.html":{}}}],["src/optimize/optimize.controller.ts:21",{"_index":1390,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["src/optimize/optimize.controller.ts:32",{"_index":1386,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["src/optimize/optimize.module.ts",{"_index":1421,"title":{},"body":{"modules/OptimizeModule.html":{}}}],["src/posts/dto/createpost.dto.ts",{"_index":730,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["src/posts/dto/createpost.dto.ts:10",{"_index":736,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["src/posts/dto/createpost.dto.ts:6",{"_index":735,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["src/posts/dto/updatepost.dto.ts",{"_index":2224,"title":{},"body":{"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["src/posts/dto/updatepost.dto.ts:11",{"_index":2227,"title":{},"body":{"classes/UpdatePostDto.html":{}}}],["src/posts/dto/updatepost.dto.ts:16",{"_index":2228,"title":{},"body":{"classes/UpdatePostDto.html":{}}}],["src/posts/dto/updatepost.dto.ts:6",{"_index":2225,"title":{},"body":{"classes/UpdatePostDto.html":{}}}],["src/posts/exceptions/postnotfound.exception.ts",{"_index":1489,"title":{},"body":{"classes/PostNotFoundException.html":{},"coverage.html":{}}}],["src/posts/exceptions/postnotfound.exception.ts:3",{"_index":1490,"title":{},"body":{"classes/PostNotFoundException.html":{}}}],["src/posts/httpcache.interceptor.ts",{"_index":1266,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{},"coverage.html":{}}}],["src/posts/httpcache.interceptor.ts:5",{"_index":1270,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["src/posts/inputs/post.input.ts",{"_index":739,"title":{},"body":{"classes/CreatePostInput.html":{},"coverage.html":{}}}],["src/posts/inputs/post.input.ts:12",{"_index":745,"title":{},"body":{"classes/CreatePostInput.html":{}}}],["src/posts/inputs/post.input.ts:6",{"_index":747,"title":{},"body":{"classes/CreatePostInput.html":{}}}],["src/posts/inputs/post.input.ts:9",{"_index":742,"title":{},"body":{"classes/CreatePostInput.html":{}}}],["src/posts/loaders/posts.loaders.ts",{"_index":1547,"title":{},"body":{"injectables/PostsLoaders.html":{},"coverage.html":{}}}],["src/posts/loaders/posts.loaders.ts:12",{"_index":1558,"title":{},"body":{"injectables/PostsLoaders.html":{}}}],["src/posts/loaders/posts.loaders.ts:6",{"_index":1549,"title":{},"body":{"injectables/PostsLoaders.html":{}}}],["src/posts/models/post.model.ts",{"_index":1474,"title":{},"body":{"classes/Post-1.html":{},"coverage.html":{}}}],["src/posts/models/post.model.ts:10",{"_index":1481,"title":{},"body":{"classes/Post-1.html":{}}}],["src/posts/models/post.model.ts:13",{"_index":1479,"title":{},"body":{"classes/Post-1.html":{}}}],["src/posts/models/post.model.ts:16",{"_index":1476,"title":{},"body":{"classes/Post-1.html":{}}}],["src/posts/models/post.model.ts:19",{"_index":1475,"title":{},"body":{"classes/Post-1.html":{}}}],["src/posts/models/post.model.ts:22",{"_index":1477,"title":{},"body":{"classes/Post-1.html":{}}}],["src/posts/models/post.model.ts:25",{"_index":1480,"title":{},"body":{"classes/Post-1.html":{}}}],["src/posts/models/post.model.ts:7",{"_index":1478,"title":{},"body":{"classes/Post-1.html":{}}}],["src/posts/post.entity.ts",{"_index":1441,"title":{},"body":{"classes/Post.html":{},"coverage.html":{}}}],["src/posts/post.entity.ts:20",{"_index":1456,"title":{},"body":{"classes/Post.html":{}}}],["src/posts/post.entity.ts:23",{"_index":1462,"title":{},"body":{"classes/Post.html":{}}}],["src/posts/post.entity.ts:26",{"_index":1459,"title":{},"body":{"classes/Post.html":{}}}],["src/posts/post.entity.ts:29",{"_index":1451,"title":{},"body":{"classes/Post.html":{}}}],["src/posts/post.entity.ts:33",{"_index":1445,"title":{},"body":{"classes/Post.html":{}}}],["src/posts/post.entity.ts:36",{"_index":1447,"title":{},"body":{"classes/Post.html":{}}}],["src/posts/post.entity.ts:40",{"_index":1449,"title":{},"body":{"classes/Post.html":{}}}],["src/posts/post.entity.ts:43",{"_index":1453,"title":{},"body":{"classes/Post.html":{}}}],["src/posts/post.entity.ts:46",{"_index":1455,"title":{},"body":{"classes/Post.html":{}}}],["src/posts/post.entity.ts:52",{"_index":1461,"title":{},"body":{"classes/Post.html":{}}}],["src/posts/posts.controller.ts",{"_index":1500,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["src/posts/posts.controller.ts:36",{"_index":1515,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:47",{"_index":1512,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:53",{"_index":1508,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:58",{"_index":1519,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:63",{"_index":1510,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.module.ts",{"_index":1566,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/posts/posts.resolver.ts",{"_index":1583,"title":{},"body":{"classes/PostsResolver.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/posts/posts.resolver.ts:16",{"_index":1588,"title":{},"body":{"classes/PostsResolver.html":{}}}],["src/posts/posts.resolver.ts:23",{"_index":1597,"title":{},"body":{"classes/PostsResolver.html":{}}}],["src/posts/posts.resolver.ts:40",{"_index":1593,"title":{},"body":{"classes/PostsResolver.html":{}}}],["src/posts/posts.resolver.ts:46",{"_index":1591,"title":{},"body":{"classes/PostsResolver.html":{}}}],["src/posts/posts.service.ts",{"_index":1681,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/posts.service.ts:104",{"_index":1701,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:16",{"_index":1687,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:25",{"_index":1689,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:34",{"_index":1697,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:58",{"_index":1699,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:64",{"_index":1694,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:73",{"_index":1690,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:84",{"_index":1703,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:95",{"_index":1692,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/postscachekey.constant.ts",{"_index":2404,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/posts/postssearch.service.ts",{"_index":1629,"title":{},"body":{"injectables/PostsSearchService.html":{},"coverage.html":{}}}],["src/posts/postssearch.service.ts:10",{"_index":1633,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["src/posts/postssearch.service.ts:104",{"_index":1645,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["src/posts/postssearch.service.ts:16",{"_index":1638,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["src/posts/postssearch.service.ts:28",{"_index":1636,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["src/posts/postssearch.service.ts:43",{"_index":1642,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["src/posts/postssearch.service.ts:91",{"_index":1640,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["src/posts/types/postcountbody.interface.ts",{"_index":1486,"title":{},"body":{"interfaces/PostCountResult.html":{},"coverage.html":{}}}],["src/posts/types/postsearchbody.interface.ts",{"_index":1493,"title":{},"body":{"interfaces/PostSearchBody.html":{},"coverage.html":{}}}],["src/posts/types/postsearchresponse.interface.ts",{"_index":1495,"title":{},"body":{"interfaces/PostSearchResult.html":{},"coverage.html":{}}}],["src/productcategories/dto/createproductcategory.dto.ts",{"_index":751,"title":{},"body":{"classes/CreateProductCategoryDto.html":{},"coverage.html":{}}}],["src/productcategories/dto/createproductcategory.dto.ts:6",{"_index":752,"title":{},"body":{"classes/CreateProductCategoryDto.html":{}}}],["src/productcategories/productcategories.controller.ts",{"_index":1758,"title":{},"body":{"controllers/ProductCategoriesController.html":{},"coverage.html":{}}}],["src/productcategories/productcategories.controller.ts:21",{"_index":1763,"title":{},"body":{"controllers/ProductCategoriesController.html":{}}}],["src/productcategories/productcategories.controller.ts:27",{"_index":1762,"title":{},"body":{"controllers/ProductCategoriesController.html":{}}}],["src/productcategories/productcategories.module.ts",{"_index":1774,"title":{},"body":{"modules/ProductCategoriesModule.html":{}}}],["src/productcategories/productcategories.service.ts",{"_index":1778,"title":{},"body":{"injectables/ProductCategoriesService.html":{},"coverage.html":{}}}],["src/productcategories/productcategories.service.ts:14",{"_index":1786,"title":{},"body":{"injectables/ProductCategoriesService.html":{}}}],["src/productcategories/productcategories.service.ts:18",{"_index":1785,"title":{},"body":{"injectables/ProductCategoriesService.html":{}}}],["src/productcategories/productcategories.service.ts:8",{"_index":1782,"title":{},"body":{"injectables/ProductCategoriesService.html":{}}}],["src/productcategories/productcategory.entity.ts",{"_index":1792,"title":{},"body":{"classes/ProductCategory.html":{},"coverage.html":{}}}],["src/productcategories/productcategory.entity.ts:10",{"_index":1795,"title":{},"body":{"classes/ProductCategory.html":{}}}],["src/productcategories/productcategory.entity.ts:13",{"_index":1796,"title":{},"body":{"classes/ProductCategory.html":{}}}],["src/productcategories/productcategory.entity.ts:7",{"_index":1794,"title":{},"body":{"classes/ProductCategory.html":{}}}],["src/products/dto/createproduct.dto.ts",{"_index":754,"title":{},"body":{"classes/CreateProductDto.html":{},"coverage.html":{}}}],["src/products/dto/createproduct.dto.ts:12",{"_index":755,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["src/products/dto/createproduct.dto.ts:8",{"_index":756,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["src/products/product.entity.ts",{"_index":1746,"title":{},"body":{"classes/Product.html":{},"coverage.html":{}}}],["src/products/product.entity.ts:12",{"_index":1750,"title":{},"body":{"classes/Product.html":{}}}],["src/products/product.entity.ts:15",{"_index":1748,"title":{},"body":{"classes/Product.html":{}}}],["src/products/product.entity.ts:20",{"_index":1752,"title":{},"body":{"classes/Product.html":{}}}],["src/products/product.entity.ts:9",{"_index":1749,"title":{},"body":{"classes/Product.html":{}}}],["src/products/products.controller.ts",{"_index":1800,"title":{},"body":{"controllers/ProductsController.html":{},"coverage.html":{}}}],["src/products/products.controller.ts:21",{"_index":1803,"title":{},"body":{"controllers/ProductsController.html":{}}}],["src/products/products.controller.ts:27",{"_index":1802,"title":{},"body":{"controllers/ProductsController.html":{}}}],["src/products/products.module.ts",{"_index":1811,"title":{},"body":{"modules/ProductsModule.html":{}}}],["src/products/products.service.ts",{"_index":1815,"title":{},"body":{"injectables/ProductsService.html":{},"coverage.html":{}}}],["src/products/products.service.ts:14",{"_index":1820,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/products/products.service.ts:18",{"_index":1819,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/products/products.service.ts:8",{"_index":1817,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/products/types/bookproperties.interface.ts",{"_index":407,"title":{},"body":{"interfaces/BookProperties.html":{},"coverage.html":{}}}],["src/products/types/carproperties.interface.ts",{"_index":411,"title":{},"body":{"interfaces/CarProperties.html":{},"coverage.html":{}}}],["src/pubsub/pubsub.module.ts",{"_index":1826,"title":{},"body":{"modules/PubSubModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/schema.gql",{"_index":150,"title":{},"body":{"modules/AppModule.html":{}}}],["src/search/search.module.ts",{"_index":1848,"title":{},"body":{"modules/SearchModule.html":{}}}],["src/sms/checkverificationcode.dto.ts",{"_index":629,"title":{},"body":{"classes/CheckVerificationCodeDto.html":{},"coverage.html":{}}}],["src/sms/checkverificationcode.dto.ts:6",{"_index":631,"title":{},"body":{"classes/CheckVerificationCodeDto.html":{}}}],["src/sms/sms.controller.ts",{"_index":1858,"title":{},"body":{"controllers/SmsController.html":{},"coverage.html":{}}}],["src/sms/sms.controller.ts:22",{"_index":1871,"title":{},"body":{"controllers/SmsController.html":{}}}],["src/sms/sms.controller.ts:31",{"_index":1867,"title":{},"body":{"controllers/SmsController.html":{}}}],["src/sms/sms.module.ts",{"_index":1888,"title":{},"body":{"modules/SmsModule.html":{}}}],["src/sms/sms.service.ts",{"_index":1890,"title":{},"body":{"injectables/SmsService.html":{},"coverage.html":{}}}],["src/sms/sms.service.ts:20",{"_index":1899,"title":{},"body":{"injectables/SmsService.html":{}}}],["src/sms/sms.service.ts:28",{"_index":1897,"title":{},"body":{"injectables/SmsService.html":{}}}],["src/sms/sms.service.ts:42",{"_index":1901,"title":{},"body":{"injectables/SmsService.html":{}}}],["src/sms/sms.service.ts:8",{"_index":1894,"title":{},"body":{"injectables/SmsService.html":{}}}],["src/stripe/stripe.module.ts",{"_index":1933,"title":{},"body":{"modules/StripeModule.html":{}}}],["src/stripe/stripe.service.ts",{"_index":1935,"title":{},"body":{"injectables/StripeService.html":{},"coverage.html":{}}}],["src/stripe/stripe.service.ts:18",{"_index":1951,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/stripe/stripe.service.ts:28",{"_index":1954,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/stripe/stripe.service.ts:35",{"_index":1949,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/stripe/stripe.service.ts:46",{"_index":1947,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/stripe/stripe.service.ts:53",{"_index":1963,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/stripe/stripe.service.ts:68",{"_index":1959,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/stripe/stripe.service.ts:75",{"_index":1956,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/stripe/stripe.service.ts:8",{"_index":1944,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/stripe/stripe.service.ts:93",{"_index":1961,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/stripewebhook/requestwithrawbody.interface.ts",{"_index":1845,"title":{},"body":{"interfaces/RequestWithRawBody.html":{},"coverage.html":{}}}],["src/stripewebhook/stripeevent.entity.ts",{"_index":1927,"title":{},"body":{"classes/StripeEvent.html":{},"coverage.html":{}}}],["src/stripewebhook/stripeevent.entity.ts:6",{"_index":1929,"title":{},"body":{"classes/StripeEvent.html":{}}}],["src/stripewebhook/stripewebhook.controller.ts",{"_index":2003,"title":{},"body":{"controllers/StripeWebhookController.html":{},"coverage.html":{}}}],["src/stripewebhook/stripewebhook.controller.ts:16",{"_index":2007,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["src/stripewebhook/stripewebhook.module.ts",{"_index":2026,"title":{},"body":{"modules/StripeWebhookModule.html":{}}}],["src/stripewebhook/stripewebhook.service.ts",{"_index":2030,"title":{},"body":{"injectables/StripeWebhookService.html":{},"coverage.html":{}}}],["src/stripewebhook/stripewebhook.service.ts:10",{"_index":2034,"title":{},"body":{"injectables/StripeWebhookService.html":{}}}],["src/stripewebhook/stripewebhook.service.ts:17",{"_index":2037,"title":{},"body":{"injectables/StripeWebhookService.html":{}}}],["src/stripewebhook/stripewebhook.service.ts:21",{"_index":2040,"title":{},"body":{"injectables/StripeWebhookService.html":{}}}],["src/subscribers/dto/createsubscriber.dto.ts",{"_index":759,"title":{},"body":{"classes/CreateSubscriberDto.html":{},"coverage.html":{}}}],["src/subscribers/dto/createsubscriber.dto.ts:2",{"_index":760,"title":{},"body":{"classes/CreateSubscriberDto.html":{}}}],["src/subscribers/dto/createsubscriber.dto.ts:3",{"_index":761,"title":{},"body":{"classes/CreateSubscriberDto.html":{}}}],["src/subscribers/subscriber.service.ts",{"_index":2053,"title":{},"body":{"interfaces/Subscriber.html":{},"coverage.html":{}}}],["src/subscribers/subscribers.controller.ts",{"_index":2055,"title":{},"body":{"controllers/SubscribersController.html":{},"coverage.html":{}}}],["src/subscribers/subscribers.controller.ts:22",{"_index":2062,"title":{},"body":{"controllers/SubscribersController.html":{}}}],["src/subscribers/subscribers.controller.ts:27",{"_index":2061,"title":{},"body":{"controllers/SubscribersController.html":{}}}],["src/subscribers/subscribers.controller.ts:33",{"_index":2060,"title":{},"body":{"controllers/SubscribersController.html":{}}}],["src/subscribers/subscribers.module.ts",{"_index":2075,"title":{},"body":{"modules/SubscribersModule.html":{}}}],["src/subscribers/subscribers.proto",{"_index":2084,"title":{},"body":{"modules/SubscribersModule.html":{}}}],["src/subscribers/subscribers.service.interface.ts",{"_index":2086,"title":{},"body":{"interfaces/SubscribersService.html":{},"coverage.html":{}}}],["src/subscribers/subscribers.service.interface.ts:5",{"_index":2090,"title":{},"body":{"interfaces/SubscribersService.html":{}}}],["src/subscribers/subscribers.service.interface.ts:6",{"_index":2092,"title":{},"body":{"interfaces/SubscribersService.html":{}}}],["src/subscriptions/subscriptions.controller.ts",{"_index":2096,"title":{},"body":{"controllers/SubscriptionsController.html":{},"coverage.html":{}}}],["src/subscriptions/subscriptions.controller.ts:14",{"_index":2101,"title":{},"body":{"controllers/SubscriptionsController.html":{}}}],["src/subscriptions/subscriptions.controller.ts:20",{"_index":2104,"title":{},"body":{"controllers/SubscriptionsController.html":{}}}],["src/subscriptions/subscriptions.module.ts",{"_index":2117,"title":{},"body":{"modules/SubscriptionsModule.html":{}}}],["src/subscriptions/subscriptions.service.ts",{"_index":2119,"title":{},"body":{"injectables/SubscriptionsService.html":{},"coverage.html":{}}}],["src/subscriptions/subscriptions.service.ts:12",{"_index":2123,"title":{},"body":{"injectables/SubscriptionsService.html":{}}}],["src/subscriptions/subscriptions.service.ts:22",{"_index":2125,"title":{},"body":{"injectables/SubscriptionsService.html":{}}}],["src/subscriptions/subscriptions.service.ts:6",{"_index":2121,"title":{},"body":{"injectables/SubscriptionsService.html":{}}}],["src/users/address.entity.ts",{"_index":27,"title":{},"body":{"classes/Address.html":{},"coverage.html":{}}}],["src/users/address.entity.ts:10",{"_index":41,"title":{},"body":{"classes/Address.html":{}}}],["src/users/address.entity.ts:13",{"_index":36,"title":{},"body":{"classes/Address.html":{}}}],["src/users/address.entity.ts:16",{"_index":37,"title":{},"body":{"classes/Address.html":{}}}],["src/users/address.entity.ts:19",{"_index":44,"title":{},"body":{"classes/Address.html":{}}}],["src/users/address.entity.ts:7",{"_index":40,"title":{},"body":{"classes/Address.html":{}}}],["src/users/dto/createuser.dto.ts",{"_index":763,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dto/createuser.dto.ts:2",{"_index":764,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/users/dto/createuser.dto.ts:3",{"_index":765,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/users/dto/createuser.dto.ts:4",{"_index":766,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/users/models/user.model.ts",{"_index":2267,"title":{},"body":{"classes/User-1.html":{},"coverage.html":{}}}],["src/users/models/user.model.ts:6",{"_index":2269,"title":{},"body":{"classes/User-1.html":{}}}],["src/users/models/user.model.ts:9",{"_index":2268,"title":{},"body":{"classes/User-1.html":{}}}],["src/users/user.entity.ts",{"_index":2229,"title":{},"body":{"classes/User.html":{},"coverage.html":{}}}],["src/users/user.entity.ts:10",{"_index":2249,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.entity.ts:13",{"_index":2248,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.entity.ts:16",{"_index":2258,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.entity.ts:19",{"_index":2256,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.entity.ts:23",{"_index":2257,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.entity.ts:26",{"_index":2253,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.entity.ts:33",{"_index":2242,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.entity.ts:36",{"_index":2259,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.entity.ts:46",{"_index":2244,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.entity.ts:52",{"_index":2246,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.entity.ts:55",{"_index":2261,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.entity.ts:58",{"_index":2254,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.entity.ts:61",{"_index":2260,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.entity.ts:64",{"_index":2255,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.entity.ts:67",{"_index":2251,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.entity.ts:70",{"_index":2252,"title":{},"body":{"classes/User.html":{}}}],["src/users/users.controller.ts",{"_index":2271,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:17",{"_index":2276,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:23",{"_index":2279,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module.ts",{"_index":2297,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service.ts",{"_index":2301,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:11",{"_index":2314,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:115",{"_index":2340,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:122",{"_index":2332,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:135",{"_index":2334,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:141",{"_index":2336,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:147",{"_index":2338,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:153",{"_index":2342,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:159",{"_index":2344,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:20",{"_index":2346,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:29",{"_index":2326,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:37",{"_index":2330,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:43",{"_index":2328,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:51",{"_index":2320,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:62",{"_index":2322,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:75",{"_index":2318,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:92",{"_index":2324,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/utils/excludenull.interceptor.ts",{"_index":1064,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{},"coverage.html":{}}}],["src/utils/excludenull.interceptor.ts:8",{"_index":1069,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["src/utils/findoneparams.ts",{"_index":1127,"title":{},"body":{"classes/FindOneParams.html":{},"coverage.html":{}}}],["src/utils/findoneparams.ts:5",{"_index":1129,"title":{},"body":{"classes/FindOneParams.html":{}}}],["src/utils/getloglevels.ts",{"_index":2406,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/utils/logs.middleware.ts",{"_index":1344,"title":{},"body":{"injectables/LogsMiddleware.html":{},"coverage.html":{}}}],["src/utils/logs.middleware.ts:6",{"_index":1350,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["src/utils/logs.middleware.ts:8",{"_index":1348,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["src/utils/mocks/config.service.ts",{"_index":2407,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/utils/mocks/jwt.service.ts",{"_index":2409,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/utils/rawbody.middleware.ts",{"_index":2411,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/utils/recursivelystripnullvalues.ts",{"_index":2413,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/utils/runincluster.ts",{"_index":2414,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/utils/scalars/timestamp.scalar.ts",{"_index":2134,"title":{},"body":{"classes/Timestamp.html":{},"coverage.html":{}}}],["src/utils/scalars/timestamp.scalar.ts:12",{"_index":2151,"title":{},"body":{"classes/Timestamp.html":{}}}],["src/utils/scalars/timestamp.scalar.ts:21",{"_index":2148,"title":{},"body":{"classes/Timestamp.html":{}}}],["src/utils/scalars/timestamp.scalar.ts:6",{"_index":2145,"title":{},"body":{"classes/Timestamp.html":{}}}],["src/utils/scalars/timestamp.scalar.ts:8",{"_index":2153,"title":{},"body":{"classes/Timestamp.html":{}}}],["src/utils/stripeerror.enum.ts",{"_index":2527,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/utils/types/objectwithid.dto",{"_index":702,"title":{},"body":{"classes/CreateCommentDto.html":{}}}],["src/utils/types/objectwithid.dto.ts",{"_index":1377,"title":{},"body":{"classes/ObjectWithIdDto.html":{},"coverage.html":{}}}],["src/utils/types/objectwithid.dto.ts:5",{"_index":1378,"title":{},"body":{"classes/ObjectWithIdDto.html":{}}}],["src/utils/types/paginationparams.ts",{"_index":1429,"title":{},"body":{"classes/PaginationParams.html":{},"coverage.html":{}}}],["src/utils/types/paginationparams.ts:15",{"_index":1436,"title":{},"body":{"classes/PaginationParams.html":{}}}],["src/utils/types/paginationparams.ts:21",{"_index":1434,"title":{},"body":{"classes/PaginationParams.html":{}}}],["src/utils/types/paginationparams.ts:9",{"_index":1437,"title":{},"body":{"classes/PaginationParams.html":{}}}],["stack",{"_index":816,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["start",{"_index":2142,"title":{},"body":{"classes/Timestamp.html":{},"index.html":{}}}],["start:dev",{"_index":2566,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":2567,"title":{},"body":{"index.html":{}}}],["started",{"_index":2546,"title":{"index.html":{}},"body":{}}],["starter",{"_index":2557,"title":{},"body":{"index.html":{}}}],["startid",{"_index":1432,"title":{},"body":{"classes/PaginationParams.html":{},"controllers/PostsController.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{}}}],["statements",{"_index":2384,"title":{},"body":{"coverage.html":{}}}],["statuscode",{"_index":1354,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["statusmessage",{"_index":1355,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["stay",{"_index":2587,"title":{},"body":{"index.html":{}}}],["storage",{"_index":1250,"title":{},"body":{"controllers/HealthController.html":{}}}],["store",{"_index":1570,"title":{},"body":{"modules/PostsModule.html":{},"dependencies.html":{}}}],["strategy",{"_index":1287,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["stream",{"_index":1398,"title":{},"body":{"controllers/OptimizeController.html":{},"injectables/TwoFactorAuthenticationService.html":{}}}],["stream.pipe(response",{"_index":1420,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["street",{"_index":32,"title":{},"body":{"classes/Address.html":{},"miscellaneous/variables.html":{}}}],["streetname",{"_index":2623,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string",{"_index":13,"title":{},"body":{"classes/AddCreditCardDto.html":{},"classes/Address.html":{},"injectables/AuthenticationService.html":{},"interfaces/BookProperties.html":{},"interfaces/CarProperties.html":{},"classes/Category.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"classes/CheckVerificationCodeDto.html":{},"classes/Comment.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostInput.html":{},"classes/CreateProductCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateSubscriberDto.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"injectables/EmailConfirmationService.html":{},"classes/EmailScheduleDto.html":{},"injectables/FilesService.html":{},"classes/FindOneParams.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/LocalStrategy.html":{},"classes/Log.html":{},"classes/LogInDto.html":{},"classes/Message.html":{},"controllers/OptimizeController.html":{},"classes/Post.html":{},"classes/Post-1.html":{},"interfaces/PostSearchBody.html":{},"controllers/PostsController.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"classes/Product.html":{},"classes/ProductCategory.html":{},"classes/PublicFile.html":{},"classes/RegisterDto.html":{},"classes/SetDefaultCreditCardDto.html":{},"injectables/SmsService.html":{},"classes/StripeEvent.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/StripeWebhookService.html":{},"interfaces/Subscriber.html":{},"injectables/SubscriptionsService.html":{},"classes/Timestamp.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"injectables/UsersService.html":{},"interfaces/VerificationTokenPayload.html":{},"miscellaneous/variables.html":{}}}],["stringifyparameters",{"_index":850,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["stringifyparameters(parameters",{"_index":867,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["stripe",{"_index":1936,"title":{},"body":{"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/StripeWebhookService.html":{},"dependencies.html":{}}}],["stripe(configservice.get('stripe_secret_key",{"_index":1968,"title":{},"body":{"injectables/StripeService.html":{}}}],["stripe.event",{"_index":2039,"title":{},"body":{"injectables/StripeWebhookService.html":{}}}],["stripe.service",{"_index":1934,"title":{},"body":{"modules/StripeModule.html":{}}}],["stripe.subscription",{"_index":2047,"title":{},"body":{"injectables/StripeWebhookService.html":{}}}],["stripe/stripe.module",{"_index":556,"title":{},"body":{"modules/ChargeModule.html":{},"modules/CreditCardsModule.html":{},"modules/StripeWebhookModule.html":{},"modules/SubscriptionsModule.html":{},"modules/UsersModule.html":{}}}],["stripe/stripe.service",{"_index":546,"title":{},"body":{"controllers/ChargeController.html":{},"controllers/CreditCardsController.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubscriptionsService.html":{},"injectables/UsersService.html":{}}}],["stripe_currency",{"_index":188,"title":{},"body":{"modules/AppModule.html":{}}}],["stripe_customer_id",{"_index":2621,"title":{},"body":{"miscellaneous/variables.html":{}}}],["stripe_secret_key",{"_index":187,"title":{},"body":{"modules/AppModule.html":{}}}],["stripe_webhook_secret",{"_index":191,"title":{},"body":{"modules/AppModule.html":{}}}],["stripecustomer",{"_index":2354,"title":{},"body":{"injectables/UsersService.html":{}}}],["stripecustomer.id",{"_index":2359,"title":{},"body":{"injectables/UsersService.html":{}}}],["stripecustomerid",{"_index":2237,"title":{},"body":{"classes/User.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["stripeerror",{"_index":1965,"title":{},"body":{"injectables/StripeService.html":{},"miscellaneous/enumerations.html":{}}}],["stripeerror.invalidrequest",{"_index":1988,"title":{},"body":{"injectables/StripeService.html":{}}}],["stripeerror.resourcemissing",{"_index":1994,"title":{},"body":{"injectables/StripeService.html":{}}}],["stripeevent",{"_index":1926,"title":{"classes/StripeEvent.html":{}},"body":{"classes/StripeEvent.html":{},"modules/StripeWebhookModule.html":{},"injectables/StripeWebhookService.html":{},"coverage.html":{}}}],["stripeevent.entity",{"_index":2028,"title":{},"body":{"modules/StripeWebhookModule.html":{},"injectables/StripeWebhookService.html":{}}}],["stripeinvalidrequesterror",{"_index":2529,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["stripemodule",{"_index":554,"title":{"modules/StripeModule.html":{}},"body":{"modules/ChargeModule.html":{},"modules/CreditCardsModule.html":{},"modules/StripeModule.html":{},"modules/StripeWebhookModule.html":{},"modules/SubscriptionsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["stripeservice",{"_index":545,"title":{"injectables/StripeService.html":{}},"body":{"controllers/ChargeController.html":{},"controllers/CreditCardsController.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubscriptionsService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["stripewebhook.controller",{"_index":2027,"title":{},"body":{"modules/StripeWebhookModule.html":{}}}],["stripewebhook.service",{"_index":2011,"title":{},"body":{"controllers/StripeWebhookController.html":{},"modules/StripeWebhookModule.html":{}}}],["stripewebhook/stripewebhook.module",{"_index":128,"title":{},"body":{"modules/AppModule.html":{}}}],["stripewebhookcontroller",{"_index":2002,"title":{"controllers/StripeWebhookController.html":{}},"body":{"controllers/StripeWebhookController.html":{},"modules/StripeWebhookModule.html":{},"coverage.html":{}}}],["stripewebhookmodule",{"_index":75,"title":{"modules/StripeWebhookModule.html":{}},"body":{"modules/AppModule.html":{},"modules/StripeWebhookModule.html":{},"modules.html":{},"overview.html":{}}}],["stripewebhookservice",{"_index":2010,"title":{"injectables/StripeWebhookService.html":{}},"body":{"controllers/StripeWebhookController.html":{},"modules/StripeWebhookModule.html":{},"injectables/StripeWebhookService.html":{},"coverage.html":{},"overview.html":{}}}],["subject",{"_index":981,"title":{},"body":{"injectables/EmailConfirmationService.html":{},"classes/EmailScheduleDto.html":{},"injectables/EmailSchedulingService.html":{}}}],["subscribed",{"_index":2130,"title":{},"body":{"injectables/SubscriptionsService.html":{}}}],["subscribemessage",{"_index":582,"title":{},"body":{"classes/ChatGateway.html":{}}}],["subscribemessage('request_all_messages",{"_index":578,"title":{},"body":{"classes/ChatGateway.html":{}}}],["subscribemessage('send_message",{"_index":574,"title":{},"body":{"classes/ChatGateway.html":{}}}],["subscriber",{"_index":2052,"title":{"interfaces/Subscriber.html":{}},"body":{"interfaces/Subscriber.html":{},"controllers/SubscribersController.html":{},"interfaces/SubscribersService.html":{},"coverage.html":{}}}],["subscriber.service",{"_index":2094,"title":{},"body":{"interfaces/SubscribersService.html":{}}}],["subscribers",{"_index":2056,"title":{},"body":{"controllers/SubscribersController.html":{},"modules/SubscribersModule.html":{}}}],["subscribers.controller",{"_index":2076,"title":{},"body":{"modules/SubscribersModule.html":{}}}],["subscribers.service.interface",{"_index":2067,"title":{},"body":{"controllers/SubscribersController.html":{}}}],["subscribers/subscribers.module",{"_index":106,"title":{},"body":{"modules/AppModule.html":{}}}],["subscribers_package",{"_index":2079,"title":{},"body":{"modules/SubscribersModule.html":{}}}],["subscribers_service_host",{"_index":177,"title":{},"body":{"modules/AppModule.html":{}}}],["subscribers_service_port",{"_index":178,"title":{},"body":{"modules/AppModule.html":{}}}],["subscriberscontroller",{"_index":2054,"title":{"controllers/SubscribersController.html":{}},"body":{"controllers/SubscribersController.html":{},"modules/SubscribersModule.html":{},"coverage.html":{}}}],["subscribersmodule",{"_index":76,"title":{"modules/SubscribersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/SubscribersModule.html":{},"modules.html":{},"overview.html":{}}}],["subscribersservice",{"_index":2066,"title":{"interfaces/SubscribersService.html":{}},"body":{"controllers/SubscribersController.html":{},"interfaces/SubscribersService.html":{},"coverage.html":{}}}],["subscription",{"_index":1601,"title":{},"body":{"classes/PostsResolver.html":{}}}],["subscription(undefined",{"_index":1592,"title":{},"body":{"classes/PostsResolver.html":{}}}],["subscriptions",{"_index":1611,"title":{},"body":{"classes/PostsResolver.html":{},"modules/PubSubModule.html":{},"controllers/SubscriptionsController.html":{},"injectables/SubscriptionsService.html":{},"dependencies.html":{}}}],["subscriptions.controller",{"_index":2118,"title":{},"body":{"modules/SubscriptionsModule.html":{}}}],["subscriptions.data.length",{"_index":2128,"title":{},"body":{"injectables/SubscriptionsService.html":{}}}],["subscriptions.data[0",{"_index":2133,"title":{},"body":{"injectables/SubscriptionsService.html":{}}}],["subscriptions.service",{"_index":2106,"title":{},"body":{"controllers/SubscriptionsController.html":{},"modules/SubscriptionsModule.html":{}}}],["subscriptions/subscriptions.module",{"_index":127,"title":{},"body":{"modules/AppModule.html":{}}}],["subscriptionscontroller",{"_index":2095,"title":{"controllers/SubscriptionsController.html":{}},"body":{"controllers/SubscriptionsController.html":{},"modules/SubscriptionsModule.html":{},"coverage.html":{}}}],["subscriptionsmodule",{"_index":77,"title":{"modules/SubscriptionsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/SubscriptionsModule.html":{},"modules.html":{},"overview.html":{}}}],["subscriptionsservice",{"_index":2105,"title":{"injectables/SubscriptionsService.html":{}},"body":{"controllers/SubscriptionsController.html":{},"modules/SubscriptionsModule.html":{},"injectables/SubscriptionsService.html":{},"coverage.html":{},"overview.html":{}}}],["subscriptionstatus",{"_index":2049,"title":{},"body":{"injectables/StripeWebhookService.html":{}}}],["super",{"_index":831,"title":{},"body":{"injectables/CustomLogger.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["super(`category",{"_index":534,"title":{},"body":{"classes/CategoryNotFoundException.html":{}}}],["super(`post",{"_index":1491,"title":{},"body":{"classes/PostNotFoundException.html":{}}}],["super.debug.apply(this",{"_index":840,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["super.error.apply(this",{"_index":838,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["super.log.apply(this",{"_index":836,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["super.trackby(context",{"_index":1276,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["super.warn.apply(this",{"_index":839,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["support",{"_index":2581,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":2597,"title":{},"body":{"modules.html":{}}}],["switch",{"_index":2614,"title":{},"body":{"miscellaneous/variables.html":{}}}],["synchronize",{"_index":891,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["table",{"_index":2417,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":2416,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":1722,"title":{},"body":{"injectables/PostsService.html":{}}}],["terminusmodule",{"_index":1264,"title":{},"body":{"modules/HealthModule.html":{}}}],["test",{"_index":2570,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":2573,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":2572,"title":{},"body":{"index.html":{}}}],["tests",{"_index":2569,"title":{},"body":{"index.html":{}}}],["text",{"_index":975,"title":{},"body":{"injectables/EmailConfirmationService.html":{},"injectables/EmailSchedulingService.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{}}}],["thanks",{"_index":2579,"title":{},"body":{"index.html":{}}}],["this.authenticationservice.getauthenticateduser(email",{"_index":1322,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.authenticationservice.getcookiesforlogout",{"_index":287,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.authenticationservice.getcookiewithjwtaccesstoken(request.user.id",{"_index":293,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["this.authenticationservice.getcookiewithjwtaccesstoken(user.id",{"_index":274,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["this.authenticationservice.getcookiewithjwtrefreshtoken(user.id",{"_index":279,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["this.authenticationservice.getuserfromauthenticationtoken(authenticationtoken",{"_index":626,"title":{},"body":{"injectables/ChatService.html":{}}}],["this.authenticationservice.register(registrationdata",{"_index":266,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.cachemanager.del(key",{"_index":1714,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.cachemanager.store.keys",{"_index":1711,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.categoriesrepository.create(category",{"_index":510,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.categoriesrepository.delete(id",{"_index":518,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.categoriesrepository.find",{"_index":504,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.categoriesrepository.findone(id",{"_index":507,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.categoriesrepository.save(newcategory",{"_index":511,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.categoriesrepository.update(id",{"_index":513,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.categoriesservice.createcategory(category",{"_index":456,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["this.categoriesservice.deletecategory(number(id",{"_index":460,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["this.categoriesservice.getallcategories",{"_index":452,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["this.categoriesservice.getcategorybyid(number(id",{"_index":454,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["this.categoriesservice.updatecategory(number(id",{"_index":458,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["this.chatservice.getallmessages",{"_index":593,"title":{},"body":{"classes/ChatGateway.html":{}}}],["this.chatservice.getuserfromsocket(socket",{"_index":587,"title":{},"body":{"classes/ChatGateway.html":{}}}],["this.chatservice.savemessage(content",{"_index":590,"title":{},"body":{"classes/ChatGateway.html":{}}}],["this.clearcache",{"_index":1731,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.client.getservice('subscribersservice",{"_index":2072,"title":{},"body":{"controllers/SubscribersController.html":{}}}],["this.commandbus.execute",{"_index":666,"title":{},"body":{"controllers/CommentsController.html":{}}}],["this.commentsrepository.create",{"_index":718,"title":{},"body":{"classes/CreateCommentHandler.html":{}}}],["this.commentsrepository.find",{"_index":1143,"title":{},"body":{"classes/GetCommentsHandler.html":{}}}],["this.commentsrepository.save(newpost",{"_index":721,"title":{},"body":{"classes/CreateCommentHandler.html":{}}}],["this.configservice.get('aws_public_bucket_name",{"_index":1115,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.configservice.get('email_confirmation_url')}?token=${token",{"_index":974,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["this.configservice.get('google_auth_client_id",{"_index":1186,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.configservice.get('google_auth_client_secret",{"_index":1188,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.configservice.get('jwt_access_token_expiration_time')}s",{"_index":383,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.configservice.get('jwt_access_token_secret",{"_index":381,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.configservice.get('jwt_refresh_token_expiration_time')}s",{"_index":389,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.configservice.get('jwt_refresh_token_secret",{"_index":388,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.configservice.get('jwt_verification_token_expiration_time')}s",{"_index":972,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["this.configservice.get('jwt_verification_token_secret",{"_index":971,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["this.configservice.get('monthly_subscription_price_id",{"_index":2126,"title":{},"body":{"injectables/SubscriptionsService.html":{}}}],["this.configservice.get('stripe_currency",{"_index":1981,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.configservice.get('stripe_webhook_secret",{"_index":1974,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.configservice.get('twilio_sender_phone_number",{"_index":1924,"title":{},"body":{"injectables/SmsService.html":{}}}],["this.configservice.get('twilio_verification_service_sid",{"_index":1911,"title":{},"body":{"injectables/SmsService.html":{}}}],["this.configservice.get('two_factor_authentication_app_name",{"_index":2214,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["this.connection.createqueryrunner",{"_index":2367,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.count(text",{"_index":1659,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["this.createevent(event.id",{"_index":2043,"title":{},"body":{"injectables/StripeWebhookService.html":{}}}],["this.deletecategory(id",{"_index":516,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.diskhealthindicator.checkstorage('disk",{"_index":1255,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.elasticsearchhealthindicator.ishealthy('elasticsearch",{"_index":1258,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.elasticsearchservice.count",{"_index":1655,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["this.elasticsearchservice.deletebyquery",{"_index":1673,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["this.elasticsearchservice.index",{"_index":1649,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["this.elasticsearchservice.ping",{"_index":906,"title":{},"body":{"injectables/ElasticsearchHealthIndicator.html":{}}}],["this.elasticsearchservice.search",{"_index":1660,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["this.elasticsearchservice.updatebyquery",{"_index":1679,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["this.emailconfirmationservice.confirmemail(email",{"_index":927,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["this.emailconfirmationservice.decodeconfirmationtoken(confirmationdata.token",{"_index":926,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["this.emailconfirmationservice.resendconfirmationlink(request.user.id",{"_index":930,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["this.emailconfirmationservice.sendverificationlink(registrationdata.email",{"_index":267,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.emailschedulingservice.scheduleemail(emailschedule",{"_index":1022,"title":{},"body":{"controllers/EmailSchedulingController.html":{}}}],["this.emailservice.sendmail",{"_index":980,"title":{},"body":{"injectables/EmailConfirmationService.html":{},"injectables/EmailSchedulingService.html":{}}}],["this.eventsrepository.insert",{"_index":2042,"title":{},"body":{"injectables/StripeWebhookService.html":{}}}],["this.filesservice.deletepublicfile(user.avatar.id",{"_index":2365,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.filesservice.deletepublicfilewithqueryrunner(fileid",{"_index":2372,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.filesservice.uploadpublicfile(imagebuffer",{"_index":2366,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.getbyid(userid",{"_index":2362,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.getcookiesforuser(user",{"_index":1199,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.getposts(offset",{"_index":1723,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.getstatus(key",{"_index":907,"title":{},"body":{"injectables/ElasticsearchHealthIndicator.html":{}}}],["this.getuserdata(token",{"_index":1201,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.googleauthenticationservice.authenticate(tokendata.token",{"_index":1160,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["this.handleregistereduser(user",{"_index":1204,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.healthcheckservice.check",{"_index":1235,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.imagequeue.add('optimize",{"_index":1407,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["this.imagequeue.getjob(id",{"_index":1412,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["this.index",{"_index":1650,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["this.jwtservice.sign(payload",{"_index":379,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/EmailConfirmationService.html":{}}}],["this.jwtservice.verify(token",{"_index":401,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/EmailConfirmationService.html":{}}}],["this.logger.debug(message",{"_index":876,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["this.logger.error(`${query",{"_index":873,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["this.logger.error(message",{"_index":1357,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["this.logger.log(`${query",{"_index":871,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["this.logger.log(message",{"_index":875,"title":{},"body":{"classes/DatabaseLogger.html":{},"injectables/LogsMiddleware.html":{}}}],["this.logger.warn('tried",{"_index":1725,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.logger.warn(`time",{"_index":874,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["this.logger.warn(message",{"_index":877,"title":{},"body":{"classes/DatabaseLogger.html":{},"injectables/LogsMiddleware.html":{}}}],["this.logsrepository.create(log",{"_index":1369,"title":{},"body":{"injectables/LogsService.html":{}}}],["this.logsrepository.save(newlog",{"_index":1370,"title":{},"body":{"injectables/LogsService.html":{}}}],["this.logsservice",{"_index":835,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["this.logsservice.createlog",{"_index":837,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["this.memoryhealthindicator.checkheap('memory",{"_index":1241,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.memoryhealthindicator.checkrss('memory",{"_index":1247,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.messagesrepository.create",{"_index":620,"title":{},"body":{"injectables/ChatService.html":{}}}],["this.messagesrepository.find",{"_index":622,"title":{},"body":{"injectables/ChatService.html":{}}}],["this.messagesrepository.save(newmessage",{"_index":621,"title":{},"body":{"injectables/ChatService.html":{}}}],["this.nodemailertransport",{"_index":1055,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.nodemailertransport.sendmail(options",{"_index":1062,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.oauthclient",{"_index":1189,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.oauthclient.gettokeninfo(token",{"_index":1206,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.oauthclient.setcredentials",{"_index":1193,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.postsrepository",{"_index":1742,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.count",{"_index":1718,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.create",{"_index":1728,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.delete(id",{"_index":1735,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.findandcount",{"_index":1720,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.findone(id",{"_index":1724,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.save(newpost",{"_index":1729,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.update(id",{"_index":1732,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postssearchservice.indexpost(newpost",{"_index":1730,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postssearchservice.remove(id",{"_index":1736,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postssearchservice.search(text",{"_index":1737,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postssearchservice.update(updatedpost",{"_index":1734,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsservice.createpost(createpostinput",{"_index":1626,"title":{},"body":{"classes/PostsResolver.html":{}}}],["this.postsservice.createpost(post",{"_index":1541,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.deletepost(number(id",{"_index":1545,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.getpostbyid(number(id",{"_index":1538,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.getposts",{"_index":1621,"title":{},"body":{"classes/PostsResolver.html":{}}}],["this.postsservice.getpostswithauthors",{"_index":1620,"title":{},"body":{"classes/PostsResolver.html":{}}}],["this.postsservice.getpostswithauthors(offset",{"_index":1536,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.searchforposts(search",{"_index":1535,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.updatepost(number(id",{"_index":1543,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.productcategoriesrepository.create(category",{"_index":1790,"title":{},"body":{"injectables/ProductCategoriesService.html":{}}}],["this.productcategoriesrepository.find",{"_index":1788,"title":{},"body":{"injectables/ProductCategoriesService.html":{}}}],["this.productcategoriesrepository.save(newproductcategory",{"_index":1791,"title":{},"body":{"injectables/ProductCategoriesService.html":{}}}],["this.productsrepository.create(product",{"_index":1824,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.productsrepository.find",{"_index":1822,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.productsrepository.save(newproduct",{"_index":1825,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.productsservice.createproduct(product",{"_index":1808,"title":{},"body":{"controllers/ProductsController.html":{}}}],["this.productsservice.createproductcategory(productcategory",{"_index":1771,"title":{},"body":{"controllers/ProductCategoriesController.html":{}}}],["this.productsservice.getallproductcategories",{"_index":1769,"title":{},"body":{"controllers/ProductCategoriesController.html":{}}}],["this.productsservice.getallproducts",{"_index":1807,"title":{},"body":{"controllers/ProductsController.html":{}}}],["this.publicfilesrepository.create",{"_index":1117,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.publicfilesrepository.delete(fileid",{"_index":1124,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.publicfilesrepository.findone",{"_index":1121,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.publicfilesrepository.save(newfile",{"_index":1120,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.pubsub.asynciterator(post_added_event",{"_index":1623,"title":{},"body":{"classes/PostsResolver.html":{}}}],["this.pubsub.publish(post_added_event",{"_index":1628,"title":{},"body":{"classes/PostsResolver.html":{}}}],["this.querybus.execute",{"_index":668,"title":{},"body":{"controllers/CommentsController.html":{}}}],["this.reflector.get",{"_index":1273,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["this.registeruser(token",{"_index":1210,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.schedulerregistry.addcronjob(`${date.now",{"_index":1041,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["this.sendverificationlink(user.email",{"_index":986,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["this.server.sockets.emit('receive_message",{"_index":591,"title":{},"body":{"classes/ChatGateway.html":{}}}],["this.smsservice.confirmphonenumber(request.user.id",{"_index":1881,"title":{},"body":{"controllers/SmsController.html":{}}}],["this.smsservice.initiatephonenumberverification(request.user.phonenumber",{"_index":1879,"title":{},"body":{"controllers/SmsController.html":{}}}],["this.stringifyparameters(parameters",{"_index":872,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["this.stripe",{"_index":1967,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.stripe.customers.create",{"_index":1976,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.stripe.customers.update(customerid",{"_index":1984,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.stripe.paymentintents.create",{"_index":1977,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.stripe.paymentmethods.list",{"_index":1991,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.stripe.setupintents.create",{"_index":1983,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.stripe.subscriptions.create",{"_index":1992,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.stripe.subscriptions.list",{"_index":1998,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.stripe.webhooks.constructevent",{"_index":1975,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.stripeservice.attachcreditcard(creditcard.paymentmethodid",{"_index":789,"title":{},"body":{"controllers/CreditCardsController.html":{}}}],["this.stripeservice.charge(charge.amount",{"_index":549,"title":{},"body":{"controllers/ChargeController.html":{}}}],["this.stripeservice.constructeventfrompayload(signature",{"_index":2017,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.stripeservice.createcustomer(name",{"_index":2361,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.stripeservice.createcustomer(userdata.name",{"_index":2355,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.stripeservice.createsubscription(priceid",{"_index":2131,"title":{},"body":{"injectables/SubscriptionsService.html":{}}}],["this.stripeservice.listcreditcards(request.user.stripecustomerid",{"_index":795,"title":{},"body":{"controllers/CreditCardsController.html":{}}}],["this.stripeservice.listsubscriptions(priceid",{"_index":2127,"title":{},"body":{"injectables/SubscriptionsService.html":{}}}],["this.stripeservice.setdefaultcreditcard(creditcard.paymentmethodid",{"_index":792,"title":{},"body":{"controllers/CreditCardsController.html":{}}}],["this.stripewebhookservice.processsubscriptionupdate(event",{"_index":2022,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.subscribersservice",{"_index":2071,"title":{},"body":{"controllers/SubscribersController.html":{}}}],["this.subscribersservice.addsubscriber(subscriber",{"_index":2074,"title":{},"body":{"controllers/SubscribersController.html":{}}}],["this.subscribersservice.getallsubscribers",{"_index":2073,"title":{},"body":{"controllers/SubscribersController.html":{}}}],["this.subscriptionsservice.createmonthlysubscription(request.user.stripecustomerid",{"_index":2110,"title":{},"body":{"controllers/SubscriptionsController.html":{}}}],["this.subscriptionsservice.getmonthlysubscription(request.user.stripecustomerid",{"_index":2113,"title":{},"body":{"controllers/SubscriptionsController.html":{}}}],["this.twilioclient",{"_index":1908,"title":{},"body":{"injectables/SmsService.html":{}}}],["this.twilioclient.messages",{"_index":1925,"title":{},"body":{"injectables/SmsService.html":{}}}],["this.twilioclient.verify.services(servicesid",{"_index":1912,"title":{},"body":{"injectables/SmsService.html":{}}}],["this.twofactorauthenticationservice.generatetwofactorauthenticationsecret(request.user",{"_index":2190,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["this.twofactorauthenticationservice.istwofactorauthenticationcodevalid",{"_index":2193,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["this.twofactorauthenticationservice.pipeqrcodestream(response",{"_index":2191,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["this.typeormhealthindicator.pingcheck('database",{"_index":1236,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.userservice.getbyid(payload.userid",{"_index":1305,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["this.userservice.getuserifrefreshtokenmatches(refreshtoken",{"_index":1297,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["this.usersrepository.create",{"_index":2358,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.find",{"_index":2353,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.findone",{"_index":2351,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.save(newuser",{"_index":2360,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.update",{"_index":2350,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.update(userid",{"_index":2364,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.addavatar(request.user.id",{"_index":2287,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.create",{"_index":361,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.usersservice.createwithgoogle(email",{"_index":1203,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.usersservice.deleteavatar(request.user.id",{"_index":2292,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getbyemail(email",{"_index":393,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/EmailConfirmationService.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["this.usersservice.getbyid(payload.userid",{"_index":403,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.usersservice.getbyid(userid",{"_index":982,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["this.usersservice.getbyids(authorids",{"_index":1553,"title":{},"body":{"injectables/PostsLoaders.html":{}}}],["this.usersservice.markemailasconfirmed(email",{"_index":987,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["this.usersservice.markphonenumberasconfirmed(userid",{"_index":1922,"title":{},"body":{"injectables/SmsService.html":{}}}],["this.usersservice.removerefreshtoken(request.user.id",{"_index":286,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.usersservice.setcurrentrefreshtoken(refreshtoken",{"_index":280,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["this.usersservice.settwofactorauthenticationsecret(secret",{"_index":2215,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["this.usersservice.turnontwofactorauthentication(request.user.id",{"_index":2195,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["this.usersservice.updatemonthlysubscriptionstatus(customerid",{"_index":2051,"title":{},"body":{"injectables/StripeWebhookService.html":{}}}],["this.verifypassword(plaintextpassword",{"_index":394,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["thresholdpercent",{"_index":1256,"title":{},"body":{"controllers/HealthController.html":{}}}],["throw",{"_index":368,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/CategoriesService.html":{},"injectables/ChatService.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailConfirmationService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PostsService.html":{},"controllers/SmsController.html":{},"injectables/SmsService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/StripeWebhookService.html":{},"injectables/SubscriptionsService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/UsersService.html":{}}}],["time",{"_index":864,"title":{},"body":{"classes/DatabaseLogger.html":{},"classes/Timestamp.html":{}}}],["timestamp",{"_index":119,"title":{"classes/Timestamp.html":{}},"body":{"modules/AppModule.html":{},"classes/Post.html":{},"classes/Timestamp.html":{},"coverage.html":{}}}],["title",{"_index":732,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostInput.html":{},"classes/Post.html":{},"classes/Post-1.html":{},"interfaces/PostSearchBody.html":{},"injectables/PostsSearchService.html":{},"classes/UpdatePostDto.html":{}}}],["tofilestream",{"_index":2210,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["tofilestream(stream",{"_index":2218,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["token",{"_index":277,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/ConfirmEmailDto.html":{},"injectables/EmailConfirmationService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"classes/TokenVerificationDto.html":{},"injectables/TwoFactorAuthenticationService.html":{}}}],["token.strategy",{"_index":313,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["token.strategy.ts",{"_index":1280,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"coverage.html":{}}}],["token.strategy.ts:13",{"_index":1283,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["token.strategy.ts:27",{"_index":1285,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["tokendata",{"_index":1153,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["tokenexpirederror",{"_index":992,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["tokeninfo",{"_index":1205,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["tokeninfo.email",{"_index":1207,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["tokenpayload",{"_index":355,"title":{"interfaces/TokenPayload.html":{}},"body":{"injectables/AuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"interfaces/TokenPayload.html":{},"coverage.html":{}}}],["tokenpayload.interface",{"_index":356,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["tokenverification.dto",{"_index":1154,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["tokenverificationdto",{"_index":1151,"title":{"classes/TokenVerificationDto.html":{}},"body":{"controllers/GoogleAuthenticationController.html":{},"classes/TokenVerificationDto.html":{},"coverage.html":{}}}],["tools",{"_index":2495,"title":{},"body":{"dependencies.html":{}}}],["total",{"_index":1498,"title":{},"body":{"interfaces/PostSearchResult.html":{}}}],["touch",{"_index":2588,"title":{},"body":{"index.html":{}}}],["trackby",{"_index":1268,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["trackby(context",{"_index":1269,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["transformer",{"_index":701,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/CreateProductDto.html":{},"classes/GetCommentsDto.html":{},"classes/PaginationParams.html":{},"classes/User.html":{},"dependencies.html":{}}}],["transport",{"_index":2078,"title":{},"body":{"modules/SubscribersModule.html":{}}}],["transport.grpc",{"_index":2081,"title":{},"body":{"modules/SubscribersModule.html":{}}}],["true",{"_index":152,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostInput.html":{},"modules/DatabaseModule.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/LogsService.html":{},"classes/Post.html":{},"classes/Post-1.html":{},"injectables/StripeService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"classes/UpdatePostDto.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["true})@exclude",{"_index":2245,"title":{},"body":{"classes/User.html":{}}}],["true})@isnotempty",{"_index":734,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["true})@isnotempty()@isoptional",{"_index":2226,"title":{},"body":{"classes/UpdatePostDto.html":{}}}],["true})@joincolumn",{"_index":2241,"title":{},"body":{"classes/User.html":{}}}],["try",{"_index":359,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/DatabaseLogger.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"injectables/EmailConfirmationService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/StripeService.html":{},"injectables/StripeWebhookService.html":{},"classes/Timestamp.html":{},"injectables/UsersService.html":{}}}],["ttl",{"_index":1580,"title":{},"body":{"modules/PostsModule.html":{}}}],["turnontwofactorauthentication",{"_index":2174,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{},"injectables/UsersService.html":{}}}],["turnontwofactorauthentication(request",{"_index":2180,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["turnontwofactorauthentication(userid",{"_index":2343,"title":{},"body":{"injectables/UsersService.html":{}}}],["twilio",{"_index":1903,"title":{},"body":{"injectables/SmsService.html":{},"dependencies.html":{}}}],["twilio(accountsid",{"_index":1909,"title":{},"body":{"injectables/SmsService.html":{}}}],["twilio_account_sid",{"_index":195,"title":{},"body":{"modules/AppModule.html":{}}}],["twilio_auth_token",{"_index":196,"title":{},"body":{"modules/AppModule.html":{}}}],["twilio_sender_phone_number",{"_index":198,"title":{},"body":{"modules/AppModule.html":{}}}],["twilio_verification_service_sid",{"_index":197,"title":{},"body":{"modules/AppModule.html":{}}}],["twilioclient",{"_index":1891,"title":{},"body":{"injectables/SmsService.html":{}}}],["twitter",{"_index":2593,"title":{},"body":{"index.html":{}}}],["two",{"_index":316,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["two_factor_authentication_app_name",{"_index":186,"title":{},"body":{"modules/AppModule.html":{}}}],["twofactor/twofactorauthentication.controller",{"_index":314,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["twofactor/twofactorauthentication.service",{"_index":315,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["twofactorauthentication.service",{"_index":2184,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["twofactorauthenticationcode",{"_index":2170,"title":{},"body":{"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{}}}],["twofactorauthenticationcodedto",{"_index":2168,"title":{"classes/TwoFactorAuthenticationCodeDto.html":{}},"body":{"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"coverage.html":{}}}],["twofactorauthenticationcontroller",{"_index":304,"title":{"controllers/TwoFactorAuthenticationController.html":{}},"body":{"modules/AuthenticationModule.html":{},"controllers/TwoFactorAuthenticationController.html":{},"coverage.html":{}}}],["twofactorauthenticationsecret",{"_index":2238,"title":{},"body":{"classes/User.html":{},"injectables/UsersService.html":{}}}],["twofactorauthenticationservice",{"_index":302,"title":{"injectables/TwoFactorAuthenticationService.html":{}},"body":{"modules/AuthenticationModule.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"coverage.html":{},"overview.html":{}}}],["type",{"_index":11,"title":{},"body":{"classes/AddCreditCardDto.html":{},"classes/Address.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"interfaces/BookProperties.html":{},"interfaces/CarProperties.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/Category.html":{},"classes/CategoryNotFoundException.html":{},"controllers/ChargeController.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"classes/CheckVerificationCodeDto.html":{},"classes/Comment.html":{},"controllers/CommentsController.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostInput.html":{},"classes/CreateProductCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateSubscriberDto.html":{},"classes/CreateUserDto.html":{},"controllers/CreditCardsController.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"modules/DatabaseModule.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailConfirmationService.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/FilesService.html":{},"classes/FindOneParams.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/GraphqlJwtAuthGuard.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Log.html":{},"classes/LogInDto.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"classes/Message.html":{},"classes/ObjectWithIdDto.html":{},"controllers/OptimizeController.html":{},"classes/PaginationParams.html":{},"classes/Post.html":{},"classes/Post-1.html":{},"interfaces/PostCountResult.html":{},"classes/PostNotFoundException.html":{},"interfaces/PostSearchBody.html":{},"interfaces/PostSearchResult.html":{},"controllers/PostsController.html":{},"injectables/PostsLoaders.html":{},"classes/PostsResolver.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"classes/Product.html":{},"controllers/ProductCategoriesController.html":{},"injectables/ProductCategoriesService.html":{},"classes/ProductCategory.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"classes/PublicFile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithRawBody.html":{},"interfaces/RequestWithUser.html":{},"classes/SetDefaultCreditCardDto.html":{},"controllers/SmsController.html":{},"injectables/SmsService.html":{},"classes/StripeEvent.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/StripeWebhookService.html":{},"interfaces/Subscriber.html":{},"controllers/SubscribersController.html":{},"interfaces/SubscribersService.html":{},"controllers/SubscriptionsController.html":{},"injectables/SubscriptionsService.html":{},"classes/Timestamp.html":{},"interfaces/TokenPayload.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"interfaces/VerificationTokenPayload.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["type(undefined)@isoptional",{"_index":1131,"title":{},"body":{"classes/GetCommentsDto.html":{}}}],["typeof",{"_index":988,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["typeorm",{"_index":47,"title":{},"body":{"classes/Address.html":{},"injectables/CategoriesService.html":{},"classes/Category.html":{},"injectables/ChatService.html":{},"classes/Comment.html":{},"classes/CreateCommentHandler.html":{},"classes/DatabaseLogger.html":{},"injectables/FilesService.html":{},"classes/GetCommentsHandler.html":{},"classes/Log.html":{},"injectables/LogsService.html":{},"classes/Message.html":{},"classes/Post.html":{},"injectables/PostsService.html":{},"classes/Product.html":{},"injectables/ProductCategoriesService.html":{},"classes/ProductCategory.html":{},"injectables/ProductsService.html":{},"classes/PublicFile.html":{},"classes/StripeEvent.html":{},"injectables/StripeWebhookService.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["typeormhealthindicator",{"_index":1231,"title":{},"body":{"controllers/HealthController.html":{}}}],["typeormlogger",{"_index":843,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["typeormmodule",{"_index":466,"title":{},"body":{"modules/CategoriesModule.html":{},"modules/ChatModule.html":{},"modules/CommentsModule.html":{},"modules/DatabaseModule.html":{},"modules/FilesModule.html":{},"modules/LoggerModule.html":{},"modules/PostsModule.html":{},"modules/ProductCategoriesModule.html":{},"modules/ProductsModule.html":{},"modules/StripeWebhookModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([category",{"_index":468,"title":{},"body":{"modules/CategoriesModule.html":{}}}],["typeormmodule.forfeature([comment",{"_index":679,"title":{},"body":{"modules/CommentsModule.html":{}}}],["typeormmodule.forfeature([log",{"_index":1343,"title":{},"body":{"modules/LoggerModule.html":{}}}],["typeormmodule.forfeature([message",{"_index":601,"title":{},"body":{"modules/ChatModule.html":{}}}],["typeormmodule.forfeature([post",{"_index":1582,"title":{},"body":{"modules/PostsModule.html":{}}}],["typeormmodule.forfeature([product",{"_index":1814,"title":{},"body":{"modules/ProductsModule.html":{}}}],["typeormmodule.forfeature([productcategory",{"_index":1777,"title":{},"body":{"modules/ProductCategoriesModule.html":{}}}],["typeormmodule.forfeature([publicfile",{"_index":1088,"title":{},"body":{"modules/FilesModule.html":{}}}],["typeormmodule.forfeature([stripeevent",{"_index":2029,"title":{},"body":{"modules/StripeWebhookModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":2300,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":880,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["types/adm",{"_index":2437,"title":{},"body":{"dependencies.html":{}}}],["types/aws",{"_index":2440,"title":{},"body":{"dependencies.html":{}}}],["types/bcrypt",{"_index":2442,"title":{},"body":{"dependencies.html":{}}}],["types/bookproperties.interface",{"_index":1755,"title":{},"body":{"classes/Product.html":{}}}],["types/bull",{"_index":2444,"title":{},"body":{"dependencies.html":{}}}],["types/cache",{"_index":2446,"title":{},"body":{"dependencies.html":{}}}],["types/carproperties.interface",{"_index":1754,"title":{},"body":{"classes/Product.html":{}}}],["types/cookie",{"_index":2448,"title":{},"body":{"dependencies.html":{}}}],["types/cron",{"_index":2452,"title":{},"body":{"dependencies.html":{}}}],["types/hapi__joi",{"_index":2454,"title":{},"body":{"dependencies.html":{}}}],["types/imagemin",{"_index":2456,"title":{},"body":{"dependencies.html":{}}}],["types/ioredis",{"_index":2458,"title":{},"body":{"dependencies.html":{}}}],["types/multer",{"_index":2460,"title":{},"body":{"dependencies.html":{}}}],["types/nodemailer",{"_index":2462,"title":{},"body":{"dependencies.html":{}}}],["types/passport",{"_index":2464,"title":{},"body":{"dependencies.html":{}}}],["types/postcountbody.interface",{"_index":1648,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["types/postsearchbody.interface",{"_index":1647,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["types/postsearchresponse.interface",{"_index":1646,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["types/qrcode",{"_index":2469,"title":{},"body":{"dependencies.html":{}}}],["types/socket.io",{"_index":2471,"title":{},"body":{"dependencies.html":{}}}],["types/uuid",{"_index":2473,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":2556,"title":{},"body":{"index.html":{}}}],["unauthorizedexception",{"_index":939,"title":{},"body":{"guards/EmailConfirmationGuard.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["unauthorizedexception('confirm",{"_index":942,"title":{},"body":{"guards/EmailConfirmationGuard.html":{}}}],["unauthorizedexception('wrong",{"_index":2194,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["undefined",{"_index":43,"title":{},"body":{"classes/Address.html":{},"injectables/AuthenticationService.html":{},"classes/Category.html":{},"classes/Comment.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"classes/Product.html":{},"classes/ProductCategory.html":{},"controllers/TwoFactorAuthenticationController.html":{},"classes/User.html":{}}}],["undefined)@jointable",{"_index":1448,"title":{},"body":{"classes/Post.html":{}}}],["unique",{"_index":2266,"title":{},"body":{"classes/User.html":{}}}],["uniqueviolation",{"_index":2525,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["unit",{"_index":2568,"title":{},"body":{"index.html":{}}}],["unix",{"_index":2143,"title":{},"body":{"classes/Timestamp.html":{}}}],["unknown",{"_index":223,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/ChargeController.html":{},"injectables/ChatService.html":{},"controllers/CommentsController.html":{},"classes/CreateCommentHandler.html":{},"controllers/CreditCardsController.html":{},"classes/DatabaseLogger.html":{},"injectables/EmailConfirmationService.html":{},"injectables/FilesService.html":{},"classes/GetCommentsHandler.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LogsService.html":{},"controllers/OptimizeController.html":{},"controllers/PostsController.html":{},"classes/PostsResolver.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"controllers/ProductCategoriesController.html":{},"injectables/ProductCategoriesService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"injectables/SmsService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"controllers/SubscribersController.html":{},"controllers/SubscriptionsController.html":{},"injectables/SubscriptionsService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["up",{"_index":1997,"title":{},"body":{"injectables/StripeService.html":{}}}],["update",{"_index":1632,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["update(post",{"_index":1644,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["updatecategory",{"_index":424,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{}}}],["updatecategory(@param",{"_index":457,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["updatecategory(id",{"_index":492,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["updatecategory(undefined",{"_index":438,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["updatecategorydto",{"_index":439,"title":{"classes/UpdateCategoryDto.html":{}},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["updatedcategory",{"_index":514,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["updatedpost",{"_index":1733,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatemonthlysubscriptionstatus",{"_index":2312,"title":{},"body":{"injectables/UsersService.html":{}}}],["updatemonthlysubscriptionstatus(stripecustomerid",{"_index":2345,"title":{},"body":{"injectables/UsersService.html":{}}}],["updatepost",{"_index":1505,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["updatepost(@param",{"_index":1542,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(id",{"_index":1702,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatepost(undefined",{"_index":1517,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepostdto",{"_index":1518,"title":{"classes/UpdatePostDto.html":{}},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["uploadedfile",{"_index":2281,"title":{},"body":{"controllers/UsersController.html":{}}}],["uploadedfiles",{"_index":1393,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["uploadpublicfile",{"_index":1092,"title":{},"body":{"injectables/FilesService.html":{}}}],["uploadpublicfile(databuffer",{"_index":1101,"title":{},"body":{"injectables/FilesService.html":{}}}],["uploadresult",{"_index":1112,"title":{},"body":{"injectables/FilesService.html":{}}}],["uploadresult.key",{"_index":1118,"title":{},"body":{"injectables/FilesService.html":{}}}],["uploadresult.location",{"_index":1119,"title":{},"body":{"injectables/FilesService.html":{}}}],["url",{"_index":973,"title":{},"body":{"injectables/EmailConfirmationService.html":{},"injectables/FilesService.html":{},"classes/PublicFile.html":{},"modules/SubscribersModule.html":{}}}],["use",{"_index":480,"title":{},"body":{"injectables/CategoriesService.html":{},"controllers/HealthController.html":{},"injectables/LogsMiddleware.html":{}}}],["use(request",{"_index":1345,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["used",{"_index":1248,"title":{},"body":{"controllers/HealthController.html":{}}}],["usefactory",{"_index":137,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/PostsModule.html":{},"modules/PubSubModule.html":{},"modules/SearchModule.html":{},"modules/SubscribersModule.html":{}}}],["useguards",{"_index":240,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/CategoriesController.html":{},"controllers/ChargeController.html":{},"controllers/CommentsController.html":{},"controllers/CreditCardsController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/EmailSchedulingController.html":{},"controllers/PostsController.html":{},"classes/PostsResolver.html":{},"controllers/ProductCategoriesController.html":{},"controllers/ProductsController.html":{},"controllers/SmsController.html":{},"controllers/SubscribersController.html":{},"controllers/SubscriptionsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{}}}],["useguards(emailconfirmationguard",{"_index":793,"title":{},"body":{"controllers/CreditCardsController.html":{}}}],["useguards(graphqljwtauthguard",{"_index":1624,"title":{},"body":{"classes/PostsResolver.html":{}}}],["useguards(jwtauthenticationguard",{"_index":284,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/CategoriesController.html":{},"controllers/ChargeController.html":{},"controllers/CommentsController.html":{},"controllers/CreditCardsController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/EmailSchedulingController.html":{},"controllers/ProductCategoriesController.html":{},"controllers/ProductsController.html":{},"controllers/SmsController.html":{},"controllers/SubscribersController.html":{},"controllers/SubscriptionsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{}}}],["useguards(jwtauthenticationguard)@get",{"_index":217,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["useguards(jwtauthenticationguard)@post('log",{"_index":225,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["useguards(jwtrefreshguard",{"_index":290,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["useguards(jwtrefreshguard)@get('refresh",{"_index":229,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["useguards(jwttwofactorguard",{"_index":1539,"title":{},"body":{"controllers/PostsController.html":{}}}],["useguards(localauthenticationguard",{"_index":270,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["useinterceptors",{"_index":242,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/CategoriesController.html":{},"controllers/CommentsController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/OptimizeController.html":{},"controllers/PostsController.html":{},"controllers/ProductCategoriesController.html":{},"controllers/ProductsController.html":{},"controllers/SmsController.html":{},"controllers/SubscribersController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{}}}],["useinterceptors(anyfilesinterceptor",{"_index":1405,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["useinterceptors(classserializerinterceptor",{"_index":259,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/CategoriesController.html":{},"controllers/CommentsController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/PostsController.html":{},"controllers/ProductCategoriesController.html":{},"controllers/ProductsController.html":{},"controllers/SmsController.html":{},"controllers/SubscribersController.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["useinterceptors(fileinterceptor('file",{"_index":2285,"title":{},"body":{"controllers/UsersController.html":{}}}],["useinterceptors(httpcacheinterceptor",{"_index":1531,"title":{},"body":{"controllers/PostsController.html":{}}}],["useinterceptors(httpcacheinterceptor)@cachekey(get_posts_cache_key)@cachettl(120)@get",{"_index":1514,"title":{},"body":{"controllers/PostsController.html":{}}}],["user",{"_index":34,"title":{"classes/User.html":{},"classes/User-1.html":{}},"body":{"classes/Address.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/ChatService.html":{},"classes/Comment.html":{},"controllers/CommentsController.html":{},"classes/CreateCommentCommand.html":{},"injectables/EmailConfirmationService.html":{},"injectables/EmailService.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Message.html":{},"classes/Post.html":{},"classes/Post-1.html":{},"injectables/PostsLoaders.html":{},"injectables/PostsService.html":{},"interfaces/RequestWithUser.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/User.html":{},"classes/User-1.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.address",{"_index":49,"title":{},"body":{"classes/Address.html":{}}}],["user.avatar",{"_index":2363,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.avatar?.id",{"_index":2368,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.currenthashedrefreshtoken",{"_index":2379,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.entity",{"_index":48,"title":{},"body":{"classes/Address.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["user.id",{"_index":281,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PostsLoaders.html":{},"injectables/TwoFactorAuthenticationService.html":{}}}],["user.isemailconfirmed",{"_index":983,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["user.isregisteredwithgoogle",{"_index":1198,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["user.istwofactorauthenticationenabled",{"_index":283,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["user.password",{"_index":395,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["user.twofactorauthenticationsecret",{"_index":2217,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["user@email.com",{"_index":2618,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userdata",{"_index":1200,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"injectables/UsersService.html":{}}}],["userdata.email",{"_index":2356,"title":{},"body":{"injectables/UsersService.html":{}}}],["userdata.name",{"_index":1202,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["userid",{"_index":340,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/EmailConfirmationService.html":{},"injectables/SmsService.html":{},"interfaces/TokenPayload.html":{},"injectables/UsersService.html":{}}}],["userinfoclient",{"_index":1191,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["userinfoclient.get",{"_index":1196,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["userinforesponse",{"_index":1195,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["userinforesponse.data",{"_index":1197,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["username",{"_index":884,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/SearchModule.html":{}}}],["usernamefield",{"_index":1321,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["users",{"_index":1552,"title":{},"body":{"injectables/PostsLoaders.html":{},"controllers/UsersController.html":{}}}],["users.controller",{"_index":2299,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":2280,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/models/user.model",{"_index":1484,"title":{},"body":{"classes/Post-1.html":{}}}],["users/user.entity",{"_index":617,"title":{},"body":{"injectables/ChatService.html":{},"classes/Comment.html":{},"classes/CreateCommentCommand.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/LocalStrategy.html":{},"classes/Message.html":{},"classes/Post.html":{},"injectables/PostsService.html":{},"interfaces/RequestWithUser.html":{},"injectables/TwoFactorAuthenticationService.html":{}}}],["users/users.module",{"_index":103,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/GoogleAuthenticationModule.html":{},"modules/PostsModule.html":{},"modules/SmsModule.html":{},"modules/StripeWebhookModule.html":{}}}],["users/users.service",{"_index":253,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/EmailConfirmationService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/PostsLoaders.html":{},"injectables/SmsService.html":{},"controllers/StripeWebhookController.html":{},"injectables/StripeWebhookService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{}}}],["userscontroller",{"_index":2270,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userservice",{"_index":1282,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["usersmap",{"_index":1554,"title":{},"body":{"injectables/PostsLoaders.html":{}}}],["usersmap.get(authorid",{"_index":1557,"title":{},"body":{"injectables/PostsLoaders.html":{}}}],["usersmodule",{"_index":78,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/GoogleAuthenticationModule.html":{},"modules/PostsModule.html":{},"modules/SmsModule.html":{},"modules/StripeWebhookModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersrepository",{"_index":2315,"title":{},"body":{"injectables/UsersService.html":{}}}],["usersservice",{"_index":252,"title":{"injectables/UsersService.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/EmailConfirmationService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/PostsLoaders.html":{},"injectables/SmsService.html":{},"controllers/StripeWebhookController.html":{},"injectables/StripeWebhookService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["utils/findoneparams",{"_index":450,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/PostsController.html":{}}}],["utils/getloglevels",{"_index":827,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["utils/logs.middleware",{"_index":133,"title":{},"body":{"modules/AppModule.html":{}}}],["utils/scalars/timestamp.scalar",{"_index":120,"title":{},"body":{"modules/AppModule.html":{}}}],["utils/stripeerror.enum",{"_index":1966,"title":{},"body":{"injectables/StripeService.html":{}}}],["utils/types/objectwithid.dto",{"_index":757,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["utils/types/paginationparams",{"_index":1525,"title":{},"body":{"controllers/PostsController.html":{}}}],["uuid",{"_index":1110,"title":{},"body":{"injectables/FilesService.html":{},"dependencies.html":{}}}],["v4",{"_index":1109,"title":{},"body":{"injectables/FilesService.html":{}}}],["validate",{"_index":1281,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["validate(email",{"_index":1317,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validate(payload",{"_index":1300,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["validate(request",{"_index":1284,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["validatenested",{"_index":700,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/CreateProductDto.html":{}}}],["validatenested()@type(undefined",{"_index":698,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/CreateProductDto.html":{}}}],["validationschema",{"_index":155,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":21,"title":{},"body":{"classes/AddCreditCardDto.html":{},"classes/CheckVerificationCodeDto.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateProductCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/EmailScheduleDto.html":{},"classes/FindOneParams.html":{},"classes/GetCommentsDto.html":{},"classes/LogInDto.html":{},"classes/ObjectWithIdDto.html":{},"classes/PaginationParams.html":{},"classes/RegisterDto.html":{},"classes/SetDefaultCreditCardDto.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"dependencies.html":{}}}],["value",{"_index":339,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/DatabaseLogger.html":{},"injectables/LogsMiddleware.html":{},"interfaces/PostSearchResult.html":{},"injectables/PostsLoaders.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"classes/Timestamp.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["value.gettime",{"_index":2158,"title":{},"body":{"classes/Timestamp.html":{}}}],["valuenode",{"_index":2147,"title":{},"body":{"classes/Timestamp.html":{}}}],["valuenode.kind",{"_index":2161,"title":{},"body":{"classes/Timestamp.html":{}}}],["variable",{"_index":2392,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":2605,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verbose",{"_index":806,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["verbose(message",{"_index":820,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["verification",{"_index":1865,"title":{},"body":{"controllers/SmsController.html":{}}}],["verification')@useguards(jwtauthenticationguard",{"_index":1870,"title":{},"body":{"controllers/SmsController.html":{}}}],["verificationchecks",{"_index":1916,"title":{},"body":{"injectables/SmsService.html":{}}}],["verificationcode",{"_index":1896,"title":{},"body":{"injectables/SmsService.html":{}}}],["verificationdata",{"_index":1863,"title":{},"body":{"controllers/SmsController.html":{}}}],["verificationdata.code",{"_index":1883,"title":{},"body":{"controllers/SmsController.html":{}}}],["verifications",{"_index":1913,"title":{},"body":{"injectables/SmsService.html":{}}}],["verificationtokenpayload",{"_index":968,"title":{"interfaces/VerificationTokenPayload.html":{}},"body":{"injectables/EmailConfirmationService.html":{},"interfaces/VerificationTokenPayload.html":{},"coverage.html":{}}}],["verificationtokenpayload.interface",{"_index":969,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["verifypassword",{"_index":327,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["verifypassword(plaintextpassword",{"_index":347,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["void",{"_index":93,"title":{},"body":{"modules/AppModule.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"injectables/EmailSchedulingService.html":{},"injectables/LogsMiddleware.html":{},"controllers/SubscribersController.html":{}}}],["warn",{"_index":807,"title":{},"body":{"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{}}}],["warn(message",{"_index":822,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["watch",{"_index":2564,"title":{},"body":{"index.html":{}}}],["webhook",{"_index":2004,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["webhooksecret",{"_index":1973,"title":{},"body":{"injectables/StripeService.html":{}}}],["website",{"_index":2591,"title":{},"body":{"index.html":{}}}],["websocketgateway",{"_index":583,"title":{},"body":{"classes/ChatGateway.html":{}}}],["websocketserver",{"_index":569,"title":{},"body":{"classes/ChatGateway.html":{}}}],["welcome",{"_index":976,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["went",{"_index":375,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["where.id",{"_index":1716,"title":{},"body":{"injectables/PostsService.html":{}}}],["wrong",{"_index":376,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["wsexception",{"_index":616,"title":{},"body":{"injectables/ChatService.html":{}}}],["wsexception('invalid",{"_index":627,"title":{},"body":{"injectables/ChatService.html":{}}}],["yes",{"_index":814,"title":{},"body":{"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"classes/GetCommentsQuery.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{}}}],["you'd",{"_index":2584,"title":{},"body":{"index.html":{}}}],["zip",{"_index":2438,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":79,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/CategoriesModule.html":{},"modules/ChargeModule.html":{},"modules/ChatModule.html":{},"modules/CreditCardsModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"modules/FilesModule.html":{},"modules/GoogleAuthenticationModule.html":{},"modules/HealthModule.html":{},"modules/LoggerModule.html":{},"modules/PostsModule.html":{},"modules/ProductCategoriesModule.html":{},"modules/ProductsModule.html":{},"modules/SmsModule.html":{},"modules/StripeModule.html":{},"modules/StripeWebhookModule.html":{},"modules/SubscriptionsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AddCreditCardDto.html":{"url":"classes/AddCreditCardDto.html","title":"class - AddCreditCardDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddCreditCardDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/credit-cards/dto/addCreditCardDto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                paymentMethodId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        paymentMethodId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/credit-cards/dto/addCreditCardDto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty } from 'class-validator';\n\nexport class AddCreditCardDto {\n  @IsString()\n  @IsNotEmpty()\n  paymentMethodId: string;\n}\n\nexport default AddCreditCardDto;\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Address.html":{"url":"classes/Address.html","title":"class - Address","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Address\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/address.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                city\n                            \n                            \n                                    Public\n                                country\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                street\n                            \n                            \n                                    Public\n                                    Optional\n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        city\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/address.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        country\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/address.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/address.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        street\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/address.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/address.entity.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Column, Entity, OneToOne, PrimaryGeneratedColumn } from 'typeorm';\nimport User from './user.entity';\n\n@Entity()\nclass Address {\n  @PrimaryGeneratedColumn()\n  public id: number;\n\n  @Column()\n  public street: string;\n\n  @Column()\n  public city: string;\n\n  @Column()\n  public country: string;\n\n  @OneToOne(() => User, (user: User) => user.address)\n  public user?: User;\n}\n\nexport default Address;\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthenticationModule\n\nAuthenticationModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthenticationModule->AppModule\n\n\n\n\n\nCategoriesModule\n\nCategoriesModule\n\nAppModule -->\n\nCategoriesModule->AppModule\n\n\n\n\n\nChargeModule\n\nChargeModule\n\nAppModule -->\n\nChargeModule->AppModule\n\n\n\n\n\nChatModule\n\nChatModule\n\nAppModule -->\n\nChatModule->AppModule\n\n\n\n\n\nCommentsModule\n\nCommentsModule\n\nAppModule -->\n\nCommentsModule->AppModule\n\n\n\n\n\nCreditCardsModule\n\nCreditCardsModule\n\nAppModule -->\n\nCreditCardsModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nEmailConfirmationModule\n\nEmailConfirmationModule\n\nAppModule -->\n\nEmailConfirmationModule->AppModule\n\n\n\n\n\nEmailSchedulingModule\n\nEmailSchedulingModule\n\nAppModule -->\n\nEmailSchedulingModule->AppModule\n\n\n\n\n\nGoogleAuthenticationModule\n\nGoogleAuthenticationModule\n\nAppModule -->\n\nGoogleAuthenticationModule->AppModule\n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\n\n\nLoggerModule\n\nLoggerModule\n\nAppModule -->\n\nLoggerModule->AppModule\n\n\n\n\n\nOptimizeModule\n\nOptimizeModule\n\nAppModule -->\n\nOptimizeModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nProductCategoriesModule\n\nProductCategoriesModule\n\nAppModule -->\n\nProductCategoriesModule->AppModule\n\n\n\n\n\nProductsModule\n\nProductsModule\n\nAppModule -->\n\nProductsModule->AppModule\n\n\n\n\n\nPubSubModule\n\nPubSubModule\n\nAppModule -->\n\nPubSubModule->AppModule\n\n\n\n\n\nSearchModule\n\nSearchModule\n\nAppModule -->\n\nSearchModule->AppModule\n\n\n\n\n\nSmsModule\n\nSmsModule\n\nAppModule -->\n\nSmsModule->AppModule\n\n\n\n\n\nStripeWebhookModule\n\nStripeWebhookModule\n\nAppModule -->\n\nStripeWebhookModule->AppModule\n\n\n\n\n\nSubscribersModule\n\nSubscribersModule\n\nAppModule -->\n\nSubscribersModule->AppModule\n\n\n\n\n\nSubscriptionsModule\n\nSubscriptionsModule\n\nAppModule -->\n\nSubscriptionsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthenticationModule\n                        \n                        \n                            CategoriesModule\n                        \n                        \n                            ChargeModule\n                        \n                        \n                            ChatModule\n                        \n                        \n                            CommentsModule\n                        \n                        \n                            CreditCardsModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            EmailConfirmationModule\n                        \n                        \n                            EmailSchedulingModule\n                        \n                        \n                            GoogleAuthenticationModule\n                        \n                        \n                            HealthModule\n                        \n                        \n                            LoggerModule\n                        \n                        \n                            OptimizeModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            ProductCategoriesModule\n                        \n                        \n                            ProductsModule\n                        \n                        \n                            PubSubModule\n                        \n                        \n                            SearchModule\n                        \n                        \n                            SmsModule\n                        \n                        \n                            StripeWebhookModule\n                        \n                        \n                            SubscribersModule\n                        \n                        \n                            SubscriptionsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: MiddlewareConsumer)\n                \n            \n\n\n            \n                \n                    Defined in src/app.module.ts:131\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                            MiddlewareConsumer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { MiddlewareConsumer, Module } from '@nestjs/common';\nimport { PostsModule } from './posts/posts.module';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport * as Joi from '@hapi/joi';\nimport { DatabaseModule } from './database/database.module';\nimport { AuthenticationModule } from './authentication/authentication.module';\nimport { UsersModule } from './users/users.module';\nimport { CategoriesModule } from './categories/categories.module';\nimport { SearchModule } from './search/search.module';\nimport { SubscribersModule } from './subscribers/subscribers.module';\nimport { CommentsModule } from './comments/comments.module';\nimport { ProductCategoriesModule } from './productCategories/productCategories.module';\nimport { ProductsModule } from './products/products.module';\nimport { ScheduleModule } from '@nestjs/schedule';\nimport { EmailSchedulingModule } from './emailScheduling/emailScheduling.module';\nimport { ChatModule } from './chat/chat.module';\nimport { GraphQLModule } from '@nestjs/graphql';\nimport { join } from 'path';\nimport { PubSubModule } from './pubSub/pubSub.module';\nimport { Timestamp } from './utils/scalars/timestamp.scalar';\nimport { OptimizeModule } from './optimize/optimize.module';\nimport { BullModule } from '@nestjs/bull';\nimport { ChargeModule } from './charge/charge.module';\nimport { CreditCardsModule } from './credit-cards/creditCards.module';\nimport { SubscriptionsModule } from './subscriptions/subscriptions.module';\nimport { StripeWebhookModule } from './stripeWebhook/stripeWebhook.module';\nimport { EmailConfirmationModule } from './emailConfirmation/emailConfirmation.module';\nimport { SmsModule } from './sms/sms.module';\nimport { GoogleAuthenticationModule } from './googleAuthentication/googleAuthentication.module';\nimport LogsMiddleware from './utils/logs.middleware';\nimport { LoggerModule } from './logger/logger.module';\nimport HealthModule from './health/health.module';\n\n@Module({\n  imports: [\n    BullModule.forRootAsync({\n      imports: [ConfigModule],\n      useFactory: async (configService: ConfigService) => ({\n        redis: {\n          host: configService.get('REDIS_HOST'),\n          port: Number(configService.get('REDIS_PORT')),\n        },\n      }),\n      inject: [ConfigService],\n    }),\n    GraphQLModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (\n        configService: ConfigService,\n      ) => ({\n        playground: Boolean(configService.get('GRAPHQL_PLAYGROUND')),\n        autoSchemaFile: join(process.cwd(), 'src/schema.gql'),\n        installSubscriptionHandlers: true\n      })\n    }),\n    ScheduleModule.forRoot(),\n    PostsModule,\n    ConfigModule.forRoot({\n      validationSchema: Joi.object({\n        POSTGRES_HOST: Joi.string().required(),\n        POSTGRES_PORT: Joi.number().required(),\n        POSTGRES_USER: Joi.string().required(),\n        POSTGRES_PASSWORD: Joi.string().required(),\n        POSTGRES_DB: Joi.string().required(),\n        JWT_ACCESS_TOKEN_SECRET: Joi.string().required(),\n        JWT_ACCESS_TOKEN_EXPIRATION_TIME: Joi.string().required(),\n        JWT_REFRESH_TOKEN_SECRET: Joi.string().required(),\n        JWT_REFRESH_TOKEN_EXPIRATION_TIME: Joi.string().required(),\n        AWS_REGION: Joi.string().required(),\n        AWS_ACCESS_KEY_ID: Joi.string().required(),\n        AWS_SECRET_ACCESS_KEY: Joi.string().required(),\n        AWS_PUBLIC_BUCKET_NAME: Joi.string().required(),\n        PORT: Joi.number(),\n        ELASTICSEARCH_NODE: Joi.string(),\n        ELASTICSEARCH_USERNAME: Joi.string(),\n        ELASTICSEARCH_PASSWORD: Joi.string(),\n        SUBSCRIBERS_SERVICE_HOST: Joi.string(),\n        SUBSCRIBERS_SERVICE_PORT: Joi.string(),\n        GRPC_CONNECTION_URL: Joi.string(),\n        REDIS_HOST: Joi.string().required(),\n        REDIS_PORT: Joi.number().required(),\n        EMAIL_SERVICE: Joi.string().required(),\n        EMAIL_USER: Joi.string().required(),\n        EMAIL_PASSWORD: Joi.string().required(),\n        GRAPHQL_PLAYGROUND: Joi.number(),\n        TWO_FACTOR_AUTHENTICATION_APP_NAME: Joi.string(),\n        STRIPE_SECRET_KEY: Joi.string(),\n        STRIPE_CURRENCY: Joi.string(),\n        FRONTEND_URL: Joi.string(),\n        MONTHLY_SUBSCRIPTION_PRICE_ID: Joi.string(),\n        STRIPE_WEBHOOK_SECRET: Joi.string(),\n        JWT_VERIFICATION_TOKEN_SECRET: Joi.string().required(),\n        JWT_VERIFICATION_TOKEN_EXPIRATION_TIME: Joi.string().required(),\n        EMAIL_CONFIRMATION_URL: Joi.string().required(),\n        TWILIO_ACCOUNT_SID: Joi.string().required(),\n        TWILIO_AUTH_TOKEN: Joi.string().required(),\n        TWILIO_VERIFICATION_SERVICE_SID: Joi.string().required(),\n        TWILIO_SENDER_PHONE_NUMBER: Joi.string().required(),\n        GOOGLE_AUTH_CLIENT_ID: Joi.string().required(),\n        GOOGLE_AUTH_CLIENT_SECRET: Joi.string().required(),\n      })\n    }),\n    DatabaseModule,\n    AuthenticationModule,\n    UsersModule,\n    CategoriesModule,\n    SearchModule,\n    SubscribersModule,\n    CommentsModule,\n    ProductCategoriesModule,\n    ProductsModule,\n    EmailSchedulingModule,\n    ChatModule,\n    PubSubModule,\n    OptimizeModule,\n    ChargeModule,\n    CreditCardsModule,\n    SubscriptionsModule,\n    StripeWebhookModule,\n    EmailConfirmationModule,\n    SmsModule,\n    GoogleAuthenticationModule,\n    LoggerModule,\n    HealthModule\n  ],\n  controllers: [],\n  providers: [Timestamp],\n})\nexport class AppModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer\n      .apply(LogsMiddleware)\n      .forRoutes('*');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthenticationController.html":{"url":"controllers/AuthenticationController.html","title":"controller - AuthenticationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthenticationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/authentication.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                authentication\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                authenticate\n                            \n                            \n                                    Async\n                                logIn\n                            \n                            \n                                    Async\n                                logOut\n                            \n                            \n                                refresh\n                            \n                            \n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        authenticate\n                        \n                    \n                \n            \n            \n                \nauthenticate(request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthenticationGuard)@Get()\n                \n            \n\n            \n                \n                    Defined in src/authentication/authentication.controller.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logIn\n                        \n                    \n                \n            \n            \n                \n                    \n                    logIn(request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(200)@UseGuards(LocalAuthenticationGuard)@Post('log-in')\n                \n            \n\n            \n                \n                    Defined in src/authentication/authentication.controller.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logOut\n                        \n                    \n                \n            \n            \n                \n                    \n                    logOut(request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthenticationGuard)@Post('log-out')@HttpCode(200)\n                \n            \n\n            \n                \n                    Defined in src/authentication/authentication.controller.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refresh\n                        \n                    \n                \n            \n            \n                \nrefresh(request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtRefreshGuard)@Get('refresh')\n                \n            \n\n            \n                \n                    Defined in src/authentication/authentication.controller.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(registrationData: RegisterDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('register')\n                \n            \n\n            \n                \n                    Defined in src/authentication/authentication.controller.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    registrationData\n                                    \n                                                RegisterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Req,\n  Controller,\n  HttpCode,\n  Post,\n  UseGuards,\n  Get, ClassSerializerInterceptor, UseInterceptors,\n} from '@nestjs/common';\nimport { AuthenticationService } from './authentication.service';\nimport RegisterDto from './dto/register.dto';\nimport RequestWithUser from './requestWithUser.interface';\nimport { LocalAuthenticationGuard } from './localAuthentication.guard';\nimport JwtAuthenticationGuard from './jwt-authentication.guard';\nimport { UsersService } from '../users/users.service';\nimport JwtRefreshGuard from './jwt-refresh.guard';\nimport { EmailConfirmationService } from '../emailConfirmation/emailConfirmation.service';\n\n@Controller('authentication')\n@UseInterceptors(ClassSerializerInterceptor)\nexport class AuthenticationController {\n  constructor(\n    private readonly authenticationService: AuthenticationService,\n    private readonly usersService: UsersService,\n    private readonly emailConfirmationService: EmailConfirmationService\n  ) {}\n\n  @Post('register')\n  async register(@Body() registrationData: RegisterDto) {\n    const user = await this.authenticationService.register(registrationData);\n    await this.emailConfirmationService.sendVerificationLink(registrationData.email);\n    return user;\n  }\n\n  @HttpCode(200)\n  @UseGuards(LocalAuthenticationGuard)\n  @Post('log-in')\n  async logIn(@Req() request: RequestWithUser) {\n    const { user } = request;\n    const accessTokenCookie = this.authenticationService.getCookieWithJwtAccessToken(user.id);\n    const {\n      cookie: refreshTokenCookie,\n      token: refreshToken\n    } = this.authenticationService.getCookieWithJwtRefreshToken(user.id);\n\n    await this.usersService.setCurrentRefreshToken(refreshToken, user.id);\n\n    request.res.setHeader('Set-Cookie', [accessTokenCookie, refreshTokenCookie]);\n\n    if (user.isTwoFactorAuthenticationEnabled) {\n      return;\n    }\n\n    return user;\n  }\n\n  @UseGuards(JwtAuthenticationGuard)\n  @Post('log-out')\n  @HttpCode(200)\n  async logOut(@Req() request: RequestWithUser) {\n    await this.usersService.removeRefreshToken(request.user.id);\n    request.res.setHeader('Set-Cookie', this.authenticationService.getCookiesForLogOut());\n  }\n\n  @UseGuards(JwtAuthenticationGuard)\n  @Get()\n  authenticate(@Req() request: RequestWithUser) {\n    return request.user;\n  }\n\n  @UseGuards(JwtRefreshGuard)\n  @Get('refresh')\n  refresh(@Req() request: RequestWithUser) {\n    const accessTokenCookie = this.authenticationService.getCookieWithJwtAccessToken(request.user.id);\n\n    request.res.setHeader('Set-Cookie', accessTokenCookie);\n    return request.user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthenticationModule.html":{"url":"modules/AuthenticationModule.html","title":"module - AuthenticationModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthenticationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthenticationModule\n\n\n\ncluster_AuthenticationModule_exports\n\n\n\ncluster_AuthenticationModule_imports\n\n\n\ncluster_AuthenticationModule_providers\n\n\n\n\nEmailConfirmationModule\n\nEmailConfirmationModule\n\n\n\nAuthenticationModule\n\nAuthenticationModule\n\nAuthenticationModule -->\n\nEmailConfirmationModule->AuthenticationModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthenticationModule -->\n\nUsersModule->AuthenticationModule\n\n\n\n\n\nAuthenticationService \n\nAuthenticationService \n\nAuthenticationService  -->\n\nAuthenticationModule->AuthenticationService \n\n\n\n\n\nAuthenticationService\n\nAuthenticationService\n\nAuthenticationModule -->\n\nAuthenticationService->AuthenticationModule\n\n\n\n\n\nJwtRefreshTokenStrategy\n\nJwtRefreshTokenStrategy\n\nAuthenticationModule -->\n\nJwtRefreshTokenStrategy->AuthenticationModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthenticationModule -->\n\nJwtStrategy->AuthenticationModule\n\n\n\n\n\nJwtTwoFactorStrategy\n\nJwtTwoFactorStrategy\n\nAuthenticationModule -->\n\nJwtTwoFactorStrategy->AuthenticationModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthenticationModule -->\n\nLocalStrategy->AuthenticationModule\n\n\n\n\n\nTwoFactorAuthenticationService\n\nTwoFactorAuthenticationService\n\nAuthenticationModule -->\n\nTwoFactorAuthenticationService->AuthenticationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/authentication/authentication.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthenticationService\n                        \n                        \n                            JwtRefreshTokenStrategy\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            JwtTwoFactorStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                        \n                            TwoFactorAuthenticationService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthenticationController\n                        \n                        \n                            TwoFactorAuthenticationController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            EmailConfirmationModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthenticationService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthenticationService } from './authentication.service';\nimport { UsersModule } from '../users/users.module';\nimport { AuthenticationController } from './authentication.controller';\nimport { PassportModule } from '@nestjs/passport';\nimport { LocalStrategy } from './local.strategy';\nimport { JwtModule } from '@nestjs/jwt';\nimport { ConfigModule } from '@nestjs/config';\nimport { JwtStrategy } from './jwt.strategy';\nimport { JwtRefreshTokenStrategy } from './jwt-refresh-token.strategy';\nimport { TwoFactorAuthenticationController } from './twoFactor/twoFactorAuthentication.controller';\nimport { TwoFactorAuthenticationService } from './twoFactor/twoFactorAuthentication.service';\nimport { JwtTwoFactorStrategy } from './jwt-two-factor.strategy';\nimport { EmailConfirmationModule } from '../emailConfirmation/emailConfirmation.module';\n\n@Module({\n  imports: [\n    UsersModule,\n    PassportModule,\n    ConfigModule,\n    JwtModule.register({}),\n    EmailConfirmationModule\n  ],\n  providers: [AuthenticationService, LocalStrategy, JwtStrategy, JwtRefreshTokenStrategy, TwoFactorAuthenticationService, JwtTwoFactorStrategy],\n  controllers: [AuthenticationController, TwoFactorAuthenticationController],\n  exports: [AuthenticationService]\n})\nexport class AuthenticationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthenticationService.html":{"url":"injectables/AuthenticationService.html","title":"injectable - AuthenticationService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthenticationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/authentication.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                getAuthenticatedUser\n                            \n                            \n                                    Public\n                                getCookiesForLogOut\n                            \n                            \n                                    Public\n                                getCookieWithJwtAccessToken\n                            \n                            \n                                    Public\n                                getCookieWithJwtRefreshToken\n                            \n                            \n                                    Public\n                                    Async\n                                getUserFromAuthenticationToken\n                            \n                            \n                                    Public\n                                    Async\n                                register\n                            \n                            \n                                    Private\n                                    Async\n                                verifyPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, jwtService: JwtService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/authentication/authentication.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getAuthenticatedUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAuthenticatedUser(email: string, plainTextPassword: string)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    plainTextPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getCookiesForLogOut\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCookiesForLogOut()\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getCookieWithJwtAccessToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCookieWithJwtAccessToken(userId: number, isSecondFactorAuthenticated)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    isSecondFactorAuthenticated\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getCookieWithJwtRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCookieWithJwtRefreshToken(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { cookie: string; token: any; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getUserFromAuthenticationToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserFromAuthenticationToken(token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:84\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(registrationData: RegisterDto)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    registrationData\n                                    \n                                                RegisterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        verifyPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    verifyPassword(plainTextPassword: string, hashedPassword: string)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    plainTextPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    hashedPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { UsersService } from '../users/users.service';\nimport RegisterDto from './dto/register.dto';\nimport * as bcrypt from 'bcrypt';\nimport PostgresErrorCode from '../database/postgresErrorCode.enum';\nimport { JwtService } from '@nestjs/jwt';\nimport { ConfigService } from '@nestjs/config';\nimport TokenPayload from './tokenPayload.interface';\n\n@Injectable()\nexport class AuthenticationService {\n  constructor(\n    private readonly usersService: UsersService,\n    private readonly jwtService: JwtService,\n    private readonly configService: ConfigService\n  ) {}\n\n  public async register(registrationData: RegisterDto) {\n    const hashedPassword = await bcrypt.hash(registrationData.password, 10);\n    try {\n      const createdUser = await this.usersService.create({\n        ...registrationData,\n        password: hashedPassword\n      });\n      createdUser.password = undefined;\n      return createdUser;\n    } catch (error) {\n      if (error?.code === PostgresErrorCode.UniqueViolation) {\n        throw new HttpException('User with that email already exists', HttpStatus.BAD_REQUEST);\n      }\n      throw new HttpException('Something went wrong', HttpStatus.INTERNAL_SERVER_ERROR);\n    }\n  }\n\n  public getCookieWithJwtAccessToken(userId: number, isSecondFactorAuthenticated = false) {\n    const payload: TokenPayload = { userId, isSecondFactorAuthenticated };\n    const token = this.jwtService.sign(payload, {\n      secret: this.configService.get('JWT_ACCESS_TOKEN_SECRET'),\n      expiresIn: `${this.configService.get('JWT_ACCESS_TOKEN_EXPIRATION_TIME')}s`\n    });\n    return `Authentication=${token}; HttpOnly; Path=/; Max-Age=${this.configService.get('JWT_ACCESS_TOKEN_EXPIRATION_TIME')}`;\n  }\n\n  public getCookieWithJwtRefreshToken(userId: number) {\n    const payload: TokenPayload = { userId };\n    const token = this.jwtService.sign(payload, {\n      secret: this.configService.get('JWT_REFRESH_TOKEN_SECRET'),\n      expiresIn: `${this.configService.get('JWT_REFRESH_TOKEN_EXPIRATION_TIME')}s`\n    });\n    const cookie = `Refresh=${token}; HttpOnly; Path=/; Max-Age=${this.configService.get('JWT_REFRESH_TOKEN_EXPIRATION_TIME')}`;\n    return {\n      cookie,\n      token\n    }\n  }\n\n  public getCookiesForLogOut() {\n    return [\n      'Authentication=; HttpOnly; Path=/; Max-Age=0',\n      'Refresh=; HttpOnly; Path=/; Max-Age=0'\n    ];\n  }\n\n  public async getAuthenticatedUser(email: string, plainTextPassword: string) {\n    try {\n      const user = await this.usersService.getByEmail(email);\n      await this.verifyPassword(plainTextPassword, user.password);\n      return user;\n    } catch (error) {\n      throw new HttpException('Wrong credentials provided', HttpStatus.BAD_REQUEST);\n    }\n  }\n\n  private async verifyPassword(plainTextPassword: string, hashedPassword: string) {\n    const isPasswordMatching = await bcrypt.compare(\n      plainTextPassword,\n      hashedPassword\n    );\n    if (!isPasswordMatching) {\n      throw new HttpException('Wrong credentials provided', HttpStatus.BAD_REQUEST);\n    }\n  }\n\n  public async getUserFromAuthenticationToken(token: string) {\n    const payload: TokenPayload = this.jwtService.verify(token, {\n      secret: this.configService.get('JWT_ACCESS_TOKEN_SECRET')\n    });\n    if (payload.userId) {\n      return this.usersService.getById(payload.userId);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BookProperties.html":{"url":"interfaces/BookProperties.html","title":"interface - BookProperties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  BookProperties\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/types/bookProperties.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            authors\n                                        \n                                \n                                \n                                        \n                                            publicationYear\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        authors\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        authors:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        publicationYear\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        publicationYear:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface BookProperties {\n  authors: string[];\n  publicationYear: string;\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CarProperties.html":{"url":"interfaces/CarProperties.html","title":"interface - CarProperties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CarProperties\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/types/carProperties.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            brand\n                                        \n                                \n                                \n                                        \n                                            engine\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        brand\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        brand:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        engine\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        engine:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface CarProperties {\n  brand: string;\n  engine: {\n    fuel: string;\n    numberOfCylinders: number;\n  }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CategoriesController.html":{"url":"controllers/CategoriesController.html","title":"controller - CategoriesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CategoriesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/categories/categories.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                categories\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createCategory\n                            \n                            \n                                    Async\n                                deleteCategory\n                            \n                            \n                                getAllCategories\n                            \n                            \n                                getCategoryById\n                            \n                            \n                                    Async\n                                updateCategory\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createCategory\n                        \n                    \n                \n            \n            \n                \n                    \n                    createCategory(category: CreateCategoryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/categories/categories.controller.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    category\n                                    \n                                                CreateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteCategory\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteCategory(undefined: FindOneParams)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/categories/categories.controller.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                FindOneParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllCategories\n                        \n                    \n                \n            \n            \n                \ngetAllCategories()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/categories/categories.controller.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCategoryById\n                        \n                    \n                \n            \n            \n                \ngetCategoryById(undefined: FindOneParams)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/categories/categories.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                FindOneParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateCategory\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateCategory(undefined: FindOneParams, category: UpdateCategoryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/categories/categories.controller.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                FindOneParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    category\n                                    \n                                                UpdateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Patch,\n  UseGuards,\n  UseInterceptors,\n  ClassSerializerInterceptor, Post,\n} from '@nestjs/common';\nimport CategoriesService from './categories.service';\nimport CreateCategoryDto from './dto/createCategory.dto';\nimport UpdateCategoryDto from './dto/updateCategory.dto';\nimport JwtAuthenticationGuard from '../authentication/jwt-authentication.guard';\nimport FindOneParams from '../utils/findOneParams';\n\n@Controller('categories')\n@UseInterceptors(ClassSerializerInterceptor)\nexport default class CategoriesController {\n  constructor(\n    private readonly categoriesService: CategoriesService\n  ) {}\n\n  @Get()\n  getAllCategories() {\n    return this.categoriesService.getAllCategories();\n  }\n\n  @Get(':id')\n  getCategoryById(@Param() { id }: FindOneParams) {\n    return this.categoriesService.getCategoryById(Number(id));\n  }\n\n  @Post()\n  @UseGuards(JwtAuthenticationGuard)\n  async createCategory(@Body() category: CreateCategoryDto) {\n    return this.categoriesService.createCategory(category);\n  }\n\n  @Patch(':id')\n  async updateCategory(@Param() { id }: FindOneParams, @Body() category: UpdateCategoryDto) {\n    return this.categoriesService.updateCategory(Number(id), category);\n  }\n\n  @Delete(':id')\n  async deleteCategory(@Param() { id }: FindOneParams) {\n    return this.categoriesService.deleteCategory(Number(id));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CategoriesModule.html":{"url":"modules/CategoriesModule.html","title":"module - CategoriesModule","body":"\n                   \n\n\n\n\n    Modules\n    CategoriesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_CategoriesModule\n\n\n\ncluster_CategoriesModule_providers\n\n\n\n\nCategoriesService\n\nCategoriesService\n\n\n\nCategoriesModule\n\nCategoriesModule\n\nCategoriesModule -->\n\nCategoriesService->CategoriesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/categories/categories.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CategoriesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CategoriesController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport CategoriesController from './categories.controller';\nimport CategoriesService from './categories.service';\nimport Category from './category.entity';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Category])],\n  controllers: [CategoriesController],\n  providers: [CategoriesService],\n})\nexport class CategoriesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CategoriesService.html":{"url":"injectables/CategoriesService.html","title":"injectable - CategoriesService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  CategoriesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/categories/categories.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createCategory\n                            \n                            \n                                    Async\n                                deleteCategory\n                            \n                            \n                                    Async\n                                deleteCategoryById\n                            \n                            \n                                getAllCategories\n                            \n                            \n                                    Async\n                                getCategoryById\n                            \n                            \n                                    Async\n                                updateCategory\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createCategory\n                        \n                    \n                \n            \n            \n                \n                    \n                    createCategory(category: CreateCategoryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/categories/categories.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    category\n                                    \n                                                CreateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteCategory\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteCategory(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/categories/categories.service.ts:71\n                \n            \n\n\n            \n                \n                    A method that deletes a category from the database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        An id of a category. A category with this id should exist in the database\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteCategoryById\n                        \n                    \n                \n            \n            \n                \n                    Use deleteCategory instead\n                \n            \n            \n                \n                    \n                    deleteCategoryById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/categories/categories.service.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllCategories\n                        \n                    \n                \n            \n            \n                \ngetAllCategories()\n                \n            \n\n\n            \n                \n                    Defined in src/categories/categories.service.ts:24\n                \n            \n\n\n            \n                \n                    A method that fetches the categories from the database\n\n\n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        A promise with the list of categories\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getCategoryById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCategoryById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/categories/categories.service.ts:34\n                \n            \n\n\n            \n                \n                    A method that fetches a category with a given id. Example:\nconst category = await categoriesService.getCategoryById(1);\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                        Example :\n                        \n                            const category = await categoriesService.getCategoryById(1);\n                        \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateCategory\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateCategory(id: number, category: UpdateCategoryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/categories/categories.service.ts:51\n                \n            \n\n\n            \n                \n                    See the definition of the UpdateCategoryDto file to see a list of required properties\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    category\n                                    \n                                                UpdateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport CreateCategoryDto from './dto/createCategory.dto';\nimport Category from './category.entity';\nimport UpdateCategoryDto from './dto/updateCategory.dto';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport CategoryNotFoundException from './exceptions/categoryNotFound.exception';\n\n@Injectable()\nexport default class CategoriesService {\n\n  /**\n   * @ignore\n   */\n  constructor(\n    @InjectRepository(Category)\n    private categoriesRepository: Repository\n  ) {}\n\n  /**\n   * A method that fetches the categories from the database\n   * @returns A promise with the list of categories\n   */\n  getAllCategories(): Promise {\n    return this.categoriesRepository.find({ relations: ['posts'] });\n  }\n\n  /**\n   * A method that fetches a category with a given id. Example:\n   *\n   * @example\n   * const category = await categoriesService.getCategoryById(1);\n   */\n  async getCategoryById(id: number): Promise {\n    const category = await this.categoriesRepository.findOne(id, { relations: ['posts'] });\n    if (category) {\n      return category;\n    }\n    throw new CategoryNotFoundException(id);\n  }\n\n  async createCategory(category: CreateCategoryDto) {\n    const newCategory = await this.categoriesRepository.create(category);\n    await this.categoriesRepository.save(newCategory);\n    return newCategory;\n  }\n\n  /**\n   * See the [definition of the UpdateCategoryDto file]{@link UpdateCategoryDto} to see a list of required properties\n   */\n  async updateCategory(id: number, category: UpdateCategoryDto): Promise {\n    await this.categoriesRepository.update(id, category);\n    const updatedCategory = await this.categoriesRepository.findOne(id, { relations: ['posts'] });\n    if (updatedCategory) {\n      return updatedCategory\n    }\n    throw new CategoryNotFoundException(id);\n  }\n\n  /**\n   * @deprecated Use deleteCategory instead\n   */\n  async deleteCategoryById(id: number): Promise {\n    return this.deleteCategory(id);\n  }\n\n  /**\n   * A method that deletes a category from the database\n   * @param id An id of a category. A category with this id should exist in the database\n   */\n  async deleteCategory(id: number): Promise {\n    const deleteResponse = await this.categoriesRepository.delete(id);\n    if (!deleteResponse.affected) {\n      throw new CategoryNotFoundException(id);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Category.html":{"url":"classes/Category.html","title":"class - Category","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Category\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/categories/category.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                posts\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/category.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/category.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/category.entity.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Column, Entity, ManyToMany, PrimaryGeneratedColumn } from 'typeorm';\nimport Post from '../posts/post.entity';\n\n@Entity()\nclass Category {\n  @PrimaryGeneratedColumn()\n  public id: number;\n\n  @Column()\n  public name: string;\n\n  @ManyToMany(() => Post, (post: Post) => post.categories)\n  public posts: Post[];\n}\n\nexport default Category;\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CategoryNotFoundException.html":{"url":"classes/CategoryNotFoundException.html","title":"class - CategoryNotFoundException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CategoryNotFoundException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/categories/exceptions/categoryNotFound.exception.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    NotFoundException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(postId: number)\n                    \n                \n                        \n                            \n                                Defined in src/categories/exceptions/categoryNotFound.exception.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        postId\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { NotFoundException } from '@nestjs/common';\n\nclass CategoryNotFoundException extends NotFoundException {\n  constructor(postId: number) {\n    super(`Category with id ${postId} not found`);\n  }\n}\n\nexport default CategoryNotFoundException;\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ChargeController.html":{"url":"controllers/ChargeController.html","title":"controller - ChargeController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ChargeController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/charge/charge.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                charge\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createCharge\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createCharge\n                        \n                    \n                \n            \n            \n                \n                    \n                    createCharge(charge: CreateChargeDto, request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/charge/charge.controller.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    charge\n                                    \n                                                CreateChargeDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post, Req, UseGuards } from '@nestjs/common';\nimport JwtAuthenticationGuard from '../authentication/jwt-authentication.guard';\nimport CreateChargeDto from './dto/createCharge.dto';\nimport RequestWithUser from '../authentication/requestWithUser.interface';\nimport StripeService from '../stripe/stripe.service';\n\n@Controller('charge')\nexport default class ChargeController {\n  constructor(\n    private readonly stripeService: StripeService\n  ) {}\n\n  @Post()\n  @UseGuards(JwtAuthenticationGuard)\n  async createCharge(@Body() charge: CreateChargeDto, @Req() request: RequestWithUser) {\n    return this.stripeService.charge(charge.amount, charge.paymentMethodId, request.user.stripeCustomerId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ChargeModule.html":{"url":"modules/ChargeModule.html","title":"module - ChargeModule","body":"\n                   \n\n\n\n\n    Modules\n    ChargeModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ChargeModule\n\n\n\ncluster_ChargeModule_imports\n\n\n\n\nStripeModule\n\nStripeModule\n\n\n\nChargeModule\n\nChargeModule\n\nChargeModule -->\n\nStripeModule->ChargeModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/charge/charge.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            ChargeController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            StripeModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { StripeModule } from '../stripe/stripe.module';\nimport ChargeController from './charge.controller';\n\n@Module({\n  imports: [StripeModule],\n  controllers: [ChargeController],\n  providers: [],\n})\nexport class ChargeModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ChatGateway.html":{"url":"classes/ChatGateway.html","title":"class - ChatGateway","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ChatGateway\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/chat/chat.gateway.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        OnGatewayConnection\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                server\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                handleConnection\n                            \n                            \n                                    Async\n                                listenForMessages\n                            \n                            \n                                    Async\n                                requestAllMessages\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(chatService: ChatService)\n                    \n                \n                        \n                            \n                                Defined in src/chat/chat.gateway.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        chatService\n                                                  \n                                                        \n                                                                        ChatService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        server\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Server\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @WebSocketServer()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/chat/chat.gateway.ts:14\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        handleConnection\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleConnection(socket: Socket)\n                \n            \n\n\n            \n                \n                    Defined in src/chat/chat.gateway.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    socket\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        listenForMessages\n                        \n                    \n                \n            \n            \n                \n                    \n                    listenForMessages(content: string, socket: Socket)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('send_message')\n                \n            \n\n            \n                \n                    Defined in src/chat/chat.gateway.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    content\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    socket\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        requestAllMessages\n                        \n                    \n                \n            \n            \n                \n                    \n                    requestAllMessages(socket: Socket)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('request_all_messages')\n                \n            \n\n            \n                \n                    Defined in src/chat/chat.gateway.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    socket\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ConnectedSocket,\n  MessageBody, OnGatewayConnection,\n  SubscribeMessage,\n  WebSocketGateway,\n  WebSocketServer,\n} from '@nestjs/websockets';\nimport { Server, Socket } from 'socket.io';\nimport { ChatService } from './chat.service';\n\n@WebSocketGateway()\nexport class ChatGateway implements OnGatewayConnection {\n  @WebSocketServer()\n  server: Server;\n\n  constructor(\n    private readonly chatService: ChatService\n  ) {\n  }\n\n  async handleConnection(socket: Socket) {\n    await this.chatService.getUserFromSocket(socket);\n  }\n\n  @SubscribeMessage('send_message')\n  async listenForMessages(\n    @MessageBody() content: string,\n    @ConnectedSocket() socket: Socket,\n  ) {\n    const author = await this.chatService.getUserFromSocket(socket);\n    const message = await this.chatService.saveMessage(content, author);\n\n    this.server.sockets.emit('receive_message', message);\n  }\n\n  @SubscribeMessage('request_all_messages')\n  async requestAllMessages(\n    @ConnectedSocket() socket: Socket,\n  ) {\n    await this.chatService.getUserFromSocket(socket);\n    const messages = await this.chatService.getAllMessages();\n\n    socket.emit('send_all_messages', messages);\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ChatModule.html":{"url":"modules/ChatModule.html","title":"module - ChatModule","body":"\n                   \n\n\n\n\n    Modules\n    ChatModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ChatModule\n\n\n\ncluster_ChatModule_imports\n\n\n\ncluster_ChatModule_providers\n\n\n\n\nAuthenticationModule\n\nAuthenticationModule\n\n\n\nChatModule\n\nChatModule\n\nChatModule -->\n\nAuthenticationModule->ChatModule\n\n\n\n\n\nChatService\n\nChatService\n\nChatModule -->\n\nChatService->ChatModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/chat/chat.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ChatService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthenticationModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ChatGateway } from './chat.gateway';\nimport { AuthenticationModule } from '../authentication/authentication.module';\nimport { ChatService } from './chat.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport Message from './message.entity';\n\n@Module({\n  imports: [\n    AuthenticationModule,\n    TypeOrmModule.forFeature([Message]),\n  ],\n  controllers: [],\n  providers: [ChatGateway, ChatService],\n})\nexport class ChatModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ChatService.html":{"url":"injectables/ChatService.html","title":"injectable - ChatService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ChatService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/chat/chat.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getAllMessages\n                            \n                            \n                                    Async\n                                getUserFromSocket\n                            \n                            \n                                    Async\n                                saveMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authenticationService: AuthenticationService, messagesRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/chat/chat.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authenticationService\n                                                  \n                                                        \n                                                                        AuthenticationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        messagesRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllMessages\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllMessages()\n                \n            \n\n\n            \n                \n                    Defined in src/chat/chat.service.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserFromSocket\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserFromSocket(socket: Socket)\n                \n            \n\n\n            \n                \n                    Defined in src/chat/chat.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    socket\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        saveMessage\n                        \n                    \n                \n            \n            \n                \n                    \n                    saveMessage(content: string, author: User)\n                \n            \n\n\n            \n                \n                    Defined in src/chat/chat.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    content\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    author\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthenticationService } from '../authentication/authentication.service';\nimport { Socket } from 'socket.io';\nimport { parse } from 'cookie';\nimport { WsException } from '@nestjs/websockets';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport Message from './message.entity';\nimport User from '../users/user.entity';\nimport { Repository } from 'typeorm';\n\n@Injectable()\nexport class ChatService {\n  constructor(\n    private readonly authenticationService: AuthenticationService,\n    @InjectRepository(Message)\n    private messagesRepository: Repository,\n  ) {\n  }\n\n  async saveMessage(content: string, author: User) {\n    const newMessage = await this.messagesRepository.create({\n      content,\n      author\n    });\n    await this.messagesRepository.save(newMessage);\n    return newMessage;\n  }\n\n  async getAllMessages() {\n    return this.messagesRepository.find({\n      relations: ['author']\n    });\n  }\n\n  async getUserFromSocket(socket: Socket) {\n    const cookie = socket.handshake.headers.cookie;\n    const { Authentication: authenticationToken } = parse(cookie);\n    const user = await this.authenticationService.getUserFromAuthenticationToken(authenticationToken);\n    if (!user) {\n      throw new WsException('Invalid credentials.');\n    }\n    return user;\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CheckVerificationCodeDto.html":{"url":"classes/CheckVerificationCodeDto.html","title":"class - CheckVerificationCodeDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CheckVerificationCodeDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/sms/checkVerificationCode.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                code\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/sms/checkVerificationCode.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty } from 'class-validator';\n\nexport class CheckVerificationCodeDto {\n  @IsString()\n  @IsNotEmpty()\n  code: string;\n}\n\nexport default CheckVerificationCodeDto;\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Comment.html":{"url":"classes/Comment.html","title":"class - Comment","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Comment\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/comments/comment.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                author\n                            \n                            \n                                    Public\n                                content\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                post\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/comments/comment.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/comments/comment.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/comments/comment.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        post\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/comments/comment.entity.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Column, Entity, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\nimport User from '../users/user.entity';\nimport Post from '../posts/post.entity';\n\n@Entity()\nclass Comment {\n  @PrimaryGeneratedColumn()\n  public id: number;\n\n  @Column()\n  public content: string;\n\n  @ManyToOne(() => Post, (post: Post) => post.comments)\n  public post: Post;\n\n  @ManyToOne(() => User, (author: User) => author.posts)\n  public author: User;\n}\n\nexport default Comment;\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CommentsController.html":{"url":"controllers/CommentsController.html","title":"controller - CommentsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CommentsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/comments/comments.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                comments\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createComment\n                            \n                            \n                                    Async\n                                getComments\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createComment\n                        \n                    \n                \n            \n            \n                \n                    \n                    createComment(comment: CreateCommentDto, req: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/comments/comments.controller.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    comment\n                                    \n                                                CreateCommentDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getComments\n                        \n                    \n                \n            \n            \n                \n                    \n                    getComments(undefined: GetCommentsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/comments/comments.controller.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                GetCommentsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  ClassSerializerInterceptor,\n  Controller, Get,\n  Post, Query,\n  Req,\n  UseGuards,\n  UseInterceptors,\n} from '@nestjs/common';\nimport JwtAuthenticationGuard from '../authentication/jwt-authentication.guard';\nimport RequestWithUser from '../authentication/requestWithUser.interface';\nimport CreateCommentDto from './dto/createComment.dto';\nimport { CommandBus, QueryBus } from '@nestjs/cqrs';\nimport { CreateCommentCommand } from './commands/implementations/createComment.command';\nimport { GetCommentsQuery } from './queries/implementations/getComments.query';\nimport GetCommentsDto from './dto/getComments.dto';\n\n@Controller('comments')\n@UseInterceptors(ClassSerializerInterceptor)\nexport default class CommentsController {\n  constructor(\n    private commandBus: CommandBus,\n    private queryBus: QueryBus,\n  ) {}\n\n  @Post()\n  @UseGuards(JwtAuthenticationGuard)\n  async createComment(@Body() comment: CreateCommentDto, @Req() req: RequestWithUser) {\n    const user = req.user;\n    return this.commandBus.execute(\n      new CreateCommentCommand(comment, user)\n    )\n  }\n\n  @Get()\n  async getComments(\n    @Query() { postId }: GetCommentsDto,\n  ) {\n    return this.queryBus.execute(\n      new GetCommentsQuery(postId)\n    )\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CommentsModule.html":{"url":"modules/CommentsModule.html","title":"module - CommentsModule","body":"\n                   \n\n\n\n\n    Modules\n    CommentsModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/comments/comments.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            CommentsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport Comment from './comment.entity';\nimport CommentsController from './comments.controller';\nimport { CqrsModule } from '@nestjs/cqrs';\nimport { CreateCommentHandler } from './commands/handlers/create-comment.handler';\nimport { GetCommentsHandler } from './queries/handlers/getComments.handler';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Comment]), CqrsModule],\n  controllers: [CommentsController],\n  providers: [CreateCommentHandler, GetCommentsHandler],\n})\nexport class CommentsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ConfirmEmailDto.html":{"url":"classes/ConfirmEmailDto.html","title":"class - ConfirmEmailDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ConfirmEmailDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/emailConfirmation/confirmEmail.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/emailConfirmation/confirmEmail.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty } from 'class-validator';\n\nexport class ConfirmEmailDto {\n  @IsString()\n  @IsNotEmpty()\n  token: string;\n}\n\nexport default ConfirmEmailDto;\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCategoryDto.html":{"url":"classes/CreateCategoryDto.html","title":"class - CreateCategoryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCategoryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/categories/dto/createCategory.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/dto/createCategory.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty } from 'class-validator';\n\nexport class CreateCategoryDto {\n  @IsString()\n  @IsNotEmpty()\n  name: string;\n}\n\nexport default CreateCategoryDto;\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateChargeDto.html":{"url":"classes/CreateChargeDto.html","title":"class - CreateChargeDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateChargeDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/charge/dto/createCharge.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                amount\n                            \n                            \n                                paymentMethodId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        amount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/charge/dto/createCharge.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        paymentMethodId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/charge/dto/createCharge.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty, IsNumber } from 'class-validator';\n\nexport class CreateChargeDto {\n  @IsString()\n  @IsNotEmpty()\n  paymentMethodId: string;\n\n  @IsNumber()\n  amount: number;\n}\n\nexport default CreateChargeDto;\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCommentCommand.html":{"url":"classes/CreateCommentCommand.html","title":"class - CreateCommentCommand","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCommentCommand\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/comments/commands/implementations/createComment.command.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                author\n                            \n                            \n                                    Public\n                                    Readonly\n                                comment\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(comment: CreateCommentDto, author: User)\n                    \n                \n                        \n                            \n                                Defined in src/comments/commands/implementations/createComment.command.ts:4\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        comment\n                                                  \n                                                        \n                                                                        CreateCommentDto\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        author\n                                                  \n                                                        \n                                                                        User\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                    \n                        \n                                Defined in src/comments/commands/implementations/createComment.command.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        comment\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreateCommentDto\n\n                    \n                \n                    \n                        \n                                Defined in src/comments/commands/implementations/createComment.command.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import CreateCommentDto from '../../dto/createComment.dto';\nimport User from '../../../users/user.entity';\n\nexport class CreateCommentCommand {\n  constructor(\n    public readonly comment: CreateCommentDto,\n    public readonly author: User,\n  ) {}\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCommentDto.html":{"url":"classes/CreateCommentDto.html","title":"class - CreateCommentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCommentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/comments/dto/createComment.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                content\n                            \n                            \n                                post\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/comments/dto/createComment.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        post\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ObjectWithIdDTO\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/comments/dto/createComment.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty, ValidateNested } from 'class-validator';\nimport { Type } from 'class-transformer';\nimport ObjectWithIdDTO from 'src/utils/types/objectWithId.dto';\n\nclass CreateCommentDto {\n  @IsString()\n  @IsNotEmpty()\n  content: string;\n\n  @ValidateNested()\n  @Type(() => ObjectWithIdDTO)\n  post: ObjectWithIdDTO;\n}\n\nexport default CreateCommentDto;\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCommentHandler.html":{"url":"classes/CreateCommentHandler.html","title":"class - CreateCommentHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCommentHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/comments/commands/handlers/create-comment.handler.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ICommandHandler\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                execute\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(commentsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/comments/commands/handlers/create-comment.handler.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        commentsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        execute\n                        \n                    \n                \n            \n            \n                \n                    \n                    execute(command: CreateCommentCommand)\n                \n            \n\n\n            \n                \n                    Defined in src/comments/commands/handlers/create-comment.handler.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    command\n                                    \n                                                CreateCommentCommand\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { CommandHandler, ICommandHandler } from '@nestjs/cqrs';\nimport { CreateCommentCommand } from '../implementations/createComment.command';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport Comment from '../../comment.entity';\nimport { Repository } from 'typeorm';\n\n@CommandHandler(CreateCommentCommand)\nexport class CreateCommentHandler implements ICommandHandler {\n  constructor(\n    @InjectRepository(Comment)\n    private commentsRepository: Repository,\n  ) {}\n\n  async execute(command: CreateCommentCommand) {\n    const newPost = await this.commentsRepository.create({\n      ...command.comment,\n      author: command.author\n    });\n    await this.commentsRepository.save(newPost);\n    return newPost;\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateLogDto.html":{"url":"classes/CreateLogDto.html","title":"class - CreateLogDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateLogDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/logger/dto/createLog.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                context\n                            \n                            \n                                level\n                            \n                            \n                                message\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        context\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/logger/dto/createLog.dto.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        level\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/logger/dto/createLog.dto.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/logger/dto/createLog.dto.ts:3\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateLogDto {\n  context: string;\n  message: string;\n  level: string;\n}\n\nexport default CreateLogDto;\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dto/createPost.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                paragraphs\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        paragraphs\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString({each: true})@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/createPost.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/createPost.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty } from 'class-validator';\n\nexport class CreatePostDto {\n  @IsString({ each: true })\n  @IsNotEmpty()\n  paragraphs: string[];\n\n  @IsString()\n  @IsNotEmpty()\n  title: string;\n}\n\nexport default CreatePostDto;\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostInput.html":{"url":"classes/CreatePostInput.html","title":"class - CreatePostInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/inputs/post.input.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                paragraphs\n                            \n                            \n                                    Optional\n                                scheduledDate\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        paragraphs\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/inputs/post.input.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        scheduledDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/inputs/post.input.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/inputs/post.input.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { InputType, Field } from '@nestjs/graphql';\n\n@InputType()\nexport class CreatePostInput {\n  @Field()\n  title: string;\n\n  @Field(() => [String])\n  paragraphs: string[];\n\n  @Field({ nullable: true })\n  scheduledDate?: Date;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateProductCategoryDto.html":{"url":"classes/CreateProductCategoryDto.html","title":"class - CreateProductCategoryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateProductCategoryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/productCategories/dto/createProductCategory.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/productCategories/dto/createProductCategory.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty } from 'class-validator';\n\nexport class CreateProductCategoryDto {\n  @IsString()\n  @IsNotEmpty()\n  name: string;\n}\n\nexport default CreateProductCategoryDto;\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateProductDto.html":{"url":"classes/CreateProductDto.html","title":"class - CreateProductDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateProductDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/dto/createProduct.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                category\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ObjectWithIdDTO\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/createProduct.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/createProduct.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty, ValidateNested } from 'class-validator';\nimport { Type } from 'class-transformer';\nimport ObjectWithIdDTO from '../../utils/types/objectWithId.dto';\n\nexport class CreateProductDto {\n  @IsString()\n  @IsNotEmpty()\n  name: string;\n\n  @ValidateNested()\n  @Type(() => ObjectWithIdDTO)\n  category: ObjectWithIdDTO;\n}\n\nexport default CreateProductDto;\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateSubscriberDto.html":{"url":"classes/CreateSubscriberDto.html","title":"class - CreateSubscriberDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateSubscriberDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/subscribers/dto/createSubscriber.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/subscribers/dto/createSubscriber.dto.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/subscribers/dto/createSubscriber.dto.ts:3\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateSubscriberDto {\n  email: string;\n  name: string;\n}\n\nexport default CreateSubscriberDto;\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/createUser.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/dto/createUser.dto.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/dto/createUser.dto.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/dto/createUser.dto.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateUserDto {\n  email: string;\n  name: string;\n  password: string;\n}\n\nexport default CreateUserDto;\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CreditCardsController.html":{"url":"controllers/CreditCardsController.html","title":"controller - CreditCardsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CreditCardsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/credit-cards/creditCards.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                credit-cards\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addCreditCard\n                            \n                            \n                                    Async\n                                getCreditCards\n                            \n                            \n                                    Async\n                                setDefaultCard\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addCreditCard\n                        \n                    \n                \n            \n            \n                \n                    \n                    addCreditCard(creditCard: AddCreditCardDto, request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/credit-cards/creditCards.controller.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    creditCard\n                                    \n                                                AddCreditCardDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getCreditCards\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCreditCards(request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@UseGuards(EmailConfirmationGuard)@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/credit-cards/creditCards.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        setDefaultCard\n                        \n                    \n                \n            \n            \n                \n                    \n                    setDefaultCard(creditCard: SetDefaultCreditCardDto, request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('default')@HttpCode(200)@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/credit-cards/creditCards.controller.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    creditCard\n                                    \n                                                SetDefaultCreditCardDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post, Req, UseGuards, Get, HttpCode } from '@nestjs/common';\nimport JwtAuthenticationGuard from '../authentication/jwt-authentication.guard';\nimport RequestWithUser from '../authentication/requestWithUser.interface';\nimport StripeService from '../stripe/stripe.service';\nimport AddCreditCardDto from './dto/addCreditCardDto';\nimport SetDefaultCreditCardDto from './dto/setDefaultCreditCard.dto';\nimport { EmailConfirmationGuard } from '../emailConfirmation/emailConfirmation.guard';\n\n@Controller('credit-cards')\nexport default class CreditCardsController {\n  constructor(\n    private readonly stripeService: StripeService\n  ) {}\n\n  @Post()\n  @UseGuards(JwtAuthenticationGuard)\n  async addCreditCard(@Body() creditCard: AddCreditCardDto, @Req() request: RequestWithUser) {\n    return this.stripeService.attachCreditCard(creditCard.paymentMethodId, request.user.stripeCustomerId);\n  }\n\n  @Post('default')\n  @HttpCode(200)\n  @UseGuards(JwtAuthenticationGuard)\n  async setDefaultCard(@Body() creditCard: SetDefaultCreditCardDto, @Req() request: RequestWithUser) {\n    await this.stripeService.setDefaultCreditCard(creditCard.paymentMethodId, request.user.stripeCustomerId);\n  }\n\n  @Get()\n  @UseGuards(EmailConfirmationGuard)\n  @UseGuards(JwtAuthenticationGuard)\n  async getCreditCards(@Req() request: RequestWithUser) {\n    return this.stripeService.listCreditCards(request.user.stripeCustomerId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CreditCardsModule.html":{"url":"modules/CreditCardsModule.html","title":"module - CreditCardsModule","body":"\n                   \n\n\n\n\n    Modules\n    CreditCardsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_CreditCardsModule\n\n\n\ncluster_CreditCardsModule_imports\n\n\n\n\nStripeModule\n\nStripeModule\n\n\n\nCreditCardsModule\n\nCreditCardsModule\n\nCreditCardsModule -->\n\nStripeModule->CreditCardsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/credit-cards/creditCards.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            CreditCardsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            StripeModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { StripeModule } from '../stripe/stripe.module';\nimport CreditCardsController from './creditCards.controller';\n\n@Module({\n  imports: [StripeModule],\n  controllers: [CreditCardsController],\n  providers: [],\n})\nexport class CreditCardsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CustomLogger.html":{"url":"injectables/CustomLogger.html","title":"injectable - CustomLogger","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  CustomLogger\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/logger/customLogger.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ConsoleLogger\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logsService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                debug\n                            \n                            \n                                error\n                            \n                            \n                                log\n                            \n                            \n                                verbose\n                            \n                            \n                                warn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(context: string, options: ConsoleLoggerOptions, configService: ConfigService, logsService: LogsService)\n                    \n                \n                        \n                            \n                                Defined in src/logger/customLogger.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        context\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                        ConsoleLoggerOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        logsService\n                                                  \n                                                        \n                                                                        LogsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        debug\n                        \n                    \n                \n            \n            \n                \ndebug(message: string, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/logger/customLogger.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        error\n                        \n                    \n                \n            \n            \n                \nerror(message: string, stack?: string, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/logger/customLogger.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    stack\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        log\n                        \n                    \n                \n            \n            \n                \nlog(message: string, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/logger/customLogger.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verbose\n                        \n                    \n                \n            \n            \n                \nverbose(message: string, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/logger/customLogger.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        warn\n                        \n                    \n                \n            \n            \n                \nwarn(message: string, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/logger/customLogger.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logsService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         LogsService\n\n                    \n                \n                    \n                        \n                                Defined in src/logger/customLogger.ts:9\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, ConsoleLogger } from '@nestjs/common';\nimport { ConsoleLoggerOptions } from '@nestjs/common/services/console-logger.service';\nimport { ConfigService } from '@nestjs/config';\nimport getLogLevels from '../utils/getLogLevels';\nimport LogsService from './logs.service';\n\n@Injectable()\nclass CustomLogger extends ConsoleLogger {\n  private readonly logsService: LogsService;\n\n  constructor(\n    context: string,\n    options: ConsoleLoggerOptions,\n    configService: ConfigService,\n    logsService: LogsService\n  ) {\n    const environment = configService.get('NODE_ENV');\n\n    super(\n      context,\n      {\n        ...options,\n        logLevels: getLogLevels(environment === 'production')\n      }\n    );\n\n    this.logsService = logsService;\n  }\n\n  log(message: string, context?: string) {\n    super.log.apply(this, [message, context]);\n\n    this.logsService.createLog({\n      message,\n      context,\n      level: 'log'\n    })\n  }\n  error(message: string, stack?: string, context?: string) {\n    super.error.apply(this, [message, stack, context]);\n\n    this.logsService.createLog({\n      message,\n      context,\n      level: 'error'\n    })\n  }\n  warn(message: string, context?: string) {\n    super.warn.apply(this, [message, context]);\n\n    this.logsService.createLog({\n      message,\n      context,\n      level: 'error'\n    })\n  }\n  debug(message: string, context?: string) {\n    super.debug.apply(this, [message, context]);\n\n    this.logsService.createLog({\n      message,\n      context,\n      level: 'error'\n    })\n  }\n  verbose(message: string, context?: string) {\n    super.debug.apply(this, [message, context]);\n\n    this.logsService.createLog({\n      message,\n      context,\n      level: 'error'\n    })\n  }\n}\n\nexport default CustomLogger;\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DatabaseLogger.html":{"url":"classes/DatabaseLogger.html","title":"class - DatabaseLogger","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DatabaseLogger\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/databaseLogger.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            TypeOrmLogger\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                log\n                            \n                            \n                                logMigration\n                            \n                            \n                                logQuery\n                            \n                            \n                                logQueryError\n                            \n                            \n                                logQuerySlow\n                            \n                            \n                                logSchemaBuild\n                            \n                            \n                                    Private\n                                stringifyParameters\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new NestLogger('SQL')\n                    \n                \n                    \n                        \n                                Defined in src/database/databaseLogger.ts:5\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        log\n                        \n                    \n                \n            \n            \n                \nlog(level: \"log\" | \"info\" | \"warn\", message: string, queryRunner?: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/databaseLogger.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    level\n                                    \n                                            \"log\" | \"info\" | \"warn\"\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logMigration\n                        \n                    \n                \n            \n            \n                \nlogMigration(message: string)\n                \n            \n\n\n            \n                \n                    Defined in src/database/databaseLogger.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logQuery\n                        \n                    \n                \n            \n            \n                \nlogQuery(query: string, parameters?: [], queryRunner?: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/databaseLogger.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    parameters\n                                    \n                                            []\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logQueryError\n                        \n                    \n                \n            \n            \n                \nlogQueryError(error: string, query: string, parameters?: [], queryRunner?: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/databaseLogger.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    query\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    parameters\n                                    \n                                            []\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logQuerySlow\n                        \n                    \n                \n            \n            \n                \nlogQuerySlow(time: number, query: string, parameters?: [], queryRunner?: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/databaseLogger.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    time\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    query\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    parameters\n                                    \n                                            []\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logSchemaBuild\n                        \n                    \n                \n            \n            \n                \nlogSchemaBuild(message: string)\n                \n            \n\n\n            \n                \n                    Defined in src/database/databaseLogger.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        stringifyParameters\n                        \n                    \n                \n            \n            \n                \n                    \n                    stringifyParameters(parameters?: [])\n                \n            \n\n\n            \n                \n                    Defined in src/database/databaseLogger.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    parameters\n                                    \n                                            []\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Logger as TypeOrmLogger, QueryRunner } from 'typeorm';\nimport { Logger as NestLogger } from '@nestjs/common';\n\nclass DatabaseLogger implements TypeOrmLogger {\n  private readonly logger = new NestLogger('SQL');  \n\n  logQuery(query: string, parameters?: unknown[], queryRunner?: QueryRunner) {\n    if (queryRunner?.data?.isCreatingLogs) {\n      return;\n    }\n    this.logger.log(`${query} -- Parameters: ${this.stringifyParameters(parameters)}`);\n  }\n  logQueryError(error: string, query: string, parameters?: unknown[], queryRunner?: QueryRunner) {\n    if (queryRunner?.data?.isCreatingLogs) {\n      return;\n    }\n    this.logger.error(`${query} -- Parameters: ${this.stringifyParameters(parameters)} -- ${error}`);\n  }\n  logQuerySlow(time: number, query: string, parameters?: unknown[], queryRunner?: QueryRunner) {\n    if (queryRunner?.data?.isCreatingLogs) {\n      return;\n    }\n    this.logger.warn(`Time: ${time} -- Parameters: ${this.stringifyParameters(parameters)} -- ${query}`);\n  }\n  logMigration(message: string) {\n    this.logger.log(message);\n  }\n  logSchemaBuild(message: string) {\n    this.logger.log(message);\n  }\n  log(level: 'log' | 'info' | 'warn', message: string, queryRunner?: QueryRunner) {\n    if (queryRunner?.data?.isCreatingLogs) {\n      return;\n    }\n    if (level === 'log') {\n      return this.logger.log(message);\n    }\n    if (level === 'info') {\n      return this.logger.debug(message);\n    }\n    if (level === 'warn') {\n      return this.logger.warn(message);\n    }\n  }\n  private stringifyParameters(parameters?: unknown[]) {\n    try {\n      return JSON.stringify(parameters);\n    } catch {\n      return '';\n    }\n  }\n}\n\nexport default DatabaseLogger;\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/database/database.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport DatabaseLogger from './databaseLogger';\n\n@Module({\n  imports: [\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => ({\n        type: 'postgres',\n        logger: new DatabaseLogger(),\n        host: configService.get('POSTGRES_HOST'),\n        port: configService.get('POSTGRES_PORT'),\n        username: configService.get('POSTGRES_USER'),\n        password: configService.get('POSTGRES_PASSWORD'),\n        database: configService.get('POSTGRES_DB'),\n        entities: [\n          __dirname + '/../**/*.entity{.ts,.js}',\n        ],\n        synchronize: true,\n      })\n    }),\n  ],\n})\nexport class DatabaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ElasticsearchHealthIndicator.html":{"url":"injectables/ElasticsearchHealthIndicator.html","title":"injectable - ElasticsearchHealthIndicator","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ElasticsearchHealthIndicator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/health/elasticsearchHealthIndicator.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    HealthIndicator\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                isHealthy\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(elasticsearchService: ElasticsearchService)\n                    \n                \n                        \n                            \n                                Defined in src/health/elasticsearchHealthIndicator.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        elasticsearchService\n                                                  \n                                                        \n                                                                    ElasticsearchService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        isHealthy\n                        \n                    \n                \n            \n            \n                \n                    \n                    isHealthy(key: string)\n                \n            \n\n\n            \n                \n                    Defined in src/health/elasticsearchHealthIndicator.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { HealthIndicator, HealthIndicatorResult, HealthCheckError } from '@nestjs/terminus';\nimport { ElasticsearchService } from '@nestjs/elasticsearch';\n\n@Injectable()\nexport class ElasticsearchHealthIndicator extends HealthIndicator {\n  constructor(\n    private readonly elasticsearchService: ElasticsearchService\n  ) {\n    super();\n  }\n\n  async isHealthy(key: string): Promise {\n    try {\n      await this.elasticsearchService.ping();\n      return this.getStatus(key, true);\n    } catch (error) {\n      throw new HealthCheckError(\n        'ElasticsearchHealthIndicator failed',\n        this.getStatus(key, false)\n      );\n    }\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/EmailConfirmationController.html":{"url":"controllers/EmailConfirmationController.html","title":"controller - EmailConfirmationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  EmailConfirmationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/emailConfirmation/emailConfirmation.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                email-confirmation\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                confirm\n                            \n                            \n                                    Async\n                                resendConfirmationLink\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        confirm\n                        \n                    \n                \n            \n            \n                \n                    \n                    confirm(confirmationData: ConfirmEmailDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('confirm')\n                \n            \n\n            \n                \n                    Defined in src/emailConfirmation/emailConfirmation.controller.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    confirmationData\n                                    \n                                                ConfirmEmailDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        resendConfirmationLink\n                        \n                    \n                \n            \n            \n                \n                    \n                    resendConfirmationLink(request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('resend-confirmation-link')@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/emailConfirmation/emailConfirmation.controller.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  ClassSerializerInterceptor,\n  UseInterceptors,\n  Post,\n  Body,\n  UseGuards,\n  Req,\n} from '@nestjs/common';\nimport ConfirmEmailDto from './confirmEmail.dto';\nimport { EmailConfirmationService } from './emailConfirmation.service';\nimport JwtAuthenticationGuard from '../authentication/jwt-authentication.guard';\nimport RequestWithUser from '../authentication/requestWithUser.interface';\n\n@Controller('email-confirmation')\n@UseInterceptors(ClassSerializerInterceptor)\nexport class EmailConfirmationController {\n  constructor(\n    private readonly emailConfirmationService: EmailConfirmationService\n  ) {}\n\n  @Post('confirm')\n  async confirm(@Body() confirmationData: ConfirmEmailDto) {\n    const email = await this.emailConfirmationService.decodeConfirmationToken(confirmationData.token);\n    await this.emailConfirmationService.confirmEmail(email);\n  }\n\n  @Post('resend-confirmation-link')\n  @UseGuards(JwtAuthenticationGuard)\n  async resendConfirmationLink(@Req() request: RequestWithUser) {\n    await this.emailConfirmationService.resendConfirmationLink(request.user.id);\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/EmailConfirmationGuard.html":{"url":"guards/EmailConfirmationGuard.html","title":"guard - EmailConfirmationGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n    Guards\n    EmailConfirmationGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/emailConfirmation/emailConfirmation.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/emailConfirmation/emailConfirmation.guard.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable, CanActivate, ExecutionContext, UnauthorizedException } from '@nestjs/common';\nimport RequestWithUser from '../authentication/requestWithUser.interface';\n\n@Injectable()\nexport class EmailConfirmationGuard implements CanActivate {\n  canActivate(\n    context: ExecutionContext,\n  ) {\n    const request: RequestWithUser = context.switchToHttp().getRequest();\n\n    if (!request.user?.isEmailConfirmed) {\n      throw new UnauthorizedException('Confirm your email first');\n    }\n\n    return true;\n  }\n}\n        \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EmailConfirmationModule.html":{"url":"modules/EmailConfirmationModule.html","title":"module - EmailConfirmationModule","body":"\n                   \n\n\n\n\n    Modules\n    EmailConfirmationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_EmailConfirmationModule\n\n\n\ncluster_EmailConfirmationModule_providers\n\n\n\ncluster_EmailConfirmationModule_exports\n\n\n\ncluster_EmailConfirmationModule_imports\n\n\n\n\nEmailModule\n\nEmailModule\n\n\n\nEmailConfirmationModule\n\nEmailConfirmationModule\n\nEmailConfirmationModule -->\n\nEmailModule->EmailConfirmationModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nEmailConfirmationModule -->\n\nUsersModule->EmailConfirmationModule\n\n\n\n\n\nEmailConfirmationService \n\nEmailConfirmationService \n\nEmailConfirmationService  -->\n\nEmailConfirmationModule->EmailConfirmationService \n\n\n\n\n\nEmailConfirmationService\n\nEmailConfirmationService\n\nEmailConfirmationModule -->\n\nEmailConfirmationService->EmailConfirmationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/emailConfirmation/emailConfirmation.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EmailConfirmationService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            EmailConfirmationController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            EmailModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            EmailConfirmationService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { EmailConfirmationService } from './emailConfirmation.service';\nimport { ConfigModule } from '@nestjs/config';\nimport { EmailModule } from '../email/email.module';\nimport { JwtModule } from '@nestjs/jwt';\nimport { EmailConfirmationController } from './emailConfirmation.controller';\nimport { UsersModule } from '../users/users.module';\n\n@Module({\n  imports: [ConfigModule, EmailModule, JwtModule.register({}), UsersModule],\n  providers: [EmailConfirmationService],\n  exports: [EmailConfirmationService],\n  controllers: [EmailConfirmationController]\n})\nexport class EmailConfirmationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EmailConfirmationService.html":{"url":"injectables/EmailConfirmationService.html","title":"injectable - EmailConfirmationService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  EmailConfirmationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/emailConfirmation/emailConfirmation.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                confirmEmail\n                            \n                            \n                                    Public\n                                    Async\n                                decodeConfirmationToken\n                            \n                            \n                                    Public\n                                    Async\n                                resendConfirmationLink\n                            \n                            \n                                    Public\n                                sendVerificationLink\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, configService: ConfigService, emailService: EmailService, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/emailConfirmation/emailConfirmation.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        emailService\n                                                  \n                                                        \n                                                                        EmailService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        confirmEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    confirmEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/emailConfirmation/emailConfirmation.service.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        decodeConfirmationToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    decodeConfirmationToken(token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/emailConfirmation/emailConfirmation.service.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        resendConfirmationLink\n                        \n                    \n                \n            \n            \n                \n                    \n                    resendConfirmationLink(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/emailConfirmation/emailConfirmation.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        sendVerificationLink\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendVerificationLink(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/emailConfirmation/emailConfirmation.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { ConfigService } from '@nestjs/config';\nimport VerificationTokenPayload from './verificationTokenPayload.interface';\nimport EmailService from '../email/email.service';\nimport { UsersService } from '../users/users.service';\n\n@Injectable()\nexport class EmailConfirmationService {\n  constructor(\n    private readonly jwtService: JwtService,\n    private readonly configService: ConfigService,\n    private readonly emailService: EmailService,\n    private readonly usersService: UsersService,\n  ) {}\n\n  public sendVerificationLink(email: string) {\n    const payload: VerificationTokenPayload = { email };\n    const token = this.jwtService.sign(payload, {\n      secret: this.configService.get('JWT_VERIFICATION_TOKEN_SECRET'),\n      expiresIn: `${this.configService.get('JWT_VERIFICATION_TOKEN_EXPIRATION_TIME')}s`\n    });\n\n    const url = `${this.configService.get('EMAIL_CONFIRMATION_URL')}?token=${token}`;\n\n    const text = `Welcome to the application. To confirm the email address, click here: ${url}`;\n\n    return this.emailService.sendMail({\n      to: email,\n      subject: 'Email confirmation',\n      text,\n    })\n  }\n\n  public async resendConfirmationLink(userId: number) {\n    const user = await this.usersService.getById(userId);\n    if (user.isEmailConfirmed) {\n      throw new BadRequestException('Email already confirmed');\n    }\n    await this.sendVerificationLink(user.email);\n  }\n\n  public async confirmEmail(email: string) {\n    const user = await this.usersService.getByEmail(email);\n    if (user.isEmailConfirmed) {\n      throw new BadRequestException('Email already confirmed');\n    }\n    await this.usersService.markEmailAsConfirmed(email);\n  }\n\n  public async decodeConfirmationToken(token: string) {\n    try {\n      const payload = await this.jwtService.verify(token, {\n        secret: this.configService.get('JWT_VERIFICATION_TOKEN_SECRET'),\n      });\n\n      if (typeof payload === 'object' && 'email' in payload) {\n        return payload.email;\n      }\n      throw new BadRequestException();\n    } catch (error) {\n      if (error?.name === 'TokenExpiredError') {\n        throw new BadRequestException('Email confirmation token expired');\n      }\n      throw new BadRequestException('Bad confirmation token');\n    }\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EmailModule.html":{"url":"modules/EmailModule.html","title":"module - EmailModule","body":"\n                   \n\n\n\n\n    Modules\n    EmailModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_EmailModule\n\n\n\ncluster_EmailModule_providers\n\n\n\ncluster_EmailModule_exports\n\n\n\n\nEmailService \n\nEmailService \n\n\n\nEmailModule\n\nEmailModule\n\nEmailService  -->\n\nEmailModule->EmailService \n\n\n\n\n\nEmailService\n\nEmailService\n\nEmailModule -->\n\nEmailService->EmailModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/email/email.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EmailService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            EmailService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport EmailService from './email.service';\nimport { ConfigModule } from '@nestjs/config';\n\n@Module({\n  imports: [ConfigModule],\n  controllers: [],\n  providers: [EmailService],\n  exports: [EmailService]\n})\nexport class EmailModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EmailScheduleDto.html":{"url":"classes/EmailScheduleDto.html","title":"class - EmailScheduleDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EmailScheduleDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/emailScheduling/dto/emailSchedule.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                content\n                            \n                            \n                                date\n                            \n                            \n                                recipient\n                            \n                            \n                                subject\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/emailScheduling/dto/emailSchedule.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDateString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/emailScheduling/dto/emailSchedule.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        recipient\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/emailScheduling/dto/emailSchedule.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        subject\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/emailScheduling/dto/emailSchedule.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty, IsDateString, IsEmail } from 'class-validator';\n\nexport class EmailScheduleDto {\n  @IsEmail()\n  recipient: string;\n\n  @IsString()\n  @IsNotEmpty()\n  subject: string;\n\n  @IsString()\n  @IsNotEmpty()\n  content: string;\n\n  @IsDateString()\n  date: string;\n}\n\nexport default EmailScheduleDto;\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/EmailSchedulingController.html":{"url":"controllers/EmailSchedulingController.html","title":"controller - EmailSchedulingController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  EmailSchedulingController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/emailScheduling/emailScheduling.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                email-scheduling\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                scheduleEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        scheduleEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    scheduleEmail(emailSchedule: EmailScheduleDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('schedule')@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/emailScheduling/emailScheduling.controller.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    emailSchedule\n                                    \n                                                EmailScheduleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  UseGuards,\n  Post,\n} from '@nestjs/common';\nimport JwtAuthenticationGuard from '../authentication/jwt-authentication.guard';\nimport EmailSchedulingService from './emailScheduling.service';\nimport EmailScheduleDto from './dto/emailSchedule.dto';\n\n@Controller('email-scheduling')\nexport default class EmailSchedulingController {\n  constructor(\n    private readonly emailSchedulingService: EmailSchedulingService\n  ) {}\n\n  @Post('schedule')\n  @UseGuards(JwtAuthenticationGuard)\n  async scheduleEmail(@Body() emailSchedule: EmailScheduleDto) {\n    this.emailSchedulingService.scheduleEmail(emailSchedule);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EmailSchedulingModule.html":{"url":"modules/EmailSchedulingModule.html","title":"module - EmailSchedulingModule","body":"\n                   \n\n\n\n\n    Modules\n    EmailSchedulingModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_EmailSchedulingModule\n\n\n\ncluster_EmailSchedulingModule_imports\n\n\n\ncluster_EmailSchedulingModule_providers\n\n\n\n\nEmailModule\n\nEmailModule\n\n\n\nEmailSchedulingModule\n\nEmailSchedulingModule\n\nEmailSchedulingModule -->\n\nEmailModule->EmailSchedulingModule\n\n\n\n\n\nEmailSchedulingService\n\nEmailSchedulingService\n\nEmailSchedulingModule -->\n\nEmailSchedulingService->EmailSchedulingModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/emailScheduling/emailScheduling.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EmailSchedulingService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            EmailSchedulingController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            EmailModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport EmailSchedulingService from './emailScheduling.service';\nimport { EmailModule } from '../email/email.module';\nimport EmailSchedulingController from './emailScheduling.controller';\n\n@Module({\n  imports: [EmailModule],\n  controllers: [EmailSchedulingController],\n  providers: [EmailSchedulingService],\n})\nexport class EmailSchedulingModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EmailSchedulingService.html":{"url":"injectables/EmailSchedulingService.html","title":"injectable - EmailSchedulingService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  EmailSchedulingService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/emailScheduling/emailScheduling.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                scheduleEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(emailService: EmailService, schedulerRegistry: SchedulerRegistry)\n                    \n                \n                        \n                            \n                                Defined in src/emailScheduling/emailScheduling.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        emailService\n                                                  \n                                                        \n                                                                        EmailService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        schedulerRegistry\n                                                  \n                                                        \n                                                                    SchedulerRegistry\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        scheduleEmail\n                        \n                    \n                \n            \n            \n                \nscheduleEmail(emailSchedule: EmailScheduleDto)\n                \n            \n\n\n            \n                \n                    Defined in src/emailScheduling/emailScheduling.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    emailSchedule\n                                    \n                                                EmailScheduleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport EmailService from '../email/email.service';\nimport EmailScheduleDto from './dto/emailSchedule.dto';\nimport { SchedulerRegistry } from '@nestjs/schedule';\nimport { CronJob } from 'cron';\n\n@Injectable()\nexport default class EmailSchedulingService {\n  constructor(\n    private readonly emailService: EmailService,\n    private readonly schedulerRegistry: SchedulerRegistry\n  ) {}\n\n  scheduleEmail(emailSchedule: EmailScheduleDto) {\n    const date = new Date(emailSchedule.date);\n    const job = new CronJob(date, () => {\n      this.emailService.sendMail({\n        to: emailSchedule.recipient,\n        subject: emailSchedule.subject,\n        text: emailSchedule.content\n      })\n    });\n\n    this.schedulerRegistry.addCronJob(`${Date.now()}-${emailSchedule.subject}`, job);\n    job.start();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EmailService.html":{"url":"injectables/EmailService.html","title":"injectable - EmailService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  EmailService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/email/email.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                nodemailerTransport\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                sendMail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/email/email.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        sendMail\n                        \n                    \n                \n            \n            \n                \nsendMail(options: Mail.Options)\n                \n            \n\n\n            \n                \n                    Defined in src/email/email.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                            Mail.Options\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        nodemailerTransport\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Mail\n\n                    \n                \n                    \n                        \n                                Defined in src/email/email.service.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { createTransport } from 'nodemailer';\nimport * as Mail from 'nodemailer/lib/mailer';\nimport { ConfigService } from '@nestjs/config';\n\n@Injectable()\nexport default class EmailService {\n  private nodemailerTransport: Mail;\n\n  constructor(\n    private readonly configService: ConfigService\n  ) {\n    this.nodemailerTransport = createTransport({\n      service: configService.get('EMAIL_SERVICE'),\n      auth: {\n        user: configService.get('EMAIL_USER'),\n        pass: configService.get('EMAIL_PASSWORD'),\n      }\n    });\n  }\n\n  sendMail(options: Mail.Options) {\n    return this.nodemailerTransport.sendMail(options);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ExcludeNullInterceptor.html":{"url":"injectables/ExcludeNullInterceptor.html","title":"injectable - ExcludeNullInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ExcludeNullInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/excludeNull.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/utils/excludeNull.interceptor.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestInterceptor, ExecutionContext, CallHandler } from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport recursivelyStripNullValues from './recursivelyStripNullValues';\n\n@Injectable()\nexport class ExcludeNullInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    return next\n      .handle()\n      .pipe(map(value => recursivelyStripNullValues(value)));\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FilesModule.html":{"url":"modules/FilesModule.html","title":"module - FilesModule","body":"\n                   \n\n\n\n\n    Modules\n    FilesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_FilesModule\n\n\n\ncluster_FilesModule_providers\n\n\n\ncluster_FilesModule_exports\n\n\n\n\nFilesService \n\nFilesService \n\n\n\nFilesModule\n\nFilesModule\n\nFilesService  -->\n\nFilesModule->FilesService \n\n\n\n\n\nFilesService\n\nFilesService\n\nFilesModule -->\n\nFilesService->FilesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/files/files.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            FilesService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            FilesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { FilesService } from './files.service';\nimport { ConfigModule } from '@nestjs/config';\nimport PublicFile from './publicFile.entity';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([PublicFile]),\n    ConfigModule,\n  ],\n  providers: [FilesService],\n  exports: [FilesService]\n})\nexport class FilesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FilesService.html":{"url":"injectables/FilesService.html","title":"injectable - FilesService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  FilesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/files/files.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deletePublicFile\n                            \n                            \n                                    Async\n                                deletePublicFileWithQueryRunner\n                            \n                            \n                                    Async\n                                uploadPublicFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(publicFilesRepository: Repository, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/files/files.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        publicFilesRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deletePublicFile\n                        \n                    \n                \n            \n            \n                \n                    \n                    deletePublicFile(fileId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/files/files.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fileId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deletePublicFileWithQueryRunner\n                        \n                    \n                \n            \n            \n                \n                    \n                    deletePublicFileWithQueryRunner(fileId: number, queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/files/files.service.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fileId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadPublicFile\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadPublicFile(dataBuffer: Buffer, filename: string)\n                \n            \n\n\n            \n                \n                    Defined in src/files/files.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataBuffer\n                                    \n                                            Buffer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    filename\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository, QueryRunner } from 'typeorm';\nimport PublicFile from './publicFile.entity';\nimport { S3 } from 'aws-sdk';\nimport { ConfigService } from '@nestjs/config';\nimport { v4 as uuid } from 'uuid';\n\n@Injectable()\nexport class FilesService {\n  constructor(\n    @InjectRepository(PublicFile)\n    private publicFilesRepository: Repository,\n    private readonly configService: ConfigService\n  ) {}\n\n  async uploadPublicFile(dataBuffer: Buffer, filename: string) {\n    const s3 = new S3();\n    const uploadResult = await s3.upload({\n      Bucket: this.configService.get('AWS_PUBLIC_BUCKET_NAME'),\n      Body: dataBuffer,\n      Key: `${uuid()}-${filename}`\n    })\n      .promise();\n\n    const newFile = this.publicFilesRepository.create({\n      key: uploadResult.Key,\n      url: uploadResult.Location\n    });\n    await this.publicFilesRepository.save(newFile);\n    return newFile;\n  }\n\n  async deletePublicFile(fileId: number) {\n    const file = await this.publicFilesRepository.findOne({ id: fileId });\n    const s3 = new S3();\n    await s3.deleteObject({\n      Bucket: this.configService.get('AWS_PUBLIC_BUCKET_NAME'),\n      Key: file.key,\n    }).promise();\n    await this.publicFilesRepository.delete(fileId);\n  }\n\n  async deletePublicFileWithQueryRunner(fileId: number, queryRunner: QueryRunner) {\n    const file = await queryRunner.manager.findOne(PublicFile, { id: fileId });\n    const s3 = new S3();\n    await s3.deleteObject({\n      Bucket: this.configService.get('AWS_PUBLIC_BUCKET_NAME'),\n      Key: file.key,\n    }).promise();\n    await queryRunner.manager.delete(PublicFile, fileId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FindOneParams.html":{"url":"classes/FindOneParams.html","title":"class - FindOneParams","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FindOneParams\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/findOneParams.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumberString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/findOneParams.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNumberString } from 'class-validator';\n\nclass FindOneParams {\n  @IsNumberString()\n  id: string;\n}\n\nexport default FindOneParams\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetCommentsDto.html":{"url":"classes/GetCommentsDto.html","title":"class - GetCommentsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetCommentsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/comments/dto/getComments.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                postId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        postId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Type(undefined)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/comments/dto/getComments.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional } from 'class-validator';\nimport { Type } from 'class-transformer';\n\nclass GetCommentsDto {\n  @Type(() => Number)\n  @IsOptional()\n  postId?: number;\n}\n\nexport default GetCommentsDto\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetCommentsHandler.html":{"url":"classes/GetCommentsHandler.html","title":"class - GetCommentsHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetCommentsHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/comments/queries/handlers/getComments.handler.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        IQueryHandler\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                execute\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(commentsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/comments/queries/handlers/getComments.handler.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        commentsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        execute\n                        \n                    \n                \n            \n            \n                \n                    \n                    execute(query: GetCommentsQuery)\n                \n            \n\n\n            \n                \n                    Defined in src/comments/queries/handlers/getComments.handler.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                GetCommentsQuery\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { IQueryHandler, QueryHandler } from '@nestjs/cqrs';\nimport { GetCommentsQuery } from '../implementations/getComments.query';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport Comment from '../../comment.entity';\nimport { Repository } from 'typeorm';\n\n@QueryHandler(GetCommentsQuery)\nexport class GetCommentsHandler implements IQueryHandler {\n  constructor(\n    @InjectRepository(Comment)\n    private commentsRepository: Repository,\n  ) {}\n\n  async execute(query: GetCommentsQuery) {\n    if (query.postId) {\n      return this.commentsRepository.find({\n        post: {\n          id: query.postId\n        }\n      });\n    }\n    return this.commentsRepository.find();\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetCommentsQuery.html":{"url":"classes/GetCommentsQuery.html","title":"class - GetCommentsQuery","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetCommentsQuery\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/comments/queries/implementations/getComments.query.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                postId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(postId?: number)\n                    \n                \n                        \n                            \n                                Defined in src/comments/queries/implementations/getComments.query.ts:1\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        postId\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        postId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/comments/queries/implementations/getComments.query.ts:3\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class GetCommentsQuery {\n  constructor(\n    public readonly postId?: number,\n  ) {}\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/GoogleAuthenticationController.html":{"url":"controllers/GoogleAuthenticationController.html","title":"controller - GoogleAuthenticationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  GoogleAuthenticationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/googleAuthentication/googleAuthentication.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                google-authentication\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                authenticate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        authenticate\n                        \n                    \n                \n            \n            \n                \n                    \n                    authenticate(tokenData: TokenVerificationDto, request: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/googleAuthentication/googleAuthentication.controller.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tokenData\n                                    \n                                                TokenVerificationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  ClassSerializerInterceptor, UseInterceptors, Body, Req,\n} from '@nestjs/common';\nimport TokenVerificationDto from './tokenVerification.dto';\nimport { GoogleAuthenticationService } from './googleAuthentication.service';\nimport { Request } from 'express';\n\n@Controller('google-authentication')\n@UseInterceptors(ClassSerializerInterceptor)\nexport class GoogleAuthenticationController {\n  constructor(\n    private readonly googleAuthenticationService: GoogleAuthenticationService\n  ) {\n  }\n\n  @Post()\n  async authenticate(@Body() tokenData: TokenVerificationDto, @Req() request: Request) {\n    const {\n      accessTokenCookie,\n      refreshTokenCookie,\n      user\n    } = await this.googleAuthenticationService.authenticate(tokenData.token);\n\n    request.res.setHeader('Set-Cookie', [accessTokenCookie, refreshTokenCookie]);\n\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/GoogleAuthenticationModule.html":{"url":"modules/GoogleAuthenticationModule.html","title":"module - GoogleAuthenticationModule","body":"\n                   \n\n\n\n\n    Modules\n    GoogleAuthenticationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_GoogleAuthenticationModule\n\n\n\ncluster_GoogleAuthenticationModule_providers\n\n\n\ncluster_GoogleAuthenticationModule_imports\n\n\n\n\nAuthenticationModule\n\nAuthenticationModule\n\n\n\nGoogleAuthenticationModule\n\nGoogleAuthenticationModule\n\nGoogleAuthenticationModule -->\n\nAuthenticationModule->GoogleAuthenticationModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nGoogleAuthenticationModule -->\n\nUsersModule->GoogleAuthenticationModule\n\n\n\n\n\nGoogleAuthenticationService\n\nGoogleAuthenticationService\n\nGoogleAuthenticationModule -->\n\nGoogleAuthenticationService->GoogleAuthenticationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/googleAuthentication/googleAuthentication.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            GoogleAuthenticationService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            GoogleAuthenticationController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthenticationModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { GoogleAuthenticationController } from './googleAuthentication.controller';\nimport { ConfigModule } from '@nestjs/config';\nimport { UsersModule } from '../users/users.module';\nimport { GoogleAuthenticationService } from './googleAuthentication.service';\nimport { AuthenticationModule } from '../authentication/authentication.module';\n\n@Module({\n  imports: [ConfigModule, UsersModule, AuthenticationModule],\n  providers: [GoogleAuthenticationService],\n  controllers: [GoogleAuthenticationController],\n  exports: []\n})\nexport class GoogleAuthenticationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GoogleAuthenticationService.html":{"url":"injectables/GoogleAuthenticationService.html","title":"injectable - GoogleAuthenticationService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  GoogleAuthenticationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/googleAuthentication/googleAuthentication.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                oauthClient\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                authenticate\n                            \n                            \n                                    Async\n                                getCookiesForUser\n                            \n                            \n                                    Async\n                                getUserData\n                            \n                            \n                                    Async\n                                handleRegisteredUser\n                            \n                            \n                                    Async\n                                registerUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, configService: ConfigService, authenticationService: AuthenticationService)\n                    \n                \n                        \n                            \n                                Defined in src/googleAuthentication/googleAuthentication.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authenticationService\n                                                  \n                                                        \n                                                                        AuthenticationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        authenticate\n                        \n                    \n                \n            \n            \n                \n                    \n                    authenticate(token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/googleAuthentication/googleAuthentication.service.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getCookiesForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCookiesForUser(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/googleAuthentication/googleAuthentication.service.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserData\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserData(token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/googleAuthentication/googleAuthentication.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        handleRegisteredUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleRegisteredUser(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/googleAuthentication/googleAuthentication.service.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        registerUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    registerUser(token: string, email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/googleAuthentication/googleAuthentication.service.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        oauthClient\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Auth.OAuth2Client\n\n                    \n                \n                    \n                        \n                                Defined in src/googleAuthentication/googleAuthentication.service.ts:10\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { UsersService } from '../users/users.service';\nimport { ConfigService } from '@nestjs/config';\nimport { google, Auth } from 'googleapis';\nimport { AuthenticationService } from '../authentication/authentication.service';\nimport User from '../users/user.entity';\n\n@Injectable()\nexport class GoogleAuthenticationService {\n  oauthClient: Auth.OAuth2Client;\n  constructor(\n    private readonly usersService: UsersService,\n    private readonly configService: ConfigService,\n    private readonly authenticationService: AuthenticationService\n  ) {\n    const clientID = this.configService.get('GOOGLE_AUTH_CLIENT_ID');\n    const clientSecret = this.configService.get('GOOGLE_AUTH_CLIENT_SECRET');\n\n    this.oauthClient = new google.auth.OAuth2(\n      clientID,\n      clientSecret\n    );\n  }\n\n  async getUserData(token: string) {\n    const userInfoClient = google.oauth2('v2').userinfo;\n\n    this.oauthClient.setCredentials({\n      access_token: token\n    })\n\n    const userInfoResponse = await userInfoClient.get({\n      auth: this.oauthClient\n    });\n\n    return userInfoResponse.data;\n  }\n\n  async getCookiesForUser(user: User) {\n    const accessTokenCookie = this.authenticationService.getCookieWithJwtAccessToken(user.id);\n    const {\n      cookie: refreshTokenCookie,\n      token: refreshToken\n    } = this.authenticationService.getCookieWithJwtRefreshToken(user.id);\n\n    await this.usersService.setCurrentRefreshToken(refreshToken, user.id);\n\n    return {\n      accessTokenCookie,\n      refreshTokenCookie\n    }\n  }\n\n  async handleRegisteredUser(user: User) {\n    if (!user.isRegisteredWithGoogle) {\n      throw new UnauthorizedException();\n    }\n\n    const {\n      accessTokenCookie,\n      refreshTokenCookie\n    } = await this.getCookiesForUser(user);\n\n    return {\n      accessTokenCookie,\n      refreshTokenCookie,\n      user\n    }\n  }\n\n  async registerUser(token: string, email: string) {\n    const userData = await this.getUserData(token);\n    const name = userData.name;\n\n    const user = await this.usersService.createWithGoogle(email, name);\n\n    return this.handleRegisteredUser(user);\n  }\n\n  async authenticate(token: string) {\n    const tokenInfo = await this.oauthClient.getTokenInfo(token);\n\n    const email = tokenInfo.email;\n\n    try {\n      const user = await this.usersService.getByEmail(email);\n\n      return this.handleRegisteredUser(user);\n    } catch (error) {\n      if (error.status !== 404) {\n        throw new error;\n      }\n\n      return this.registerUser(token, email);\n    }\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GraphqlJwtAuthGuard.html":{"url":"injectables/GraphqlJwtAuthGuard.html","title":"injectable - GraphqlJwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  GraphqlJwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/graphql-jwt-auth.guard.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getRequest\n                        \n                    \n                \n            \n            \n                \ngetRequest(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/graphql-jwt-auth.guard.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { AuthGuard } from '@nestjs/passport';\nimport { ExecutionContext, Injectable } from '@nestjs/common';\nimport { GqlExecutionContext } from '@nestjs/graphql';\n\n@Injectable()\nexport class GraphqlJwtAuthGuard extends AuthGuard('jwt') {\n  getRequest(context: ExecutionContext) {\n    const ctx = GqlExecutionContext.create(context);\n    return ctx.getContext().req;\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HealthController.html":{"url":"controllers/HealthController.html","title":"controller - HealthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HealthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/health/health.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                health\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                check\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        check\n                        \n                    \n                \n            \n            \n                \ncheck()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HealthCheck()\n                \n            \n\n            \n                \n                    Defined in src/health/health.controller.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport {\n  HealthCheckService,\n  HealthCheck,\n  TypeOrmHealthIndicator,\n  MemoryHealthIndicator,\n  DiskHealthIndicator,\n} from '@nestjs/terminus';\nimport { ElasticsearchHealthIndicator } from './elasticsearchHealthIndicator';\n\n\n@Controller('health')\nclass HealthController {\n  constructor(\n    private healthCheckService: HealthCheckService,\n    private typeOrmHealthIndicator: TypeOrmHealthIndicator,\n    private memoryHealthIndicator: MemoryHealthIndicator,\n    private diskHealthIndicator: DiskHealthIndicator,\n    private elasticsearchHealthIndicator: ElasticsearchHealthIndicator\n  ) {}\n\n  @Get()\n  @HealthCheck()\n  check() {\n    return this.healthCheckService.check([\n      () => this.typeOrmHealthIndicator.pingCheck('database'),\n      // the process should not use more than 300MB memory\n      () => this.memoryHealthIndicator.checkHeap('memory heap', 300 * 1024 * 1024),\n      // The process should not have more than 300MB RSS memory allocated\n      () => this.memoryHealthIndicator.checkRSS('memory RSS', 300 * 1024 * 1024),\n      // the used disk storage should not exceed the 50% of the available space\n      () => this.diskHealthIndicator.checkStorage('disk health', {\n        thresholdPercent: 0.5, path: '/'\n      }),\n      () => this.elasticsearchHealthIndicator.isHealthy('elasticsearch')\n    ]);\n  }\n}\n\nexport default HealthController;\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HealthModule.html":{"url":"modules/HealthModule.html","title":"module - HealthModule","body":"\n                   \n\n\n\n\n    Modules\n    HealthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_HealthModule\n\n\n\ncluster_HealthModule_providers\n\n\n\ncluster_HealthModule_imports\n\n\n\n\nSearchModule\n\nSearchModule\n\n\n\nHealthModule\n\nHealthModule\n\nHealthModule -->\n\nSearchModule->HealthModule\n\n\n\n\n\nElasticsearchHealthIndicator\n\nElasticsearchHealthIndicator\n\nHealthModule -->\n\nElasticsearchHealthIndicator->HealthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/health/health.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ElasticsearchHealthIndicator\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            HealthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            SearchModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport HealthController from './health.controller';\nimport { TerminusModule } from '@nestjs/terminus';\nimport { ElasticsearchHealthIndicator } from './elasticsearchHealthIndicator';\nimport { SearchModule } from '../search/search.module';\n\n@Module({\n  imports: [TerminusModule, SearchModule],\n  controllers: [HealthController],\n  providers: [ElasticsearchHealthIndicator],\n})\nexport default class HealthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HttpCacheInterceptor.html":{"url":"injectables/HttpCacheInterceptor.html","title":"injectable - HttpCacheInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  HttpCacheInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/httpCache.interceptor.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    CacheInterceptor\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                trackBy\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        trackBy\n                        \n                    \n                \n            \n            \n                \ntrackBy(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/posts/httpCache.interceptor.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { CACHE_KEY_METADATA, CacheInterceptor, ExecutionContext, Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class HttpCacheInterceptor extends CacheInterceptor {\n  trackBy(context: ExecutionContext): string | undefined {\n    const cacheKey = this.reflector.get(\n      CACHE_KEY_METADATA,\n      context.getHandler(),\n    );\n\n    if (cacheKey) {\n      const request = context.switchToHttp().getRequest();\n      return `${cacheKey}-${request._parsedUrl.query}`;\n    }\n\n    return super.trackBy(context);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthenticationGuard.html":{"url":"injectables/JwtAuthenticationGuard.html","title":"injectable - JwtAuthenticationGuard","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthenticationGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/jwt-authentication.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport default class JwtAuthenticationGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtRefreshGuard.html":{"url":"injectables/JwtRefreshGuard.html","title":"injectable - JwtRefreshGuard","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtRefreshGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/jwt-refresh.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport default class JwtRefreshGuard extends AuthGuard('jwt-refresh-token') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtRefreshTokenStrategy.html":{"url":"injectables/JwtRefreshTokenStrategy.html","title":"injectable - JwtRefreshTokenStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtRefreshTokenStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/jwt-refresh-token.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, userService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/authentication/jwt-refresh-token.strategy.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(request: Request, payload: TokenPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/jwt-refresh-token.strategy.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                                TokenPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { Request } from 'express';\nimport { UsersService } from '../users/users.service';\nimport TokenPayload from './tokenPayload.interface';\n\n@Injectable()\nexport class JwtRefreshTokenStrategy extends PassportStrategy(\n  Strategy,\n  'jwt-refresh-token'\n) {\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly userService: UsersService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromExtractors([(request: Request) => {\n        return request?.cookies?.Refresh;\n      }]),\n      secretOrKey: configService.get('JWT_REFRESH_TOKEN_SECRET'),\n      passReqToCallback: true,\n    });\n  }\n\n  async validate(request: Request, payload: TokenPayload) {\n    const refreshToken = request.cookies?.Refresh;\n    return this.userService.getUserIfRefreshTokenMatches(refreshToken, payload.userId);\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/jwt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, userService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/authentication/jwt.strategy.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: TokenPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/jwt.strategy.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                TokenPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { Request } from 'express';\nimport { UsersService } from '../users/users.service';\nimport TokenPayload from './tokenPayload.interface';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly userService: UsersService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromExtractors([(request: Request) => {\n        return request?.cookies?.Authentication;\n      }]),\n      secretOrKey: configService.get('JWT_ACCESS_TOKEN_SECRET')\n    });\n  }\n\n  async validate(payload: TokenPayload) {\n    return this.userService.getById(payload.userId);\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtTwoFactorGuard.html":{"url":"injectables/JwtTwoFactorGuard.html","title":"injectable - JwtTwoFactorGuard","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtTwoFactorGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/jwt-two-factor.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport default class JwtTwoFactorGuard extends AuthGuard('jwt-two-factor') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtTwoFactorStrategy.html":{"url":"injectables/JwtTwoFactorStrategy.html","title":"injectable - JwtTwoFactorStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtTwoFactorStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/jwt-two-factor.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, userService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/authentication/jwt-two-factor.strategy.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: TokenPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/jwt-two-factor.strategy.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                TokenPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { Request } from 'express';\nimport { UsersService } from '../users/users.service';\nimport TokenPayload from './tokenPayload.interface';\n\n@Injectable()\nexport class JwtTwoFactorStrategy extends PassportStrategy(\n  Strategy,\n  'jwt-two-factor'\n) {\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly userService: UsersService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromExtractors([(request: Request) => {\n        return request?.cookies?.Authentication;\n      }]),\n      secretOrKey: configService.get('JWT_ACCESS_TOKEN_SECRET')\n    });\n  }\n\n  async validate(payload: TokenPayload) {\n    const user = await this.userService.getById(payload.userId);\n    if (!user.isTwoFactorAuthenticationEnabled) {\n      return user;\n    }\n    if (payload.isSecondFactorAuthenticated) {\n      return user;\n    }\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthenticationGuard.html":{"url":"injectables/LocalAuthenticationGuard.html","title":"injectable - LocalAuthenticationGuard","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthenticationGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/localAuthentication.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class LocalAuthenticationGuard extends AuthGuard('local') {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/local.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authenticationService: AuthenticationService)\n                    \n                \n                        \n                            \n                                Defined in src/authentication/local.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authenticationService\n                                                  \n                                                        \n                                                                        AuthenticationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/local.strategy.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Strategy } from 'passport-local';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { AuthenticationService } from './authentication.service';\nimport User from '../users/user.entity';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(private authenticationService: AuthenticationService) {\n    super({\n      usernameField: 'email'\n    });\n  }\n  async validate(email: string, password: string): Promise {\n    return this.authenticationService.getAuthenticatedUser(email, password);\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Log.html":{"url":"classes/Log.html","title":"class - Log","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Log\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/logger/log.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                context\n                            \n                            \n                                creationDate\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                level\n                            \n                            \n                                    Public\n                                message\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        context\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/logger/log.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        creationDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/logger/log.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/logger/log.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        level\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/logger/log.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/logger/log.entity.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Column, CreateDateColumn, Entity, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity()\nclass Log {\n  @PrimaryGeneratedColumn()\n  public id: number;\n\n  @Column()\n  public context: string;\n\n  @Column()\n  public message: string;\n\n  @Column()\n  public level: string;\n\n  @CreateDateColumn()\n  creationDate: Date;\n}\n\nexport default Log;\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LogInDto.html":{"url":"classes/LogInDto.html","title":"class - LogInDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LogInDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/dto/logIn.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/dto/logIn.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(7)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/dto/logIn.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsString, IsNotEmpty, MinLength } from 'class-validator';\n\nexport class LogInDto {\n  @IsEmail()\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(7)\n  password: string;\n}\n\nexport default LogInDto;\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/LoggerModule.html":{"url":"modules/LoggerModule.html","title":"module - LoggerModule","body":"\n                   \n\n\n\n\n    Modules\n    LoggerModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_LoggerModule\n\n\n\ncluster_LoggerModule_providers\n\n\n\ncluster_LoggerModule_exports\n\n\n\n\nCustomLogger \n\nCustomLogger \n\n\n\nLoggerModule\n\nLoggerModule\n\nCustomLogger  -->\n\nLoggerModule->CustomLogger \n\n\n\n\n\nCustomLogger\n\nCustomLogger\n\nLoggerModule -->\n\nCustomLogger->LoggerModule\n\n\n\n\n\nLogsService\n\nLogsService\n\nLoggerModule -->\n\nLogsService->LoggerModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/logger/logger.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CustomLogger\n                        \n                        \n                            LogsService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CustomLogger\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport CustomLogger from './customLogger';\nimport { ConfigModule } from '@nestjs/config';\nimport LogsService from './logs.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport Log from './log.entity';\n\n@Module({\n  imports: [ConfigModule, TypeOrmModule.forFeature([Log])],\n  providers: [CustomLogger, LogsService],\n  exports: [CustomLogger],\n})\nexport class LoggerModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LogsMiddleware.html":{"url":"injectables/LogsMiddleware.html","title":"injectable - LogsMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LogsMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/logs.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(request: Request, response: Response, next: NextFunction)\n                \n            \n\n\n            \n                \n                    Defined in src/utils/logs.middleware.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            NextFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger('HTTP')\n                    \n                \n                    \n                        \n                                Defined in src/utils/logs.middleware.ts:6\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger, NestMiddleware } from '@nestjs/common';\nimport { Request, Response, NextFunction } from 'express';\n\n@Injectable()\nclass LogsMiddleware implements NestMiddleware {\n  private readonly logger = new Logger('HTTP');\n\n  use(request: Request, response: Response, next: NextFunction) {\n    response.on('finish', () => {\n      const { method, originalUrl } = request;\n      const { statusCode, statusMessage } = response;\n\n      const message = `${method} ${originalUrl} ${statusCode} ${statusMessage}`;\n\n      if (statusCode >= 500) {\n        return this.logger.error(message);\n      }\n\n      if (statusCode >= 400) {\n        return this.logger.warn(message);\n      }\n\n      return this.logger.log(message);\n    });\n\n    next();\n  }\n}\n\nexport default LogsMiddleware;\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LogsService.html":{"url":"injectables/LogsService.html","title":"injectable - LogsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LogsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/logger/logs.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createLog\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/logger/logs.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        logsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createLog\n                        \n                    \n                \n            \n            \n                \n                    \n                    createLog(log: CreateLogDto)\n                \n            \n\n\n            \n                \n                    Defined in src/logger/logs.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    log\n                                    \n                                                CreateLogDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport Log from './log.entity';\nimport CreateLogDto from './dto/createLog.dto';\n\n@Injectable()\nexport default class LogsService {\n  constructor(\n    @InjectRepository(Log)\n    private logsRepository: Repository\n  ) {}\n\n  async createLog(log: CreateLogDto) {\n    const newLog = await this.logsRepository.create(log);\n    await this.logsRepository.save(newLog, {\n      data: {\n        isCreatingLogs: true\n      }\n    });\n    return newLog;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Message.html":{"url":"classes/Message.html","title":"class - Message","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Message\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/chat/message.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                author\n                            \n                            \n                                    Public\n                                content\n                            \n                            \n                                    Public\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/chat/message.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/chat/message.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/chat/message.entity.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Column, Entity, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\nimport User from '../users/user.entity';\n\n@Entity()\nclass Message {\n  @PrimaryGeneratedColumn()\n  public id: number;\n\n  @Column()\n  public content: string;\n\n  @ManyToOne(() => User)\n  public author: User;\n}\n\nexport default Message;\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ObjectWithIdDto.html":{"url":"classes/ObjectWithIdDto.html","title":"class - ObjectWithIdDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ObjectWithIdDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/types/objectWithId.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/types/objectWithId.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNumber } from 'class-validator';\n\nclass ObjectWithIdDto {\n  @IsNumber()\n  id: number;\n}\n\nexport default ObjectWithIdDto;\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/OptimizeController.html":{"url":"controllers/OptimizeController.html","title":"controller - OptimizeController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  OptimizeController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/optimize/optimize.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                optimize\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getJobResult\n                            \n                            \n                                    Async\n                                processImage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getJobResult\n                        \n                    \n                \n            \n            \n                \n                    \n                    getJobResult(response: Response, id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('image/:id')\n                \n            \n\n            \n                \n                    Defined in src/optimize/optimize.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    response\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        processImage\n                        \n                    \n                \n            \n            \n                \n                    \n                    processImage(files: Express.Multer.File[])\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('image')@UseInterceptors(undefined)\n                \n            \n\n            \n                \n                    Defined in src/optimize/optimize.controller.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    files\n                                    \n                                            Express.Multer.File[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Param, Post,\n  Res, UploadedFiles, UseInterceptors,\n} from '@nestjs/common';\nimport { Response } from 'express';\nimport { InjectQueue } from '@nestjs/bull';\nimport { Queue } from 'bull';\nimport { Readable } from 'stream';\nimport { AnyFilesInterceptor } from '@nestjs/platform-express';\n\n@Controller('optimize')\nexport class OptimizeController {\n  constructor(\n    @InjectQueue('image') private readonly imageQueue: Queue,\n  ) {}\n\n  @Post('image')\n  @UseInterceptors(AnyFilesInterceptor())\n  async processImage(@UploadedFiles() files: Express.Multer.File[]) {\n    const job = await this.imageQueue.add('optimize', {\n      files\n    });\n\n    return {\n      jobId: job.id\n    }\n  }\n\n  @Get('image/:id')\n  async getJobResult(@Res() response: Response, @Param('id') id: string) {\n    const job = await this.imageQueue.getJob(id);\n\n    if (!job) {\n      return response.sendStatus(404);\n    }\n\n    const isCompleted = await job.isCompleted();\n\n    if (!isCompleted) {\n      return response.sendStatus(202);\n    }\n\n    const result = Buffer.from(job.returnvalue);\n\n    const stream = Readable.from(result);\n\n    stream.pipe(response);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/OptimizeModule.html":{"url":"modules/OptimizeModule.html","title":"module - OptimizeModule","body":"\n                   \n\n\n\n\n    Modules\n    OptimizeModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/optimize/optimize.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            OptimizeController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { OptimizeController } from './optimize.controller';\nimport { BullModule } from '@nestjs/bull';\nimport { join } from 'path';\n\n@Module({\n  imports: [\n    BullModule.registerQueue({\n      name: 'image',\n      processors: [{\n        name: 'optimize',\n        path: join(__dirname, 'image.processor.js')\n      }],\n    })\n  ],\n  providers: [],\n  exports: [],\n  controllers: [OptimizeController]\n})\nexport class OptimizeModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationParams.html":{"url":"classes/PaginationParams.html","title":"class - PaginationParams","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationParams\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/types/paginationParams.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                limit\n                            \n                            \n                                    Optional\n                                offset\n                            \n                            \n                                    Optional\n                                startId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Type(undefined)@IsNumber()@Min(1)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/types/paginationParams.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        offset\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Type(undefined)@IsNumber()@Min(0)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/types/paginationParams.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        startId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Type(undefined)@IsNumber()@Min(1)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/types/paginationParams.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNumber, Min, IsOptional } from 'class-validator';\nimport { Type } from 'class-transformer';\n\nexport class PaginationParams {\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  startId?: number;\n\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(0)\n  offset?: number;\n\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  limit?: number;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Post.html":{"url":"classes/Post.html","title":"class - Post","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Post\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/post.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                author\n                            \n                            \n                                    Public\n                                authorId\n                            \n                            \n                                    Public\n                                categories\n                            \n                            \n                                    Public\n                                    Optional\n                                category\n                            \n                            \n                                    Public\n                                comments\n                            \n                            \n                                createdAt\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                paragraphs\n                            \n                            \n                                    Optional\n                                scheduledDate\n                            \n                            \n                                    Public\n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Index('post_authorId_index')@ManyToOne(undefined, undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        authorId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @RelationId(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        categories\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Category[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, undefined)@JoinTable()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        comments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Comment[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({type: 'timestamp'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        paragraphs\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('text', {array: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        scheduledDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:23\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Column,\n  Entity,\n  JoinTable,\n  ManyToMany,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n  Index,\n  OneToMany,\n  RelationId,\n  CreateDateColumn\n} from 'typeorm';\nimport User from '../users/user.entity';\nimport Category from '../categories/category.entity';\nimport Comment from '../comments/comment.entity';\n\n@Entity()\nclass Post {\n  @PrimaryGeneratedColumn()\n  public id: number;\n\n  @Column()\n  public title: string;\n\n  @Column('text', { array: true })\n  public paragraphs: string[];\n\n  @Column({ nullable: true })\n  public category?: string;\n\n  @Index('post_authorId_index')\n  @ManyToOne(() => User, (author: User) => author.posts)\n  public author: User\n\n  @RelationId((post: Post) => post.author)\n  public authorId: number;\n\n  @ManyToMany(() => Category, (category: Category) => category.posts)\n  @JoinTable()\n  public categories: Category[];\n\n  @OneToMany(() => Comment, (comment: Comment) => comment.post)\n  public comments: Comment[];\n\n  @CreateDateColumn({ type: 'timestamp' })\n  createdAt: Date;\n\n  @Column({\n    type: 'timestamp',\n    nullable: true\n  })\n  scheduledDate?: Date;\n}\n\nexport default Post;\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Post-1.html":{"url":"classes/Post-1.html","title":"class - Post-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Post\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/models/post.model.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                author\n                            \n                            \n                                authorId\n                            \n                            \n                                createdAt\n                            \n                            \n                                id\n                            \n                            \n                                paragraphs\n                            \n                            \n                                    Optional\n                                scheduledDate\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/models/post.model.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        authorId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/models/post.model.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/models/post.model.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/models/post.model.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        paragraphs\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/models/post.model.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        scheduledDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/models/post.model.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/models/post.model.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, Int, ObjectType } from '@nestjs/graphql';\nimport { User } from '../../users/models/user.model';\n\n@ObjectType()\nexport class Post {\n  @Field(() => Int)\n  id: number;\n\n  @Field()\n  title: string;\n\n  @Field(() => [String])\n  paragraphs: string[];\n\n  @Field(() => Int)\n  authorId: number;\n\n  @Field()\n  author: User;\n\n  @Field()\n  createdAt: Date;\n\n  @Field({ nullable: true })\n  scheduledDate?: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PostCountResult.html":{"url":"interfaces/PostCountResult.html","title":"interface - PostCountResult","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PostCountResult\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/types/postCountBody.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            count\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        count\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        count:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        interface PostCountResult {\n  count: number\n}\n\nexport default PostCountResult\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PostNotFoundException.html":{"url":"classes/PostNotFoundException.html","title":"class - PostNotFoundException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PostNotFoundException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/exceptions/postNotFound.exception.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    NotFoundException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(postId: number)\n                    \n                \n                        \n                            \n                                Defined in src/posts/exceptions/postNotFound.exception.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        postId\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { NotFoundException } from '@nestjs/common';\n\nclass PostNotFoundException extends NotFoundException {\n  constructor(postId: number) {\n    super(`Post with id ${postId} not found`);\n  }\n}\n\nexport default PostNotFoundException;\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PostSearchBody.html":{"url":"interfaces/PostSearchBody.html","title":"interface - PostSearchBody","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PostSearchBody\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/types/postSearchBody.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            authorId\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            paragraphs\n                                        \n                                \n                                \n                                        \n                                            title\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        authorId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        authorId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        paragraphs\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        paragraphs:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        interface PostSearchBody {\n  id: number,\n  title: string,\n  paragraphs: string[],\n  authorId: number\n}\n\nexport default PostSearchBody\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PostSearchResult.html":{"url":"interfaces/PostSearchResult.html","title":"interface - PostSearchResult","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PostSearchResult\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/types/postSearchResponse.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            hits\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        hits\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        hits:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import PostSearchBody from './postSearchBody.interface';\n\ninterface PostSearchResult {\n  hits: {\n    total: {\n      value: number;\n    };\n    hits: Array;\n  };\n}\n\nexport default PostSearchResult\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createPost\n                            \n                            \n                                    Async\n                                deletePost\n                            \n                            \n                                getPostById\n                            \n                            \n                                    Async\n                                getPosts\n                            \n                            \n                                    Async\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    createPost(post: CreatePostDto, req: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UseGuards(JwtTwoFactorGuard)\n                \n            \n\n            \n                \n                    Defined in src/posts/posts.controller.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    post\n                                    \n                                                CreatePostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    deletePost(undefined: FindOneParams)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/posts/posts.controller.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                FindOneParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPostById\n                        \n                    \n                \n            \n            \n                \ngetPostById(undefined: FindOneParams)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/posts/posts.controller.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                FindOneParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPosts\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPosts(search: string, undefined: PaginationParams)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseInterceptors(HttpCacheInterceptor)@CacheKey(GET_POSTS_CACHE_KEY)@CacheTTL(120)@Get()\n                \n            \n\n            \n                \n                    Defined in src/posts/posts.controller.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    search\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                PaginationParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    updatePost(undefined: FindOneParams, post: UpdatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/posts/posts.controller.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                FindOneParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    post\n                                    \n                                                UpdatePostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Patch,\n  Post,\n  UseGuards,\n  Req,\n  UseInterceptors,\n  ClassSerializerInterceptor,\n  Query, CacheKey, CacheTTL,\n} from '@nestjs/common';\nimport PostsService from './posts.service';\nimport CreatePostDto from './dto/createPost.dto';\nimport UpdatePostDto from './dto/updatePost.dto';\nimport FindOneParams from '../utils/findOneParams';\nimport RequestWithUser from '../authentication/requestWithUser.interface';\nimport { PaginationParams } from '../utils/types/paginationParams';\nimport { HttpCacheInterceptor } from './httpCache.interceptor';\nimport { GET_POSTS_CACHE_KEY } from './postsCacheKey.constant';\nimport JwtTwoFactorGuard from '../authentication/jwt-two-factor.guard';\n\n@Controller('posts')\n@UseInterceptors(ClassSerializerInterceptor)\nexport default class PostsController {\n  constructor(\n    private readonly postsService: PostsService\n  ) {}\n\n  @UseInterceptors(HttpCacheInterceptor)\n  @CacheKey(GET_POSTS_CACHE_KEY)\n  @CacheTTL(120)\n  @Get()\n  async getPosts(\n    @Query('search') search: string,\n    @Query() { offset, limit, startId }: PaginationParams\n  ) {\n    if (search) {\n      return this.postsService.searchForPosts(search, offset, limit, startId);\n    }\n    return this.postsService.getPostsWithAuthors(offset, limit, startId);\n  }\n\n  @Get(':id')\n  getPostById(@Param() { id }: FindOneParams) {\n    return this.postsService.getPostById(Number(id));\n  }\n\n  @Post()\n  @UseGuards(JwtTwoFactorGuard)\n  async createPost(@Body() post: CreatePostDto, @Req() req: RequestWithUser) {\n    return this.postsService.createPost(post, req.user);\n  }\n\n  @Patch(':id')\n  async updatePost(@Param() { id }: FindOneParams, @Body() post: UpdatePostDto) {\n    return this.postsService.updatePost(Number(id), post);\n  }\n\n  @Delete(':id')\n  async deletePost(@Param() { id }: FindOneParams) {\n    return this.postsService.deletePost(Number(id));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsLoaders.html":{"url":"injectables/PostsLoaders.html","title":"injectable - PostsLoaders","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  PostsLoaders\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/loaders/posts.loaders.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                batchAuthors\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/posts/loaders/posts.loaders.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        batchAuthors\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new DataLoader(async (authorIds: number[]) => {\n    const users = await this.usersService.getByIds(authorIds);\n    const usersMap = new Map(users.map(user => [user.id, user]));\n    return authorIds.map(authorId => usersMap.get(authorId));\n  })\n                    \n                \n                    \n                        \n                                Defined in src/posts/loaders/posts.loaders.ts:12\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Scope } from '@nestjs/common';\nimport { UsersService } from '../../users/users.service';\nimport * as DataLoader from 'dataloader';\n\n@Injectable({ scope: Scope.REQUEST })\nexport default class PostsLoaders {\n  constructor(\n    private usersService: UsersService,\n  ) {\n  }\n\n  public readonly batchAuthors = new DataLoader(async (authorIds: number[]) => {\n    const users = await this.usersService.getByIds(authorIds);\n    const usersMap = new Map(users.map(user => [user.id, user]));\n    return authorIds.map(authorId => usersMap.get(authorId));\n  })\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_PostsModule_imports\n\n\n\n\nSearchModule\n\nSearchModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nSearchModule->PostsModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\n\n\nPostsLoaders\n\nPostsLoaders\n\nPostsModule -->\n\nPostsLoaders->PostsModule\n\n\n\n\n\nPostsSearchService\n\nPostsSearchService\n\nPostsModule -->\n\nPostsSearchService->PostsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsLoaders\n                        \n                        \n                            PostsSearchService\n                        \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            SearchModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import * as redisStore from 'cache-manager-redis-store';\nimport { CacheModule, Module } from '@nestjs/common';\nimport PostsController from './posts.controller';\nimport PostsService from './posts.service';\nimport Post from './post.entity';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { SearchModule } from '../search/search.module';\nimport PostsSearchService from './postsSearch.service';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { PostsResolver } from './posts.resolver';\nimport { UsersModule } from '../users/users.module';\nimport PostsLoaders from './loaders/posts.loaders';\n\n@Module({\n  imports: [\n    CacheModule.registerAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n        useFactory: (configService: ConfigService) => ({\n          store: redisStore,\n          host: configService.get('REDIS_HOST'),\n          port: configService.get('REDIS_PORT'),\n          ttl: 120\n        }),\n    }),\n    TypeOrmModule.forFeature([Post]),\n    SearchModule,\n    UsersModule,\n  ],\n  controllers: [PostsController],\n  providers: [PostsService, PostsSearchService, PostsResolver, PostsLoaders],\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PostsResolver.html":{"url":"classes/PostsResolver.html","title":"class - PostsResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PostsResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.resolver.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createPost\n                            \n                            \n                                postAdded\n                            \n                            \n                                    Async\n                                posts\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(postsService: PostsService, pubSub: RedisPubSub)\n                    \n                \n                        \n                            \n                                Defined in src/posts/posts.resolver.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        postsService\n                                                  \n                                                        \n                                                                        PostsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        pubSub\n                                                  \n                                                        \n                                                                    RedisPubSub\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    createPost(createPostInput: CreatePostInput, context: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(undefined)@UseGuards(GraphqlJwtAuthGuard)\n                \n            \n\n            \n                \n                    Defined in src/posts/posts.resolver.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createPostInput\n                                    \n                                                CreatePostInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        postAdded\n                        \n                    \n                \n            \n            \n                \npostAdded()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Subscription(undefined)\n                \n            \n\n            \n                \n                    Defined in src/posts/posts.resolver.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        posts\n                        \n                    \n                \n            \n            \n                \n                    \n                    posts(info: GraphQLResolveInfo)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query(undefined)\n                \n            \n\n            \n                \n                    Defined in src/posts/posts.resolver.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    info\n                                    \n                                            GraphQLResolveInfo\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Args, Context, Info, Mutation, Query, Resolver, Subscription } from '@nestjs/graphql';\nimport { Post } from './models/post.model';\nimport PostsService from './posts.service';\nimport { CreatePostInput } from './inputs/post.input';\nimport { Inject, UseGuards } from '@nestjs/common';\nimport RequestWithUser from '../authentication/requestWithUser.interface';\nimport { GraphqlJwtAuthGuard } from '../authentication/graphql-jwt-auth.guard';\nimport { parseResolveInfo, ResolveTree, simplifyParsedResolveInfoFragmentWithType } from 'graphql-parse-resolve-info';\nimport { GraphQLResolveInfo } from 'graphql';\nimport { RedisPubSub } from 'graphql-redis-subscriptions';\nimport { PUB_SUB } from '../pubSub/pubSub.module';\n\nconst POST_ADDED_EVENT = 'postAdded';\n\n@Resolver(() => Post)\nexport class PostsResolver {\n  constructor(\n    private postsService: PostsService,\n    @Inject(PUB_SUB) private pubSub: RedisPubSub\n  ) {}\n\n  @Query(() => [Post])\n  async posts(\n    @Info() info: GraphQLResolveInfo\n  ) {\n    const parsedInfo = parseResolveInfo(info) as ResolveTree;\n    const simplifiedInfo = simplifyParsedResolveInfoFragmentWithType(\n      parsedInfo,\n      info.returnType\n    );\n\n    const posts = 'author' in simplifiedInfo.fields\n      ? await this.postsService.getPostsWithAuthors()\n      : await this.postsService.getPosts();\n\n    return posts.items;\n  }\n\n  @Subscription(() => Post)\n  postAdded() {\n    return this.pubSub.asyncIterator(POST_ADDED_EVENT);\n  }\n\n  @Mutation(() => Post)\n  @UseGuards(GraphqlJwtAuthGuard)\n  async createPost(\n    @Args('input') createPostInput: CreatePostInput,\n    @Context() context: { req: RequestWithUser },\n  ) {\n    const newPost = await this.postsService.createPost(createPostInput, context.req.user);\n    this.pubSub.publish(POST_ADDED_EVENT, { postAdded: newPost });\n    return newPost;\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsSearchService.html":{"url":"injectables/PostsSearchService.html","title":"injectable - PostsSearchService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  PostsSearchService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/postsSearch.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                index\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                count\n                            \n                            \n                                    Async\n                                indexPost\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                search\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(elasticsearchService: ElasticsearchService)\n                    \n                \n                        \n                            \n                                Defined in src/posts/postsSearch.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        elasticsearchService\n                                                  \n                                                        \n                                                                    ElasticsearchService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        count\n                        \n                    \n                \n            \n            \n                \n                    \n                    count(query: string, fields: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/posts/postsSearch.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    fields\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        indexPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    indexPost(post: Post)\n                \n            \n\n\n            \n                \n                    Defined in src/posts/postsSearch.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    post\n                                    \n                                                Post\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(postId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/posts/postsSearch.service.ts:91\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    postId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        search\n                        \n                    \n                \n            \n            \n                \n                    \n                    search(text: string, offset?: number, limit?: number, startId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/posts/postsSearch.service.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    offset\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    limit\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    startId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        0\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(post: Post)\n                \n            \n\n\n            \n                \n                    Defined in src/posts/postsSearch.service.ts:104\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    post\n                                    \n                                                Post\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        index\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'posts'\n                    \n                \n                    \n                        \n                                Defined in src/posts/postsSearch.service.ts:10\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ElasticsearchService } from '@nestjs/elasticsearch';\nimport Post from './post.entity';\nimport PostSearchResult from './types/postSearchResponse.interface';\nimport PostSearchBody from './types/postSearchBody.interface';\nimport PostCountResult from './types/postCountBody.interface';\n\n@Injectable()\nexport default class PostsSearchService {\n  index = 'posts'\n\n  constructor(\n    private readonly elasticsearchService: ElasticsearchService\n  ) {}\n\n  async indexPost(post: Post) {\n    return this.elasticsearchService.index({\n      index: this.index,\n      body: {\n        id: post.id,\n        title: post.title,\n        paragraphs: post.paragraphs,\n        authorId: post.author.id\n      }\n    })\n  }\n\n  async count(query: string, fields: string[]) {\n    const { body } = await this.elasticsearchService.count({\n      index: this.index,\n      body: {\n        query: {\n          multi_match: {\n            query,\n            fields\n          }\n        }\n      }\n    })\n    return body.count;\n  }\n\n  async search(\n    text: string,\n    offset?: number,\n    limit?: number,\n    startId = 0\n  ) {\n    let separateCount = 0;\n    if (startId) {\n      separateCount = await this.count(text, ['title', 'paragraphs']);\n    }\n    const { body } = await this.elasticsearchService.search({\n      index: this.index,\n      from: offset,\n      size: limit,\n      body: {\n        query: {\n          bool: {\n            should: {\n              multi_match: {\n                query: text,\n                fields: ['title', 'paragraphs']\n              }\n            },\n            filter: {\n              range: {\n                id: {\n                  gt: startId\n                }\n              }\n            }\n          }\n        },\n        sort: {\n          id: {\n            order: 'asc'\n          }\n        }\n      }\n    })\n    const count = body.hits.total.value;\n    const hits = body.hits.hits;\n    const results = hits.map((item) => item._source);\n    return {\n      count: startId ? separateCount : count,\n      results\n    }\n  }\n\n  async remove(postId: number) {\n    this.elasticsearchService.deleteByQuery({\n      index: this.index,\n      body: {\n        query: {\n          match: {\n            id: postId,\n          }\n        }\n      }\n    })\n  }\n\n  async update(post: Post) {\n    const newBody: PostSearchBody = {\n      id: post.id,\n      title: post.title,\n      paragraphs: post.paragraphs,\n      authorId: post.author.id\n    }\n\n    const script = Object.entries(newBody).reduce((result, [key, value]) => {\n      return `${result} ctx._source.${key}='${value}';`;\n    }, '');\n\n    return this.elasticsearchService.updateByQuery({\n      index: this.index,\n      body: {\n        query: {\n          match: {\n            id: post.id,\n          }\n        },\n        script: {\n          inline: script\n        }\n      }\n    })\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                clearCache\n                            \n                            \n                                    Async\n                                createPost\n                            \n                            \n                                    Async\n                                deletePost\n                            \n                            \n                                    Async\n                                getPostById\n                            \n                            \n                                    Async\n                                getPosts\n                            \n                            \n                                    Async\n                                getPostsWithAuthors\n                            \n                            \n                                    Async\n                                searchForPosts\n                            \n                            \n                                    Async\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(postsRepository: Repository, postsSearchService: PostsSearchService, cacheManager: Cache)\n                    \n                \n                        \n                            \n                                Defined in src/posts/posts.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        postsRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        postsSearchService\n                                                  \n                                                        \n                                                                        PostsSearchService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cacheManager\n                                                  \n                                                        \n                                                                    Cache\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        clearCache\n                        \n                    \n                \n            \n            \n                \n                    \n                    clearCache()\n                \n            \n\n\n            \n                \n                    Defined in src/posts/posts.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    createPost(post: CreatePostDto, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/posts/posts.service.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    post\n                                    \n                                                CreatePostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    deletePost(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/posts/posts.service.ts:95\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPostById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPostById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/posts/posts.service.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPosts\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPosts(offset?: number, limit?: number, startId?: number, options?: FindManyOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/posts/posts.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    offset\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    limit\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    startId\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            FindManyOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPostsWithAuthors\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPostsWithAuthors(offset?: number, limit?: number, startId?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/posts/posts.service.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    offset\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    limit\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    startId\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        searchForPosts\n                        \n                    \n                \n            \n            \n                \n                    \n                    searchForPosts(text: string, offset?: number, limit?: number, startId?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/posts/posts.service.ts:104\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    offset\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    limit\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    startId\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    updatePost(id: number, post: UpdatePostDto)\n                \n            \n\n\n            \n                \n                    Defined in src/posts/posts.service.ts:84\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    post\n                                    \n                                                UpdatePostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(PostsService.name)\n                    \n                \n                    \n                        \n                                Defined in src/posts/posts.service.ts:16\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { CACHE_MANAGER, Inject, Injectable, Logger } from '@nestjs/common';\nimport CreatePostDto from './dto/createPost.dto';\nimport Post from './post.entity';\nimport UpdatePostDto from './dto/updatePost.dto';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository, In } from 'typeorm';\nimport PostNotFoundException from './exceptions/postNotFound.exception';\nimport User from '../users/user.entity';\nimport PostsSearchService from './postsSearch.service';\nimport { MoreThan, FindManyOptions } from 'typeorm';\nimport { Cache } from 'cache-manager';\nimport { GET_POSTS_CACHE_KEY } from './postsCacheKey.constant';\n\n@Injectable()\nexport default class PostsService {\n  private readonly logger = new Logger(PostsService.name)\n\n  constructor(\n    @InjectRepository(Post)\n    private postsRepository: Repository,\n    private postsSearchService: PostsSearchService,\n    @Inject(CACHE_MANAGER) private cacheManager: Cache\n  ) {}\n\n  async clearCache() {\n    const keys: string[] = await this.cacheManager.store.keys();\n    keys.forEach((key) => {\n      if (key.startsWith(GET_POSTS_CACHE_KEY)) {\n        this.cacheManager.del(key);\n      }\n    })\n  }\n\n  async getPosts(offset?: number, limit?: number, startId?: number, options?: FindManyOptions) {\n    const where: FindManyOptions['where'] = {};\n    let separateCount = 0;\n    if (startId) {\n      where.id = MoreThan(startId);\n      separateCount = await this.postsRepository.count();\n    }\n\n    const [items, count] = await this.postsRepository.findAndCount({\n      where,\n      order: {\n        id: 'ASC'\n      },\n      skip: offset,\n      take: limit,\n      ...options\n    });\n\n    return {\n      items,\n      count: startId ? separateCount : count\n    }\n  }\n\n  async getPostsWithAuthors(offset?: number, limit?: number, startId?: number) {\n    return this.getPosts(offset, limit, startId, {\n      relations: ['author'],\n    })\n  }\n\n  async getPostById(id: number) {\n    const post = await this.postsRepository.findOne(id, { relations: ['author'] });\n    if (post) {\n      return post;\n    }\n    this.logger.warn('Tried to access a post that does not exist');\n    throw new PostNotFoundException(id);\n  }\n\n  async createPost(post: CreatePostDto, user: User) {\n    const newPost = await this.postsRepository.create({\n      ...post,\n      author: user\n    });\n    await this.postsRepository.save(newPost);\n    this.postsSearchService.indexPost(newPost);\n    await this.clearCache();\n    return newPost;\n  }\n\n  async updatePost(id: number, post: UpdatePostDto) {\n    await this.postsRepository.update(id, post);\n    const updatedPost = await this.postsRepository.findOne(id, { relations: ['author'] });\n    if (updatedPost) {\n      await this.postsSearchService.update(updatedPost);\n      await this.clearCache();\n      return updatedPost;\n    }\n    throw new PostNotFoundException(id);\n  }\n\n  async deletePost(id: number) {\n    const deleteResponse = await this.postsRepository.delete(id);\n    if (!deleteResponse.affected) {\n      throw new PostNotFoundException(id);\n    }\n    await this.postsSearchService.remove(id);\n    await this.clearCache();\n  }\n\n  async searchForPosts(text: string, offset?: number, limit?: number, startId?: number) {\n    const { results, count } = await this.postsSearchService.search(text, offset, limit, startId);\n    const ids = results.map(result => result.id);\n    if (!ids.length) {\n      return {\n        items: [],\n        count\n      }\n    }\n    const items = await this.postsRepository\n      .find({\n        where: { id: In(ids) }\n      });\n    return {\n      items,\n      count\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Product.html":{"url":"classes/Product.html","title":"class - Product","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Product\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/product.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                category\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                properties\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ProductCategory\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/product.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/product.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/product.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        properties\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CarProperties | BookProperties\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'jsonb'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/product.entity.ts:20\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Column, Entity, PrimaryGeneratedColumn, ManyToOne } from 'typeorm';\nimport ProductCategory from '../productCategories/productCategory.entity';\nimport { CarProperties } from './types/carProperties.interface';\nimport { BookProperties } from './types/bookProperties.interface';\n\n@Entity()\nclass Product {\n  @PrimaryGeneratedColumn()\n  public id: number;\n\n  @Column()\n  public name: string;\n\n  @ManyToOne(() => ProductCategory, (category: ProductCategory) => category.products)\n  public category: ProductCategory;\n\n  @Column({\n    type: 'jsonb'\n  })\n  public properties: CarProperties | BookProperties;\n}\n\nexport default Product;\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ProductCategoriesController.html":{"url":"controllers/ProductCategoriesController.html","title":"controller - ProductCategoriesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ProductCategoriesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/productCategories/productCategories.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                product-categories\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createProduct\n                            \n                            \n                                getAllProducts\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createProduct\n                        \n                    \n                \n            \n            \n                \n                    \n                    createProduct(productCategory: CreateProductCategoryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/productCategories/productCategories.controller.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    productCategory\n                                    \n                                                CreateProductCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllProducts\n                        \n                    \n                \n            \n            \n                \ngetAllProducts()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/productCategories/productCategories.controller.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Get,\n  UseGuards,\n  UseInterceptors,\n  ClassSerializerInterceptor, Post,\n} from '@nestjs/common';\nimport JwtAuthenticationGuard from '../authentication/jwt-authentication.guard';\nimport ProductCategoriesService from './productCategories.service';\nimport CreateProductCategoryDto from './dto/createProductCategory.dto';\n\n@Controller('product-categories')\n@UseInterceptors(ClassSerializerInterceptor)\nexport default class ProductCategoriesController {\n  constructor(\n    private readonly productsService: ProductCategoriesService\n  ) {}\n\n  @Get()\n  getAllProducts() {\n    return this.productsService.getAllProductCategories();\n  }\n\n  @Post()\n  @UseGuards(JwtAuthenticationGuard)\n  async createProduct(@Body() productCategory: CreateProductCategoryDto) {\n    return this.productsService.createProductCategory(productCategory);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ProductCategoriesModule.html":{"url":"modules/ProductCategoriesModule.html","title":"module - ProductCategoriesModule","body":"\n                   \n\n\n\n\n    Modules\n    ProductCategoriesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ProductCategoriesModule\n\n\n\ncluster_ProductCategoriesModule_providers\n\n\n\n\nProductCategoriesService\n\nProductCategoriesService\n\n\n\nProductCategoriesModule\n\nProductCategoriesModule\n\nProductCategoriesModule -->\n\nProductCategoriesService->ProductCategoriesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/productCategories/productCategories.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ProductCategoriesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ProductCategoriesController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport ProductCategory from './productCategory.entity';\nimport ProductCategoriesController from './productCategories.controller';\nimport ProductCategoriesService from './productCategories.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([ProductCategory])],\n  controllers: [ProductCategoriesController],\n  providers: [ProductCategoriesService],\n})\nexport class ProductCategoriesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ProductCategoriesService.html":{"url":"injectables/ProductCategoriesService.html","title":"injectable - ProductCategoriesService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ProductCategoriesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/productCategories/productCategories.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createProductCategory\n                            \n                            \n                                getAllProductCategories\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(productCategoriesRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/productCategories/productCategories.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        productCategoriesRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createProductCategory\n                        \n                    \n                \n            \n            \n                \n                    \n                    createProductCategory(category: CreateProductCategoryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/productCategories/productCategories.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    category\n                                    \n                                                CreateProductCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllProductCategories\n                        \n                    \n                \n            \n            \n                \ngetAllProductCategories()\n                \n            \n\n\n            \n                \n                    Defined in src/productCategories/productCategories.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport ProductCategory from './productCategory.entity';\nimport CreateProductCategoryDto from './dto/createProductCategory.dto';\n\n@Injectable()\nexport default class ProductCategoriesService {\n  constructor(\n    @InjectRepository(ProductCategory)\n    private productCategoriesRepository: Repository\n  ) {}\n\n  getAllProductCategories() {\n    return this.productCategoriesRepository.find();\n  }\n\n  async createProductCategory(category: CreateProductCategoryDto) {\n    const newProductCategory = await this.productCategoriesRepository.create(category);\n    await this.productCategoriesRepository.save(newProductCategory);\n    return newProductCategory;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ProductCategory.html":{"url":"classes/ProductCategory.html","title":"class - ProductCategory","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ProductCategory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/productCategories/productCategory.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                products\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/productCategories/productCategory.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/productCategories/productCategory.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        products\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Product[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/productCategories/productCategory.entity.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Column, Entity, PrimaryGeneratedColumn, OneToMany } from 'typeorm';\nimport Product from '../products/product.entity';\n\n@Entity()\nclass ProductCategory {\n  @PrimaryGeneratedColumn()\n  public id: number;\n\n  @Column()\n  public name: string;\n\n  @OneToMany(() => Product, (product: Product) => product.category)\n  public products: Product[];\n}\n\nexport default ProductCategory;\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ProductsController.html":{"url":"controllers/ProductsController.html","title":"controller - ProductsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ProductsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/products.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                products\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createProduct\n                            \n                            \n                                getAllProducts\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createProduct\n                        \n                    \n                \n            \n            \n                \n                    \n                    createProduct(product: CreateProductDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/products/products.controller.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    product\n                                    \n                                                CreateProductDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllProducts\n                        \n                    \n                \n            \n            \n                \ngetAllProducts()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/products/products.controller.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Get,\n  UseGuards,\n  UseInterceptors,\n  ClassSerializerInterceptor, Post,\n} from '@nestjs/common';\nimport JwtAuthenticationGuard from '../authentication/jwt-authentication.guard';\nimport CreateProductDto from './dto/createProduct.dto';\nimport ProductsService from './products.service';\n\n@Controller('products')\n@UseInterceptors(ClassSerializerInterceptor)\nexport default class ProductsController {\n  constructor(\n    private readonly productsService: ProductsService\n  ) {}\n\n  @Get()\n  getAllProducts() {\n    return this.productsService.getAllProducts();\n  }\n\n  @Post()\n  @UseGuards(JwtAuthenticationGuard)\n  async createProduct(@Body() product: CreateProductDto) {\n    return this.productsService.createProduct(product);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ProductsModule.html":{"url":"modules/ProductsModule.html","title":"module - ProductsModule","body":"\n                   \n\n\n\n\n    Modules\n    ProductsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ProductsModule\n\n\n\ncluster_ProductsModule_providers\n\n\n\n\nProductsService\n\nProductsService\n\n\n\nProductsModule\n\nProductsModule\n\nProductsModule -->\n\nProductsService->ProductsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/products/products.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ProductsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ProductsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport Product from './product.entity';\nimport ProductsController from './products.controller';\nimport ProductsService from './products.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Product])],\n  controllers: [ProductsController],\n  providers: [ProductsService],\n})\nexport class ProductsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ProductsService.html":{"url":"injectables/ProductsService.html","title":"injectable - ProductsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ProductsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/products.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createProduct\n                            \n                            \n                                getAllProducts\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(productsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/products/products.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        productsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createProduct\n                        \n                    \n                \n            \n            \n                \n                    \n                    createProduct(product: CreateProductDto)\n                \n            \n\n\n            \n                \n                    Defined in src/products/products.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    product\n                                    \n                                                CreateProductDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllProducts\n                        \n                    \n                \n            \n            \n                \ngetAllProducts()\n                \n            \n\n\n            \n                \n                    Defined in src/products/products.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport Product from './product.entity';\nimport CreateProductDto from './dto/createProduct.dto';\n\n@Injectable()\nexport default class ProductsService {\n  constructor(\n    @InjectRepository(Product)\n    private productsRepository: Repository\n  ) {}\n\n  getAllProducts() {\n    return this.productsRepository.find();\n  }\n\n  async createProduct(product: CreateProductDto) {\n    const newProduct = await this.productsRepository.create(product);\n    await this.productsRepository.save(newProduct);\n    return newProduct;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PubSubModule.html":{"url":"modules/PubSubModule.html","title":"module - PubSubModule","body":"\n                   \n\n\n\n\n    Modules\n    PubSubModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/pubSub/pubSub.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { ConfigModule, ConfigService } from '@nestjs/config';\nimport { RedisPubSub } from 'graphql-redis-subscriptions';\nimport { Global, Module } from '@nestjs/common';\n\nexport const PUB_SUB = 'PUB_SUB';\n\n@Global()\n@Module({\n  imports: [ConfigModule],\n  providers: [\n    {\n      provide: PUB_SUB,\n      useFactory: (\n        configService: ConfigService\n      ) => new RedisPubSub({\n        connection: {\n          host: configService.get('REDIS_HOST'),\n          port: configService.get('REDIS_PORT'),\n        }\n      }),\n      inject: [ConfigService]\n    }\n  ],\n  exports: [PUB_SUB],\n})\nexport class PubSubModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PublicFile.html":{"url":"classes/PublicFile.html","title":"class - PublicFile","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PublicFile\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/files/publicFile.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                key\n                            \n                            \n                                    Public\n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/files/publicFile.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/files/publicFile.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/files/publicFile.entity.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity()\nclass PublicFile {\n  @PrimaryGeneratedColumn()\n  public id: number;\n\n  @Column()\n  public url: string;\n\n  @Column()\n  public key: string;\n}\n\nexport default PublicFile;\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterDto.html":{"url":"classes/RegisterDto.html","title":"class - RegisterDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/dto/register.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                            \n                                phoneNumber\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/dto/register.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/dto/register.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(7)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/dto/register.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@Matches(/^\\+[1-9]\\d{1,14}$/)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/dto/register.dto.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsString, IsNotEmpty, MinLength, Matches } from 'class-validator';\n\nexport class RegisterDto {\n  @IsEmail()\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  name: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(7)\n  password: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @Matches(/^\\+[1-9]\\d{1,14}$/)\n  phoneNumber: string;\n}\n\nexport default RegisterDto;\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RequestWithRawBody.html":{"url":"interfaces/RequestWithRawBody.html","title":"interface - RequestWithRawBody","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RequestWithRawBody\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stripeWebhook/requestWithRawBody.interface.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Request\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            rawBody\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        rawBody\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        rawBody:     Buffer\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Buffer\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Request } from 'express';\n\ninterface RequestWithRawBody extends Request {\n  rawBody: Buffer;\n}\n\nexport default RequestWithRawBody;\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RequestWithUser.html":{"url":"interfaces/RequestWithUser.html","title":"interface - RequestWithUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RequestWithUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/requestWithUser.interface.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Request\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:         User\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         User\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Request } from 'express';\nimport User from '../users/user.entity';\n\ninterface RequestWithUser extends Request {\n  user: User;\n}\n\nexport default RequestWithUser;\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SearchModule.html":{"url":"modules/SearchModule.html","title":"module - SearchModule","body":"\n                   \n\n\n\n\n    Modules\n    SearchModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/search/search.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { ElasticsearchModule } from '@nestjs/elasticsearch';\n\n@Module({\n  imports: [\n    ConfigModule,\n    ElasticsearchModule.registerAsync({\n      imports: [ConfigModule],\n      useFactory: async (configService: ConfigService) => ({\n        node: configService.get('ELASTICSEARCH_NODE'),\n        auth: {\n          username: configService.get('ELASTICSEARCH_USERNAME'),\n          password: configService.get('ELASTICSEARCH_PASSWORD'),\n        }\n      }),\n      inject: [ConfigService],\n    }),\n  ],\n  exports: [ElasticsearchModule]\n})\nexport class SearchModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SetDefaultCreditCardDto.html":{"url":"classes/SetDefaultCreditCardDto.html","title":"class - SetDefaultCreditCardDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SetDefaultCreditCardDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/credit-cards/dto/setDefaultCreditCard.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                paymentMethodId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        paymentMethodId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/credit-cards/dto/setDefaultCreditCard.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty } from 'class-validator';\n\nexport class SetDefaultCreditCardDto {\n  @IsString()\n  @IsNotEmpty()\n  paymentMethodId: string;\n}\n\nexport default SetDefaultCreditCardDto;\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SmsController.html":{"url":"controllers/SmsController.html","title":"controller - SmsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  SmsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/sms/sms.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                sms\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                checkVerificationCode\n                            \n                            \n                                    Async\n                                initiatePhoneNumberVerification\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        checkVerificationCode\n                        \n                    \n                \n            \n            \n                \n                    \n                    checkVerificationCode(request: RequestWithUser, verificationData: CheckVerificationCodeDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('check-verification-code')@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/sms/sms.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    verificationData\n                                    \n                                                CheckVerificationCodeDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        initiatePhoneNumberVerification\n                        \n                    \n                \n            \n            \n                \n                    \n                    initiatePhoneNumberVerification(request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('initiate-verification')@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/sms/sms.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  UseGuards,\n  UseInterceptors,\n  ClassSerializerInterceptor, Post, Req, BadRequestException,\n} from '@nestjs/common';\nimport SmsService from './sms.service';\nimport JwtAuthenticationGuard from '../authentication/jwt-authentication.guard';\nimport RequestWithUser from '../authentication/requestWithUser.interface';\nimport CheckVerificationCodeDto from './checkVerificationCode.dto';\n\n@Controller('sms')\n@UseInterceptors(ClassSerializerInterceptor)\nexport default class SmsController {\n  constructor(\n    private readonly smsService: SmsService\n  ) {}\n\n  @Post('initiate-verification')\n  @UseGuards(JwtAuthenticationGuard)\n  async initiatePhoneNumberVerification(@Req() request: RequestWithUser) {\n    if (request.user.isPhoneNumberConfirmed) {\n      throw new BadRequestException('Phone number already confirmed');\n    }\n    await this.smsService.initiatePhoneNumberVerification(request.user.phoneNumber);\n  }\n\n  @Post('check-verification-code')\n  @UseGuards(JwtAuthenticationGuard)\n  async checkVerificationCode(@Req() request: RequestWithUser, @Body() verificationData: CheckVerificationCodeDto) {\n    if (request.user.isPhoneNumberConfirmed) {\n      throw new BadRequestException('Phone number already confirmed');\n    }\n    await this.smsService.confirmPhoneNumber(request.user.id, request.user.phoneNumber, verificationData.code);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SmsModule.html":{"url":"modules/SmsModule.html","title":"module - SmsModule","body":"\n                   \n\n\n\n\n    Modules\n    SmsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_SmsModule\n\n\n\ncluster_SmsModule_providers\n\n\n\ncluster_SmsModule_exports\n\n\n\ncluster_SmsModule_imports\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nSmsModule\n\nSmsModule\n\nSmsModule -->\n\nUsersModule->SmsModule\n\n\n\n\n\nSmsService \n\nSmsService \n\nSmsService  -->\n\nSmsModule->SmsService \n\n\n\n\n\nSmsService\n\nSmsService\n\nSmsModule -->\n\nSmsService->SmsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/sms/sms.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SmsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            SmsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SmsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport SmsService from './sms.service';\nimport SmsController from './sms.controller';\nimport { UsersModule } from '../users/users.module';\n\n@Module({\n  imports: [ConfigModule, UsersModule],\n  controllers: [SmsController],\n  providers: [SmsService],\n  exports: [SmsService]\n})\nexport class SmsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SmsService.html":{"url":"injectables/SmsService.html","title":"injectable - SmsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  SmsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/sms/sms.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                twilioClient\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                confirmPhoneNumber\n                            \n                            \n                                initiatePhoneNumberVerification\n                            \n                            \n                                    Async\n                                sendMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/sms/sms.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        confirmPhoneNumber\n                        \n                    \n                \n            \n            \n                \n                    \n                    confirmPhoneNumber(userId: number, phoneNumber: string, verificationCode: string)\n                \n            \n\n\n            \n                \n                    Defined in src/sms/sms.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    phoneNumber\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    verificationCode\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        initiatePhoneNumberVerification\n                        \n                    \n                \n            \n            \n                \ninitiatePhoneNumberVerification(phoneNumber: string)\n                \n            \n\n\n            \n                \n                    Defined in src/sms/sms.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    phoneNumber\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        sendMessage\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendMessage(receiverPhoneNumber: string, message: string)\n                \n            \n\n\n            \n                \n                    Defined in src/sms/sms.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    receiverPhoneNumber\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        twilioClient\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Twilio\n\n                    \n                \n                    \n                        \n                                Defined in src/sms/sms.service.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { Twilio } from 'twilio';\nimport { UsersService } from '../users/users.service';\n\n@Injectable()\nexport default class SmsService {\n  private twilioClient: Twilio;\n\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly usersService: UsersService\n  ) {\n    const accountSid = configService.get('TWILIO_ACCOUNT_SID');\n    const authToken = configService.get('TWILIO_AUTH_TOKEN');\n\n    this.twilioClient = new Twilio(accountSid, authToken);\n  }\n\n  initiatePhoneNumberVerification(phoneNumber: string) {\n    const serviceSid = this.configService.get('TWILIO_VERIFICATION_SERVICE_SID');\n\n    return this.twilioClient.verify.services(serviceSid)\n      .verifications\n      .create({ to: phoneNumber, channel: 'sms' })\n  }\n\n  async confirmPhoneNumber(userId: number, phoneNumber: string, verificationCode: string) {\n    const serviceSid = this.configService.get('TWILIO_VERIFICATION_SERVICE_SID');\n\n    const result = await this.twilioClient.verify.services(serviceSid)\n      .verificationChecks\n      .create({to: phoneNumber, code: verificationCode})\n\n    if (!result.valid || result.status !== 'approved') {\n      throw new BadRequestException('Wrong code provided');\n    }\n\n    await this.usersService.markPhoneNumberAsConfirmed(userId)\n  }\n\n  async sendMessage(receiverPhoneNumber: string, message: string) {\n    const senderPhoneNumber = this.configService.get('TWILIO_SENDER_PHONE_NUMBER');\n\n    return this.twilioClient.messages\n      .create({ body: message, from: senderPhoneNumber, to: receiverPhoneNumber })\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StripeEvent.html":{"url":"classes/StripeEvent.html","title":"class - StripeEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StripeEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stripeWebhook/StripeEvent.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/stripeWebhook/StripeEvent.entity.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Entity, PrimaryColumn } from 'typeorm';\n\n@Entity()\nclass StripeEvent {\n  @PrimaryColumn()\n  public id: string;\n}\n\nexport default StripeEvent;\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StripeModule.html":{"url":"modules/StripeModule.html","title":"module - StripeModule","body":"\n                   \n\n\n\n\n    Modules\n    StripeModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_StripeModule\n\n\n\ncluster_StripeModule_providers\n\n\n\ncluster_StripeModule_exports\n\n\n\n\nStripeService \n\nStripeService \n\n\n\nStripeModule\n\nStripeModule\n\nStripeService  -->\n\nStripeModule->StripeService \n\n\n\n\n\nStripeService\n\nStripeService\n\nStripeModule -->\n\nStripeService->StripeModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/stripe/stripe.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            StripeService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            StripeService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport StripeService from './stripe.service';\nimport { ConfigModule } from '@nestjs/config';\n\n@Module({\n  imports: [ConfigModule],\n  providers: [StripeService],\n  exports: [StripeService]\n})\nexport class StripeModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StripeService.html":{"url":"injectables/StripeService.html","title":"injectable - StripeService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  StripeService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stripe/stripe.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                stripe\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                attachCreditCard\n                            \n                            \n                                    Public\n                                    Async\n                                charge\n                            \n                            \n                                    Public\n                                    Async\n                                constructEventFromPayload\n                            \n                            \n                                    Public\n                                    Async\n                                createCustomer\n                            \n                            \n                                    Public\n                                    Async\n                                createSubscription\n                            \n                            \n                                    Public\n                                    Async\n                                listCreditCards\n                            \n                            \n                                    Public\n                                    Async\n                                listSubscriptions\n                            \n                            \n                                    Public\n                                    Async\n                                setDefaultCreditCard\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/stripe/stripe.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        attachCreditCard\n                        \n                    \n                \n            \n            \n                \n                    \n                    attachCreditCard(paymentMethodId: string, customerId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/stripe/stripe.service.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    paymentMethodId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    customerId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        charge\n                        \n                    \n                \n            \n            \n                \n                    \n                    charge(amount: number, paymentMethodId: string, customerId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/stripe/stripe.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    amount\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    paymentMethodId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    customerId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        constructEventFromPayload\n                        \n                    \n                \n            \n            \n                \n                    \n                    constructEventFromPayload(signature: string, payload: Buffer)\n                \n            \n\n\n            \n                \n                    Defined in src/stripe/stripe.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    signature\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                            Buffer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createCustomer\n                        \n                    \n                \n            \n            \n                \n                    \n                    createCustomer(name: string, email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/stripe/stripe.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createSubscription\n                        \n                    \n                \n            \n            \n                \n                    \n                    createSubscription(priceId: string, customerId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/stripe/stripe.service.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    priceId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    customerId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        listCreditCards\n                        \n                    \n                \n            \n            \n                \n                    \n                    listCreditCards(customerId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/stripe/stripe.service.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    customerId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        listSubscriptions\n                        \n                    \n                \n            \n            \n                \n                    \n                    listSubscriptions(priceId: string, customerId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/stripe/stripe.service.ts:93\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    priceId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    customerId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        setDefaultCreditCard\n                        \n                    \n                \n            \n            \n                \n                    \n                    setDefaultCreditCard(paymentMethodId: string, customerId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/stripe/stripe.service.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    paymentMethodId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    customerId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        stripe\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Stripe\n\n                    \n                \n                    \n                        \n                                Defined in src/stripe/stripe.service.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, BadRequestException, InternalServerErrorException, NotFoundException } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport Stripe from 'stripe';\nimport StripeError from '../utils/stripeError.enum';\n\n@Injectable()\nexport default class StripeService {\n  private stripe: Stripe;\n\n  constructor(\n    private configService: ConfigService\n  ) {\n    this.stripe = new Stripe(configService.get('STRIPE_SECRET_KEY'), {\n      apiVersion: '2020-08-27',\n    });\n  }\n\n  public async constructEventFromPayload(signature: string, payload: Buffer) {\n    const webhookSecret = this.configService.get('STRIPE_WEBHOOK_SECRET');\n\n    return this.stripe.webhooks.constructEvent(\n      payload,\n      signature,\n      webhookSecret\n    );\n  }\n\n  public async createCustomer(name: string, email: string) {\n    return this.stripe.customers.create({\n      name,\n      email\n    });\n  }\n\n  public async charge(amount: number, paymentMethodId: string, customerId: string) {\n    return this.stripe.paymentIntents.create({\n      amount,\n      customer: customerId,\n      payment_method: paymentMethodId,\n      currency: this.configService.get('STRIPE_CURRENCY'),\n      off_session: true,\n      confirm: true\n    })\n  }\n\n  public async attachCreditCard(paymentMethodId: string, customerId: string) {\n    return this.stripe.setupIntents.create({\n      customer: customerId,\n      payment_method: paymentMethodId,\n    })\n  }\n\n  public async setDefaultCreditCard(paymentMethodId: string, customerId: string) {\n    try {\n      return await this.stripe.customers.update(customerId, {\n        invoice_settings: {\n          default_payment_method: paymentMethodId\n        }\n      })\n    } catch (error) {\n      if (error?.type === StripeError.InvalidRequest) {\n        throw new BadRequestException('Wrong credit card chosen');\n      }\n      throw new InternalServerErrorException();\n    }\n  }\n\n  public async listCreditCards(customerId: string) {\n    return this.stripe.paymentMethods.list({\n      customer: customerId,\n      type: 'card',\n    });\n  }\n\n  public async createSubscription(priceId: string, customerId: string,) {\n    try {\n      return await this.stripe.subscriptions.create({\n        customer: customerId,\n        items: [\n          {\n            price: priceId\n          }\n        ]\n      })\n    } catch (error) {\n      if (error?.code === StripeError.ResourceMissing) {\n        throw new BadRequestException('Credit card not set up');\n      }\n      throw new InternalServerErrorException();\n    }\n  }\n\n  public async listSubscriptions(priceId: string, customerId: string,) {\n    return this.stripe.subscriptions.list({\n      customer: customerId,\n      price: priceId,\n      expand: ['data.latest_invoice', 'data.latest_invoice.payment_intent']\n    })\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/StripeWebhookController.html":{"url":"controllers/StripeWebhookController.html","title":"controller - StripeWebhookController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  StripeWebhookController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stripeWebhook/stripeWebhook.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                webhook\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                handleIncomingEvents\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        handleIncomingEvents\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleIncomingEvents(signature: string, request: RequestWithRawBody)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/stripeWebhook/stripeWebhook.controller.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    signature\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    request\n                                    \n                                                RequestWithRawBody\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post, Headers, Req, BadRequestException } from '@nestjs/common';\nimport StripeService from '../stripe/stripe.service';\nimport RequestWithRawBody from './requestWithRawBody.interface';\nimport { UsersService } from '../users/users.service';\nimport StripeWebhookService from './stripeWebhook.service';\n\n@Controller('webhook')\nexport default class StripeWebhookController {\n  constructor(\n    private readonly stripeService: StripeService,\n    private readonly usersService: UsersService,\n    private readonly stripeWebhookService: StripeWebhookService\n  ) {}\n\n  @Post()\n  async handleIncomingEvents(\n    @Headers('stripe-signature') signature: string,\n    @Req() request: RequestWithRawBody\n  ) {\n    if (!signature) {\n      throw new BadRequestException('Missing stripe-signature header');\n    }\n\n    const event = await this.stripeService.constructEventFromPayload(signature, request.rawBody);\n\n    if (event.type === 'customer.subscription.updated' || event.type === 'customer.subscription.created') {\n      return this.stripeWebhookService.processSubscriptionUpdate(event);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StripeWebhookModule.html":{"url":"modules/StripeWebhookModule.html","title":"module - StripeWebhookModule","body":"\n                   \n\n\n\n\n    Modules\n    StripeWebhookModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_StripeWebhookModule\n\n\n\ncluster_StripeWebhookModule_imports\n\n\n\ncluster_StripeWebhookModule_providers\n\n\n\n\nStripeModule\n\nStripeModule\n\n\n\nStripeWebhookModule\n\nStripeWebhookModule\n\nStripeWebhookModule -->\n\nStripeModule->StripeWebhookModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nStripeWebhookModule -->\n\nUsersModule->StripeWebhookModule\n\n\n\n\n\nStripeWebhookService\n\nStripeWebhookService\n\nStripeWebhookModule -->\n\nStripeWebhookService->StripeWebhookModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/stripeWebhook/stripeWebhook.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            StripeWebhookService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            StripeWebhookController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            StripeModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport StripeWebhookController from './stripeWebhook.controller';\nimport { StripeModule } from '../stripe/stripe.module';\nimport { UsersModule } from '../users/users.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport StripeEvent from './StripeEvent.entity';\nimport StripeWebhookService from './stripeWebhook.service';\n\n@Module({\n  imports: [\n    StripeModule,\n    UsersModule,\n    TypeOrmModule.forFeature([StripeEvent]),\n  ],\n  controllers: [StripeWebhookController],\n  providers: [StripeWebhookService],\n})\nexport class StripeWebhookModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StripeWebhookService.html":{"url":"injectables/StripeWebhookService.html","title":"injectable - StripeWebhookService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  StripeWebhookService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stripeWebhook/stripeWebhook.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createEvent\n                            \n                            \n                                    Async\n                                processSubscriptionUpdate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(eventsRepository: Repository, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/stripeWebhook/stripeWebhook.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        eventsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createEvent\n                        \n                    \n                \n            \n            \n                \ncreateEvent(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/stripeWebhook/stripeWebhook.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        processSubscriptionUpdate\n                        \n                    \n                \n            \n            \n                \n                    \n                    processSubscriptionUpdate(event: Stripe.Event)\n                \n            \n\n\n            \n                \n                    Defined in src/stripeWebhook/stripeWebhook.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                            Stripe.Event\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport StripeEvent from './StripeEvent.entity';\nimport { Repository } from 'typeorm';\nimport Stripe from 'stripe';\nimport PostgresErrorCode from '../database/postgresErrorCode.enum';\nimport { UsersService } from '../users/users.service';\n\n@Injectable()\nexport default class StripeWebhookService {\n  constructor(\n    @InjectRepository(StripeEvent)\n    private eventsRepository: Repository,\n    private readonly usersService: UsersService,\n  ) {}\n\n  createEvent(id: string) {\n    return this.eventsRepository.insert({ id });\n  }\n\n  async processSubscriptionUpdate(event: Stripe.Event) {\n    try {\n      await this.createEvent(event.id);\n    } catch (error) {\n      if (error?.code === PostgresErrorCode.UniqueViolation) {\n        throw new BadRequestException('This event was already processed');\n      }\n    }\n\n    const data = event.data.object as Stripe.Subscription;\n\n    const customerId: string = data.customer as string;\n    const subscriptionStatus = data.status;\n\n    await this.usersService.updateMonthlySubscriptionStatus(customerId, subscriptionStatus);\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Subscriber.html":{"url":"interfaces/Subscriber.html","title":"interface - Subscriber","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Subscriber\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/subscribers/subscriber.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Subscriber {\n  id: number;\n  email: string;\n  name: string;\n}\n\nexport default Subscriber;\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SubscribersController.html":{"url":"controllers/SubscribersController.html","title":"controller - SubscribersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  SubscribersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/subscribers/subscribers.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                subscribers\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createPost\n                            \n                            \n                                    Async\n                                getSubscribers\n                            \n                            \n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    createPost(subscriber: CreateSubscriberDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/subscribers/subscribers.controller.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    subscriber\n                                    \n                                                CreateSubscriberDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getSubscribers\n                        \n                    \n                \n            \n            \n                \n                    \n                    getSubscribers()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/subscribers/subscribers.controller.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \nonModuleInit()\n                \n            \n\n\n            \n                \n                    Defined in src/subscribers/subscribers.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Get,\n  Post,\n  UseGuards,\n  UseInterceptors,\n  ClassSerializerInterceptor, Inject, OnModuleInit,\n} from '@nestjs/common';\nimport JwtAuthenticationGuard from '../authentication/jwt-authentication.guard';\nimport CreateSubscriberDto from './dto/createSubscriber.dto';\nimport { ClientGrpc } from '@nestjs/microservices';\nimport SubscribersService from './subscribers.service.interface';\n\n@Controller('subscribers')\n@UseInterceptors(ClassSerializerInterceptor)\nexport default class SubscribersController implements OnModuleInit {\n  private subscribersService: SubscribersService;\n\n  constructor(@Inject('SUBSCRIBERS_PACKAGE') private client: ClientGrpc) {}\n\n  onModuleInit() {\n    this.subscribersService = this.client.getService('SubscribersService');\n  }\n\n  @Get()\n  async getSubscribers() {\n    return this.subscribersService.getAllSubscribers({});\n  }\n\n  @Post()\n  @UseGuards(JwtAuthenticationGuard)\n  async createPost(@Body() subscriber: CreateSubscriberDto) {\n    return this.subscribersService.addSubscriber(subscriber);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SubscribersModule.html":{"url":"modules/SubscribersModule.html","title":"module - SubscribersModule","body":"\n                   \n\n\n\n\n    Modules\n    SubscribersModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/subscribers/subscribers.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            SubscribersController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport SubscribersController from './subscribers.controller';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { ClientProxyFactory, Transport } from '@nestjs/microservices';\nimport { join } from \"path\";\n\n@Module({\n  imports: [ConfigModule],\n  controllers: [SubscribersController],\n  providers: [\n    {\n      provide: 'SUBSCRIBERS_PACKAGE',\n      useFactory: (configService: ConfigService) => {\n        return ClientProxyFactory.create({\n          transport: Transport.GRPC,\n          options: {\n            package: 'subscribers',\n            protoPath: join(process.cwd(), 'src/subscribers/subscribers.proto'),\n            url: configService.get('GRPC_CONNECTION_URL')\n          },\n        })\n      },\n      inject: [ConfigService],\n    }\n  ],\n})\nexport class SubscribersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SubscribersService.html":{"url":"interfaces/SubscribersService.html","title":"interface - SubscribersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SubscribersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/subscribers/subscribers.service.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        addSubscriber\n                                    \n                                \n                                \n                                    \n                                        getAllSubscribers\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addSubscriber\n                        \n                    \n                \n            \n            \n                \naddSubscriber(subscriber: CreateSubscriberDto)\n                \n            \n\n\n            \n                \n                    Defined in src/subscribers/subscribers.service.interface.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    subscriber\n                                    \n                                                CreateSubscriberDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllSubscribers\n                        \n                    \n                \n            \n            \n                \ngetAllSubscribers(params: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/subscribers/subscribers.service.interface.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import CreateSubscriberDto from './dto/createSubscriber.dto';\nimport Subscriber from './subscriber.service';\n\ninterface SubscribersService {\n  addSubscriber(subscriber: CreateSubscriberDto): Promise\n  getAllSubscribers(params: {}): Promise\n}\n\nexport default SubscribersService;\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SubscriptionsController.html":{"url":"controllers/SubscriptionsController.html","title":"controller - SubscriptionsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  SubscriptionsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/subscriptions/subscriptions.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                subscriptions\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createMonthlySubscription\n                            \n                            \n                                    Async\n                                getMonthlySubscription\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createMonthlySubscription\n                        \n                    \n                \n            \n            \n                \n                    \n                    createMonthlySubscription(request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('monthly')@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/subscriptions/subscriptions.controller.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getMonthlySubscription\n                        \n                    \n                \n            \n            \n                \n                    \n                    getMonthlySubscription(request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('monthly')@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/subscriptions/subscriptions.controller.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post, Req, UseGuards, Get } from '@nestjs/common';\nimport JwtAuthenticationGuard from '../authentication/jwt-authentication.guard';\nimport RequestWithUser from '../authentication/requestWithUser.interface';\nimport SubscriptionsService from './subscriptions.service';\n\n@Controller('subscriptions')\nexport default class SubscriptionsController {\n  constructor(\n    private readonly subscriptionsService: SubscriptionsService\n  ) {}\n\n  @Post('monthly')\n  @UseGuards(JwtAuthenticationGuard)\n  async createMonthlySubscription(@Req() request: RequestWithUser) {\n    return this.subscriptionsService.createMonthlySubscription(request.user.stripeCustomerId);\n  }\n\n  @Get('monthly')\n  @UseGuards(JwtAuthenticationGuard)\n  async getMonthlySubscription(@Req() request: RequestWithUser) {\n    return this.subscriptionsService.getMonthlySubscription(request.user.stripeCustomerId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SubscriptionsModule.html":{"url":"modules/SubscriptionsModule.html","title":"module - SubscriptionsModule","body":"\n                   \n\n\n\n\n    Modules\n    SubscriptionsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_SubscriptionsModule\n\n\n\ncluster_SubscriptionsModule_imports\n\n\n\ncluster_SubscriptionsModule_providers\n\n\n\n\nStripeModule\n\nStripeModule\n\n\n\nSubscriptionsModule\n\nSubscriptionsModule\n\nSubscriptionsModule -->\n\nStripeModule->SubscriptionsModule\n\n\n\n\n\nSubscriptionsService\n\nSubscriptionsService\n\nSubscriptionsModule -->\n\nSubscriptionsService->SubscriptionsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/subscriptions/subscriptions.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SubscriptionsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            SubscriptionsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            StripeModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { StripeModule } from '../stripe/stripe.module';\nimport { ConfigModule } from '@nestjs/config';\nimport SubscriptionsController from './subscriptions.controller';\nimport SubscriptionsService from './subscriptions.service';\n\n@Module({\n  imports: [StripeModule, ConfigModule],\n  controllers: [SubscriptionsController],\n  providers: [SubscriptionsService],\n})\nexport class SubscriptionsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SubscriptionsService.html":{"url":"injectables/SubscriptionsService.html","title":"injectable - SubscriptionsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  SubscriptionsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/subscriptions/subscriptions.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createMonthlySubscription\n                            \n                            \n                                    Public\n                                    Async\n                                getMonthlySubscription\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(stripeService: StripeService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/subscriptions/subscriptions.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        stripeService\n                                                  \n                                                        \n                                                                        StripeService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createMonthlySubscription\n                        \n                    \n                \n            \n            \n                \n                    \n                    createMonthlySubscription(customerId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/subscriptions/subscriptions.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    customerId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getMonthlySubscription\n                        \n                    \n                \n            \n            \n                \n                    \n                    getMonthlySubscription(customerId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/subscriptions/subscriptions.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    customerId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable, NotFoundException } from '@nestjs/common';\nimport StripeService from '../stripe/stripe.service';\nimport { ConfigService } from '@nestjs/config';\n\n@Injectable()\nexport default class SubscriptionsService {\n  constructor(\n    private readonly stripeService: StripeService,\n    private readonly configService: ConfigService\n  ) {}\n\n  public async createMonthlySubscription(customerId: string) {\n    const priceId = this.configService.get('MONTHLY_SUBSCRIPTION_PRICE_ID');\n\n    const subscriptions = await this.stripeService.listSubscriptions(priceId, customerId);\n    if (subscriptions.data.length) {\n      throw new BadRequestException('Customer already subscribed');\n    }\n    return this.stripeService.createSubscription(priceId, customerId);\n  }\n\n  public async getMonthlySubscription(customerId: string) {\n    const priceId = this.configService.get('MONTHLY_SUBSCRIPTION_PRICE_ID');\n    const subscriptions = await this.stripeService.listSubscriptions(priceId, customerId);\n\n    if (!subscriptions.data.length) {\n      return new NotFoundException('Customer not subscribed');\n    }\n    return subscriptions.data[0];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Timestamp.html":{"url":"classes/Timestamp.html","title":"class - Timestamp","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Timestamp\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/scalars/timestamp.scalar.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        CustomScalar\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                description\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                parseLiteral\n                            \n                            \n                                parseValue\n                            \n                            \n                                serialize\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '`Date` type as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.'\n                    \n                \n                    \n                        \n                                Defined in src/utils/scalars/timestamp.scalar.ts:6\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        parseLiteral\n                        \n                    \n                \n            \n            \n                \nparseLiteral(valueNode: ValueNode)\n                \n            \n\n\n            \n                \n                    Defined in src/utils/scalars/timestamp.scalar.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    valueNode\n                                    \n                                            ValueNode\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parseValue\n                        \n                    \n                \n            \n            \n                \nparseValue(value: string | number | null)\n                \n            \n\n\n            \n                \n                    Defined in src/utils/scalars/timestamp.scalar.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            string | number | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        serialize\n                        \n                    \n                \n            \n            \n                \nserialize(value: Date)\n                \n            \n\n\n            \n                \n                    Defined in src/utils/scalars/timestamp.scalar.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                Date\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Scalar, CustomScalar } from '@nestjs/graphql';\nimport { Kind, ValueNode } from 'graphql';\n\n@Scalar('Timestamp', () => Date)\nexport class Timestamp implements CustomScalar {\n  description = '`Date` type as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.';\n\n  serialize(value: Date) {\n    return value instanceof Date ? value.getTime() : null;\n  }\n\n  parseValue(value: string | number | null) {\n    try {\n      const number = Number(value);\n      return value !== null ? new Date(number) : null;\n    } catch {\n      return null;\n    }\n  }\n\n  parseLiteral(valueNode: ValueNode) {\n    if (\n      valueNode.kind === Kind.INT ||\n      valueNode.kind === Kind.STRING\n    ) {\n      try {\n        const number = Number(valueNode.value);\n        return new Date(number);\n      } catch {\n        return null;\n      }\n    }\n    return null;\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TokenPayload.html":{"url":"interfaces/TokenPayload.html","title":"interface - TokenPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TokenPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/tokenPayload.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            isSecondFactorAuthenticated\n                                        \n                                \n                                \n                                        \n                                            userId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        isSecondFactorAuthenticated\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isSecondFactorAuthenticated:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        userId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        userId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        interface TokenPayload {\n  userId: number;\n  isSecondFactorAuthenticated?: boolean;\n}\n\nexport default TokenPayload;\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TokenVerificationDto.html":{"url":"classes/TokenVerificationDto.html","title":"class - TokenVerificationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TokenVerificationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/googleAuthentication/tokenVerification.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/googleAuthentication/tokenVerification.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty } from 'class-validator';\n\nexport class TokenVerificationDto {\n  @IsString()\n  @IsNotEmpty()\n  token: string;\n}\n\nexport default TokenVerificationDto;\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TwoFactorAuthenticationCodeDto.html":{"url":"classes/TwoFactorAuthenticationCodeDto.html","title":"class - TwoFactorAuthenticationCodeDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TwoFactorAuthenticationCodeDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/twoFactor/dto/twoFactorAuthenticationCode.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                twoFactorAuthenticationCode\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        twoFactorAuthenticationCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/twoFactor/dto/twoFactorAuthenticationCode.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\nexport class TwoFactorAuthenticationCodeDto {\n  @IsString()\n  @IsNotEmpty()\n  twoFactorAuthenticationCode: string;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TwoFactorAuthenticationController.html":{"url":"controllers/TwoFactorAuthenticationController.html","title":"controller - TwoFactorAuthenticationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TwoFactorAuthenticationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/twoFactor/twoFactorAuthentication.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                2fa\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                authenticate\n                            \n                            \n                                    Async\n                                register\n                            \n                            \n                                    Async\n                                turnOnTwoFactorAuthentication\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        authenticate\n                        \n                    \n                \n            \n            \n                \n                    \n                    authenticate(request: RequestWithUser, undefined: TwoFactorAuthenticationCodeDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('authenticate')@HttpCode(200)@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/authentication/twoFactor/twoFactorAuthentication.controller.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                TwoFactorAuthenticationCodeDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(response: Response, request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('generate')@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/authentication/twoFactor/twoFactorAuthentication.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    response\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        turnOnTwoFactorAuthentication\n                        \n                    \n                \n            \n            \n                \n                    \n                    turnOnTwoFactorAuthentication(request: RequestWithUser, undefined: TwoFactorAuthenticationCodeDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('turn-on')@HttpCode(200)@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/authentication/twoFactor/twoFactorAuthentication.controller.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                TwoFactorAuthenticationCodeDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  ClassSerializerInterceptor,\n  Controller,\n  Post,\n  UseInterceptors,\n  Res,\n  UseGuards,\n  Req,\n  Body,\n  UnauthorizedException, HttpCode,\n} from '@nestjs/common';\nimport { TwoFactorAuthenticationService } from './twoFactorAuthentication.service';\nimport { Response } from 'express';\nimport JwtAuthenticationGuard from '../jwt-authentication.guard';\nimport RequestWithUser from '../requestWithUser.interface';\nimport { UsersService } from '../../users/users.service';\nimport { TwoFactorAuthenticationCodeDto } from './dto/twoFactorAuthenticationCode.dto';\nimport { AuthenticationService } from '../authentication.service';\n\n@Controller('2fa')\n@UseInterceptors(ClassSerializerInterceptor)\nexport class TwoFactorAuthenticationController {\n  constructor(\n    private readonly twoFactorAuthenticationService: TwoFactorAuthenticationService,\n    private readonly usersService: UsersService,\n    private readonly authenticationService: AuthenticationService\n  ) {}\n\n  @Post('generate')\n  @UseGuards(JwtAuthenticationGuard)\n  async register(@Res() response: Response, @Req() request: RequestWithUser) {\n    const { otpauthUrl } = await this.twoFactorAuthenticationService.generateTwoFactorAuthenticationSecret(request.user);\n\n    return this.twoFactorAuthenticationService.pipeQrCodeStream(response, otpauthUrl);\n  }\n\n  @Post('turn-on')\n  @HttpCode(200)\n  @UseGuards(JwtAuthenticationGuard)\n  async turnOnTwoFactorAuthentication(\n    @Req() request: RequestWithUser,\n    @Body() { twoFactorAuthenticationCode } : TwoFactorAuthenticationCodeDto\n  ) {\n    const isCodeValid = this.twoFactorAuthenticationService.isTwoFactorAuthenticationCodeValid(\n      twoFactorAuthenticationCode, request.user\n    );\n    if (!isCodeValid) {\n      throw new UnauthorizedException('Wrong authentication code');\n    }\n    await this.usersService.turnOnTwoFactorAuthentication(request.user.id);\n  }\n\n  @Post('authenticate')\n  @HttpCode(200)\n  @UseGuards(JwtAuthenticationGuard)\n  async authenticate(\n    @Req() request: RequestWithUser,\n    @Body() { twoFactorAuthenticationCode } : TwoFactorAuthenticationCodeDto\n  ) {\n    const isCodeValid = this.twoFactorAuthenticationService.isTwoFactorAuthenticationCodeValid(\n      twoFactorAuthenticationCode, request.user\n    );\n    if (!isCodeValid) {\n      throw new UnauthorizedException('Wrong authentication code');\n    }\n\n    const accessTokenCookie = this.authenticationService.getCookieWithJwtAccessToken(request.user.id, true);\n\n    request.res.setHeader('Set-Cookie', [accessTokenCookie]);\n\n    return request.user;\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TwoFactorAuthenticationService.html":{"url":"injectables/TwoFactorAuthenticationService.html","title":"injectable - TwoFactorAuthenticationService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  TwoFactorAuthenticationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/twoFactor/twoFactorAuthentication.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                generateTwoFactorAuthenticationSecret\n                            \n                            \n                                    Public\n                                isTwoFactorAuthenticationCodeValid\n                            \n                            \n                                    Public\n                                    Async\n                                pipeQrCodeStream\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/authentication/twoFactor/twoFactorAuthentication.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        generateTwoFactorAuthenticationSecret\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateTwoFactorAuthenticationSecret(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/twoFactor/twoFactorAuthentication.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        isTwoFactorAuthenticationCodeValid\n                        \n                    \n                \n            \n            \n                \n                    \n                    isTwoFactorAuthenticationCodeValid(twoFactorAuthenticationCode: string, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/twoFactor/twoFactorAuthentication.service.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    twoFactorAuthenticationCode\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        pipeQrCodeStream\n                        \n                    \n                \n            \n            \n                \n                    \n                    pipeQrCodeStream(stream: Response, otpauthUrl: string)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/twoFactor/twoFactorAuthentication.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    stream\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    otpauthUrl\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { authenticator } from 'otplib';\nimport { toFileStream } from 'qrcode';\nimport { Response } from 'express';\nimport User from '../../users/user.entity';\nimport { UsersService } from '../../users/users.service';\nimport { ConfigService } from '@nestjs/config';\n\n@Injectable()\nexport class TwoFactorAuthenticationService {\n  constructor (\n    private readonly usersService: UsersService,\n    private readonly configService: ConfigService\n  ) {}\n\n  public async generateTwoFactorAuthenticationSecret(user: User) {\n    const secret = authenticator.generateSecret();\n\n    const otpauthUrl = authenticator.keyuri(user.email, this.configService.get('TWO_FACTOR_AUTHENTICATION_APP_NAME'), secret);\n\n    await this.usersService.setTwoFactorAuthenticationSecret(secret, user.id);\n\n    return {\n      secret,\n      otpauthUrl\n    }\n  }\n\n  public isTwoFactorAuthenticationCodeValid(twoFactorAuthenticationCode: string, user: User) {\n    return authenticator.verify({\n      token: twoFactorAuthenticationCode,\n      secret: user.twoFactorAuthenticationSecret\n    })\n  }\n\n  public async pipeQrCodeStream(stream: Response, otpauthUrl: string) {\n    return toFileStream(stream, otpauthUrl);\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateCategoryDto.html":{"url":"classes/UpdateCategoryDto.html","title":"class - UpdateCategoryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateCategoryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/categories/dto/updateCategory.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/dto/updateCategory.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/dto/updateCategory.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty, IsNumber, IsOptional } from 'class-validator';\n\nexport class UpdateCategoryDto {\n  @IsNumber()\n  @IsOptional()\n  id: number;\n\n  @IsString()\n  @IsNotEmpty()\n  @IsOptional()\n  name: string;\n}\n\nexport default UpdateCategoryDto;\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdatePostDto.html":{"url":"classes/UpdatePostDto.html","title":"class - UpdatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dto/updatePost.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                paragraphs\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/updatePost.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        paragraphs\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString({each: true})@IsNotEmpty()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/updatePost.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/updatePost.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty, IsNumber, IsOptional } from 'class-validator';\n\nexport class UpdatePostDto {\n  @IsNumber()\n  @IsOptional()\n  id: number;\n\n  @IsString({each: true})\n  @IsNotEmpty()\n  @IsOptional()\n  paragraphs: string[];\n\n  @IsString()\n  @IsNotEmpty()\n  @IsOptional()\n  title: string;\n}\n\nexport default UpdatePostDto;\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                address\n                            \n                            \n                                    Public\n                                    Optional\n                                avatar\n                            \n                            \n                                    Public\n                                    Optional\n                                currentHashedRefreshToken\n                            \n                            \n                                    Public\n                                email\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                isEmailConfirmed\n                            \n                            \n                                    Public\n                                isPhoneNumberConfirmed\n                            \n                            \n                                    Public\n                                isRegisteredWithGoogle\n                            \n                            \n                                    Public\n                                isTwoFactorAuthenticationEnabled\n                            \n                            \n                                    Public\n                                    Optional\n                                monthlySubscriptionStatus\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                password\n                            \n                            \n                                    Public\n                                    Optional\n                                phoneNumber\n                            \n                            \n                                    Public\n                                    Optional\n                                posts\n                            \n                            \n                                    Public\n                                stripeCustomerId\n                            \n                            \n                                    Public\n                                    Optional\n                                twoFactorAuthenticationSecret\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Address\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, {eager: true, cascade: true})@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PublicFile\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @JoinColumn()@OneToOne(undefined, {eager: true, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        currentHashedRefreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isEmailConfirmed\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isPhoneNumberConfirmed\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isRegisteredWithGoogle\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isTwoFactorAuthenticationEnabled\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        monthlySubscriptionStatus\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        stripeCustomerId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        twoFactorAuthenticationSecret\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:55\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Column, Entity, JoinColumn, OneToMany, OneToOne, PrimaryGeneratedColumn } from 'typeorm';\nimport { Exclude } from 'class-transformer';\nimport Address from './address.entity';\nimport Post from '../posts/post.entity';\nimport PublicFile from '../files/publicFile.entity';\n\n@Entity()\nclass User {\n  @PrimaryGeneratedColumn()\n  public id: number;\n\n  @Column({ unique: true })\n  public email: string;\n\n  @Column({ nullable: true })\n  public phoneNumber?: string;\n\n  @Column()\n  public name: string;\n\n  @Column({ nullable: true })\n  @Exclude()\n  public password?: string;\n\n  @Column({ default: false })\n  public isRegisteredWithGoogle: boolean;\n\n  @OneToOne(() => Address, {\n    eager: true,\n    cascade: true\n  })\n  @JoinColumn()\n  public address: Address;\n\n  @OneToMany(() => Post, (post: Post) => post.author)\n  public posts?: Post[];\n\n  @JoinColumn()\n  @OneToOne(\n    () => PublicFile,\n    {\n      eager: true,\n      nullable: true\n    }\n  )\n  public avatar?: PublicFile;\n\n  @Column({\n    nullable: true\n  })\n  @Exclude()\n  public currentHashedRefreshToken?: string;\n\n  @Column({ nullable: true })\n  public twoFactorAuthenticationSecret?: string;\n\n  @Column({ default: false })\n  public isTwoFactorAuthenticationEnabled: boolean;\n\n  @Column()\n  public stripeCustomerId: string;\n\n  @Column({ nullable: true })\n  public monthlySubscriptionStatus?: string;\n\n  @Column({ default: false })\n  public isEmailConfirmed: boolean;\n\n  @Column({ default: false })\n  public isPhoneNumberConfirmed: boolean;\n}\n\nexport default User;\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User-1.html":{"url":"classes/User-1.html","title":"class - User-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/models/user.model.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/models/user.model.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/models/user.model.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, Int, ObjectType } from '@nestjs/graphql';\n\n@ObjectType()\nexport class User {\n  @Field(() => Int)\n  id: number;\n\n  @Field()\n  email: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addAvatar\n                            \n                            \n                                    Async\n                                deleteAvatar\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    addAvatar(request: RequestWithUser, file: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('avatar')@UseGuards(JwtAuthenticationGuard)@UseInterceptors(undefined)\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteAvatar(request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('avatar')@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { UsersService } from './users.service';\nimport { Controller, Post, Delete, Req, UploadedFile, UseGuards, UseInterceptors } from '@nestjs/common';\nimport JwtAuthenticationGuard from '../authentication/jwt-authentication.guard';\nimport RequestWithUser from '../authentication/requestWithUser.interface';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport { Express } from 'express';\n\n@Controller('users')\nexport class UsersController {\n  constructor(\n    private readonly usersService: UsersService,\n  ) {}\n\n  @Post('avatar')\n  @UseGuards(JwtAuthenticationGuard)\n  @UseInterceptors(FileInterceptor('file'))\n  async addAvatar(@Req() request: RequestWithUser, @UploadedFile() file: Express.Multer.File) {\n    return this.usersService.addAvatar(request.user.id, file.buffer, file.originalname);\n  }\n\n  @Delete('avatar')\n  @UseGuards(JwtAuthenticationGuard)\n  async deleteAvatar(@Req() request: RequestWithUser) {\n    return this.usersService.deleteAvatar(request.user.id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_imports\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsersModule_exports\n\n\n\n\nFilesModule\n\nFilesModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nFilesModule->UsersModule\n\n\n\n\n\nStripeModule\n\nStripeModule\n\nUsersModule -->\n\nStripeModule->UsersModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            FilesModule\n                        \n                        \n                            StripeModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport User from './user.entity';\nimport { FilesModule } from '../files/files.module';\nimport { UsersController } from './users.controller';\nimport { StripeModule } from '../stripe/stripe.module';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([User]),\n    FilesModule,\n    StripeModule\n  ],\n  providers: [UsersService],\n  exports: [UsersService],\n  controllers: [UsersController]\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addAvatar\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                createWithGoogle\n                            \n                            \n                                    Async\n                                deleteAvatar\n                            \n                            \n                                    Async\n                                getByEmail\n                            \n                            \n                                    Async\n                                getById\n                            \n                            \n                                    Async\n                                getByIds\n                            \n                            \n                                    Async\n                                getUserIfRefreshTokenMatches\n                            \n                            \n                                    Async\n                                markEmailAsConfirmed\n                            \n                            \n                                markPhoneNumberAsConfirmed\n                            \n                            \n                                    Async\n                                removeRefreshToken\n                            \n                            \n                                    Async\n                                setCurrentRefreshToken\n                            \n                            \n                                    Async\n                                setTwoFactorAuthenticationSecret\n                            \n                            \n                                    Async\n                                turnOnTwoFactorAuthentication\n                            \n                            \n                                    Async\n                                updateMonthlySubscriptionStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository, filesService: FilesService, connection: Connection, stripeService: StripeService)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        filesService\n                                                  \n                                                        \n                                                                        FilesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        connection\n                                                  \n                                                        \n                                                                    Connection\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        stripeService\n                                                  \n                                                        \n                                                                        StripeService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    addAvatar(userId: number, imageBuffer: Buffer, filename: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    imageBuffer\n                                    \n                                            Buffer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    filename\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(userData: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userData\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createWithGoogle\n                        \n                    \n                \n            \n            \n                \n                    \n                    createWithGoogle(email: string, name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteAvatar(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:92\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getByEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    getByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getByIds\n                        \n                    \n                \n            \n            \n                \n                    \n                    getByIds(ids: number[])\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ids\n                                    \n                                            number[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserIfRefreshTokenMatches\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserIfRefreshTokenMatches(refreshToken: string, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:122\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        markEmailAsConfirmed\n                        \n                    \n                \n            \n            \n                \n                    \n                    markEmailAsConfirmed(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:135\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        markPhoneNumberAsConfirmed\n                        \n                    \n                \n            \n            \n                \nmarkPhoneNumberAsConfirmed(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:141\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeRefreshToken(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:147\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        setCurrentRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    setCurrentRefreshToken(refreshToken: string, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:115\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        setTwoFactorAuthenticationSecret\n                        \n                    \n                \n            \n            \n                \n                    \n                    setTwoFactorAuthenticationSecret(secret: string, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:153\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    secret\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        turnOnTwoFactorAuthentication\n                        \n                    \n                \n            \n            \n                \n                    \n                    turnOnTwoFactorAuthentication(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:159\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateMonthlySubscriptionStatus\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateMonthlySubscriptionStatus(stripeCustomerId: string, monthlySubscriptionStatus: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    stripeCustomerId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    monthlySubscriptionStatus\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable, InternalServerErrorException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository, Connection, In } from 'typeorm';\nimport User from './user.entity';\nimport CreateUserDto from './dto/createUser.dto';\nimport { FilesService } from '../files/files.service';\nimport * as bcrypt from 'bcrypt';\nimport StripeService from '../stripe/stripe.service';\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    @InjectRepository(User)\n    private usersRepository: Repository,\n    private readonly filesService: FilesService,\n    private connection: Connection,\n    private stripeService: StripeService\n  ) {}\n\n  async updateMonthlySubscriptionStatus(\n    stripeCustomerId: string, monthlySubscriptionStatus: string\n  ) {\n    return this.usersRepository.update(\n      { stripeCustomerId },\n      { monthlySubscriptionStatus }\n    );\n  }\n\n  async getByEmail(email: string) {\n    const user = await this.usersRepository.findOne({ email });\n    if (user) {\n      return user;\n    }\n    throw new HttpException('User with this email does not exist', HttpStatus.NOT_FOUND);\n  }\n\n  async getByIds(ids: number[]) {\n    return this.usersRepository.find({\n      where: { id: In(ids) },\n    });\n  }\n\n  async getById(id: number) {\n    const user = await this.usersRepository.findOne({ id });\n    if (user) {\n      return user;\n    }\n    throw new HttpException('User with this id does not exist', HttpStatus.NOT_FOUND);\n  }\n\n  async create(userData: CreateUserDto) {\n    const stripeCustomer = await this.stripeService.createCustomer(userData.name, userData.email);\n\n    const newUser = await this.usersRepository.create({\n      ...userData,\n      stripeCustomerId: stripeCustomer.id\n    });\n    await this.usersRepository.save(newUser);\n    return newUser;\n  }\n\n  async createWithGoogle(email: string, name: string) {\n    const stripeCustomer = await this.stripeService.createCustomer(name, email);\n\n    const newUser = await this.usersRepository.create({\n      email,\n      name,\n      isRegisteredWithGoogle: true,\n      stripeCustomerId: stripeCustomer.id\n    });\n    await this.usersRepository.save(newUser);\n    return newUser;\n  }\n\n  async addAvatar(userId: number, imageBuffer: Buffer, filename: string) {\n    const user = await this.getById(userId);\n    if (user.avatar) {\n      await this.usersRepository.update(userId, {\n        ...user,\n        avatar: null\n      });\n      await this.filesService.deletePublicFile(user.avatar.id);\n    }\n    const avatar = await this.filesService.uploadPublicFile(imageBuffer, filename);\n    await this.usersRepository.update(userId, {\n      ...user,\n      avatar\n    });\n    return avatar;\n  }\n\n  async deleteAvatar(userId: number) {\n    const queryRunner = this.connection.createQueryRunner();\n    const user = await this.getById(userId);\n    const fileId = user.avatar?.id;\n    if (fileId) {\n      await queryRunner.connect();\n      await queryRunner.startTransaction();\n      try {\n        await queryRunner.manager.update(User, userId, {\n          ...user,\n          avatar: null\n        });\n        await this.filesService.deletePublicFileWithQueryRunner(fileId, queryRunner);\n        await queryRunner.commitTransaction();\n      } catch (error) {\n        await queryRunner.rollbackTransaction();\n        throw new InternalServerErrorException();\n      } finally {\n        await queryRunner.release();\n      }\n    }\n  }\n\n  async setCurrentRefreshToken(refreshToken: string, userId: number) {\n    const currentHashedRefreshToken = await bcrypt.hash(refreshToken, 10);\n    await this.usersRepository.update(userId, {\n      currentHashedRefreshToken\n    });\n  }\n\n  async getUserIfRefreshTokenMatches(refreshToken: string, userId: number) {\n    const user = await this.getById(userId);\n\n    const isRefreshTokenMatching = await bcrypt.compare(\n      refreshToken,\n      user.currentHashedRefreshToken\n    );\n\n    if (isRefreshTokenMatching) {\n      return user;\n    }\n  }\n\n  async markEmailAsConfirmed(email: string) {\n    return this.usersRepository.update({ email }, {\n      isEmailConfirmed: true\n    });\n  }\n\n  markPhoneNumberAsConfirmed(userId: number) {\n    return this.usersRepository.update({ id: userId }, {\n      isPhoneNumberConfirmed: true\n    });\n  }\n\n  async removeRefreshToken(userId: number) {\n    return this.usersRepository.update(userId, {\n      currentHashedRefreshToken: null\n    });\n  }\n\n  async setTwoFactorAuthenticationSecret(secret: string, userId: number) {\n    return this.usersRepository.update(userId, {\n      twoFactorAuthenticationSecret: secret\n    });\n  }\n\n  async turnOnTwoFactorAuthentication(userId: number) {\n    return this.usersRepository.update(userId, {\n      isTwoFactorAuthenticationEnabled: true\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/VerificationTokenPayload.html":{"url":"interfaces/VerificationTokenPayload.html","title":"interface - VerificationTokenPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  VerificationTokenPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/emailConfirmation/verificationTokenPayload.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        interface VerificationTokenPayload {\n  email: string;\n}\n\nexport default VerificationTokenPayload;\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/authentication/authentication.controller.ts\n            \n            controller\n            AuthenticationController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/authentication/authentication.service.ts\n            \n            injectable\n            AuthenticationService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/authentication/dto/logIn.dto.ts\n            \n            class\n            LogInDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/authentication/dto/register.dto.ts\n            \n            class\n            RegisterDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/authentication/graphql-jwt-auth.guard.ts\n            \n            injectable\n            GraphqlJwtAuthGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/authentication/jwt-authentication.guard.ts\n            \n            injectable\n            JwtAuthenticationGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/authentication/jwt-refresh-token.strategy.ts\n            \n            injectable\n            JwtRefreshTokenStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/authentication/jwt-refresh.guard.ts\n            \n            injectable\n            JwtRefreshGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/authentication/jwt-two-factor.guard.ts\n            \n            injectable\n            JwtTwoFactorGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/authentication/jwt-two-factor.strategy.ts\n            \n            injectable\n            JwtTwoFactorStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/authentication/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/authentication/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/authentication/localAuthentication.guard.ts\n            \n            injectable\n            LocalAuthenticationGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/authentication/requestWithUser.interface.ts\n            \n            interface\n            RequestWithUser\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/authentication/tests/user.mock.ts\n            \n            variable\n            mockedUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/authentication/tokenPayload.interface.ts\n            \n            interface\n            TokenPayload\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/authentication/twoFactor/dto/twoFactorAuthenticationCode.dto.ts\n            \n            class\n            TwoFactorAuthenticationCodeDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/authentication/twoFactor/twoFactorAuthentication.controller.ts\n            \n            controller\n            TwoFactorAuthenticationController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/authentication/twoFactor/twoFactorAuthentication.service.ts\n            \n            injectable\n            TwoFactorAuthenticationService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/categories/categories.controller.ts\n            \n            controller\n            CategoriesController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/categories/categories.service.ts\n            \n            injectable\n            CategoriesService\n            \n                57 %\n                (4/7)\n            \n        \n        \n            \n                \n                src/categories/category.entity.ts\n            \n            class\n            Category\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/categories/dto/createCategory.dto.ts\n            \n            class\n            CreateCategoryDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/categories/dto/updateCategory.dto.ts\n            \n            class\n            UpdateCategoryDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/categories/exceptions/categoryNotFound.exception.ts\n            \n            class\n            CategoryNotFoundException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/charge/charge.controller.ts\n            \n            controller\n            ChargeController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/charge/dto/createCharge.dto.ts\n            \n            class\n            CreateChargeDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/chat/chat.gateway.ts\n            \n            class\n            ChatGateway\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/chat/chat.service.ts\n            \n            injectable\n            ChatService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/chat/message.entity.ts\n            \n            class\n            Message\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/comments/commands/handlers/create-comment.handler.ts\n            \n            class\n            CreateCommentHandler\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/comments/commands/implementations/createComment.command.ts\n            \n            class\n            CreateCommentCommand\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/comments/comment.entity.ts\n            \n            class\n            Comment\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/comments/comments.controller.ts\n            \n            controller\n            CommentsController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/comments/dto/createComment.dto.ts\n            \n            class\n            CreateCommentDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/comments/dto/getComments.dto.ts\n            \n            class\n            GetCommentsDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/comments/queries/handlers/getComments.handler.ts\n            \n            class\n            GetCommentsHandler\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/comments/queries/implementations/getComments.query.ts\n            \n            class\n            GetCommentsQuery\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/credit-cards/creditCards.controller.ts\n            \n            controller\n            CreditCardsController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/credit-cards/dto/addCreditCardDto.ts\n            \n            class\n            AddCreditCardDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/credit-cards/dto/setDefaultCreditCard.dto.ts\n            \n            class\n            SetDefaultCreditCardDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/database/databaseLogger.ts\n            \n            class\n            DatabaseLogger\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/email/email.service.ts\n            \n            injectable\n            EmailService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/emailConfirmation/confirmEmail.dto.ts\n            \n            class\n            ConfirmEmailDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/emailConfirmation/emailConfirmation.controller.ts\n            \n            controller\n            EmailConfirmationController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/emailConfirmation/emailConfirmation.guard.ts\n            \n            guard\n            EmailConfirmationGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/emailConfirmation/emailConfirmation.service.ts\n            \n            injectable\n            EmailConfirmationService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/emailConfirmation/verificationTokenPayload.interface.ts\n            \n            interface\n            VerificationTokenPayload\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/emailScheduling/dto/emailSchedule.dto.ts\n            \n            class\n            EmailScheduleDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/emailScheduling/emailScheduling.controller.ts\n            \n            controller\n            EmailSchedulingController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/emailScheduling/emailScheduling.service.ts\n            \n            injectable\n            EmailSchedulingService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/files/files.service.ts\n            \n            injectable\n            FilesService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/files/publicFile.entity.ts\n            \n            class\n            PublicFile\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/googleAuthentication/googleAuthentication.controller.ts\n            \n            controller\n            GoogleAuthenticationController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/googleAuthentication/googleAuthentication.service.ts\n            \n            injectable\n            GoogleAuthenticationService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/googleAuthentication/tokenVerification.dto.ts\n            \n            class\n            TokenVerificationDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/health/elasticsearchHealthIndicator.ts\n            \n            injectable\n            ElasticsearchHealthIndicator\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/health/health.controller.ts\n            \n            controller\n            HealthController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/logger/customLogger.ts\n            \n            injectable\n            CustomLogger\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/logger/dto/createLog.dto.ts\n            \n            class\n            CreateLogDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/logger/log.entity.ts\n            \n            class\n            Log\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/logger/logs.service.ts\n            \n            injectable\n            LogsService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/optimize/image.processor.ts\n            \n            function\n            imageProcessor\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/optimize/optimize.controller.ts\n            \n            controller\n            OptimizeController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/dto/createPost.dto.ts\n            \n            class\n            CreatePostDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/dto/updatePost.dto.ts\n            \n            class\n            UpdatePostDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/posts/exceptions/postNotFound.exception.ts\n            \n            class\n            PostNotFoundException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/posts/httpCache.interceptor.ts\n            \n            injectable\n            HttpCacheInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/posts/inputs/post.input.ts\n            \n            class\n            CreatePostInput\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/posts/loaders/posts.loaders.ts\n            \n            injectable\n            PostsLoaders\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/models/post.model.ts\n            \n            class\n            Post\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/posts/post.entity.ts\n            \n            class\n            Post\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/posts/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/posts/posts.resolver.ts\n            \n            class\n            PostsResolver\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/posts/posts.resolver.ts\n            \n            variable\n            POST_ADDED_EVENT\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/posts/postsCacheKey.constant.ts\n            \n            variable\n            GET_POSTS_CACHE_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/postsSearch.service.ts\n            \n            injectable\n            PostsSearchService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/posts/types/postCountBody.interface.ts\n            \n            interface\n            PostCountResult\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/posts/types/postSearchBody.interface.ts\n            \n            interface\n            PostSearchBody\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/posts/types/postSearchResponse.interface.ts\n            \n            interface\n            PostSearchResult\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/productCategories/dto/createProductCategory.dto.ts\n            \n            class\n            CreateProductCategoryDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/productCategories/productCategories.controller.ts\n            \n            controller\n            ProductCategoriesController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/productCategories/productCategories.service.ts\n            \n            injectable\n            ProductCategoriesService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/productCategories/productCategory.entity.ts\n            \n            class\n            ProductCategory\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/products/dto/createProduct.dto.ts\n            \n            class\n            CreateProductDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/products/product.entity.ts\n            \n            class\n            Product\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/products/products.controller.ts\n            \n            controller\n            ProductsController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/products/products.service.ts\n            \n            injectable\n            ProductsService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/products/types/bookProperties.interface.ts\n            \n            interface\n            BookProperties\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/products/types/carProperties.interface.ts\n            \n            interface\n            CarProperties\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/pubSub/pubSub.module.ts\n            \n            variable\n            PUB_SUB\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/sms/checkVerificationCode.dto.ts\n            \n            class\n            CheckVerificationCodeDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/sms/sms.controller.ts\n            \n            controller\n            SmsController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/sms/sms.service.ts\n            \n            injectable\n            SmsService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/stripe/stripe.service.ts\n            \n            injectable\n            StripeService\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/stripeWebhook/StripeEvent.entity.ts\n            \n            class\n            StripeEvent\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/stripeWebhook/requestWithRawBody.interface.ts\n            \n            interface\n            RequestWithRawBody\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/stripeWebhook/stripeWebhook.controller.ts\n            \n            controller\n            StripeWebhookController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/stripeWebhook/stripeWebhook.service.ts\n            \n            injectable\n            StripeWebhookService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/subscribers/dto/createSubscriber.dto.ts\n            \n            class\n            CreateSubscriberDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/subscribers/subscriber.service.ts\n            \n            interface\n            Subscriber\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/subscribers/subscribers.controller.ts\n            \n            controller\n            SubscribersController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/subscribers/subscribers.service.interface.ts\n            \n            interface\n            SubscribersService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/subscriptions/subscriptions.controller.ts\n            \n            controller\n            SubscriptionsController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/subscriptions/subscriptions.service.ts\n            \n            injectable\n            SubscriptionsService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/users/address.entity.ts\n            \n            class\n            Address\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/dto/createUser.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/users/models/user.model.ts\n            \n            class\n            User\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/user.entity.ts\n            \n            class\n            User\n            \n                0 %\n                (0/17)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/17)\n            \n        \n        \n            \n                \n                src/utils/excludeNull.interceptor.ts\n            \n            injectable\n            ExcludeNullInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/utils/findOneParams.ts\n            \n            class\n            FindOneParams\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/utils/getLogLevels.ts\n            \n            function\n            getLogLevels\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/logs.middleware.ts\n            \n            injectable\n            LogsMiddleware\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/utils/mocks/config.service.ts\n            \n            variable\n            mockedConfigService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/mocks/jwt.service.ts\n            \n            variable\n            mockedJwtService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/rawBody.middleware.ts\n            \n            function\n            rawBodyMiddleware\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/recursivelyStripNullValues.ts\n            \n            function\n            recursivelyStripNullValues\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/runInCluster.ts\n            \n            function\n            runInCluster\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/scalars/timestamp.scalar.ts\n            \n            class\n            Timestamp\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/utils/types/objectWithId.dto.ts\n            \n            class\n            ObjectWithIdDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/utils/types/paginationParams.ts\n            \n            class\n            PaginationParams\n            \n                0 %\n                (0/4)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.15\n        \n            @elastic/elasticsearch : ^7.9.0\n        \n            @grpc/grpc-js : ^1.3.7\n        \n            @grpc/proto-loader : ^0.5.5\n        \n            @hapi/joi : ^17.1.1\n        \n            @nestjs/bull : ^0.4.1\n        \n            @nestjs/common : ^8.0.9\n        \n            @nestjs/config : ^1.0.1\n        \n            @nestjs/core : ^8.0.9\n        \n            @nestjs/cqrs : ^8.0.0\n        \n            @nestjs/elasticsearch : ^8.0.0\n        \n            @nestjs/graphql : ^7.11.0\n        \n            @nestjs/jwt : ^8.0.0\n        \n            @nestjs/microservices : ^8.0.9\n        \n            @nestjs/passport : ^8.0.1\n        \n            @nestjs/platform-express : ^8.0.9\n        \n            @nestjs/platform-socket.io : ^8.0.9\n        \n            @nestjs/schedule : ^1.0.1\n        \n            @nestjs/terminus : ^8.0.1\n        \n            @nestjs/typeorm : ^8.0.2\n        \n            @nestjs/websockets : ^8.0.9\n        \n            @types/adm-zip : ^0.4.34\n        \n            @types/aws-sdk : ^2.7.0\n        \n            @types/bcrypt : ^3.0.0\n        \n            @types/bull : ^3.15.1\n        \n            @types/cache-manager : ^2.10.3\n        \n            @types/cookie : ^0.4.0\n        \n            @types/cookie-parser : ^1.4.2\n        \n            @types/cron : ^1.7.2\n        \n            @types/hapi__joi : ^17.1.0\n        \n            @types/imagemin : ^7.0.0\n        \n            @types/ioredis : ^4.19.3\n        \n            @types/multer : ^1.4.3\n        \n            @types/nodemailer : ^6.4.0\n        \n            @types/passport-google-oauth20 : ^2.0.9\n        \n            @types/passport-jwt : ^3.0.3\n        \n            @types/passport-local : ^1.0.33\n        \n            @types/qrcode : ^1.4.0\n        \n            @types/socket.io : ^2.1.12\n        \n            @types/uuid : ^8.0.0\n        \n            adm-zip : ^0.5.5\n        \n            amqp-connection-manager : ^3.2.1\n        \n            amqplib : ^0.6.0\n        \n            apollo-server-core : ^3.3.0\n        \n            apollo-server-express : ^2.19.2\n        \n            aws-sdk : ^2.724.0\n        \n            bcrypt : ^4.0.1\n        \n            bull : ^3.22.4\n        \n            cache-manager : ^3.4.0\n        \n            cache-manager-redis-store : ^2.0.0\n        \n            class-transformer : ^0.3.1\n        \n            class-validator : ^0.12.2\n        \n            cookie : ^0.4.1\n        \n            cookie-parser : ^1.4.5\n        \n            dataloader : ^2.0.0\n        \n            googleapis : ^82.0.0\n        \n            graphql : ^15.5.0\n        \n            graphql-parse-resolve-info : ^4.11.0\n        \n            graphql-redis-subscriptions : ^2.3.1\n        \n            graphql-tools : ^7.0.2\n        \n            grpc : ^1.24.4\n        \n            imagemin : ^7.0.1\n        \n            imagemin-pngquant : ^9.0.2\n        \n            nodemailer : ^6.4.17\n        \n            otplib : ^12.0.1\n        \n            passport : ^0.4.1\n        \n            passport-google-oauth20 : ^2.0.0\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            pg : ^8.2.0\n        \n            qrcode : ^1.4.4\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.3.1\n        \n            stripe : ^8.154.0\n        \n            twilio : ^3.66.0\n        \n            typeorm : ^0.2.38\n        \n            uuid : ^8.3.0\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            PostgresErrorCode   (src/.../postgresErrorCode.enum.ts)\n                        \n                        \n                            StripeError   (src/.../stripeError.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/database/postgresErrorCode.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        PostgresErrorCode\n                    \n                \n                        \n                            \n                                 UniqueViolation\n                            \n                        \n                        \n                            \n                                Value : 23505\n                            \n                        \n            \n        \n\n    src/utils/stripeError.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        StripeError\n                    \n                \n                        \n                            \n                                 InvalidRequest\n                            \n                        \n                        \n                            \n                                Value : StripeInvalidRequestError\n                            \n                        \n                        \n                            \n                                 ResourceMissing\n                            \n                        \n                        \n                            \n                                Value : resource_missing\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            getLogLevels   (src/.../getLogLevels.ts)\n                        \n                        \n                            imageProcessor   (src/.../image.processor.ts)\n                        \n                        \n                            rawBodyMiddleware   (src/.../rawBody.middleware.ts)\n                        \n                        \n                            recursivelyStripNullValues   (src/.../recursivelyStripNullValues.ts)\n                        \n                        \n                            runInCluster   (src/.../runInCluster.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/utils/getLogLevels.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getLogLevels\n                        \n                    \n                \n            \n            \n                \ngetLogLevels(isProduction: boolean)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    isProduction\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         LogLevel[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/optimize/image.processor.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        imageProcessor\n                        \n                    \n                \n            \n            \n                \nimageProcessor(job: Job, doneCallback: DoneCallback)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    job\n                                    \n                                            Job\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    doneCallback\n                                    \n                                            DoneCallback\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/utils/rawBody.middleware.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        rawBodyMiddleware\n                        \n                    \n                \n            \n            \n                \nrawBodyMiddleware()\n                \n            \n\n\n\n\n        \n    \n    src/utils/recursivelyStripNullValues.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        recursivelyStripNullValues\n                        \n                    \n                \n            \n            \n                \nrecursivelyStripNullValues(value)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/utils/runInCluster.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        runInCluster\n                        \n                    \n                \n            \n            \n                \nrunInCluster(bootstrap)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    bootstrap\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n\n  \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\n  Nest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthenticationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CategoriesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ChargeModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ChatModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CommentsModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CreditCardsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EmailConfirmationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EmailModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EmailSchedulingModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FilesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        GoogleAuthenticationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HealthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        LoggerModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        OptimizeModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ProductCategoriesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ProductsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PubSubModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SearchModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SmsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StripeModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StripeWebhookModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SubscribersModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SubscriptionsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthenticationModule\n\n\n\ncluster_AuthenticationModule_exports\n\n\n\ncluster_AuthenticationModule_providers\n\n\n\ncluster_CategoriesModule\n\n\n\ncluster_CategoriesModule_providers\n\n\n\ncluster_ChargeModule\n\n\n\ncluster_ChargeModule_imports\n\n\n\ncluster_ChatModule\n\n\n\ncluster_ChatModule_providers\n\n\n\ncluster_EmailConfirmationModule\n\n\n\ncluster_EmailConfirmationModule_imports\n\n\n\ncluster_EmailConfirmationModule_exports\n\n\n\ncluster_EmailConfirmationModule_providers\n\n\n\ncluster_EmailModule\n\n\n\ncluster_EmailModule_exports\n\n\n\ncluster_EmailModule_providers\n\n\n\ncluster_EmailSchedulingModule\n\n\n\ncluster_EmailSchedulingModule_providers\n\n\n\ncluster_FilesModule\n\n\n\ncluster_FilesModule_exports\n\n\n\ncluster_FilesModule_providers\n\n\n\ncluster_GoogleAuthenticationModule\n\n\n\ncluster_GoogleAuthenticationModule_providers\n\n\n\ncluster_HealthModule\n\n\n\ncluster_HealthModule_providers\n\n\n\ncluster_LoggerModule\n\n\n\ncluster_LoggerModule_exports\n\n\n\ncluster_LoggerModule_providers\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_ProductCategoriesModule\n\n\n\ncluster_ProductCategoriesModule_providers\n\n\n\ncluster_ProductsModule\n\n\n\ncluster_ProductsModule_providers\n\n\n\ncluster_SmsModule\n\n\n\ncluster_SmsModule_exports\n\n\n\ncluster_SmsModule_providers\n\n\n\ncluster_StripeModule\n\n\n\ncluster_StripeModule_exports\n\n\n\ncluster_StripeModule_providers\n\n\n\ncluster_StripeWebhookModule\n\n\n\ncluster_StripeWebhookModule_providers\n\n\n\ncluster_SubscriptionsModule\n\n\n\ncluster_SubscriptionsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthenticationModule\n\nAuthenticationModule\n\n\n\nChatModule\n\nChatModule\n\nChatModule -->\n\nAuthenticationModule->ChatModule\n\n\n\n\n\nGoogleAuthenticationModule\n\nGoogleAuthenticationModule\n\nGoogleAuthenticationModule -->\n\nAuthenticationModule->GoogleAuthenticationModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthenticationModule->AppModule\n\n\n\n\n\nAuthenticationService \n\nAuthenticationService \n\nAuthenticationService  -->\n\nAuthenticationModule->AuthenticationService \n\n\n\n\n\nCategoriesModule\n\nCategoriesModule\n\nAppModule -->\n\nCategoriesModule->AppModule\n\n\n\n\n\nChargeModule\n\nChargeModule\n\nAppModule -->\n\nChargeModule->AppModule\n\n\n\nAppModule -->\n\nChatModule->AppModule\n\n\n\n\n\nCommentsModule\n\nCommentsModule\n\nAppModule -->\n\nCommentsModule->AppModule\n\n\n\n\n\nCreditCardsModule\n\nCreditCardsModule\n\nAppModule -->\n\nCreditCardsModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nEmailConfirmationModule\n\nEmailConfirmationModule\n\nAuthenticationModule -->\n\nEmailConfirmationModule->AuthenticationModule\n\n\n\nAppModule -->\n\nEmailConfirmationModule->AppModule\n\n\n\n\n\nEmailConfirmationService \n\nEmailConfirmationService \n\nEmailConfirmationService  -->\n\nEmailConfirmationModule->EmailConfirmationService \n\n\n\n\n\nEmailSchedulingModule\n\nEmailSchedulingModule\n\nAppModule -->\n\nEmailSchedulingModule->AppModule\n\n\n\nAppModule -->\n\nGoogleAuthenticationModule->AppModule\n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\n\n\nLoggerModule\n\nLoggerModule\n\nAppModule -->\n\nLoggerModule->AppModule\n\n\n\n\n\nCustomLogger \n\nCustomLogger \n\nCustomLogger  -->\n\nLoggerModule->CustomLogger \n\n\n\n\n\nOptimizeModule\n\nOptimizeModule\n\nAppModule -->\n\nOptimizeModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nProductCategoriesModule\n\nProductCategoriesModule\n\nAppModule -->\n\nProductCategoriesModule->AppModule\n\n\n\n\n\nProductsModule\n\nProductsModule\n\nAppModule -->\n\nProductsModule->AppModule\n\n\n\n\n\nPubSubModule\n\nPubSubModule\n\nAppModule -->\n\nPubSubModule->AppModule\n\n\n\n\n\nSearchModule\n\nSearchModule\n\nHealthModule -->\n\nSearchModule->HealthModule\n\n\n\nPostsModule -->\n\nSearchModule->PostsModule\n\n\n\nAppModule -->\n\nSearchModule->AppModule\n\n\n\n\n\nSmsModule\n\nSmsModule\n\nAppModule -->\n\nSmsModule->AppModule\n\n\n\n\n\nSmsService \n\nSmsService \n\nSmsService  -->\n\nSmsModule->SmsService \n\n\n\n\n\nStripeWebhookModule\n\nStripeWebhookModule\n\nAppModule -->\n\nStripeWebhookModule->AppModule\n\n\n\n\n\nSubscribersModule\n\nSubscribersModule\n\nAppModule -->\n\nSubscribersModule->AppModule\n\n\n\n\n\nSubscriptionsModule\n\nSubscriptionsModule\n\nAppModule -->\n\nSubscriptionsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthenticationModule -->\n\nUsersModule->AuthenticationModule\n\n\n\nEmailConfirmationModule -->\n\nUsersModule->EmailConfirmationModule\n\n\n\nGoogleAuthenticationModule -->\n\nUsersModule->GoogleAuthenticationModule\n\n\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\nSmsModule -->\n\nUsersModule->SmsModule\n\n\n\nStripeWebhookModule -->\n\nUsersModule->StripeWebhookModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAuthenticationService\n\nAuthenticationService\n\nAuthenticationModule -->\n\nAuthenticationService->AuthenticationModule\n\n\n\n\n\nJwtRefreshTokenStrategy\n\nJwtRefreshTokenStrategy\n\nAuthenticationModule -->\n\nJwtRefreshTokenStrategy->AuthenticationModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthenticationModule -->\n\nJwtStrategy->AuthenticationModule\n\n\n\n\n\nJwtTwoFactorStrategy\n\nJwtTwoFactorStrategy\n\nAuthenticationModule -->\n\nJwtTwoFactorStrategy->AuthenticationModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthenticationModule -->\n\nLocalStrategy->AuthenticationModule\n\n\n\n\n\nTwoFactorAuthenticationService\n\nTwoFactorAuthenticationService\n\nAuthenticationModule -->\n\nTwoFactorAuthenticationService->AuthenticationModule\n\n\n\n\n\nCategoriesService\n\nCategoriesService\n\nCategoriesModule -->\n\nCategoriesService->CategoriesModule\n\n\n\n\n\nStripeModule\n\nStripeModule\n\nChargeModule -->\n\nStripeModule->ChargeModule\n\n\n\nCreditCardsModule -->\n\nStripeModule->CreditCardsModule\n\n\n\nStripeWebhookModule -->\n\nStripeModule->StripeWebhookModule\n\n\n\nSubscriptionsModule -->\n\nStripeModule->SubscriptionsModule\n\n\n\nUsersModule -->\n\nStripeModule->UsersModule\n\n\n\n\n\nStripeService \n\nStripeService \n\nStripeService  -->\n\nStripeModule->StripeService \n\n\n\n\n\nChatService\n\nChatService\n\nChatModule -->\n\nChatService->ChatModule\n\n\n\n\n\nEmailModule\n\nEmailModule\n\nEmailConfirmationModule -->\n\nEmailModule->EmailConfirmationModule\n\n\n\nEmailSchedulingModule -->\n\nEmailModule->EmailSchedulingModule\n\n\n\n\n\nEmailService \n\nEmailService \n\nEmailService  -->\n\nEmailModule->EmailService \n\n\n\n\n\nEmailConfirmationService\n\nEmailConfirmationService\n\nEmailConfirmationModule -->\n\nEmailConfirmationService->EmailConfirmationModule\n\n\n\n\n\nEmailService\n\nEmailService\n\nEmailModule -->\n\nEmailService->EmailModule\n\n\n\n\n\nEmailSchedulingService\n\nEmailSchedulingService\n\nEmailSchedulingModule -->\n\nEmailSchedulingService->EmailSchedulingModule\n\n\n\n\n\nFilesService \n\nFilesService \n\n\n\nFilesModule\n\nFilesModule\n\nUsersModule -->\n\nFilesModule->UsersModule\n\n\n\nFilesService  -->\n\nFilesModule->FilesService \n\n\n\n\n\nFilesService\n\nFilesService\n\nFilesModule -->\n\nFilesService->FilesModule\n\n\n\n\n\nGoogleAuthenticationService\n\nGoogleAuthenticationService\n\nGoogleAuthenticationModule -->\n\nGoogleAuthenticationService->GoogleAuthenticationModule\n\n\n\n\n\nElasticsearchHealthIndicator\n\nElasticsearchHealthIndicator\n\nHealthModule -->\n\nElasticsearchHealthIndicator->HealthModule\n\n\n\n\n\nCustomLogger\n\nCustomLogger\n\nLoggerModule -->\n\nCustomLogger->LoggerModule\n\n\n\n\n\nLogsService\n\nLogsService\n\nLoggerModule -->\n\nLogsService->LoggerModule\n\n\n\n\n\nPostsLoaders\n\nPostsLoaders\n\nPostsModule -->\n\nPostsLoaders->PostsModule\n\n\n\n\n\nPostsSearchService\n\nPostsSearchService\n\nPostsModule -->\n\nPostsSearchService->PostsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nProductCategoriesService\n\nProductCategoriesService\n\nProductCategoriesModule -->\n\nProductCategoriesService->ProductCategoriesModule\n\n\n\n\n\nProductsService\n\nProductsService\n\nProductsModule -->\n\nProductsService->ProductsModule\n\n\n\n\n\nSmsService\n\nSmsService\n\nSmsModule -->\n\nSmsService->SmsModule\n\n\n\n\n\nStripeService\n\nStripeService\n\nStripeModule -->\n\nStripeService->StripeModule\n\n\n\n\n\nStripeWebhookService\n\nStripeWebhookService\n\nStripeWebhookModule -->\n\nStripeWebhookService->StripeWebhookModule\n\n\n\n\n\nSubscriptionsService\n\nSubscriptionsService\n\nSubscriptionsModule -->\n\nSubscriptionsService->SubscriptionsModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        27 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    19 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    34 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    48 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    11 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            GET_POSTS_CACHE_KEY   (src/.../postsCacheKey.constant.ts)\n                        \n                        \n                            mockedConfigService   (src/.../config.service.ts)\n                        \n                        \n                            mockedJwtService   (src/.../jwt.service.ts)\n                        \n                        \n                            mockedUser   (src/.../user.mock.ts)\n                        \n                        \n                            POST_ADDED_EVENT   (src/.../posts.resolver.ts)\n                        \n                        \n                            PUB_SUB   (src/.../pubSub.module.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/posts/postsCacheKey.constant.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        GET_POSTS_CACHE_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'GET_POSTS_CACHE'\n                    \n                \n\n\n        \n    \n\n    src/utils/mocks/config.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        mockedConfigService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  get(key: string) {\n    switch (key) {\n      case 'JWT_ACCESS_TOKEN_EXPIRATION_TIME':\n        return '3600'\n    }\n  }\n}\n                    \n                \n\n\n        \n    \n\n    src/utils/mocks/jwt.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        mockedJwtService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  sign: () => ''\n}\n                    \n                \n\n\n        \n    \n\n    src/authentication/tests/user.mock.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        mockedUser\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Default value : {\n  id: 1,\n  email: 'user@email.com',\n  name: 'John',\n  password: 'hash',\n  stripeCustomerId: 'stripe_customer_id',\n  phoneNumber: '+48123123123',\n  address: {\n    id: 1,\n    street: 'streetName',\n    city: 'cityName',\n    country: 'countryName'\n  },\n  isTwoFactorAuthenticationEnabled: false,\n  isEmailConfirmed: false,\n  isPhoneNumberConfirmed: false,\n  isRegisteredWithGoogle: false,\n}\n                    \n                \n\n\n        \n    \n\n    src/posts/posts.resolver.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        POST_ADDED_EVENT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'postAdded'\n                    \n                \n\n\n        \n    \n\n    src/pubSub/pubSub.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        PUB_SUB\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'PUB_SUB'\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
