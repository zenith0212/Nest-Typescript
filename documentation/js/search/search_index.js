var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/AddCreditCardDto.html",[0,0.158,1,3.533]],["body/classes/AddCreditCardDto.html",[0,0.264,1,6.39,2,1.501,3,0.07,4,0.07,5,0.07,6,5.551,7,5.568,8,0.395,9,1.462,10,6.39,11,0.371,12,0.007,13,1.409,14,1.321,15,3.174,16,0.536,17,6.264,18,0.191,19,3.604,20,3.604,21,2.575,22,0.099,23,0.839,24,0.006,25,0.006]],["title/classes/Address.html",[0,0.158,26,3.162]],["body/classes/Address.html",[0,0.161,2,1.132,3,0.053,4,0.053,5,0.053,8,0.298,9,1.217,11,0.487,12,0.007,13,1.547,14,1.737,16,0.705,18,0.196,22,0.06,23,0.632,24,0.005,25,0.005,26,4.99,27,4.198,28,4.157,29,6.513,30,6.513,31,2.426,32,6.513,33,1.048,34,3.229,35,5.017,36,4.722,37,4.722,38,1.824,39,4.226,40,4.722,41,4.722,42,4.198,43,2.631,44,4.722,45,3.587,46,5.724,47,1.854,48,3.852,49,4.722]],["title/modules/AppModule.html",[50,1.015,51,3.533]],["body/modules/AppModule.html",[0,0.07,3,0.023,4,0.023,5,0.023,11,0.121,12,0.007,16,0.176,18,0.275,22,0.026,24,0.002,25,0.002,33,0.334,50,0.745,51,7.138,52,0.707,53,1.338,54,1.822,55,1.822,56,3.971,57,4.383,58,4.383,59,4.383,60,4.383,61,4.383,62,4.383,63,4.161,64,4.383,65,4.383,66,4.383,67,4.383,68,4.383,69,4.383,70,4.383,71,4.383,72,4.383,73,3.971,74,4.383,75,4.383,76,4.383,77,4.383,78,3.403,79,1.401,80,0.843,81,0.823,82,2.049,83,1.874,84,0.424,85,2.049,86,3.408,87,5.099,88,2.049,89,0.387,90,0.297,91,3.408,92,0.417,93,1.396,94,0.242,95,2.049,96,2.153,97,2.864,98,0.722,99,2.049,100,1.822,101,2.049,102,1.672,103,1.332,104,2.049,105,1.672,106,2.049,107,2.049,108,2.049,109,2.049,110,2.049,111,1.672,112,2.049,113,2.049,114,2.049,115,1.276,116,1.56,117,1.47,118,1.822,119,2.445,120,2.049,121,2.049,122,1.822,123,1.56,124,2.049,125,1.672,126,2.049,127,2.049,128,2.049,129,1.822,130,2.049,131,2.049,132,1.56,133,2.049,134,2.049,135,2.049,136,2.049,137,2.322,138,0.519,139,1.47,140,1.56,141,1.672,142,2.594,143,2.049,144,2.04,145,2.049,146,2.049,147,2.049,148,2.049,149,1.822,150,2.049,151,2.049,152,1.009,153,2.049,154,2.049,155,2.049,156,2.049,157,2.049,158,8.74,159,2.049,160,3.408,161,2.049,162,2.049,163,2.049,164,2.049,165,1.822,166,2.049,167,2.049,168,2.049,169,2.049,170,2.049,171,2.049,172,3.408,173,2.049,174,7.618,175,2.049,176,2.049,177,2.049,178,2.049,179,2.049,180,2.049,181,2.049,182,2.049,183,2.049,184,2.049,185,2.049,186,2.049,187,2.049,188,2.049,189,2.049,190,2.049,191,2.049,192,2.049,193,2.049,194,2.049,195,2.049,196,2.049,197,2.049,198,2.049,199,2.049,200,2.049,201,0.57,202,0.787,203,2.049,204,2.049]],["title/controllers/AuthenticationController.html",[205,1.34,206,3.533]],["body/controllers/AuthenticationController.html",[0,0.107,3,0.035,4,0.035,5,0.035,8,0.198,11,0.415,12,0.007,14,1.478,16,0.6,18,0.248,22,0.04,24,0.004,25,0.004,33,1.141,34,2.341,81,1.263,84,0.993,89,1.324,90,1.016,92,1.425,94,0.372,138,2.055,201,0.874,205,0.908,206,3.651,207,2.795,208,1.39,209,2.256,210,3.651,211,4.798,212,4.798,213,3.268,214,3.914,215,2.795,216,4.253,217,3.144,218,3.144,219,3.682,220,3.144,221,3.144,222,3.144,223,1.412,224,3.144,225,3.144,226,3.144,227,3.144,228,3.144,229,3.144,230,3.144,231,2.795,232,4.67,233,4.798,234,3.144,235,4.265,236,1.464,237,1.642,238,2.565,239,1.041,240,1.505,241,1.752,242,1.642,243,3.355,244,2.393,245,2.795,246,2.795,247,2.393,248,3.144,249,1.464,250,2.767,251,1.593,252,2.572,253,1.642,254,2.393,255,3.144,256,3.781,257,3.144,258,3.144,259,1.752,260,0.713,261,1.369,262,1.617,263,3.144,264,2.063,265,2.199,266,3.144,267,3.144,268,1.59,269,3.914,270,3.144,271,4.798,272,3.144,273,4.954,274,2.795,275,4.231,276,3.914,277,1.882,278,2.393,279,2.795,280,2.795,281,2.393,282,4.745,283,2.795,284,2.431,285,3.144,286,3.144,287,3.144,288,3.144,289,4.265,290,3.144,291,3.144,292,3.144,293,2.795]],["title/modules/AuthenticationModule.html",[50,1.015,56,3.018]],["body/modules/AuthenticationModule.html",[0,0.132,3,0.043,4,0.043,5,0.043,12,0.007,18,0.277,22,0.049,24,0.004,25,0.004,50,1.222,52,1.331,53,2.193,56,6.104,63,5.425,78,4.436,79,2.297,80,1.586,81,1.55,83,2.053,94,0.456,96,2.749,98,1.359,103,2.508,129,3.43,201,1.553,202,2.145,206,4.998,213,2.628,243,5.141,244,2.937,250,3.223,294,3.43,295,3.43,296,3.859,297,3.43,298,5.714,299,5.714,300,5.714,301,5.714,302,5.425,303,3.859,304,4.998,305,3.011,306,3.859,307,5.587,308,2.15,309,3.859,310,3.43,311,2.769,312,3.859,313,3.859,314,3.859,315,3.859,316,2.769,317,3.859,318,3.43]],["title/injectables/AuthenticationService.html",[243,2.678,319,0.755]],["body/injectables/AuthenticationService.html",[0,0.08,3,0.026,4,0.026,5,0.026,8,0.147,11,0.405,12,0.007,13,1.54,16,0.611,18,0.218,22,0.03,23,0.312,24,0.003,25,0.003,28,3.773,33,1.114,34,1.363,38,1.841,43,1.298,84,0.784,89,1.294,90,0.993,92,1.392,94,0.276,97,3.029,98,0.821,117,3.955,138,2.004,209,1.672,213,1.588,214,3.091,223,1.409,231,3.368,232,3.955,235,3.368,243,2.185,245,2.072,252,2.874,253,1.217,260,0.859,261,1.529,262,1.331,264,2.232,265,2.049,268,1.474,275,3.111,277,3.63,311,1.672,319,0.617,320,0.727,321,2.072,322,3.789,323,5.513,324,3.789,325,3.789,326,3.789,327,3.789,328,1.774,329,6.088,330,2.331,331,3.789,332,6.065,333,2.331,334,1.719,335,2.331,336,3.789,337,4.9,338,2.331,339,1.298,340,3.955,341,2.884,342,3.789,343,2.331,344,3.789,345,2.331,346,2.331,347,3.789,348,6.499,349,2.331,350,2.072,351,2.072,352,3.091,353,1.901,354,2.072,355,3.583,356,1.774,357,2.331,358,2.072,359,2.268,360,3.789,361,2.331,362,1.395,363,2.331,364,2.268,365,2.268,366,1.901,367,2.072,368,2.638,369,2.07,370,2.072,371,1.672,372,2.331,373,4.787,374,2.331,375,2.331,376,2.331,377,2.331,378,3.26,379,3.368,380,3.643,381,3.789,382,3.368,383,2.331,384,2.331,385,5.513,386,5.513,387,2.331,388,2.331,389,2.331,390,2.331,391,2.331,392,3.789,393,1.901,394,2.331,395,2.331,396,3.789,397,3.368,398,3.368,399,3.789,400,2.072,401,2.072,402,2.072,403,2.331]],["title/interfaces/BookProperties.html",[404,1.865,405,3.533]],["body/interfaces/BookProperties.html",[3,0.073,4,0.073,5,0.073,8,0.409,9,1.493,11,0.468,12,0.007,13,1.685,22,0.083,24,0.006,25,0.006,404,2.604,405,6.015,406,3.494,407,5.764,408,8.874,409,8.874]],["title/interfaces/CarProperties.html",[404,1.865,410,3.533]],["body/interfaces/CarProperties.html",[3,0.071,4,0.071,5,0.071,8,0.397,9,1.466,11,0.52,12,0.007,13,1.599,22,0.08,24,0.006,25,0.006,38,1.782,404,2.527,406,3.39,410,5.904,411,5.592,412,8.782,413,8.782,414,5.904,415,6.291,416,6.291]],["title/controllers/CategoriesController.html",[205,1.34,417,3.533]],["body/controllers/CategoriesController.html",[0,0.128,3,0.042,4,0.042,5,0.042,8,0.237,11,0.421,12,0.007,14,1.594,16,0.647,18,0.241,22,0.048,23,0.504,24,0.004,25,0.004,31,2.143,33,1.157,84,1.135,89,1.344,90,1.031,92,1.537,94,0.445,138,2.157,201,1.045,205,1.086,208,1.663,223,1.904,236,2.554,239,1.816,240,1.8,241,2.095,242,1.964,249,1.752,251,1.905,259,2.095,260,0.853,261,0.885,262,1.045,268,1.715,284,1.905,417,4.173,418,3.343,419,3.068,420,4.874,421,4.874,422,6.322,423,4.874,424,4.874,425,3.343,426,5.102,427,2.444,428,3.761,429,4.553,430,3.761,431,6.209,432,4.874,433,3.761,434,3.761,435,3.761,436,4.874,437,3.761,438,3.761,439,5.102,440,4.874,441,3.761,442,3.068,443,3.068,444,3.343,445,4.408,446,3.343,447,3.343,448,3.343,449,1.964,450,3.343,451,3.761,452,3.761,453,3.761,454,3.761,455,3.761,456,3.761,457,3.761,458,3.761,459,3.761,460,3.761]],["title/modules/CategoriesModule.html",[50,1.015,57,3.331]],["body/modules/CategoriesModule.html",[0,0.199,3,0.066,4,0.066,5,0.066,12,0.007,18,0.269,22,0.075,24,0.005,25,0.005,50,1.62,52,2.016,53,2.908,57,6.47,79,3.045,80,2.402,81,2.347,83,2.147,94,0.691,201,2.059,202,2.844,417,6.19,429,3.37,445,6.142,446,5.194,461,5.194,462,5.194,463,5.843,464,5.843,465,5.194,466,3.255,467,2.347,468,5.843]],["title/injectables/CategoriesService.html",[319,0.755,445,3.162]],["body/injectables/CategoriesService.html",[0,0.118,3,0.039,4,0.039,5,0.039,8,0.218,11,0.432,12,0.007,16,0.656,18,0.242,22,0.044,23,0.463,24,0.004,25,0.004,31,2.041,33,1.189,38,2.361,47,1.359,84,1.068,89,1.38,90,1.059,92,1.486,94,0.409,138,2.208,223,1.814,260,1.17,261,0.814,264,2.011,265,2.589,268,1.55,319,0.839,320,1.08,368,2.95,369,2.315,420,4.585,421,4.585,422,6.073,423,4.585,424,4.585,425,4.585,426,4.902,429,4.808,439,4.902,445,3.513,447,3.077,448,3.077,465,3.077,467,1.39,469,3.077,470,3.461,471,3.682,472,3.461,473,5.158,474,3.461,475,5.158,476,3.461,477,3.461,478,5.158,479,3.461,480,5.158,481,3.461,482,1.928,483,2.634,484,3.461,485,3.461,486,3.461,487,5.029,488,4.199,489,5.158,490,6.165,491,5.158,492,3.461,493,3.461,494,3.461,495,6.165,496,3.077,497,3.461,498,3.077]],["title/classes/Category.html",[0,0.158,429,2.678]],["body/classes/Category.html",[0,0.181,2,1.27,3,0.06,4,0.06,5,0.06,8,0.334,9,1.314,11,0.459,12,0.007,13,1.266,14,1.637,16,0.665,18,0.212,22,0.068,23,0.709,24,0.005,25,0.005,28,4.063,31,2.571,35,4.478,38,1.97,39,4.478,43,2.951,45,3.874,47,2.08,90,1.125,239,2.909,429,4.478,488,5.288,499,4.71,500,5.298,501,5.298,502,4.71,503,5.298,504,6.182,505,4.322,506,5.298]],["title/classes/CategoryNotFoundException.html",[0,0.158,483,3.533]],["body/classes/CategoryNotFoundException.html",[0,0.212,2,1.489,3,0.07,4,0.07,5,0.07,11,0.368,12,0.007,16,0.532,18,0.189,22,0.079,23,0.832,24,0.006,25,0.006,31,2.057,33,1.011,38,2.369,89,1.174,90,0.9,94,0.735,260,1.409,483,6.366,507,5.521,508,3.683,509,6.366,510,6.279,511,6.211,512,5.243,513,6.211,514,5.521]],["title/controllers/ChargeController.html",[205,1.34,515,3.533]],["body/controllers/ChargeController.html",[0,0.178,3,0.059,4,0.059,5,0.059,8,0.329,11,0.309,12,0.007,14,1.101,16,0.447,18,0.26,22,0.067,23,0.699,24,0.005,25,0.005,33,0.85,84,1.427,89,0.987,90,0.757,92,1.062,94,0.618,138,1.952,201,1.452,205,1.508,208,2.31,216,4.034,219,3.497,223,1.537,236,2.433,237,3.598,239,2.281,240,2.5,249,2.433,251,2.646,260,1.185,261,1.229,262,1.452,268,1.185,284,2.646,427,3.395,449,2.727,515,5.243,516,4.643,517,6.853,518,6.889,519,5.223,520,6.239,521,5.223,522,5.223,523,3.013,524,4.447,525,3.747,526,5.223,527,5.223,528,5.223,529,5.223,530,4.643]],["title/modules/ChargeModule.html",[50,1.015,58,3.331]],["body/modules/ChargeModule.html",[0,0.204,3,0.067,4,0.067,5,0.067,12,0.007,18,0.251,22,0.076,24,0.005,25,0.005,50,1.645,52,2.064,53,2.952,58,6.509,79,3.092,80,2.46,81,2.404,83,2.764,94,0.708,201,2.091,202,2.298,515,6.259,531,5.32,532,5.32,533,5.431,534,5.985,535,4.294,536,5.985]],["title/classes/ChatGateway.html",[0,0.158,537,3.533]],["body/classes/ChatGateway.html",[0,0.132,2,0.927,3,0.043,4,0.043,5,0.043,8,0.244,9,1.057,11,0.453,12,0.007,13,1.197,14,1.387,16,0.655,18,0.201,22,0.049,24,0.004,25,0.004,33,1.173,84,1.159,89,1.362,90,1.045,92,1.337,138,2.172,260,1.27,261,0.91,262,1.075,264,1.935,265,2.584,537,4.26,538,3.439,539,3.351,540,6.577,541,6.503,542,5.597,543,6.577,544,6.577,545,3.869,546,5.429,547,5.597,548,6.577,549,5.597,550,8.168,551,3.869,552,3.869,553,5.597,554,3.869,555,3.812,556,3.869,557,5.597,558,3.869,559,6.577,560,5.597,561,3.869,562,5.597,563,3.156,564,3.156,565,3.439,566,6.577,567,3.118,568,3.017,569,3.869,570,3.869,571,5.597,572,3.869,573,3.869]],["title/modules/ChatModule.html",[50,1.015,59,3.331]],["body/modules/ChatModule.html",[0,0.185,3,0.061,4,0.061,5,0.061,12,0.007,18,0.27,22,0.069,24,0.005,25,0.005,50,1.543,52,1.868,53,2.769,56,5.744,59,6.548,79,2.9,80,2.226,81,2.175,83,2.592,94,0.64,102,4.417,201,1.505,202,2.708,466,3.016,467,2.175,537,5.369,546,6.02,565,4.813,568,2.918,574,4.813,575,5.415,576,4.813,577,5.415,578,5.415,579,4.813,580,5.415]],["title/injectables/ChatService.html",[319,0.755,546,3.162]],["body/injectables/ChatService.html",[0,0.13,3,0.043,4,0.043,5,0.043,8,0.24,11,0.386,12,0.007,13,1.187,16,0.613,18,0.261,22,0.049,24,0.004,25,0.004,33,1.061,34,2.943,47,1.495,84,1.146,89,1.232,90,0.945,92,1.325,94,0.45,138,2.164,209,2.733,223,1.918,243,4.573,260,1.255,261,1.302,262,1.059,264,2.106,265,2.203,268,1.479,275,3.597,319,0.901,320,1.188,368,1.823,369,1.43,397,3.386,467,1.53,471,3.856,482,2.122,487,3.107,546,3.77,550,6.756,555,3.77,563,3.107,564,3.107,567,4.233,568,2.053,579,3.386,581,3.386,582,7.155,583,5.534,584,5.534,585,3.386,586,6.519,587,3.809,588,3.809,589,5.534,590,3.809,591,5.534,592,3.809,593,3.386,594,3.107,595,3.809,596,2.197,597,3.809,598,5.534,599,3.809,600,3.809,601,3.809,602,3.809,603,3.809,604,3.809,605,3.809,606,3.809]],["title/classes/CheckVerificationCodeDto.html",[0,0.158,607,3.533]],["body/classes/CheckVerificationCodeDto.html",[0,0.265,2,1.514,3,0.071,4,0.071,5,0.071,8,0.398,9,1.47,11,0.374,12,0.007,13,1.416,14,1.332,15,3.201,16,0.541,18,0.193,19,3.623,20,3.623,21,2.597,22,0.099,23,0.846,24,0.006,25,0.006,607,6.414,608,5.616,609,6.414,610,6.318]],["title/classes/Comment.html",[0,0.158,611,2.779]],["body/classes/Comment.html",[0,0.165,2,1.161,3,0.054,4,0.054,5,0.054,8,0.306,9,1.238,11,0.471,12,0.007,13,1.193,14,1.677,16,0.681,18,0.226,22,0.062,23,0.649,24,0.005,25,0.005,28,4.102,31,2.459,34,2.989,35,4.283,38,1.856,39,4.283,43,3.651,45,3.651,47,1.903,239,2.989,505,3.953,555,5.057,567,4.431,596,2.796,611,4.445,612,4.308,613,5.346,614,4.846,615,4.846,616,4.846,617,4.846,618,5.651,619,4.846,620,4.308]],["title/controllers/CommentsController.html",[205,1.34,621,3.533]],["body/controllers/CommentsController.html",[0,0.146,3,0.048,4,0.048,5,0.048,8,0.27,11,0.356,12,0.007,14,1.269,16,0.515,18,0.264,22,0.055,23,0.574,24,0.004,25,0.004,33,0.98,34,2.165,84,1.246,89,1.137,90,0.873,92,1.224,94,0.507,138,2.088,201,1.191,205,1.237,208,1.895,216,3.715,223,1.771,236,1.995,237,4.152,239,1.993,240,2.05,241,2.386,242,2.237,249,1.995,251,2.171,259,2.386,260,0.972,261,1.416,264,1.261,268,1.365,284,2.171,369,2.26,427,2.785,449,2.237,512,2.918,523,2.471,611,3.603,621,4.581,622,3.808,623,3.808,624,6.019,625,6.959,626,4.284,627,5.415,628,4.284,629,4.284,630,5.745,631,4.284,632,4.1,633,3.808,634,6.959,635,6.959,636,3.074,637,3.074,638,4.284,639,3.074,640,4.284,641,4.284,642,4.284,643,4.284,644,3.808,645,4.284,646,4.284,647,4.284,648,4.284]],["title/modules/CommentsModule.html",[50,1.015,60,3.331]],["body/modules/CommentsModule.html",[0,0.202,3,0.066,4,0.066,5,0.066,12,0.007,18,0.28,22,0.076,24,0.005,25,0.005,50,1.632,52,2.04,60,5.355,83,2.173,94,0.699,201,2.075,202,2.27,466,3.294,467,2.375,611,3.54,621,6.225,636,4.242,649,5.913,650,4.824,651,5.913,652,7.464,653,5.681,654,5.913,655,5.913,656,5.681,657,5.913,658,5.913]],["title/classes/ConfirmEmailDto.html",[0,0.158,659,3.533]],["body/classes/ConfirmEmailDto.html",[0,0.265,2,1.514,3,0.071,4,0.071,5,0.071,8,0.398,9,1.47,11,0.374,12,0.007,13,1.416,14,1.332,15,3.201,16,0.541,18,0.193,19,3.623,20,3.623,21,2.597,22,0.099,23,0.846,24,0.006,25,0.006,277,5.045,659,6.414,660,5.616,661,6.318]],["title/classes/CreateCategoryDto.html",[0,0.158,426,3.331]],["body/classes/CreateCategoryDto.html",[0,0.265,2,1.514,3,0.071,4,0.071,5,0.071,8,0.398,9,1.47,11,0.374,12,0.007,13,1.416,14,1.332,15,3.201,16,0.541,18,0.193,19,3.623,20,3.623,21,2.597,22,0.099,23,0.846,24,0.006,25,0.006,90,1.222,426,6.046,662,5.616,663,6.318]],["title/classes/CreateChargeDto.html",[0,0.158,520,3.533]],["body/classes/CreateChargeDto.html",[0,0.256,2,1.428,3,0.067,4,0.067,5,0.067,8,0.376,9,1.417,10,6.248,11,0.444,12,0.007,13,1.366,14,1.582,15,3.02,16,0.642,18,0.182,19,3.494,20,3.494,21,2.451,22,0.096,23,0.798,24,0.005,25,0.005,38,2.125,520,6.248,664,5.299,665,7.297,666,5.89,667,5.961,668,5.961]],["title/classes/CreateCommentCommand.html",[0,0.158,637,3.331]],["body/classes/CreateCommentCommand.html",[0,0.19,2,1.337,3,0.063,4,0.063,5,0.063,8,0.352,9,1.359,11,0.471,12,0.007,16,0.682,18,0.219,22,0.071,24,0.005,25,0.005,28,3.94,33,0.908,34,3.13,89,1.054,90,0.809,260,1.631,262,2.476,567,4.847,596,3.218,611,5.032,627,6.242,633,4.959,637,5.159,669,4.959,670,5.578,671,5.578,672,5.578,673,5.578]],["title/classes/CreateCommentDto.html",[0,0.158,627,3.331]],["body/classes/CreateCommentDto.html",[0,0.275,2,1.368,3,0.064,4,0.064,5,0.064,8,0.36,9,1.379,11,0.502,12,0.007,13,1.329,14,1.539,15,2.892,16,0.625,18,0.245,19,3.399,20,3.399,21,2.346,22,0.073,23,0.764,24,0.005,25,0.005,239,2.664,555,5.48,627,5.772,674,5.074,675,5.708,676,6.083,677,5.074,678,5.708,679,6.487,680,3.888,681,5.708]],["title/classes/CreateCommentHandler.html",[0,0.158,653,3.533]],["body/classes/CreateCommentHandler.html",[0,0.17,2,1.193,3,0.056,4,0.056,5,0.056,8,0.314,11,0.395,12,0.007,16,0.571,18,0.256,22,0.064,24,0.005,25,0.005,33,1.086,47,1.954,84,1.381,89,1.26,90,0.967,92,1.012,138,1.906,223,1.465,260,1.513,261,1.171,264,1.465,265,2.255,268,1.129,467,1.999,471,4.333,482,2.772,539,3.994,567,2.772,611,2.979,636,3.571,637,5.769,650,4.06,653,5.078,682,6.69,683,4.424,684,7.526,685,5.931,686,4.424,687,4.977,688,5.931,689,6.672,690,4.977,691,4.977,692,4.977,693,4.977,694,4.977,695,4.424,696,5.442,697,4.977,698,4.977,699,4.977,700,4.977]],["title/classes/CreateLogDto.html",[0,0.158,701,3.533]],["body/classes/CreateLogDto.html",[0,0.21,2,1.476,3,0.069,4,0.069,5,0.069,8,0.388,9,1.447,11,0.493,12,0.007,13,1.664,16,0.714,22,0.098,23,0.825,24,0.006,25,0.006,568,4.491,701,6.342,702,5.475,703,5.189,704,6.342,705,6.16,706,6.16,707,6.16]],["title/classes/CreatePostDto.html",[0,0.158,708,3.331]],["body/classes/CreatePostDto.html",[0,0.253,2,1.406,3,0.066,4,0.066,5,0.066,8,0.37,9,1.403,11,0.439,12,0.007,13,1.56,14,1.566,15,2.972,16,0.636,18,0.179,19,3.795,20,3.795,21,2.412,22,0.095,23,0.785,24,0.005,25,0.005,152,2.887,708,5.846,709,5.215,710,5.297,711,5.297,712,5.215,713,5.866,714,5.866,715,5.866,716,5.866]],["title/classes/CreatePostInput.html",[0,0.158,717,3.533]],["body/classes/CreatePostInput.html",[0,0.191,2,1.342,3,0.063,4,0.063,5,0.063,8,0.353,9,1.362,11,0.472,12,0.007,13,1.586,14,1.681,16,0.683,18,0.171,22,0.072,24,0.005,25,0.005,33,1.173,115,3.487,152,3.548,710,5.182,711,5.182,717,5.487,718,4.977,719,6.504,720,4.568,721,5.599,722,4.686,723,4.977,724,5.599,725,7.106,726,5.599,727,7.209,728,4.262]],["title/classes/CreateProductCategoryDto.html",[0,0.158,729,3.331]],["body/classes/CreateProductCategoryDto.html",[0,0.265,2,1.514,3,0.071,4,0.071,5,0.071,8,0.398,9,1.47,11,0.374,12,0.007,13,1.416,14,1.332,15,3.201,16,0.541,18,0.193,19,3.623,20,3.623,21,2.597,22,0.099,23,0.846,24,0.006,25,0.006,90,1.222,729,6.046,730,5.616,731,6.318]],["title/classes/CreateProductDto.html",[0,0.158,732,3.331]],["body/classes/CreateProductDto.html",[0,0.274,2,1.362,3,0.064,4,0.064,5,0.064,8,0.358,9,1.375,11,0.501,12,0.007,13,1.325,14,1.535,15,2.881,16,0.623,18,0.245,19,3.391,20,3.391,21,2.337,22,0.093,23,0.761,24,0.005,25,0.005,90,1.164,429,4.632,676,6.075,677,5.054,679,6.471,680,3.873,732,5.761,733,5.054,734,5.686,735,5.686,736,5.686]],["title/classes/CreateSubscriberDto.html",[0,0.158,737,3.331]],["body/classes/CreateSubscriberDto.html",[0,0.218,2,1.534,3,0.072,4,0.072,5,0.072,8,0.403,9,1.481,11,0.464,12,0.007,13,1.608,16,0.671,22,0.1,23,0.857,24,0.006,25,0.006,90,1.229,334,3.845,737,6.081,738,5.689,739,6.4,740,6.4]],["title/classes/CreateUserDto.html",[0,0.158,741,3.533]],["body/classes/CreateUserDto.html",[0,0.21,2,1.476,3,0.069,4,0.069,5,0.069,8,0.388,9,1.447,11,0.493,12,0.007,13,1.664,16,0.714,22,0.098,23,0.825,24,0.006,25,0.006,90,1.208,334,3.78,362,4.988,741,6.342,742,5.475,743,6.16,744,6.16,745,6.16]],["title/controllers/CreditCardsController.html",[205,1.34,746,3.533]],["body/controllers/CreditCardsController.html",[0,0.137,1,5.588,3,0.045,4,0.045,5,0.045,6,5.267,8,0.254,11,0.398,12,0.007,14,1.418,16,0.576,18,0.254,22,0.051,23,0.539,24,0.004,25,0.004,33,1.095,84,1.193,89,1.271,90,0.975,92,1.368,94,0.476,125,3.285,138,2.193,201,1.119,205,1.163,208,1.781,216,4.325,219,3.86,223,1.695,236,1.876,237,3.512,238,3.285,239,1.908,240,1.927,249,1.876,251,2.04,260,0.914,261,0.948,262,1.119,265,1.361,268,1.307,269,3.285,284,3.408,427,2.618,449,2.103,523,2.323,524,3.88,525,2.889,530,5.121,746,4.385,747,3.58,748,5.761,749,5.761,750,5.761,751,5.761,752,4.027,753,4.027,754,7.341,755,4.027,756,4.027,757,4.027,758,4.027,759,5.588,760,4.027,761,4.027,762,4.027,763,4.027,764,3.065,765,4.027,766,4.027,767,4.027,768,4.027,769,4.027,770,4.027,771,4.027,772,4.027,773,4.027,774,4.027]],["title/modules/CreditCardsModule.html",[50,1.015,61,3.331]],["body/modules/CreditCardsModule.html",[0,0.203,3,0.067,4,0.067,5,0.067,6,4.277,12,0.007,18,0.25,22,0.076,24,0.005,25,0.005,50,1.641,52,2.056,53,2.945,61,6.503,79,3.084,80,2.451,81,2.394,83,2.757,94,0.705,201,2.085,202,2.288,533,5.425,535,4.277,746,6.248,775,5.961,776,5.961,777,5.961,778,5.961]],["title/injectables/CustomLogger.html",[319,0.755,779,3.331]],["body/injectables/CustomLogger.html",[0,0.101,3,0.033,4,0.033,5,0.033,8,0.187,9,0.867,11,0.445,12,0.007,13,1.726,16,0.645,18,0.208,22,0.038,23,0.397,24,0.003,25,0.003,33,1.175,84,0.95,89,1.364,90,1.046,92,1.388,93,4.65,94,0.351,97,3.328,98,1.045,260,1.041,261,1.32,262,1.56,264,0.873,319,0.747,320,0.926,365,4.321,508,2.196,568,4.698,703,5.801,704,5.196,779,4.026,780,2.638,781,5.611,782,5.813,783,4.589,784,3.647,785,4.589,786,4.079,787,2.967,788,4.805,789,6.314,790,4.589,791,4.589,792,2.967,793,5.179,794,4.589,795,6.314,796,2.967,797,4.589,798,2.967,799,4.589,800,2.967,801,4.589,802,2.967,803,2.967,804,2.967,805,2.421,806,2.967,807,2.638,808,2.967,809,2.967,810,2.021,811,2.967,812,2.967,813,2.638,814,2.967,815,2.967,816,6.827,817,2.967,818,2.967,819,4.589]],["title/classes/DatabaseLogger.html",[0,0.158,820,3.533]],["body/classes/DatabaseLogger.html",[0,0.095,2,0.666,3,0.074,4,0.031,5,0.031,8,0.175,9,0.823,11,0.435,12,0.007,13,1.636,16,0.651,18,0.133,22,0.035,23,0.584,24,0.003,25,0.003,33,1.195,38,1.524,47,1.09,84,0.903,89,1.688,90,1.065,92,1.493,93,4.508,94,0.328,223,1.793,261,1.653,262,1.495,268,1.774,339,1.547,359,1.663,364,1.663,365,2.609,369,1.637,539,2.609,568,3.567,632,5.18,704,4.637,784,4.566,786,5.416,793,5.456,820,4.094,821,2.469,822,5.379,823,5.038,824,4.359,825,4.359,826,4.359,827,4.359,828,4.359,829,4.359,830,4.359,831,2.778,832,4.359,833,7.464,834,2.778,835,4.359,836,2.778,837,4.359,838,2.778,839,4.359,840,2.778,841,4.359,842,2.778,843,3.875,844,4.359,845,2.778,846,4.359,847,2.778,848,2.778,849,6.093,850,2.778,851,5.379,852,2.778,853,2.778,854,4.782,855,2.778,856,2.469,857,2.778]],["title/modules/DatabaseModule.html",[50,1.015,62,3.331]],["body/modules/DatabaseModule.html",[0,0.19,3,0.063,4,0.063,5,0.063,11,0.33,12,0.007,18,0.256,22,0.071,24,0.005,25,0.005,50,1.573,52,1.924,62,5.159,83,2.643,94,0.66,96,3.539,97,3.718,98,1.965,137,3.799,140,4.246,142,4.246,144,3.339,152,2.745,362,3.339,369,2.095,466,3.107,467,2.24,820,6.057,823,4.246,858,5.578,859,5.578,860,5.578,861,5.578,862,5.578,863,4.959,864,5.578,865,5.578,866,5.578,867,5.578,868,5.578,869,5.578,870,5.578,871,5.578]],["title/injectables/ElasticsearchHealthIndicator.html",[319,0.755,872,3.162]],["body/injectables/ElasticsearchHealthIndicator.html",[0,0.17,3,0.056,4,0.056,5,0.056,8,0.314,11,0.395,12,0.007,13,1.37,16,0.571,18,0.23,22,0.064,24,0.005,25,0.005,33,1.086,84,1.381,89,1.26,90,0.967,92,1.012,94,0.589,138,1.906,152,2.449,260,1.513,261,1.171,262,1.383,265,1.682,268,1.129,319,1.086,320,1.552,341,3.788,359,2.979,364,2.979,365,2.979,368,2.382,369,1.869,508,3.193,810,3.39,872,5.126,873,4.424,874,7.526,875,6.672,876,4.424,877,7.672,878,4.977,879,6.672,880,4.977,881,3.571,882,5.078,883,4.977,884,6.672,885,3.788,886,3.788,887,4.977,888,6.672,889,4.977]],["title/controllers/EmailConfirmationController.html",[205,1.34,890,3.533]],["body/controllers/EmailConfirmationController.html",[0,0.159,3,0.052,4,0.052,5,0.052,8,0.294,11,0.378,12,0.007,14,1.346,16,0.547,18,0.25,22,0.06,24,0.005,25,0.005,33,1.039,84,1.322,89,1.206,90,0.925,92,1.298,94,0.551,138,2.144,201,1.296,205,1.346,208,2.062,216,3.852,219,2.896,236,2.172,237,2.435,239,1.544,240,2.231,241,2.597,242,2.435,249,2.172,251,2.362,256,4.731,259,2.597,260,1.058,261,1.097,262,1.296,264,1.372,265,2.46,284,2.362,334,2.896,449,2.435,523,2.69,659,5.958,890,4.858,891,4.145,892,6.958,893,5.207,894,5.674,895,4.663,896,6.383,897,4.663,898,6.383,899,4.663,900,6.383,901,4.663,902,4.663,903,4.663,904,4.145,905,4.145,906,4.663,907,4.663,908,4.663,909,4.663,910,4.663,911,4.663]],["title/guards/EmailConfirmationGuard.html",[764,3.533,912,3.787]],["body/guards/EmailConfirmationGuard.html",[0,0.193,3,0.064,4,0.064,5,0.064,8,0.357,11,0.335,12,0.007,16,0.485,18,0.222,22,0.072,24,0.005,25,0.005,33,0.922,84,1.504,89,1.07,90,0.821,92,1.152,94,0.67,152,2.787,216,3.574,219,2.569,264,1.667,268,1.285,319,1.182,334,2.569,368,2.71,369,2.127,523,3.267,539,3.39,703,4.523,764,5.527,913,5.664,914,5.035,915,8.742,916,5.664,917,6.435,918,5.664,919,4.311,920,4.62,921,5.035,922,5.664,923,5.664,924,5.664]],["title/modules/EmailConfirmationModule.html",[50,1.015,63,3.162]],["body/modules/EmailConfirmationModule.html",[0,0.169,3,0.056,4,0.056,5,0.056,12,0.007,18,0.268,22,0.063,24,0.005,25,0.005,50,1.453,52,1.705,53,2.607,63,6.292,78,4.799,79,2.73,80,2.032,81,1.986,83,2.441,94,0.585,96,3.269,98,1.741,103,3.213,201,1.846,202,2.55,256,6.048,305,3.579,310,4.394,311,3.547,318,4.394,890,5.709,904,4.394,925,4.394,926,4.394,927,4.394,928,4.394,929,5.867,930,4.944,931,4.394,932,4.944]],["title/injectables/EmailConfirmationService.html",[256,3.018,319,0.755]],["body/injectables/EmailConfirmationService.html",[0,0.102,3,0.034,4,0.034,5,0.034,8,0.188,11,0.405,12,0.007,13,1.456,16,0.586,18,0.221,22,0.038,24,0.003,25,0.003,26,2.033,28,3.731,33,1.114,34,1.658,38,1.595,84,0.955,89,1.293,90,0.992,92,1.288,94,0.353,97,3.336,98,1.051,138,2.025,223,0.879,252,3.336,253,1.559,256,2.997,260,1.046,261,1.49,262,1.761,264,2.22,265,2.313,268,1.046,277,3.792,311,2.142,319,0.75,320,0.931,329,6.432,334,3.422,340,2.142,359,1.787,364,1.787,365,1.787,368,3.276,369,2.571,371,3.308,378,4.314,379,2.654,380,3.509,382,2.654,393,2.435,401,2.654,892,5.007,893,2.435,894,4.098,933,2.654,934,4.61,935,4.61,936,4.61,937,2.985,938,4.903,939,2.985,940,4.61,941,2.985,942,4.61,943,2.985,944,4.61,945,2.985,946,4.61,947,2.985,948,2.997,949,3.509,950,2.985,951,2.654,952,4.61,953,2.985,954,3.509,955,2.985,956,3.509,957,2.985,958,2.985,959,2.985,960,2.654,961,2.654,962,2.435,963,2.985,964,4.61,965,5.632,966,4.098,967,2.985,968,2.985,969,2.985,970,2.654,971,2.985,972,2.985,973,2.985,974,2.985,975,2.985]],["title/modules/EmailModule.html",[50,1.015,929,3.162]],["body/modules/EmailModule.html",[0,0.197,3,0.065,4,0.065,5,0.065,12,0.007,18,0.247,22,0.074,24,0.005,25,0.005,50,1.608,52,1.992,53,2.886,79,3.023,80,2.374,81,2.319,83,2.122,94,0.683,96,3.618,98,2.034,201,1.605,202,2.822,305,3.962,929,6.222,938,6.188,976,5.133,977,5.133,978,5.133,979,5.774,980,5.774]],["title/classes/EmailScheduleDto.html",[0,0.158,981,3.331]],["body/classes/EmailScheduleDto.html",[0,0.239,2,1.283,3,0.06,4,0.06,5,0.06,8,0.338,9,1.323,11,0.49,12,0.007,13,1.658,14,1.745,15,3.548,16,0.709,18,0.163,19,3.635,20,3.635,21,2.202,22,0.089,23,0.717,24,0.005,25,0.005,555,5.316,722,5.073,962,6.366,981,5.599,982,4.761,983,7.804,984,5.356,985,7.804,986,5.356,987,6.366,988,5.356,989,5.356]],["title/controllers/EmailSchedulingController.html",[205,1.34,990,3.533]],["body/controllers/EmailSchedulingController.html",[0,0.187,3,0.061,4,0.061,5,0.061,8,0.345,11,0.324,12,0.007,14,1.155,16,0.469,18,0.255,22,0.07,23,0.733,24,0.005,25,0.005,33,0.891,84,1.471,89,1.034,90,0.794,92,1.113,94,0.647,138,1.997,201,1.522,205,1.581,208,2.421,236,2.55,239,1.813,240,2.62,249,2.55,251,2.774,260,1.242,261,1.288,262,1.522,284,2.774,334,2.484,449,2.859,905,4.867,981,5.989,990,5.407,991,4.867,992,7.105,993,6.316,994,4.867,995,5.475,996,5.475,997,6.316,998,5.372,999,4.867,1000,4.867,1001,5.475,1002,5.475,1003,5.475]],["title/modules/EmailSchedulingModule.html",[50,1.015,64,3.331]],["body/modules/EmailSchedulingModule.html",[0,0.195,3,0.064,4,0.064,5,0.064,12,0.007,18,0.259,22,0.073,24,0.005,25,0.005,50,1.596,52,1.969,53,2.865,64,6.619,79,3,80,2.346,81,2.292,83,2.682,94,0.675,201,2.029,202,2.801,929,6.105,931,5.074,990,6.123,998,6.105,999,5.074,1004,5.074,1005,5.708,1006,5.074,1007,5.708,1008,5.708]],["title/injectables/EmailSchedulingService.html",[319,0.755,998,3.162]],["body/injectables/EmailSchedulingService.html",[0,0.165,3,0.054,4,0.054,5,0.054,8,0.306,11,0.388,12,0.007,16,0.561,18,0.253,22,0.062,23,0.649,24,0.005,25,0.005,33,1.066,84,1.357,89,1.238,90,0.95,92,0.985,93,3.301,94,0.573,111,3.953,260,1.487,261,1.542,262,1.822,264,1.929,319,1.066,320,1.512,369,2.461,722,3.15,938,5.567,951,4.308,956,3.688,961,4.308,962,3.953,981,5.707,993,5.825,994,5.825,997,4.308,998,4.464,1000,4.308,1009,4.308,1010,4.846,1011,8.756,1012,4.846,1013,4.846,1014,4.846,1015,4.846,1016,4.846,1017,5.346,1018,4.846,1019,4.846,1020,6.553,1021,4.846,1022,4.846,1023,4.846]],["title/injectables/EmailService.html",[319,0.755,938,3.018]],["body/injectables/EmailService.html",[0,0.169,3,0.056,4,0.056,5,0.056,8,0.312,9,1.255,11,0.444,12,0.007,16,0.642,18,0.245,22,0.063,23,0.662,24,0.005,25,0.005,33,1.081,34,1.778,84,1.375,89,1.255,90,0.963,92,1.005,94,0.585,97,3.809,98,1.741,260,1.507,261,1.887,262,1.374,268,1.121,319,1.081,320,1.542,788,3.763,938,4.317,1024,4.394,1025,7.5,1026,6.642,1027,3.367,1028,6.642,1029,6.642,1030,7.5,1031,4.944,1032,7.5,1033,6.642,1034,4.394,1035,4.944,1036,4.944,1037,4.944,1038,4.944,1039,4.033,1040,4.944,1041,4.944,1042,4.944,1043,4.944]],["title/injectables/ExcludeNullInterceptor.html",[319,0.755,1044,3.787]],["body/injectables/ExcludeNullInterceptor.html",[0,0.189,3,0.062,4,0.062,5,0.062,8,0.349,11,0.328,12,0.007,16,0.474,18,0.256,22,0.071,24,0.005,25,0.005,33,0.901,84,1.482,89,1.046,90,0.803,92,1.126,94,0.655,268,1.256,319,1.165,320,1.727,539,3.314,703,3.448,917,6.38,1044,5.838,1045,4.921,1046,7.156,1047,7.156,1048,7.452,1049,8.383,1050,5.536,1051,7.93,1052,7.156,1053,4.921,1054,5.536,1055,5.536,1056,5.838,1057,5.536,1058,5.536,1059,4.921]],["title/modules/FilesModule.html",[50,1.015,1060,3.331]],["body/modules/FilesModule.html",[0,0.189,3,0.062,4,0.062,5,0.062,12,0.007,18,0.265,22,0.071,24,0.005,25,0.005,50,1.565,52,1.91,53,2.809,79,2.942,80,2.276,81,2.224,83,2.034,94,0.655,96,3.522,98,1.95,202,2.747,305,3.857,466,3.084,467,2.224,1060,6.491,1061,4.921,1062,4.921,1063,4.921,1064,6.446,1065,5.536,1066,5.536,1067,3.771,1068,4.921,1069,5.536]],["title/injectables/FilesService.html",[319,0.755,1064,3.162]],["body/injectables/FilesService.html",[0,0.117,3,0.039,4,0.039,5,0.069,8,0.216,11,0.402,12,0.007,13,1.116,16,0.582,18,0.241,22,0.044,24,0.004,25,0.004,31,1.696,33,1.107,38,2.163,47,1.346,84,1.061,89,1.285,90,0.986,92,1.246,94,0.405,97,3.499,98,1.208,138,2.106,223,1.009,236,1.597,260,1.162,261,1.205,262,0.953,264,2.328,265,2.749,268,0.778,319,0.834,320,1.07,369,2.302,467,1.377,471,3.665,482,1.91,833,6.454,881,4.879,882,4.666,954,2.61,1064,3.489,1067,2.336,1068,3.048,1070,3.048,1071,5.122,1072,5.122,1073,5.122,1074,3.429,1075,3.429,1076,5.122,1077,5.122,1078,3.429,1079,6.469,1080,5.122,1081,3.429,1082,5.122,1083,4.666,1084,6.045,1085,3.429,1086,5.122,1087,7.912,1088,3.048,1089,3.048,1090,3.429,1091,5.45,1092,3.429,1093,3.429,1094,3.429,1095,6.131,1096,6.131,1097,5.122,1098,3.429,1099,3.429,1100,3.429,1101,3.429,1102,3.429,1103,5.122,1104,5.122,1105,3.429,1106,3.429,1107,3.429]],["title/classes/FindOneParams.html",[0,0.158,431,3.331]],["body/classes/FindOneParams.html",[0,0.268,2,1.534,3,0.072,4,0.072,5,0.072,8,0.403,9,1.481,11,0.379,12,0.007,13,1.427,14,1.35,16,0.548,18,0.195,21,2.631,22,0.082,23,0.857,24,0.006,25,0.006,31,2.807,431,6.081,1108,5.689,1109,8.476,1110,6.4]],["title/classes/GetCommentsDto.html",[0,0.158,630,3.533]],["body/classes/GetCommentsDto.html",[0,0.283,2,1.464,3,0.069,4,0.069,5,0.069,8,0.385,9,1.439,11,0.491,12,0.007,14,1.288,16,0.523,18,0.232,21,2.511,22,0.078,23,0.818,24,0.006,25,0.006,33,1.24,38,2.352,512,5.654,630,6.318,680,4.161,1111,5.43,1112,6.109,1113,6.109,1114,5.798]],["title/classes/GetCommentsHandler.html",[0,0.158,656,3.533]],["body/classes/GetCommentsHandler.html",[0,0.172,2,1.205,3,0.056,4,0.056,5,0.056,8,0.317,11,0.398,12,0.007,16,0.575,18,0.257,22,0.064,24,0.005,25,0.005,31,1.665,33,1.093,47,1.974,84,1.391,89,1.269,90,0.974,92,1.022,138,1.916,223,1.48,239,1.665,260,1.524,261,1.183,268,1.524,467,2.019,471,4.351,482,2.801,539,4.021,611,3.01,632,3.424,636,3.607,639,5.792,650,4.101,656,5.112,685,5.971,686,4.469,688,5.971,695,4.469,1115,4.469,1116,7.564,1117,5.028,1118,6.717,1119,5.028,1120,5.028,1121,5.028,1122,5.028,1123,6.717,1124,6.717]],["title/classes/GetCommentsQuery.html",[0,0.158,639,3.331]],["body/classes/GetCommentsQuery.html",[0,0.208,2,1.458,3,0.068,4,0.068,5,0.068,8,0.384,9,1.435,11,0.45,12,0.007,16,0.651,22,0.078,24,0.006,25,0.006,28,3.664,33,1.348,38,2.458,89,1.149,90,0.882,260,1.724,262,2.303,510,4.963,512,5.911,639,5.451,793,4.365,1125,5.408,1126,6.084,1127,6.084]],["title/controllers/GoogleAuthenticationController.html",[205,1.34,1128,3.533]],["body/controllers/GoogleAuthenticationController.html",[0,0.17,3,0.056,4,0.056,5,0.056,8,0.314,11,0.295,12,0.007,14,1.049,16,0.426,18,0.245,22,0.064,24,0.005,25,0.005,33,0.81,34,2.4,84,1.381,89,0.94,90,0.722,92,1.012,94,0.589,138,1.906,201,1.383,205,1.437,208,2.201,209,4.787,210,5.078,219,4,223,1.465,236,2.318,237,3.484,239,2.492,241,2.772,242,2.599,259,2.772,260,1.129,261,1.171,262,1.383,264,1.465,265,1.682,268,1.129,273,5.078,275,3.235,276,5.442,282,4.06,1128,5.078,1129,4.424,1130,4.06,1131,4.977,1132,6.12,1133,4.977,1134,6.672,1135,4.977,1136,5.126,1137,4.424,1138,2.682,1139,4.977,1140,4.977,1141,4.977]],["title/modules/GoogleAuthenticationModule.html",[50,1.015,65,3.331]],["body/modules/GoogleAuthenticationModule.html",[0,0.178,3,0.058,4,0.058,5,0.058,12,0.007,18,0.267,22,0.066,24,0.005,25,0.005,50,1.503,52,1.795,53,2.698,56,5.682,65,6.632,78,4.87,79,2.826,80,2.14,81,2.09,83,2.526,94,0.616,96,3.383,98,1.833,102,4.246,103,3.383,201,1.911,202,2.639,305,2.805,1128,5.857,1136,5.954,1137,4.627,1142,4.627,1143,4.627,1144,5.205,1145,5.205,1146,5.205]],["title/injectables/GoogleAuthenticationService.html",[319,0.755,1136,3.162]],["body/injectables/GoogleAuthenticationService.html",[0,0.094,3,0.031,4,0.031,5,0.031,8,0.174,9,0.821,11,0.434,12,0.007,13,1.508,16,0.628,18,0.214,22,0.035,24,0.003,25,0.003,33,1.141,34,2.98,84,0.9,89,1.325,90,1.101,92,1.343,94,0.327,97,3.243,98,0.975,138,2.177,210,3.308,223,1.944,243,4.231,252,3.101,253,1.445,260,0.986,261,1.263,262,1.492,264,2.472,265,2.478,268,1.591,273,4.627,274,2.46,275,1.799,276,4.96,277,3.955,278,2.106,279,2.46,280,2.46,281,2.106,319,0.707,320,0.863,328,2.106,334,2.997,359,1.657,364,1.657,365,2.601,368,2.08,369,2.015,393,2.257,593,2.46,596,1.596,920,3.545,1039,3.545,1130,2.257,1136,2.96,1147,2.46,1148,5.366,1149,4.346,1150,4.346,1151,4.346,1152,4.346,1153,4.346,1154,4.346,1155,2.767,1156,4.346,1157,2.767,1158,4.346,1159,2.767,1160,4.346,1161,2.767,1162,4.346,1163,2.767,1164,4.346,1165,2.46,1166,4.346,1167,2.767,1168,4.346,1169,2.767,1170,4.346,1171,2.767,1172,2.767,1173,2.767,1174,2.767,1175,2.767,1176,2.767,1177,2.767,1178,2.767,1179,2.767,1180,2.767,1181,2.46,1182,2.767,1183,2.767,1184,2.767,1185,4.346,1186,2.767,1187,2.767,1188,2.767,1189,2.767,1190,2.767,1191,2.767]],["title/injectables/GraphqlJwtAuthGuard.html",[319,0.755,1192,3.533]],["body/injectables/GraphqlJwtAuthGuard.html",[0,0.196,3,0.064,4,0.064,5,0.064,8,0.361,11,0.339,12,0.007,16,0.491,18,0.246,22,0.073,24,0.005,25,0.005,33,0.932,84,1.515,89,1.082,90,0.831,92,1.165,94,0.678,115,3.568,250,4.22,264,1.686,268,1.3,308,3.192,319,1.191,320,1.787,508,2.742,703,3.568,917,6.463,1192,5.568,1193,6.503,1194,5.093,1195,7.316,1196,7.316,1197,5.73,1198,4.111,1199,5.73,1200,4.361,1201,5.73,1202,5.73,1203,5.73]],["title/controllers/HealthController.html",[205,1.34,1204,3.533]],["body/controllers/HealthController.html",[0,0.156,3,0.051,4,0.051,5,0.051,8,0.288,12,0.007,14,0.962,16,0.391,18,0.219,22,0.058,23,0.611,24,0.005,25,0.005,84,1.302,92,0.927,94,0.539,117,3.273,201,1.268,205,1.317,208,2.017,260,1.035,261,1.914,268,1.035,872,5.283,885,3.472,1204,5.477,1205,4.055,1206,6.288,1207,7.756,1208,4.562,1209,4.562,1210,7.196,1211,6.288,1212,7.196,1213,7.196,1214,7.196,1215,4.562,1216,4.562,1217,4.562,1218,6.288,1219,4.055,1220,5.59,1221,6.288,1222,6.288,1223,4.562,1224,4.562,1225,6.288,1226,7.756,1227,6.288,1228,4.562,1229,4.562,1230,4.562,1231,4.562,1232,4.562,1233,4.562,1234,4.562,1235,4.055,1236,4.562,1237,4.562,1238,4.562,1239,4.562,1240,4.562]],["title/modules/HealthModule.html",[50,1.015,66,3.331]],["body/modules/HealthModule.html",[0,0.188,3,0.062,4,0.062,5,0.062,12,0.007,18,0.264,22,0.07,23,0.739,24,0.005,25,0.005,50,1.561,52,1.903,53,2.803,66,6.573,73,5.773,79,2.935,80,2.268,81,2.215,83,2.623,94,0.652,105,4.499,201,1.984,202,2.741,872,6.157,885,4.198,1204,6.025,1241,4.903,1242,4.903,1243,5.516,1244,5.516,1245,5.516,1246,7.139]],["title/injectables/HttpCacheInterceptor.html",[319,0.755,1247,3.533]],["body/injectables/HttpCacheInterceptor.html",[0,0.189,3,0.062,4,0.062,5,0.062,8,0.349,11,0.328,12,0.007,13,1.303,16,0.474,18,0.169,22,0.071,24,0.005,25,0.005,33,0.901,43,3.987,84,1.482,89,1.046,90,0.803,92,1.126,94,0.655,219,2.512,264,2.106,268,1.623,319,1.165,320,1.727,508,3.425,703,3.448,917,6.38,921,4.921,1247,5.447,1248,4.921,1249,7.93,1250,7.156,1251,7.156,1252,5.536,1253,7.156,1254,7.049,1255,5.536,1256,5.536,1257,5.536,1258,5.536]],["title/injectables/JwtAuthenticationGuard.html",[249,2.162,319,0.755]],["body/injectables/JwtAuthenticationGuard.html",[0,0.228,3,0.075,4,0.075,5,0.075,12,0.007,18,0.246,22,0.085,23,0.896,24,0.006,25,0.006,94,0.791,249,3.751,308,3.726,319,1.311,320,2.087,508,3.201,1198,4.8,1200,5.091,1259,4.556,1260,5.947]],["title/injectables/JwtRefreshGuard.html",[254,3.533,319,0.755]],["body/injectables/JwtRefreshGuard.html",[0,0.226,3,0.074,4,0.074,5,0.074,12,0.007,18,0.244,22,0.085,23,0.888,24,0.006,25,0.006,94,0.784,213,4.516,254,6.096,277,3.968,308,3.693,319,1.304,320,2.068,508,3.173,1198,4.756,1200,5.046,1259,4.516,1261,5.893]],["title/injectables/JwtRefreshTokenStrategy.html",[298,3.331,319,0.755]],["body/injectables/JwtRefreshTokenStrategy.html",[0,0.15,3,0.049,4,0.049,5,0.049,8,0.277,11,0.362,12,0.007,16,0.524,18,0.26,22,0.056,24,0.004,25,0.004,33,0.996,84,1.267,89,1.156,90,0.887,92,0.892,94,0.519,97,3.674,98,1.545,138,1.785,152,2.158,213,5.194,219,3.769,223,1.291,250,3.53,252,3.372,253,2.29,260,1.388,261,1.44,262,1.701,264,1.291,268,1.388,277,2.625,278,3.338,298,4.39,308,2.443,319,0.996,320,1.368,355,4.957,356,3.338,378,4.8,402,3.899,508,2.099,810,2.987,1027,2.987,1138,2.364,1259,4.8,1262,3.899,1263,4.657,1264,5.749,1265,4.386,1266,6.119,1267,4.386,1268,3.578,1269,4.657,1270,3.147,1271,4.657,1272,3.578,1273,3.578,1274,4.386,1275,3.578,1276,4.386,1277,4.386,1278,4.386,1279,4.386]],["title/injectables/JwtStrategy.html",[299,3.331,319,0.755]],["body/injectables/JwtStrategy.html",[0,0.161,3,0.053,4,0.053,5,0.053,8,0.298,11,0.381,12,0.007,16,0.551,18,0.265,22,0.06,24,0.005,25,0.005,33,1.048,84,1.333,89,1.217,90,0.933,92,0.96,94,0.558,97,3.758,98,1.663,138,1.855,219,2.921,223,1.39,250,2.724,252,3.48,253,2.466,260,1.461,261,1.515,262,1.79,268,1.461,299,4.62,308,2.631,319,1.048,320,1.473,355,5.115,356,3.594,378,3.217,508,2.26,810,3.217,1027,3.217,1138,2.545,1263,4.901,1264,5.977,1268,3.852,1269,3.594,1270,3.388,1271,3.594,1272,3.852,1273,3.852,1275,3.852,1280,4.198,1281,4.722,1282,5.724,1283,4.722,1284,4.198,1285,4.198,1286,4.198,1287,4.198]],["title/injectables/JwtTwoFactorGuard.html",[319,0.755,1288,3.533]],["body/injectables/JwtTwoFactorGuard.html",[0,0.225,3,0.074,4,0.074,5,0.074,12,0.007,18,0.244,22,0.084,23,0.884,24,0.006,25,0.006,94,0.78,308,3.677,316,5.731,319,1.3,320,2.059,508,3.158,1198,4.735,1200,5.023,1259,4.495,1288,6.08,1289,5.867,1290,5.867]],["title/injectables/JwtTwoFactorStrategy.html",[300,3.331,319,0.755]],["body/injectables/JwtTwoFactorStrategy.html",[0,0.15,3,0.049,4,0.049,5,0.049,8,0.277,11,0.362,12,0.007,16,0.524,18,0.26,22,0.056,24,0.004,25,0.004,33,0.996,34,2.535,84,1.267,89,1.156,90,0.887,92,0.892,94,0.519,97,3.674,98,1.545,138,1.785,219,2.776,223,1.291,250,3.53,252,3.372,253,2.29,260,1.388,261,1.44,262,1.701,264,1.291,265,1.482,268,1.599,283,3.899,300,4.39,308,2.443,316,5.471,319,0.996,320,1.368,355,4.957,356,3.338,378,2.987,508,2.099,810,2.987,1027,2.987,1138,2.364,1259,4.8,1263,4.657,1264,5.749,1268,3.578,1269,4.657,1270,3.147,1271,4.657,1272,3.578,1273,3.578,1275,3.578,1282,5.439,1285,3.899,1286,3.899,1287,3.899,1290,3.899,1291,3.899,1292,4.386,1293,4.386,1294,4.386]],["title/injectables/LocalAuthenticationGuard.html",[247,3.533,319,0.755]],["body/injectables/LocalAuthenticationGuard.html",[0,0.23,3,0.076,4,0.076,5,0.076,12,0.007,18,0.247,22,0.086,24,0.006,25,0.006,94,0.798,247,6.163,308,3.761,319,1.318,320,2.106,508,3.231,1198,4.843,1295,6.001,1296,6.751]],["title/injectables/LocalStrategy.html",[301,3.331,319,0.755]],["body/injectables/LocalStrategy.html",[0,0.173,3,0.057,4,0.057,5,0.057,8,0.32,11,0.4,12,0.007,13,1.581,16,0.579,18,0.258,22,0.065,24,0.005,25,0.005,33,1.101,34,1.827,84,1.4,89,1.278,90,0.98,92,1.033,94,0.601,138,1.925,243,5.008,244,3.866,260,1.152,268,1.152,301,4.852,308,2.83,319,1.101,320,1.584,334,3.068,362,4.853,508,2.431,585,4.515,596,2.93,810,3.46,882,5.147,1263,5.147,1269,3.866,1270,3.644,1271,3.866,1284,4.515,1297,4.515,1298,5.08,1299,6.763,1300,5.08,1301,4.515,1302,5.08,1303,5.08,1304,5.08]],["title/classes/Log.html",[0,0.158,784,3.018]],["body/classes/Log.html",[0,0.169,2,1.189,3,0.056,4,0.056,5,0.056,8,0.313,9,1.258,11,0.496,12,0.007,13,1.57,14,1.766,16,0.717,18,0.151,22,0.063,23,0.664,24,0.005,25,0.005,28,4.117,31,2.488,35,5.081,38,1.886,39,4.334,45,3.708,47,1.947,568,4.049,703,4.679,704,5.718,722,4.327,784,4.884,1305,4.409,1306,7.513,1307,4.96,1308,6.679,1309,4.96,1310,4.96,1311,4.96,1312,4.96]],["title/classes/LogInDto.html",[0,0.158,1313,3.787]],["body/classes/LogInDto.html",[0,0.255,2,1.417,3,0.066,4,0.066,5,0.066,8,0.373,9,1.41,11,0.442,12,0.007,13,1.564,14,1.574,16,0.639,18,0.18,19,3.476,20,3.476,21,2.431,22,0.095,23,0.792,24,0.005,25,0.005,334,3.71,362,4.896,987,6.672,1313,6.672,1314,5.256,1315,5.913,1316,5.256,1317,5.913,1318,5.256,1319,5.256]],["title/modules/LoggerModule.html",[50,1.015,67,3.331]],["body/modules/LoggerModule.html",[0,0.184,3,0.061,4,0.061,5,0.061,12,0.007,18,0.269,22,0.069,24,0.005,25,0.005,50,1.539,52,1.861,53,2.763,67,6.615,79,2.893,80,2.218,81,2.167,83,1.982,94,0.638,96,3.463,98,1.9,202,2.701,305,3.792,466,3.005,467,2.167,779,6.8,782,6.014,784,3.507,807,4.796,1320,4.796,1321,4.796,1322,4.796,1323,5.395,1324,4.796,1325,5.395]],["title/injectables/LogsMiddleware.html",[132,3.533,319,0.755]],["body/injectables/LogsMiddleware.html",[0,0.155,3,0.051,4,0.051,5,0.051,8,0.287,9,1.186,11,0.269,12,0.007,16,0.537,18,0.191,22,0.058,23,0.84,24,0.005,25,0.005,33,0.74,84,1.299,89,0.859,90,0.659,92,0.925,93,3.098,94,0.538,132,5.468,219,3.812,261,1.69,262,1.997,264,2.114,268,1.63,319,1.021,320,1.419,339,2.533,369,2.356,539,2.722,568,2.451,823,5.895,854,4.043,856,4.043,1048,6.885,1138,2.451,1219,5.578,1326,4.043,1327,6.275,1328,6.678,1329,7.746,1330,4.548,1331,6.275,1332,4.548,1333,6.275,1334,4.548,1335,6.275,1336,6.275,1337,7.746,1338,6.275,1339,4.548,1340,4.548,1341,4.548]],["title/injectables/LogsService.html",[319,0.755,782,3.162]],["body/injectables/LogsService.html",[0,0.173,3,0.057,4,0.057,5,0.057,8,0.32,11,0.4,12,0.007,16,0.579,18,0.258,22,0.065,23,0.68,24,0.005,25,0.005,33,1.101,47,1.994,84,1.4,89,1.278,90,0.98,92,1.033,94,0.601,138,1.925,152,2.5,223,1.495,260,1.534,261,1.195,264,1.495,265,2.286,268,1.152,319,1.101,320,1.584,467,2.04,471,4.369,482,2.83,701,6.17,782,4.607,784,4.396,1324,4.515,1342,4.515,1343,6.763,1344,5.08,1345,5.08,1346,6.763,1347,6.763,1348,5.08,1349,5.08,1350,5.08,1351,6.763,1352,5.08,1353,5.08,1354,4.515,1355,5.08]],["title/classes/Message.html",[0,0.158,568,2.502]],["body/classes/Message.html",[0,0.184,2,1.293,3,0.061,4,0.061,5,0.061,8,0.34,9,1.33,11,0.463,12,0.007,13,1.281,14,1.652,16,0.671,18,0.215,22,0.069,23,0.722,24,0.005,25,0.005,28,4.077,31,2.593,34,2.986,35,4.518,38,1.993,39,4.518,45,3.92,47,2.118,555,5.334,567,4.363,568,4.221,596,3.112,613,4.401,618,5.356,1356,4.796,1357,5.395,1358,5.395,1359,5.395]],["title/classes/ObjectWithIdDto.html",[0,0.158,676,3.331]],["body/classes/ObjectWithIdDto.html",[0,0.268,2,1.534,3,0.072,4,0.072,5,0.072,8,0.403,9,1.481,11,0.379,12,0.007,14,1.35,16,0.548,18,0.195,21,2.631,22,0.082,23,0.857,24,0.006,25,0.006,31,2.807,38,2.221,666,6.081,676,6.081,1360,5.689,1361,6.4]],["title/controllers/OptimizeController.html",[205,1.34,1362,3.533]],["body/controllers/OptimizeController.html",[0,0.139,3,0.046,4,0.046,5,0.046,8,0.257,11,0.344,12,0.007,13,1.232,14,1.224,16,0.497,18,0.247,22,0.052,24,0.004,25,0.004,31,2.241,33,0.945,84,1.202,89,1.097,90,0.842,92,1.18,94,0.481,123,3.099,138,2.054,201,1.132,205,1.176,208,1.801,223,1.709,239,1.348,242,2.126,260,0.924,261,0.958,262,1.132,264,2.296,265,2.287,268,1.535,443,3.321,1017,5.521,1138,3.129,1328,6.172,1362,4.419,1363,3.619,1364,3.619,1365,5.806,1366,5.806,1367,4.072,1368,5.806,1369,4.072,1370,4.072,1371,6.016,1372,4.072,1373,4.072,1374,6.767,1375,3.619,1376,4.072,1377,4.072,1378,5.806,1379,3.619,1380,4.072,1381,5.161,1382,4.072,1383,3.321,1384,4.072,1385,4.072,1386,4.072,1387,4.072,1388,4.072,1389,4.072,1390,4.072,1391,4.072,1392,4.072,1393,4.072,1394,4.072,1395,4.072,1396,4.072,1397,5.806,1398,4.072,1399,4.072,1400,3.321,1401,4.072,1402,4.072,1403,4.072]],["title/modules/OptimizeModule.html",[50,1.015,68,3.331]],["body/modules/OptimizeModule.html",[0,0.201,3,0.066,4,0.066,5,0.066,12,0.007,18,0.262,22,0.075,24,0.005,25,0.005,50,1.628,52,2.032,68,5.341,83,2.164,90,1.079,94,0.696,116,4.483,117,5.341,122,5.235,123,4.483,201,2.069,202,2.261,305,3.174,1362,6.213,1364,5.235,1404,5.89,1405,5.89,1406,5.89,1407,5.89,1408,5.89,1409,5.89,1410,5.89]],["title/classes/PaginationParams.html",[0,0.158,1411,3.533]],["body/classes/PaginationParams.html",[0,0.263,2,1.247,3,0.058,4,0.058,5,0.058,8,0.328,9,1.299,11,0.528,12,0.007,14,1.623,16,0.659,18,0.21,21,2.14,22,0.066,24,0.005,25,0.005,33,1.423,38,2.594,666,5.873,680,3.545,1114,6.23,1411,5.231,1412,4.627,1413,5.857,1414,5.857,1415,5.857,1416,6.873,1417,5.205,1418,5.205,1419,5.205,1420,5.205,1421,5.205,1422,6.873,1423,5.205]],["title/classes/Post.html",[0,0.158,239,1.537]],["body/classes/Post.html",[0,0.114,2,0.801,3,0.038,4,0.038,5,0.038,8,0.317,9,0.95,11,0.512,12,0.007,13,1.377,14,1.774,16,0.72,18,0.205,22,0.043,23,0.448,24,0.004,25,0.004,28,4.126,31,2,33,1.093,34,2.59,35,4.153,38,1.902,39,3.483,43,2.8,45,2.8,47,1.313,119,4.818,152,3.722,239,2.224,419,4.926,429,4.764,502,2.972,504,4.468,567,3.741,596,1.929,611,4.527,618,3.825,620,2.972,623,5.368,710,3.925,711,3.925,719,4.926,722,4.365,728,4.596,1308,4.468,1424,2.972,1425,4.596,1426,5.368,1427,3.344,1428,3.344,1429,3.344,1430,3.344,1431,3.344,1432,3.344,1433,2.972,1434,3.344,1435,2.728,1436,3.344,1437,3.344,1438,3.344,1439,3.344,1440,5.026,1441,4.468,1442,3.344,1443,2.972,1444,3.344,1445,3.344,1446,5.026,1447,4.1,1448,3.344,1449,3.344,1450,3.344,1451,3.344,1452,3.344,1453,2.972,1454,3.344,1455,3.344]],["title/classes/Post-1.html",[0,0.132,239,1.279,1456,2.94]],["body/classes/Post-1.html",[0,0.155,2,1.087,3,0.051,4,0.051,5,0.051,8,0.286,9,1.183,11,0.509,12,0.007,13,1.478,14,1.814,16,0.737,18,0.191,22,0.058,24,0.005,25,0.005,31,2.375,33,1.019,34,2.58,38,2.191,115,2.824,152,3.082,239,2.073,567,3.996,710,4.662,711,4.662,719,5.851,720,5.851,722,5.028,723,4.03,725,7.422,728,3.451,1425,5.459,1426,6.376,1457,4.03,1458,4.534,1459,4.534,1460,4.534,1461,4.534,1462,4.534,1463,4.534,1464,4.534,1465,6.376,1466,5.566,1467,4.534]],["title/interfaces/PostCountResult.html",[404,1.865,1468,3.533]],["body/interfaces/PostCountResult.html",[3,0.075,4,0.075,5,0.075,8,0.422,9,1.522,11,0.396,12,0.007,22,0.085,23,0.896,24,0.006,25,0.006,38,2.448,404,2.687,406,3.605,1468,6.577,1469,5.947,1470,7.316]],["title/classes/PostNotFoundException.html",[0,0.158,1471,3.533]],["body/classes/PostNotFoundException.html",[0,0.212,2,1.489,3,0.07,4,0.07,5,0.07,11,0.368,12,0.007,16,0.532,18,0.189,22,0.079,23,0.832,24,0.006,25,0.006,31,2.057,33,1.011,38,2.369,89,1.174,90,0.9,94,0.735,260,1.409,508,3.683,509,6.366,510,6.279,512,5.243,514,5.521,1471,6.366,1472,5.521,1473,6.211,1474,6.211]],["title/interfaces/PostSearchBody.html",[404,1.865,1475,3.331]],["body/interfaces/PostSearchBody.html",[3,0.067,4,0.067,5,0.067,8,0.376,9,1.417,11,0.51,12,0.007,13,1.65,22,0.076,23,0.798,24,0.005,25,0.005,31,2.853,38,2.567,404,2.394,406,3.212,710,5.6,711,5.6,1425,6.557,1475,5.89,1476,5.299]],["title/interfaces/PostSearchResult.html",[404,1.865,1477,3.533]],["body/interfaces/PostSearchResult.html",[3,0.071,4,0.071,5,0.071,8,0.398,9,1.47,11,0.499,12,0.007,18,0.193,22,0.081,23,0.846,24,0.006,25,0.006,38,1.79,339,3.519,404,2.537,406,3.405,414,5.92,1441,5.616,1475,4.533,1477,6.414,1478,5.616,1479,8.027,1480,6.318,1481,6.318]],["title/controllers/PostsController.html",[205,1.34,1482,3.533]],["body/controllers/PostsController.html",[0,0.109,3,0.036,4,0.036,5,0.036,8,0.201,11,0.417,12,0.007,13,1.068,14,1.486,16,0.604,18,0.253,22,0.041,23,0.426,24,0.004,25,0.004,31,1.941,33,1.147,43,1.774,84,1.003,89,1.332,90,1.022,92,1.433,94,0.377,138,2.169,201,0.885,205,0.92,208,1.408,216,3.224,223,1.928,236,2.256,237,3.681,239,2.634,240,1.524,241,1.774,242,1.663,259,1.774,260,0.722,261,0.749,262,0.885,268,1.684,316,2.285,431,5.961,432,4.307,436,4.307,440,4.307,442,2.598,443,2.598,444,2.831,449,1.663,450,2.831,488,2.169,523,1.837,632,3.3,644,2.831,708,4.701,1247,2.424,1254,2.831,1288,2.424,1411,4.987,1413,4.462,1414,3.687,1415,4.462,1482,3.687,1483,2.831,1484,3.687,1485,4.307,1486,4.307,1487,5.212,1488,4.307,1489,2.831,1490,3.185,1491,3.185,1492,3.185,1493,3.185,1494,3.185,1495,3.185,1496,3.185,1497,3.185,1498,3.185,1499,5.212,1500,3.185,1501,4.701,1502,3.185,1503,3.185,1504,3.811,1505,2.598,1506,2.831,1507,2.831,1508,3.185,1509,3.185,1510,2.424,1511,2.831,1512,3.185,1513,3.185,1514,3.185,1515,3.185,1516,3.185,1517,3.185,1518,3.185,1519,3.185,1520,3.185,1521,3.185,1522,3.185,1523,2.831,1524,3.185,1525,3.185,1526,3.185,1527,3.185,1528,3.185]],["title/injectables/PostsLoaders.html",[319,0.755,1529,3.331]],["body/injectables/PostsLoaders.html",[0,0.162,3,0.053,4,0.053,5,0.053,8,0.299,9,1.219,11,0.28,12,0.007,16,0.553,18,0.224,22,0.061,23,0.864,24,0.005,25,0.005,28,3.245,33,0.771,34,2.321,38,1.828,89,0.895,90,0.687,94,0.56,252,3.762,253,2.474,260,1.464,261,1.115,262,2.04,264,2.319,265,2.181,268,1.464,281,4.911,319,1.05,320,1.478,328,3.606,339,2.639,369,2.959,1529,4.63,1530,4.211,1531,7.339,1532,4.737,1533,6.453,1534,6.453,1535,5.736,1536,6.453,1537,6.453,1538,6.453,1539,6.453,1540,6.453,1541,4.737,1542,6.453,1543,5.736,1544,4.737]],["title/modules/PostsModule.html",[50,1.015,69,3.331]],["body/modules/PostsModule.html",[0,0.146,3,0.048,4,0.048,5,0.048,12,0.007,18,0.277,22,0.055,24,0.004,25,0.004,50,1.316,52,1.478,53,2.363,69,6.615,73,5.36,78,4.593,79,2.475,80,1.761,81,1.721,83,2.557,94,0.507,96,2.962,97,3.338,98,1.509,103,2.785,105,3.495,137,2.918,139,3.074,140,3.261,141,3.495,142,3.261,144,2.564,201,1.673,202,2.311,239,1.419,466,2.386,467,1.721,1482,5.296,1504,5.36,1505,3.495,1529,5.916,1545,3.808,1546,3.808,1547,4.284,1548,5.616,1549,4.284,1550,6.019,1551,3.495,1552,3.495,1553,5.351,1554,4.284,1555,4.284,1556,3.495,1557,3.808,1558,4.581,1559,4.284,1560,4.284,1561,4.284,1562,3.808,1563,4.284,1564,4.284,1565,4.284]],["title/classes/PostsResolver.html",[0,0.158,1558,3.533]],["body/classes/PostsResolver.html",[0,0.114,2,0.799,3,0.085,4,0.037,5,0.037,8,0.21,11,0.426,12,0.007,14,1.272,16,0.574,18,0.26,22,0.043,24,0.004,25,0.004,33,0.981,84,1.039,89,1.139,90,0.874,92,1.226,94,0.395,115,2.078,118,2.965,138,1.914,139,2.393,144,1.997,216,2.469,223,1.477,237,1.742,239,2.382,240,1.596,250,1.924,260,1.138,261,1.181,264,2.117,265,2.038,268,1.368,414,3.819,488,4.569,523,1.924,567,1.858,594,2.721,632,3.418,696,4.92,703,4.48,717,5.751,1192,2.539,1484,4.59,1504,4.912,1505,2.721,1558,3.819,1566,2.721,1567,6.717,1568,3.336,1569,6.031,1570,5.963,1571,3.336,1572,3.336,1573,3.336,1574,3.336,1575,3.336,1576,3.336,1577,3.336,1578,6.708,1579,3.336,1580,3.336,1581,3.336,1582,5.018,1583,5.018,1584,5.018,1585,3.336,1586,3.336,1587,3.336,1588,3.336,1589,3.336,1590,5.018,1591,5.018,1592,4.59,1593,2.965,1594,2.393,1595,2.539,1596,2.721,1597,3.336,1598,5.018,1599,3.336,1600,3.336,1601,3.336,1602,3.336,1603,3.336,1604,3.336,1605,3.336,1606,3.336,1607,3.336,1608,3.336,1609,3.336,1610,3.336,1611,3.336]],["title/injectables/PostsSearchService.html",[319,0.755,1548,3.162]],["body/injectables/PostsSearchService.html",[0,0.083,3,0.027,4,0.027,5,0.027,8,0.473,9,0.744,11,0.414,12,0.007,13,1.402,16,0.598,18,0.203,22,0.031,23,0.662,24,0.004,25,0.003,31,2.2,33,1.081,38,2.23,84,0.816,89,1.255,90,0.963,92,1.264,94,0.289,138,2.119,223,1.669,236,3.254,239,2.485,260,0.894,261,0.576,262,0.68,264,2.056,265,1.672,268,1.41,319,0.641,320,0.763,339,2.756,488,2.684,512,2.684,632,4.759,710,3.687,711,3.687,793,2.827,876,2.175,877,5.907,881,1.755,886,1.862,956,3.765,1400,1.996,1413,4.317,1414,4.317,1415,5.057,1425,2.999,1468,1.862,1470,5.072,1475,2.827,1477,1.862,1479,2.175,1499,4.397,1548,2.684,1556,1.996,1612,2.175,1613,3.94,1614,3.94,1615,3.94,1616,3.94,1617,3.94,1618,6.218,1619,2.447,1620,3.94,1621,2.447,1622,3.94,1623,2.447,1624,2.447,1625,2.447,1626,4.035,1627,3.94,1628,2.447,1629,2.447,1630,2.447,1631,2.447,1632,2.447,1633,6.218,1634,4.947,1635,3.94,1636,3.94,1637,3.94,1638,2.447,1639,3.94,1640,2.447,1641,4.397,1642,2.447,1643,2.447,1644,2.447,1645,2.447,1646,2.447,1647,2.447,1648,2.447,1649,2.447,1650,2.175,1651,2.175,1652,2.447,1653,2.447,1654,2.447,1655,2.447,1656,2.447,1657,3.94,1658,2.447,1659,4.947,1660,2.447,1661,2.447,1662,2.447,1663,2.447]],["title/injectables/PostsService.html",[319,0.755,1504,3.018]],["body/injectables/PostsService.html",[0,0.068,3,0.022,4,0.022,5,0.022,8,0.125,9,0.625,11,0.395,12,0.007,13,0.908,16,0.614,18,0.23,22,0.025,23,0.443,24,0.003,25,0.002,31,1.838,33,1.087,34,2.403,38,2.572,47,1.299,84,0.685,89,1.262,90,0.969,92,1.358,94,0.234,138,2.187,144,1.184,223,1.766,239,2.438,260,0.751,261,1.412,262,1.186,264,2.109,265,2.719,268,1.445,319,0.539,320,0.617,339,1.102,368,2.041,369,2.084,467,0.794,471,2.688,482,1.102,487,3.48,496,1.758,498,1.758,567,2.778,596,1.141,696,2.699,708,3.578,788,3.796,793,5.142,823,3.796,956,1.506,1413,5.734,1414,4.849,1415,5.849,1470,4.896,1471,1.506,1484,2.519,1485,2.942,1486,2.942,1487,2.942,1488,2.942,1489,2.942,1501,3.578,1504,2.151,1506,1.758,1507,1.758,1510,1.506,1511,1.758,1548,4.34,1551,4.527,1552,1.614,1556,1.614,1557,1.758,1626,1.614,1641,3.792,1650,1.758,1651,1.758,1664,1.758,1665,4.987,1666,3.309,1667,3.309,1668,1.978,1669,4.266,1670,3.309,1671,3.309,1672,1.978,1673,1.978,1674,3.309,1675,1.978,1676,3.309,1677,1.978,1678,3.309,1679,4.987,1680,1.978,1681,3.309,1682,1.978,1683,3.309,1684,1.978,1685,3.309,1686,1.978,1687,3.309,1688,1.978,1689,1.978,1690,1.978,1691,1.978,1692,1.978,1693,1.978,1694,1.978,1695,1.978,1696,1.978,1697,1.978,1698,1.978,1699,1.978,1700,1.978,1701,1.978,1702,4.933,1703,1.978,1704,1.978,1705,1.978,1706,1.978,1707,3.309,1708,1.978,1709,1.978,1710,1.758,1711,4.266,1712,1.978,1713,1.978,1714,1.978,1715,4.266,1716,1.978,1717,4.266,1718,1.978,1719,1.978,1720,1.978,1721,1.978,1722,1.758,1723,1.978,1724,1.978,1725,1.978,1726,1.978,1727,1.978,1728,1.758]],["title/classes/Product.html",[0,0.158,1729,2.891]],["body/classes/Product.html",[0,0.161,2,1.132,3,0.053,4,0.053,5,0.053,8,0.298,9,1.556,11,0.487,12,0.007,13,1.172,14,1.659,16,0.674,18,0.24,22,0.06,23,0.632,24,0.005,25,0.005,28,4.085,31,2.426,35,4.539,38,1.824,39,4.226,43,2.631,45,3.587,47,1.854,90,1.062,405,5.576,410,5.576,429,4.539,613,3.852,618,4.901,1443,4.198,1729,4.563,1730,4.198,1731,5.353,1732,4.722,1733,4.722,1734,4.722,1735,6.439,1736,4.722,1737,4.722,1738,4.722,1739,4.722,1740,4.722]],["title/controllers/ProductCategoriesController.html",[205,1.34,1741,3.533]],["body/controllers/ProductCategoriesController.html",[0,0.175,3,0.057,4,0.057,5,0.057,8,0.322,11,0.303,12,0.007,14,1.433,16,0.582,18,0.248,22,0.065,23,0.685,24,0.005,25,0.005,33,0.832,84,1.407,89,0.966,90,0.741,92,1.381,94,0.605,138,1.932,201,1.422,205,1.477,208,2.262,223,1.505,236,2.382,239,2.25,240,2.448,241,2.849,242,2.671,249,2.382,251,2.591,259,2.849,260,1.16,261,1.203,262,1.422,268,1.541,284,2.591,419,5.542,427,3.325,449,2.671,729,5.832,1729,3.185,1731,4.416,1741,5.171,1742,4.547,1743,5.542,1744,6.631,1745,5.115,1746,5.115,1747,5.115,1748,4.628,1749,4.547,1750,4.547,1751,5.115,1752,3.325,1753,5.115,1754,4.547,1755,5.115]],["title/modules/ProductCategoriesModule.html",[50,1.015,70,3.331]],["body/modules/ProductCategoriesModule.html",[0,0.199,3,0.066,4,0.066,5,0.066,12,0.007,18,0.269,22,0.075,24,0.005,25,0.005,50,1.62,52,2.016,53,2.908,70,6.47,79,3.045,80,2.402,81,2.347,83,2.147,94,0.691,201,2.059,202,2.844,466,3.255,467,2.347,1731,3.798,1741,6.19,1748,6.142,1749,5.194,1756,5.194,1757,5.194,1758,5.843,1759,5.194,1760,5.843,1761,5.843]],["title/injectables/ProductCategoriesService.html",[319,0.755,1748,3.162]],["body/injectables/ProductCategoriesService.html",[0,0.17,3,0.056,4,0.056,5,0.056,8,0.315,11,0.396,12,0.007,16,0.646,18,0.256,22,0.064,23,0.669,24,0.005,25,0.005,33,1.088,47,1.96,84,1.385,89,1.263,90,0.969,92,1.359,94,0.591,138,1.909,223,1.47,260,1.517,261,1.175,264,1.47,265,2.26,268,1.517,319,1.088,320,1.558,429,2.881,467,2.006,471,4.339,482,2.782,729,5.777,1731,3.246,1748,4.555,1750,4.439,1759,4.439,1762,4.439,1763,6.687,1764,8.052,1765,4.994,1766,4.994,1767,6.687,1768,6.687,1769,4.994,1770,4.994,1771,4.994,1772,4.994,1773,6.687,1774,4.994,1775,4.994]],["title/classes/ProductCategory.html",[0,0.158,1731,3.018]],["body/classes/ProductCategory.html",[0,0.181,2,1.27,3,0.06,4,0.06,5,0.06,8,0.334,9,1.314,11,0.459,12,0.007,13,1.266,14,1.637,16,0.665,18,0.212,22,0.068,23,0.709,24,0.005,25,0.005,28,4.063,31,2.571,35,4.478,38,1.97,39,4.478,43,2.951,45,3.874,47,2.08,90,1.125,1435,4.322,1447,5.673,1729,5.471,1731,5.046,1776,4.71,1777,6.901,1778,5.298,1779,5.298,1780,5.298,1781,5.298,1782,5.298]],["title/controllers/ProductsController.html",[205,1.34,1783,3.533]],["body/controllers/ProductsController.html",[0,0.176,3,0.058,4,0.058,5,0.058,8,0.325,11,0.305,12,0.007,14,1.439,16,0.585,18,0.249,22,0.066,23,0.69,24,0.005,25,0.005,33,0.838,84,1.413,89,0.973,90,0.747,92,1.388,94,0.609,138,1.939,201,1.432,205,1.487,208,2.278,223,1.516,236,2.399,239,2.26,240,2.465,241,2.869,242,2.689,249,2.399,251,2.609,259,2.869,260,1.168,261,1.212,262,1.432,268,1.548,284,2.609,427,3.348,449,2.689,732,5.848,1729,4.251,1743,5.568,1744,6.65,1752,4.976,1754,4.578,1777,4.578,1783,5.195,1784,4.578,1785,4.578,1786,5.15,1787,5.15,1788,4.578,1789,4.578,1790,5.15,1791,5.15,1792,5.15]],["title/modules/ProductsModule.html",[50,1.015,71,3.331]],["body/modules/ProductsModule.html",[0,0.199,3,0.066,4,0.066,5,0.066,12,0.007,18,0.269,22,0.075,24,0.005,25,0.005,50,1.62,52,2.016,53,2.908,71,6.47,79,3.045,80,2.402,81,2.347,83,2.147,94,0.691,201,2.059,202,2.844,466,3.255,467,2.347,1729,3.639,1752,5.861,1783,6.19,1789,5.194,1793,5.194,1794,5.194,1795,5.843,1796,5.194,1797,5.843,1798,5.843]],["title/injectables/ProductsService.html",[319,0.755,1752,3.018]],["body/injectables/ProductsService.html",[0,0.17,3,0.056,4,0.056,5,0.056,8,0.315,11,0.396,12,0.007,16,0.646,18,0.256,22,0.064,23,0.669,24,0.005,25,0.005,33,1.088,47,1.96,84,1.385,89,1.263,90,0.969,92,1.359,94,0.591,138,1.909,223,1.47,260,1.517,261,1.175,264,1.47,265,2.26,268,1.517,319,1.088,320,1.558,467,2.006,471,4.339,482,2.782,732,5.777,1729,4.164,1743,5.455,1744,6.568,1752,4.346,1785,5.944,1788,4.439,1796,4.439,1799,4.439,1800,4.994,1801,4.994,1802,6.687,1803,4.994,1804,4.994,1805,4.994,1806,4.994,1807,6.687,1808,4.994,1809,4.994]],["title/modules/PubSubModule.html",[50,1.015,72,3.331]],["body/modules/PubSubModule.html",[0,0.193,3,0.063,4,0.063,5,0.063,12,0.007,18,0.244,22,0.093,24,0.005,25,0.005,50,1.584,52,1.946,72,5.197,83,2.073,94,0.667,96,3.565,97,3.734,98,1.987,137,3.843,139,4.048,140,4.294,141,4.603,142,4.294,144,3.377,202,2.166,264,1.66,305,3.041,369,2.119,1562,5.015,1570,6.439,1592,4.294,1594,4.048,1595,6.426,1810,4.603,1811,7.244,1812,5.015,1813,4.603]],["title/classes/PublicFile.html",[0,0.158,1067,3.162]],["body/classes/PublicFile.html",[0,0.188,2,1.322,3,0.062,4,0.062,5,0.062,8,0.348,9,1.349,11,0.468,12,0.007,13,1.524,14,1.669,16,0.678,18,0.168,22,0.07,23,0.739,24,0.005,25,0.005,28,4.094,31,2.621,35,5.001,38,2.022,39,4.566,45,3.977,47,2.165,881,5.679,954,6.025,1067,5.392,1814,4.903,1815,5.516,1816,5.516,1817,5.516]],["title/classes/RegisterDto.html",[0,0.158,232,3.331]],["body/classes/RegisterDto.html",[0,0.236,2,1.256,3,0.059,4,0.059,5,0.059,8,0.33,9,1.305,11,0.486,12,0.007,13,1.65,14,1.731,15,2.656,16,0.703,18,0.16,19,3.823,20,3.823,21,2.155,22,0.088,23,0.702,24,0.005,25,0.005,90,1.12,232,5.541,334,3.503,362,4.623,987,6.3,1316,4.659,1318,4.659,1319,4.659,1818,4.659,1819,5.878,1820,5.242,1821,5.242,1822,5.242,1823,5.242,1824,6.906,1825,5.242,1826,5.242,1827,5.242]],["title/interfaces/RequestWithRawBody.html",[404,1.865,1828,3.533]],["body/interfaces/RequestWithRawBody.html",[3,0.072,4,0.072,5,0.072,8,0.405,9,1.485,11,0.38,12,0.007,18,0.196,22,0.082,23,0.861,24,0.006,25,0.006,219,3.853,404,2.582,406,3.464,508,3.762,1083,6.463,1138,3.464,1828,6.463,1829,5.714,1830,8.847]],["title/interfaces/RequestWithUser.html",[216,2.285,404,1.865]],["body/interfaces/RequestWithUser.html",[3,0.071,4,0.071,5,0.071,8,0.4,9,1.473,11,0.375,12,0.007,18,0.238,22,0.081,23,0.85,24,0.006,25,0.006,34,3.387,216,4.155,219,3.831,404,2.548,406,3.419,508,3.732,596,3.66,1138,3.419,1831,5.64]],["title/modules/SearchModule.html",[50,1.015,73,3.018]],["body/modules/SearchModule.html",[0,0.2,3,0.066,4,0.066,5,0.066,12,0.007,18,0.249,22,0.075,24,0.005,25,0.005,50,1.624,52,2.024,73,4.827,83,2.729,94,0.694,96,4.01,97,3.788,98,2.066,137,3.996,138,1.486,144,3.511,305,3.161,362,3.511,863,5.215,886,4.465,1039,4.785,1832,5.866,1833,7.426,1834,5.866,1835,5.866,1836,5.866,1837,5.866,1838,5.866]],["title/classes/SetDefaultCreditCardDto.html",[0,0.158,759,3.533]],["body/classes/SetDefaultCreditCardDto.html",[0,0.264,2,1.501,3,0.07,4,0.07,5,0.07,6,5.551,8,0.395,9,1.462,10,6.39,11,0.371,12,0.007,13,1.409,14,1.321,15,3.174,16,0.536,18,0.191,19,3.604,20,3.604,21,2.575,22,0.099,23,0.839,24,0.006,25,0.006,759,6.39,1839,5.568,1840,6.264]],["title/controllers/SmsController.html",[205,1.34,1841,3.533]],["body/controllers/SmsController.html",[0,0.148,3,0.049,4,0.049,5,0.049,8,0.274,11,0.36,12,0.007,14,1.282,16,0.521,18,0.244,22,0.056,23,0.582,24,0.004,25,0.004,33,0.99,38,1.723,84,1.259,89,1.149,90,0.882,92,1.236,94,0.514,138,2.098,201,1.208,205,1.255,208,1.922,216,4.185,219,3.446,236,2.832,237,2.27,239,1.439,240,2.08,241,2.422,242,2.27,249,2.025,251,2.202,259,2.422,260,0.986,261,1.023,262,1.208,265,2.055,284,3.081,368,2.91,369,2.284,371,4.363,449,2.27,523,2.508,607,5.781,609,3.309,948,2.826,966,5.406,1841,4.628,1842,3.864,1843,3.864,1844,6.081,1845,5.406,1846,4.347,1847,7.014,1848,6.081,1849,7.014,1850,4.347,1851,4.347,1852,4.347,1853,6.081,1854,4.347,1855,4.347,1856,4.777,1857,3.864,1858,4.347,1859,4.347,1860,4.347,1861,6.081,1862,6.081,1863,4.347,1864,4.347,1865,4.347,1866,4.347,1867,4.347]],["title/modules/SmsModule.html",[50,1.015,74,3.331]],["body/modules/SmsModule.html",[0,0.183,3,0.06,4,0.06,5,0.06,12,0.007,18,0.262,22,0.068,24,0.005,25,0.005,50,1.532,52,1.847,53,2.75,74,6.606,78,4.908,79,2.879,80,2.202,81,2.151,83,2.574,94,0.633,96,3.447,98,1.886,103,3.481,201,1.947,202,2.689,305,3.774,1841,5.94,1856,6.415,1857,4.761,1868,4.761,1869,4.761,1870,4.761,1871,5.356,1872,5.356,1873,5.356]],["title/injectables/SmsService.html",[319,0.755,1856,3.162]],["body/injectables/SmsService.html",[0,0.12,3,0.039,4,0.039,5,0.039,8,0.221,9,0.983,11,0.435,12,0.007,13,1.636,16,0.629,18,0.21,22,0.045,23,0.469,24,0.004,25,0.004,33,1.118,38,1.759,84,1.077,89,1.298,90,0.996,92,1.262,94,0.414,97,3.403,98,1.233,138,1.949,223,1.031,236,1.631,252,3.523,253,1.829,260,1.18,261,1.728,262,1.446,264,2.264,265,1.758,268,1.18,319,0.847,320,1.092,340,2.513,368,1.676,369,1.954,398,3.113,568,3.703,609,3.96,948,2.276,1027,2.385,1400,2.857,1819,5.856,1843,3.113,1845,4.625,1856,3.544,1874,3.113,1875,6.208,1876,5.203,1877,5.203,1878,5.203,1879,5.203,1880,6.872,1881,3.502,1882,5.203,1883,3.502,1884,5.203,1885,3.502,1886,5.203,1887,6.109,1888,3.502,1889,3.502,1890,5.203,1891,3.502,1892,3.502,1893,3.502,1894,5.203,1895,5.203,1896,5.203,1897,3.502,1898,4.625,1899,3.502,1900,3.502,1901,3.502,1902,3.502,1903,3.502,1904,3.502,1905,3.113,1906,3.502,1907,5.203,1908,3.502,1909,3.502]],["title/classes/StripeEvent.html",[0,0.158,1910,3.331]],["body/classes/StripeEvent.html",[0,0.215,2,1.508,3,0.071,4,0.071,5,0.071,8,0.397,9,1.466,11,0.372,12,0.007,13,1.413,14,1.327,16,0.539,18,0.192,22,0.08,23,0.842,24,0.006,25,0.006,28,3.72,31,2.785,45,4.321,47,2.47,1910,6.035,1911,5.592,1912,8.411,1913,6.291]],["title/modules/StripeModule.html",[50,1.015,533,2.779]],["body/modules/StripeModule.html",[0,0.199,3,0.065,4,0.065,5,0.065,12,0.007,18,0.248,22,0.074,24,0.005,25,0.005,50,1.616,52,2.008,53,2.901,79,3.038,80,2.393,81,2.338,83,2.139,94,0.688,96,3.636,98,2.05,202,2.837,305,3.982,524,5.497,533,5.478,1914,5.173,1915,5.173,1916,5.173,1917,5.82,1918,5.82]],["title/injectables/StripeService.html",[319,0.755,524,2.678]],["body/injectables/StripeService.html",[0,0.078,3,0.026,4,0.026,5,0.026,8,0.144,9,0.703,10,5.386,11,0.456,12,0.007,13,1.703,16,0.645,18,0.166,22,0.029,23,0.305,24,0.003,25,0.003,28,3.913,33,1.191,38,1.336,84,0.771,89,1.383,90,1.118,92,1.439,94,0.27,97,2.845,98,0.803,125,1.86,138,2.241,152,1.832,223,2.083,260,0.844,261,1.28,264,0.671,265,1.258,268,1.605,319,0.606,320,0.711,334,2.469,359,2.228,364,2.228,365,2.228,366,1.86,368,2.604,369,2.252,378,3.706,509,1.736,517,3.308,524,2.147,665,3.308,893,1.86,948,1.482,1027,1.553,1083,3.589,1702,2.027,1905,2.027,1919,2.027,1920,5.164,1921,3.722,1922,3.722,1923,3.722,1924,3.722,1925,3.722,1926,3.722,1927,3.722,1928,3.722,1929,3.722,1930,7.092,1931,2.28,1932,3.722,1933,2.28,1934,3.722,1935,2.28,1936,3.308,1937,3.722,1938,2.28,1939,3.722,1940,2.28,1941,4.837,1942,3.722,1943,2.28,1944,3.722,1945,2.28,1946,3.722,1947,2.28,1948,4.192,1949,2.027,1950,2.28,1951,2.28,1952,2.28,1953,2.28,1954,2.28,1955,2.28,1956,2.027,1957,3.722,1958,2.28,1959,2.28,1960,2.28,1961,2.28,1962,5.996,1963,3.722,1964,2.28,1965,2.28,1966,2.28,1967,2.28,1968,2.28,1969,2.28,1970,2.28,1971,2.28,1972,2.28,1973,4.715,1974,2.28,1975,2.28,1976,2.28,1977,3.722,1978,2.28,1979,2.28,1980,2.28,1981,2.28,1982,2.28,1983,2.28,1984,2.28,1985,2.28]],["title/controllers/StripeWebhookController.html",[205,1.34,1986,3.533]],["body/controllers/StripeWebhookController.html",[0,0.16,3,0.053,4,0.053,5,0.053,8,0.295,11,0.277,12,0.007,13,1.327,14,0.986,16,0.401,18,0.25,22,0.06,23,0.626,24,0.005,25,0.005,33,0.761,84,1.325,89,0.884,90,0.678,92,0.951,94,0.553,138,1.846,201,1.3,205,1.35,208,2.068,219,3.308,223,1.377,237,3.341,239,2.414,252,3.224,253,2.443,260,1.061,261,1.715,262,2.027,264,1.377,265,1.581,268,1.061,368,2.238,369,1.756,524,4.206,525,3.356,948,3.04,1828,5.965,1920,3.56,1936,7.296,1986,4.869,1987,4.158,1988,4.677,1989,7.291,1990,4.677,1991,4.677,1992,4.677,1993,4.677,1994,4.966,1995,4.158,1996,4.677,1997,4.677,1998,4.677,1999,4.677,2000,4.158,2001,4.677,2002,4.677,2003,6.397,2004,4.677,2005,4.677,2006,4.677]],["title/modules/StripeWebhookModule.html",[50,1.015,75,3.331]],["body/modules/StripeWebhookModule.html",[0,0.178,3,0.059,4,0.059,5,0.059,12,0.007,18,0.272,22,0.067,24,0.005,25,0.005,50,1.507,52,1.802,53,2.705,75,6.636,78,4.874,79,2.832,80,2.147,81,2.098,83,2.532,94,0.618,103,3.395,201,1.915,202,2.645,466,2.91,467,2.098,533,5.238,535,3.747,1910,3.747,1986,5.867,1994,5.96,1995,4.643,2007,4.643,2008,5.223,2009,4.643,2010,5.223,2011,5.223,2012,4.643,2013,5.223]],["title/injectables/StripeWebhookService.html",[319,0.755,1994,3.162]],["body/injectables/StripeWebhookService.html",[0,0.143,3,0.047,4,0.047,5,0.047,8,0.265,11,0.407,12,0.007,13,1.437,16,0.589,18,0.257,22,0.054,23,0.562,24,0.004,25,0.004,31,1.965,33,1.12,47,1.648,84,1.229,89,1.3,90,0.998,92,1.207,94,0.497,138,1.743,252,3.724,253,2.193,260,1.346,261,1.396,262,1.167,264,2.026,265,2.005,268,0.952,319,0.966,320,1.31,353,3.425,354,3.732,359,2.513,364,2.513,365,2.513,366,3.425,367,3.732,368,2.009,369,1.577,371,3.013,467,1.686,471,4.032,482,2.339,948,2.729,1354,3.732,1910,3.013,1920,4.517,1930,3.425,1994,4.042,2000,5.275,2012,3.732,2014,3.732,2015,5.935,2016,5.935,2017,4.199,2018,4.199,2019,5.935,2020,5.935,2021,4.199,2022,5.935,2023,6.883,2024,4.199,2025,4.199,2026,4.199,2027,4.199,2028,4.199,2029,4.199,2030,4.199,2031,4.199,2032,4.199,2033,5.935,2034,4.199,2035,4.199]],["title/interfaces/Subscriber.html",[404,1.865,2036,3.331]],["body/interfaces/Subscriber.html",[3,0.069,4,0.069,5,0.069,8,0.388,9,1.447,11,0.493,12,0.007,13,1.664,22,0.098,23,0.825,24,0.006,25,0.006,31,2.886,38,2.36,90,1.264,334,3.954,404,2.474,406,3.32,2036,5.978,2037,5.475]],["title/controllers/SubscribersController.html",[205,1.34,2038,3.533]],["body/controllers/SubscribersController.html",[0,0.16,3,0.053,4,0.053,5,0.053,8,0.296,11,0.278,12,0.007,14,1.352,16,0.625,18,0.251,22,0.06,23,0.628,24,0.005,25,0.005,33,0.764,84,1.327,89,0.887,90,0.68,92,1.485,93,3.196,94,0.555,138,2.148,144,2.809,201,1.304,205,1.355,208,2.075,223,1.887,236,2.185,239,2.123,240,2.245,241,2.614,242,2.45,249,2.185,251,2.377,259,2.614,261,1.508,268,1.454,284,2.377,427,3.05,449,2.45,539,2.809,737,5.631,1484,4.879,1523,4.171,2036,4.6,2038,4.879,2039,4.171,2040,4.171,2041,7.848,2042,8.482,2043,4.692,2044,4.692,2045,4.692,2046,4.692,2047,4.171,2048,6.411,2049,3.828,2050,5.558,2051,4.692,2052,4.692,2053,4.692,2054,4.692,2055,4.692,2056,4.692,2057,4.692,2058,4.692]],["title/modules/SubscribersModule.html",[50,1.015,76,3.331]],["body/modules/SubscribersModule.html",[0,0.188,3,0.062,4,0.062,5,0.062,12,0.007,18,0.264,22,0.07,24,0.005,25,0.005,50,1.558,52,1.896,76,5.11,83,2.019,94,0.65,96,3.505,97,3.697,98,1.935,116,4.182,117,3.943,137,3.743,144,3.289,149,4.885,201,1.98,202,2.11,268,1.247,788,4.182,954,4.182,1812,4.885,2038,6.014,2040,4.885,2049,4.483,2059,5.495,2060,5.495,2061,5.495,2062,7.122,2063,5.495,2064,5.495,2065,5.495,2066,4.885,2067,5.495,2068,5.495,2069,5.495]],["title/interfaces/SubscribersService.html",[404,1.865,2050,3.533]],["body/interfaces/SubscribersService.html",[3,0.064,4,0.064,5,0.064,8,0.361,11,0.503,12,0.007,16,0.626,18,0.223,22,0.073,23,0.767,24,0.005,25,0.005,33,1.191,84,1.515,89,1.382,90,1.061,92,1.487,404,2.301,406,3.088,414,5.568,737,6.092,882,6.463,2036,5.249,2047,5.093,2050,6.134,2070,5.093,2071,7.316,2072,7.316,2073,7.316,2074,5.73,2075,7.316,2076,5.73,2077,5.73,2078,5.73]],["title/controllers/SubscriptionsController.html",[205,1.34,2079,3.533]],["body/controllers/SubscriptionsController.html",[0,0.168,3,0.055,4,0.055,5,0.055,8,0.31,11,0.391,12,0.007,14,1.394,16,0.566,18,0.244,22,0.063,23,0.657,24,0.005,25,0.005,33,1.076,84,1.369,89,1.249,90,0.959,92,1.344,94,0.581,138,2.177,201,1.365,205,1.418,208,2.172,216,4.324,219,3.628,223,1.946,237,2.564,239,1.626,240,2.35,249,2.287,251,2.488,260,1.114,261,1.155,262,1.365,268,1.5,284,3.35,449,2.564,523,2.833,1594,3.523,2079,5.032,2080,4.365,2081,5.877,2082,5.877,2083,4.911,2084,4.911,2085,4.911,2086,4.911,2087,4.911,2088,4.911,2089,5.092,2090,4.365,2091,4.911,2092,4.911,2093,4.911,2094,4.911,2095,4.911,2096,4.911,2097,4.911]],["title/modules/SubscriptionsModule.html",[50,1.015,77,3.331]],["body/modules/SubscriptionsModule.html",[0,0.19,3,0.063,4,0.063,5,0.063,12,0.007,18,0.265,22,0.071,24,0.005,25,0.005,50,1.573,52,1.924,53,2.823,77,6.588,79,2.956,80,2.293,81,2.24,83,2.643,94,0.66,96,3.539,98,1.965,201,1.999,202,2.761,533,5.333,535,4.002,2079,6.057,2089,6.068,2090,4.959,2098,4.959,2099,5.578,2100,4.959,2101,5.578,2102,5.578]],["title/injectables/SubscriptionsService.html",[319,0.755,2089,3.162]],["body/injectables/SubscriptionsService.html",[0,0.146,3,0.048,4,0.048,5,0.048,8,0.269,11,0.411,12,0.007,13,1.5,16,0.595,18,0.212,22,0.055,23,0.572,24,0.004,25,0.004,28,3.643,33,1.131,84,1.244,89,1.313,90,1.007,92,1.221,94,0.505,97,3.742,98,1.504,138,2.086,223,1.768,260,1.363,261,1.413,262,1.67,264,2.218,265,2.03,268,1.576,319,0.978,320,1.332,368,2.044,369,2.256,371,3.065,509,3.251,524,4.752,525,3.065,948,2.777,1594,4.31,1930,6.479,1941,5.34,2081,5.34,2082,5.34,2089,4.092,2103,3.797,2104,4.272,2105,4.272,2106,6.007,2107,4.272,2108,6.007,2109,4.272,2110,6.007,2111,6.007,2112,6.007,2113,4.272,2114,6.007,2115,4.272,2116,4.272,2117,4.272]],["title/classes/Timestamp.html",[0,0.158,119,3.331]],["body/classes/Timestamp.html",[0,0.128,2,0.899,3,0.042,4,0.042,5,0.042,8,0.236,9,1.034,11,0.494,12,0.007,13,1.293,16,0.608,18,0.167,22,0.048,23,0.502,24,0.004,25,0.004,33,1.052,38,2.307,84,1.133,89,1.221,90,0.937,92,1.314,115,2.336,119,3.927,264,1.611,268,1.789,339,4.208,359,3.276,364,3.276,369,2.055,539,3.276,722,5.533,843,4.865,1592,2.855,2118,3.334,2119,6.462,2120,5.744,2121,5.473,2122,5.473,2123,5.473,2124,5.473,2125,5.473,2126,5.473,2127,4.865,2128,5.473,2129,5.473,2130,3.751,2131,5.473,2132,7.553,2133,3.751,2134,5.473,2135,7.566,2136,3.751,2137,5.473,2138,3.751,2139,3.751,2140,3.751,2141,3.751,2142,3.751,2143,3.751,2144,3.751,2145,5.473,2146,5.473,2147,3.751,2148,3.751,2149,3.751]],["title/interfaces/TokenPayload.html",[355,3.018,404,1.865]],["body/interfaces/TokenPayload.html",[3,0.072,4,0.072,5,0.072,8,0.402,9,1.477,11,0.463,12,0.007,22,0.081,23,0.853,24,0.006,25,0.006,33,1.272,38,2.396,337,7.841,340,6.329,355,5.499,404,2.559,406,3.434,919,6.439,2150,5.664]],["title/classes/TokenVerificationDto.html",[0,0.158,1132,3.533]],["body/classes/TokenVerificationDto.html",[0,0.265,2,1.514,3,0.071,4,0.071,5,0.071,8,0.398,9,1.47,11,0.374,12,0.007,13,1.416,14,1.332,15,3.201,16,0.541,18,0.193,19,3.623,20,3.623,21,2.597,22,0.099,23,0.846,24,0.006,25,0.006,277,5.045,1132,6.414,2151,5.616,2152,6.318]],["title/classes/TwoFactorAuthenticationCodeDto.html",[0,0.158,2153,3.533]],["body/classes/TwoFactorAuthenticationCodeDto.html",[0,0.268,2,1.534,3,0.072,4,0.072,5,0.072,8,0.403,9,1.481,11,0.379,12,0.007,13,1.427,14,1.35,15,3.242,16,0.548,18,0.195,19,3.652,20,3.652,21,2.631,22,0.082,24,0.006,25,0.006,2153,5.967,2154,5.689,2155,6.914,2156,6.4]],["title/controllers/TwoFactorAuthenticationController.html",[205,1.34,304,3.533]],["body/controllers/TwoFactorAuthenticationController.html",[0,0.113,3,0.037,4,0.037,5,0.037,8,0.209,11,0.356,12,0.007,14,1.268,16,0.515,18,0.246,22,0.042,24,0.004,25,0.004,33,0.979,43,2.786,84,1.035,89,1.136,90,0.872,92,1.223,94,0.393,138,2.087,152,1.634,201,0.923,205,0.959,208,1.469,209,3.588,210,4.577,214,4.079,215,2.952,216,4.133,219,3.551,223,1.472,236,2.801,237,3.495,238,2.709,239,1.1,240,1.589,241,1.85,242,1.734,243,3.469,244,2.528,246,2.952,249,1.547,250,1.916,251,1.683,252,2.66,253,1.734,259,1.85,260,0.753,261,1.415,262,1.672,264,1.97,265,1.69,268,1.134,269,4.079,273,3.806,275,2.159,282,2.709,284,3.047,289,5.346,293,2.952,302,4.097,304,3.806,368,2.393,369,1.878,609,3.806,920,2.709,1138,1.79,1328,5.742,1375,2.952,2153,5.958,2155,5.46,2157,2.952,2158,3.321,2159,5.346,2160,3.321,2161,3.321,2162,3.321,2163,3.321,2164,3.321,2165,3.321,2166,5.001,2167,3.321,2168,3.321,2169,3.321,2170,3.321,2171,3.321,2172,3.321,2173,3.321,2174,4.445,2175,3.321,2176,3.321,2177,6.693,2178,5.001,2179,5.001,2180,3.321,2181,3.321]],["title/injectables/TwoFactorAuthenticationService.html",[302,3.162,319,0.755]],["body/injectables/TwoFactorAuthenticationService.html",[0,0.131,3,0.043,4,0.043,5,0.043,8,0.241,11,0.424,12,0.007,13,1.446,16,0.614,18,0.25,22,0.049,24,0.004,25,0.004,28,3.783,33,1.167,34,3.166,84,1.15,89,1.355,90,1.04,92,1.329,94,0.453,97,3.624,98,1.349,138,2.011,223,1.635,252,3.512,253,1.999,260,1.26,261,1.307,262,1.544,264,1.635,265,1.294,268,1.483,277,2.292,281,2.914,302,3.784,319,0.904,320,1.194,328,2.914,380,5.459,596,2.209,1138,2.063,1328,5.459,1381,3.404,2155,4.532,2174,7.06,2182,3.404,2183,5.555,2184,5.555,2185,5.555,2186,3.829,2187,5.555,2188,3.829,2189,5.555,2190,3.829,2191,5.555,2192,3.829,2193,3.829,2194,3.404,2195,3.829,2196,3.404,2197,3.829,2198,3.829,2199,3.829,2200,3.829,2201,3.829,2202,3.829,2203,3.829]],["title/classes/UpdateCategoryDto.html",[0,0.158,439,3.331]],["body/classes/UpdateCategoryDto.html",[0,0.254,2,1.411,3,0.066,4,0.066,5,0.066,8,0.371,9,1.407,11,0.441,12,0.007,13,1.356,14,1.57,16,0.638,18,0.18,19,3.467,20,3.467,21,2.421,22,0.095,23,0.789,24,0.005,25,0.005,31,2.703,38,2.109,90,1.183,439,5.857,666,5.341,1114,6.213,2204,5.235,2205,5.235,2206,5.89,2207,5.235,2208,5.89]],["title/classes/UpdatePostDto.html",[0,0.158,1501,3.331]],["body/classes/UpdatePostDto.html",[0,0.244,2,1.322,3,0.062,4,0.062,5,0.062,8,0.348,9,1.349,11,0.468,12,0.007,13,1.524,14,1.669,16,0.678,18,0.168,19,3.325,20,3.687,21,2.268,22,0.091,23,0.739,24,0.005,25,0.005,31,2.621,38,2.022,152,2.715,666,5.122,710,5.145,711,5.145,712,6.346,1114,6.371,1501,5.679,2205,4.903,2207,4.903,2209,4.903,2210,5.516,2211,5.516,2212,5.516,2213,5.516]],["title/classes/User.html",[0,0.158,34,1.67]],["body/classes/User.html",[0,0.138,2,0.605,3,0.028,4,0.028,5,0.028,8,0.159,9,0.764,11,0.504,12,0.007,13,1.551,14,1.796,16,0.729,18,0.193,22,0.032,23,0.846,24,0.003,25,0.003,26,4.821,28,4.21,31,1.674,33,1.355,34,1.818,35,4.862,38,1.145,39,2.915,42,2.245,43,1.407,45,2.252,46,4.493,47,0.992,90,0.733,152,4.231,239,2.232,334,2.293,341,5.597,362,3.025,488,3.443,505,2.061,680,1.721,728,5.387,919,5.597,1067,3.935,1433,5.617,1435,2.061,1447,3.298,1453,2.245,1819,3.847,2214,2.245,2215,4.493,2216,4.493,2217,4.123,2218,4.123,2219,4.123,2220,4.123,2221,4.493,2222,4.123,2223,4.493,2224,5.777,2225,4.043,2226,2.526,2227,2.526,2228,2.526,2229,2.526,2230,4.043,2231,2.526,2232,2.526,2233,2.526,2234,2.526,2235,5.777,2236,2.526,2237,2.526,2238,2.526,2239,2.526,2240,2.526,2241,2.526,2242,2.526,2243,2.526,2244,2.526,2245,2.526,2246,2.526,2247,5.054,2248,5.054,2249,2.526,2250,2.526,2251,2.526]],["title/classes/User-1.html",[0,0.132,34,1.39,1456,2.94]],["body/classes/User-1.html",[0,0.205,2,1.44,3,0.067,4,0.067,5,0.067,8,0.379,9,1.425,11,0.446,12,0.007,13,1.373,14,1.59,16,0.646,18,0.183,22,0.077,24,0.006,25,0.006,31,2.728,34,2.712,38,2.136,115,3.743,334,3.738,720,4.902,725,7.048,1465,6.702,1466,6.702,2252,5.342,2253,6.009,2254,6.009]],["title/controllers/UsersController.html",[205,1.34,2255,3.533]],["body/controllers/UsersController.html",[0,0.155,3,0.051,4,0.051,5,0.087,8,0.286,11,0.371,12,0.007,14,1.32,16,0.536,18,0.256,22,0.058,24,0.005,25,0.005,33,1.019,84,1.297,89,1.183,90,0.908,92,1.273,94,0.536,138,2.126,201,1.26,205,1.309,208,2.005,216,4.234,219,3.509,223,1.843,237,2.368,239,1.501,240,2.17,242,2.368,249,2.112,251,2.297,252,3.172,260,1.028,261,1.067,262,1.26,268,1.42,284,3.172,442,3.699,449,2.368,523,2.615,1138,3.866,1371,6.376,1383,3.699,1535,4.03,2255,4.766,2256,4.03,2257,5.566,2258,5.566,2259,4.534,2260,4.534,2261,4.534,2262,4.534,2263,4.534,2264,4.534,2265,4.03,2266,6.262,2267,4.534,2268,4.534,2269,4.534,2270,4.534,2271,4.534,2272,4.534,2273,4.534,2274,4.534,2275,4.534,2276,4.534,2277,4.534]],["title/modules/UsersModule.html",[50,1.015,78,2.586]],["body/modules/UsersModule.html",[0,0.169,3,0.056,4,0.056,5,0.056,12,0.007,18,0.269,22,0.063,24,0.005,25,0.005,34,1.784,48,4.046,50,1.456,52,1.711,53,2.613,78,5.149,79,2.737,80,2.039,81,1.992,83,2.446,94,0.587,201,1.85,202,2.555,252,4.117,305,3.587,466,2.763,467,1.992,533,5.162,535,3.559,1060,6.186,2255,5.718,2265,4.409,2278,4.409,2279,4.96,2280,4.409,2281,4.409,2282,4.96,2283,4.96,2284,4.96,2285,4.96]],["title/injectables/UsersService.html",[252,2.053,319,0.755]],["body/injectables/UsersService.html",[0,0.055,3,0.018,4,0.018,5,0.018,8,0.102,11,0.451,12,0.007,13,1.569,16,0.653,18,0.187,22,0.021,24,0.002,25,0.002,31,1.637,33,1.241,34,2.649,38,2.44,47,0.637,48,1.325,84,0.579,89,1.44,90,1.163,92,1.525,94,0.192,138,2.278,152,2.158,223,2.073,252,1.237,260,0.635,261,1.032,262,0.451,264,2.167,265,2.827,268,1.636,278,2.807,319,0.455,320,0.506,334,2.775,340,5.47,350,1.443,351,1.443,352,2.283,358,1.443,359,0.972,364,0.972,365,0.972,368,1.765,369,1.385,370,2.487,380,2.13,400,1.443,467,0.652,471,2.363,482,0.904,524,3.34,525,1.165,741,3.337,833,2.283,1064,3.944,1079,2.487,1083,2.807,1084,3.897,1181,2.487,1710,2.487,1722,1.443,1728,1.443,1813,4.723,1898,2.487,1948,2.487,2135,3.278,2159,2.487,2215,4.395,2216,3.278,2217,1.325,2218,1.325,2219,1.325,2220,1.325,2221,3.897,2222,4.033,2223,1.443,2257,2.487,2258,2.487,2286,1.443,2287,2.798,2288,2.798,2289,2.798,2290,2.798,2291,2.798,2292,2.798,2293,2.798,2294,2.798,2295,2.798,2296,2.798,2297,3.687,2298,1.624,2299,1.624,2300,2.798,2301,2.798,2302,3.687,2303,1.624,2304,2.798,2305,1.624,2306,2.798,2307,1.624,2308,2.798,2309,1.624,2310,2.798,2311,1.624,2312,2.798,2313,1.624,2314,2.798,2315,1.624,2316,2.798,2317,1.624,2318,2.798,2319,1.624,2320,2.798,2321,1.624,2322,2.798,2323,1.624,2324,2.798,2325,1.624,2326,2.798,2327,1.624,2328,2.798,2329,1.624,2330,1.624,2331,1.624,2332,1.624,2333,1.624,2334,1.624,2335,3.687,2336,2.798,2337,2.798,2338,1.624,2339,2.798,2340,1.624,2341,1.624,2342,4.384,2343,2.798,2344,2.798,2345,2.798,2346,1.624,2347,3.687,2348,1.624,2349,5.405,2350,1.624,2351,1.624,2352,1.624,2353,1.624,2354,1.624,2355,1.624,2356,1.624,2357,1.624,2358,1.624,2359,1.624,2360,1.624,2361,1.624,2362,1.624,2363,2.798,2364,1.624]],["title/interfaces/VerificationTokenPayload.html",[404,1.865,949,3.533]],["body/interfaces/VerificationTokenPayload.html",[3,0.075,4,0.075,5,0.075,8,0.422,9,1.522,11,0.396,12,0.007,13,1.573,22,0.085,23,0.896,24,0.006,25,0.006,334,4.069,404,2.687,406,3.605,949,6.577,2365,5.947]],["title/coverage.html",[2366,5.192]],["body/coverage.html",[0,0.309,1,1.161,5,0.017,6,2.522,7,1.355,11,0.09,12,0.007,24,0.002,25,0.002,26,1.039,27,1.355,34,0.953,119,1.094,132,1.161,205,2.253,206,1.161,207,1.355,213,1.039,216,0.75,232,1.094,239,0.878,243,0.88,247,1.161,249,0.71,250,0.88,252,0.674,254,1.161,256,0.991,298,1.094,299,1.094,300,1.094,301,1.094,302,1.039,304,1.161,316,1.901,319,1.412,321,1.355,355,0.991,369,0.573,404,2.687,405,1.161,407,1.355,410,1.161,411,1.355,417,1.161,418,1.355,426,1.094,429,0.88,431,1.094,439,1.094,445,1.039,469,1.355,483,1.161,499,1.355,507,1.355,515,1.161,516,1.355,520,1.161,524,0.88,537,1.161,538,1.355,546,1.039,568,0.822,581,1.355,607,1.161,608,1.355,611,0.913,612,1.355,621,1.161,622,1.355,627,1.094,630,1.161,637,1.094,639,1.094,653,1.161,656,1.161,659,1.161,660,1.355,662,1.355,664,1.355,669,1.355,674,1.355,676,1.094,682,1.355,683,1.355,701,1.161,702,1.355,708,1.094,709,1.355,717,1.161,718,1.355,729,1.094,730,1.355,732,1.094,733,1.355,737,1.094,738,1.355,741,1.161,742,1.355,746,1.161,747,1.355,759,1.161,764,1.161,779,1.094,780,1.355,782,1.039,784,0.991,805,1.244,820,1.161,821,1.355,872,1.039,873,1.355,890,1.161,891,1.355,912,1.244,914,1.355,933,1.355,938,0.991,949,1.161,981,1.094,982,1.355,990,1.161,991,1.355,998,1.039,1009,1.355,1024,1.355,1044,1.244,1045,1.355,1056,1.244,1064,1.039,1067,1.039,1070,1.355,1108,1.355,1111,1.355,1115,1.355,1125,1.355,1128,1.161,1129,1.355,1132,1.161,1136,1.039,1147,1.355,1192,1.161,1193,1.355,1194,1.355,1204,1.161,1205,1.355,1247,1.161,1248,1.355,1259,3.24,1260,1.355,1261,1.355,1262,1.355,1280,1.355,1288,1.161,1289,1.355,1291,1.355,1295,1.355,1297,1.355,1305,1.355,1313,1.244,1314,1.355,1326,1.355,1342,1.355,1356,1.355,1360,1.355,1362,1.161,1363,1.355,1411,1.161,1412,1.355,1424,1.355,1457,1.355,1468,1.161,1469,1.355,1471,1.161,1472,1.355,1475,1.094,1476,1.355,1477,1.161,1478,1.355,1482,1.161,1483,1.355,1501,1.094,1504,0.991,1510,1.161,1529,1.094,1530,1.355,1548,1.039,1558,1.161,1566,2.162,1595,1.161,1596,1.244,1612,1.355,1626,7.897,1664,1.355,1729,0.95,1730,1.355,1731,0.991,1741,1.161,1742,1.355,1748,1.039,1752,0.991,1762,1.355,1776,1.355,1783,1.161,1784,1.355,1799,1.355,1810,1.244,1814,1.355,1818,1.355,1828,1.161,1829,1.355,1831,1.355,1839,1.355,1841,1.161,1842,1.355,1856,1.039,1874,1.355,1910,1.094,1911,1.355,1919,1.355,1986,1.161,1987,1.355,1994,1.039,2014,1.355,2036,1.094,2037,1.355,2038,1.161,2039,1.355,2050,1.161,2070,1.355,2079,1.161,2080,1.355,2089,1.039,2103,1.355,2118,1.355,2150,1.355,2151,1.355,2153,1.161,2154,1.355,2157,1.355,2182,1.355,2204,1.355,2209,1.355,2214,1.355,2252,1.355,2255,1.161,2256,1.355,2286,1.355,2365,1.355,2366,1.244,2367,1.525,2368,1.525,2369,1.525,2370,5.936,2371,2.65,2372,8.602,2373,6.471,2374,8.422,2375,7.482,2376,1.355,2377,5.217,2378,1.355,2379,7.803,2380,1.525,2381,4.2,2382,1.355,2383,5.217,2384,1.355,2385,1.355,2386,1.355,2387,3.515,2388,1.355,2389,2.65,2390,1.355,2391,1.355,2392,1.355,2393,1.355,2394,1.355,2395,1.355,2396,1.355,2397,1.355,2398,1.355,2399,1.355,2400,1.525,2401,1.525]],["title/dependencies.html",[53,2.195,2066,3.434]],["body/dependencies.html",[0,0.164,3,0.035,12,0.007,21,1.293,24,0.004,25,0.004,47,1.234,53,1.234,94,0.372,98,1.107,100,2.795,111,2.565,115,1.958,123,2.393,139,3.442,250,2.767,275,3.118,308,1.752,311,2.256,352,2.565,467,1.263,541,3.914,563,2.565,564,2.565,594,2.565,636,2.256,680,2.142,885,2.393,886,2.393,1034,2.795,1053,2.795,1088,2.795,1089,4.265,1091,2.795,1130,3.914,1138,2.585,1165,2.795,1270,4.67,1301,4.265,1379,2.795,1383,3.914,1543,2.795,1551,3.914,1552,5.309,1553,2.795,1592,4.954,1593,2.795,1594,2.256,1813,2.565,1887,2.795,1920,2.393,2049,2.565,2194,2.795,2196,2.795,2402,3.144,2403,3.144,2404,3.144,2405,3.144,2406,3.144,2407,3.144,2408,3.144,2409,3.144,2410,3.144,2411,4.798,2412,3.144,2413,5.817,2414,7.387,2415,4.798,2416,3.144,2417,6.509,2418,3.144,2419,4.798,2420,3.144,2421,3.144,2422,4.798,2423,3.144,2424,3.144,2425,3.144,2426,3.144,2427,3.144,2428,3.144,2429,3.144,2430,3.144,2431,3.144,2432,4.798,2433,3.144,2434,4.798,2435,3.144,2436,3.144,2437,3.144,2438,3.144,2439,3.144,2440,3.144,2441,3.144,2442,3.144,2443,3.144,2444,3.144,2445,3.144,2446,3.144,2447,3.144,2448,5.817,2449,4.798,2450,3.144,2451,3.144,2452,3.144,2453,3.144,2454,3.144,2455,3.144,2456,3.144,2457,3.144,2458,3.144,2459,3.144,2460,3.144,2461,3.144,2462,3.144,2463,4.798,2464,3.144,2465,3.144,2466,3.144,2467,3.144,2468,3.144,2469,3.144,2470,3.144,2471,5.817,2472,3.144,2473,3.144,2474,3.144,2475,3.144,2476,3.144,2477,3.144,2478,3.144,2479,3.144,2480,3.144,2481,3.144,2482,3.144,2483,4.798,2484,3.144,2485,3.144,2486,3.144,2487,3.144,2488,3.144,2489,3.144,2490,3.144,2491,3.144,2492,3.144,2493,3.144,2494,3.144,2495,3.144,2496,3.144,2497,3.144,2498,3.144,2499,3.144,2500,3.144,2501,3.144,2502,3.144,2503,3.144]],["title/miscellaneous/enumerations.html",[2504,2.631,2505,4.97]],["body/miscellaneous/enumerations.html",[8,0.426,12,0.007,24,0.006,25,0.006,339,4.832,353,6.606,1949,7.198,2504,4.598,2505,6.001,2506,6.751,2507,6.751,2508,6.751,2509,6.751,2510,6.751,2511,6.751,2512,6.751,2513,6.751,2514,6.751,2515,6.751]],["title/miscellaneous/functions.html",[2504,2.631,2516,4.97]],["body/miscellaneous/functions.html",[8,0.356,11,0.429,12,0.007,24,0.005,25,0.005,33,1.374,89,1.595,90,1.224,92,1.147,339,3.143,805,5.909,919,5.513,1017,6.527,1056,5.909,1059,5.015,2382,5.015,2384,7.505,2385,5.015,2386,6.439,2390,5.015,2395,5.015,2396,7.113,2397,5.015,2398,5.015,2399,6.439,2504,3.843,2516,5.015,2517,5.642,2518,5.642,2519,5.642,2520,5.642,2521,5.642,2522,5.642,2523,5.642,2524,5.642,2525,5.642,2526,5.642,2527,8.443,2528,5.642]],["title/index.html",[8,0.244,2529,3.863,2530,3.863]],["body/index.html",[4,0.058,12,0.007,24,0.005,25,0.005,116,3.906,471,2.766,541,4.187,567,2.859,813,4.562,960,4.562,1220,4.562,2120,4.562,2127,4.562,2366,4.187,2531,5.132,2532,5.132,2533,6.81,2534,5.132,2535,5.132,2536,5.132,2537,5.132,2538,5.132,2539,7.643,2540,5.132,2541,5.132,2542,5.132,2543,8.884,2544,5.132,2545,5.132,2546,5.132,2547,8.707,2548,5.132,2549,6.81,2550,5.132,2551,5.132,2552,5.132,2553,6.81,2554,6.81,2555,5.132,2556,5.132,2557,5.132,2558,6.81,2559,6.81,2560,5.132,2561,5.132,2562,5.132,2563,5.132,2564,5.132,2565,4.562,2566,5.132,2567,5.132,2568,5.132,2569,5.132,2570,5.132,2571,5.132,2572,5.132,2573,5.132,2574,5.132,2575,5.132,2576,5.132,2577,5.132,2578,5.132,2579,5.132]],["title/modules.html",[52,2.195]],["body/modules.html",[12,0.005,24,0.005,25,0.005,51,3.451,52,1.564,56,2.947,57,3.253,58,3.253,59,3.253,60,3.253,61,3.253,62,3.253,63,3.088,64,3.253,65,3.253,66,3.253,67,3.253,68,3.253,69,3.253,70,3.253,71,3.253,72,3.253,73,2.947,74,3.253,75,3.253,76,3.253,77,3.253,78,2.526,533,2.714,929,3.088,1060,3.253,1235,7.462,2565,8.495,2580,9.556,2581,9.556,2582,9.675,2583,8.394]],["title/overview.html",[2584,5.657]],["body/overview.html",[2,0.513,12,0.007,24,0.003,25,0.003,51,7.145,52,0.739,53,1.388,54,1.904,55,1.904,56,5.624,57,4.16,58,4.16,59,4.738,60,3.238,61,4.16,62,3.238,63,5.148,64,4.738,65,5.134,66,4.738,67,4.953,68,3.238,69,5.642,70,4.16,71,4.16,72,3.238,73,3.769,74,4.953,75,5.134,76,3.238,77,4.738,78,4.572,79,1.453,80,0.88,81,0.86,201,0.595,243,3.809,252,2.92,256,4.292,294,1.904,295,1.904,297,1.904,298,3.238,299,3.238,300,3.238,301,3.238,302,3.074,320,0.668,406,1.154,445,3.074,461,1.904,462,1.904,524,3.809,531,1.904,532,1.904,533,4.413,546,3.074,574,1.904,576,1.904,779,4.738,782,3.074,872,3.074,912,1.747,925,1.904,926,1.904,927,1.904,928,1.904,929,4.498,938,4.292,976,1.904,977,1.904,978,1.904,998,3.074,1004,1.904,1006,1.904,1060,4.479,1061,1.904,1062,1.904,1063,1.904,1064,4.498,1136,3.074,1142,1.904,1143,1.904,1241,1.904,1242,1.904,1320,1.904,1321,1.904,1322,1.904,1456,1.63,1504,2.934,1529,3.238,1545,1.904,1546,1.904,1548,3.074,1748,3.074,1752,2.934,1756,1.904,1757,1.904,1793,1.904,1794,1.904,1856,4.498,1868,1.904,1869,1.904,1870,1.904,1914,1.904,1915,1.904,1916,1.904,1956,1.904,1994,3.074,2007,1.904,2009,1.904,2089,3.074,2098,1.904,2100,1.904,2278,1.904,2280,1.904,2281,1.904,2584,1.904,2585,2.142,2586,2.142,2587,2.142,2588,2.142]],["title/miscellaneous/variables.html",[2504,2.631,2589,4.97]],["body/miscellaneous/variables.html",[8,0.296,11,0.502,12,0.007,13,1.429,23,1.136,24,0.005,25,0.005,26,3.196,29,4.171,30,4.171,31,2.123,32,4.171,34,1.688,90,0.68,165,4.171,268,1.064,334,2.129,339,4.725,341,5.973,362,2.809,881,3.367,970,5.699,1456,4.879,1510,4.879,1566,3.828,1567,4.171,1595,5.558,1596,5.23,1810,3.828,1819,3.571,2217,3.828,2218,3.828,2219,3.828,2220,3.828,2222,3.828,2376,4.171,2378,5.699,2388,4.171,2391,4.171,2392,5.699,2393,4.171,2394,5.699,2504,3.196,2589,4.171,2590,4.692,2591,4.692,2592,4.692,2593,4.692,2594,4.692,2595,4.692,2596,4.692,2597,4.692,2598,4.692,2599,4.692,2600,4.692,2601,4.692,2602,4.692,2603,4.692,2604,4.692,2605,4.692,2606,4.692,2607,4.692,2608,4.692,2609,4.692]]],"invertedIndex":[["",{"_index":12,"title":{},"body":{"classes/AddCreditCardDto.html":{},"classes/Address.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"interfaces/BookProperties.html":{},"interfaces/CarProperties.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"classes/Category.html":{},"classes/CategoryNotFoundException.html":{},"controllers/ChargeController.html":{},"modules/ChargeModule.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/CheckVerificationCodeDto.html":{},"classes/Comment.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostInput.html":{},"classes/CreateProductCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateSubscriberDto.html":{},"classes/CreateUserDto.html":{},"controllers/CreditCardsController.html":{},"modules/CreditCardsModule.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"modules/DatabaseModule.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullInterceptor.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/FindOneParams.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthenticationModule.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/GraphqlJwtAuthGuard.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/Log.html":{},"classes/LogInDto.html":{},"modules/LoggerModule.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"classes/Message.html":{},"classes/ObjectWithIdDto.html":{},"controllers/OptimizeController.html":{},"modules/OptimizeModule.html":{},"classes/PaginationParams.html":{},"classes/Post.html":{},"classes/Post-1.html":{},"interfaces/PostCountResult.html":{},"classes/PostNotFoundException.html":{},"interfaces/PostSearchBody.html":{},"interfaces/PostSearchResult.html":{},"controllers/PostsController.html":{},"injectables/PostsLoaders.html":{},"modules/PostsModule.html":{},"classes/PostsResolver.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"classes/Product.html":{},"controllers/ProductCategoriesController.html":{},"modules/ProductCategoriesModule.html":{},"injectables/ProductCategoriesService.html":{},"classes/ProductCategory.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"modules/PubSubModule.html":{},"classes/PublicFile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithRawBody.html":{},"interfaces/RequestWithUser.html":{},"modules/SearchModule.html":{},"classes/SetDefaultCreditCardDto.html":{},"controllers/SmsController.html":{},"modules/SmsModule.html":{},"injectables/SmsService.html":{},"classes/StripeEvent.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"modules/StripeWebhookModule.html":{},"injectables/StripeWebhookService.html":{},"interfaces/Subscriber.html":{},"controllers/SubscribersController.html":{},"modules/SubscribersModule.html":{},"interfaces/SubscribersService.html":{},"controllers/SubscriptionsController.html":{},"modules/SubscriptionsModule.html":{},"injectables/SubscriptionsService.html":{},"classes/Timestamp.html":{},"interfaces/TokenPayload.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/VerificationTokenPayload.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":1626,"title":{},"body":{"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["0.1.13",{"_index":2496,"title":{},"body":{"dependencies.html":{}}}],["0.12.2",{"_index":2473,"title":{},"body":{"dependencies.html":{}}}],["0.2.38",{"_index":2502,"title":{},"body":{"dependencies.html":{}}}],["0.3.1",{"_index":2472,"title":{},"body":{"dependencies.html":{}}}],["0.4.0",{"_index":2433,"title":{},"body":{"dependencies.html":{}}}],["0.4.1",{"_index":2413,"title":{},"body":{"dependencies.html":{}}}],["0.4.34",{"_index":2423,"title":{},"body":{"dependencies.html":{}}}],["0.5",{"_index":1239,"title":{},"body":{"controllers/HealthController.html":{}}}],["0.5.5",{"_index":2411,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":2462,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":2375,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":2387,"title":{},"body":{"coverage.html":{}}}],["0/17",{"_index":2389,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":2374,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":2372,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":2379,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":2373,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":2370,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":2380,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":2381,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":2371,"title":{},"body":{"coverage.html":{}}}],["08",{"_index":1955,"title":{},"body":{"injectables/StripeService.html":{}}}],["1",{"_index":1456,"title":{"classes/Post-1.html":{},"classes/User-1.html":{}},"body":{"overview.html":{},"miscellaneous/variables.html":{}}}],["1.0.0",{"_index":2490,"title":{},"body":{"dependencies.html":{}}}],["1.0.1",{"_index":2415,"title":{},"body":{"dependencies.html":{}}}],["1.0.33",{"_index":2452,"title":{},"body":{"dependencies.html":{}}}],["1.1.15",{"_index":2403,"title":{},"body":{"dependencies.html":{}}}],["1.24.4",{"_index":2482,"title":{},"body":{"dependencies.html":{}}}],["1.3.7",{"_index":2408,"title":{},"body":{"dependencies.html":{}}}],["1.4.0",{"_index":2454,"title":{},"body":{"dependencies.html":{}}}],["1.4.2",{"_index":2435,"title":{},"body":{"dependencies.html":{}}}],["1.4.3",{"_index":2445,"title":{},"body":{"dependencies.html":{}}}],["1.4.4",{"_index":2493,"title":{},"body":{"dependencies.html":{}}}],["1.4.5",{"_index":2474,"title":{},"body":{"dependencies.html":{}}}],["1.7.2",{"_index":2437,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":358,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/UsersService.html":{}}}],["1024",{"_index":1226,"title":{},"body":{"controllers/HealthController.html":{}}}],["11",{"_index":2588,"title":{},"body":{"overview.html":{}}}],["12.0.1",{"_index":2488,"title":{},"body":{"dependencies.html":{}}}],["120",{"_index":1564,"title":{},"body":{"modules/PostsModule.html":{}}}],["15.5.0",{"_index":2476,"title":{},"body":{"dependencies.html":{}}}],["17.1.0",{"_index":2439,"title":{},"body":{"dependencies.html":{}}}],["17.1.1",{"_index":2412,"title":{},"body":{"dependencies.html":{}}}],["19",{"_index":2585,"title":{},"body":{"overview.html":{}}}],["2.0.0",{"_index":2471,"title":{},"body":{"dependencies.html":{}}}],["2.0.9",{"_index":2450,"title":{},"body":{"dependencies.html":{}}}],["2.1.12",{"_index":2456,"title":{},"body":{"dependencies.html":{}}}],["2.10.3",{"_index":2431,"title":{},"body":{"dependencies.html":{}}}],["2.19.2",{"_index":2466,"title":{},"body":{"dependencies.html":{}}}],["2.3.1",{"_index":2478,"title":{},"body":{"dependencies.html":{}}}],["2.7.0",{"_index":2425,"title":{},"body":{"dependencies.html":{}}}],["2.724.0",{"_index":2467,"title":{},"body":{"dependencies.html":{}}}],["2020",{"_index":1954,"title":{},"body":{"injectables/StripeService.html":{}}}],["23505",{"_index":2510,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["27",{"_index":1956,"title":{},"body":{"injectables/StripeService.html":{},"overview.html":{}}}],["2fa",{"_index":2158,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["3.0.0",{"_index":2427,"title":{},"body":{"dependencies.html":{}}}],["3.0.2",{"_index":2498,"title":{},"body":{"dependencies.html":{}}}],["3.0.3",{"_index":2451,"title":{},"body":{"dependencies.html":{}}}],["3.15.1",{"_index":2429,"title":{},"body":{"dependencies.html":{}}}],["3.2.1",{"_index":2460,"title":{},"body":{"dependencies.html":{}}}],["3.22.4",{"_index":2469,"title":{},"body":{"dependencies.html":{}}}],["3.3.0",{"_index":2465,"title":{},"body":{"dependencies.html":{}}}],["3.4.0",{"_index":2470,"title":{},"body":{"dependencies.html":{}}}],["3.66.0",{"_index":2501,"title":{},"body":{"dependencies.html":{}}}],["300",{"_index":1225,"title":{},"body":{"controllers/HealthController.html":{}}}],["300mb",{"_index":1221,"title":{},"body":{"controllers/HealthController.html":{}}}],["34",{"_index":2586,"title":{},"body":{"overview.html":{}}}],["3600",{"_index":2600,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4.0.0",{"_index":2489,"title":{},"body":{"dependencies.html":{}}}],["4.0.1",{"_index":2468,"title":{},"body":{"dependencies.html":{}}}],["4.11.0",{"_index":2477,"title":{},"body":{"dependencies.html":{}}}],["4.19.3",{"_index":2443,"title":{},"body":{"dependencies.html":{}}}],["400",{"_index":1341,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["404",{"_index":1190,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["48",{"_index":2587,"title":{},"body":{"overview.html":{}}}],["48123123123",{"_index":2606,"title":{},"body":{"miscellaneous/variables.html":{}}}],["50",{"_index":1234,"title":{},"body":{"controllers/HealthController.html":{}}}],["500",{"_index":1339,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["6.4.0",{"_index":2447,"title":{},"body":{"dependencies.html":{}}}],["6.4.17",{"_index":2487,"title":{},"body":{"dependencies.html":{}}}],["7.0.0",{"_index":2441,"title":{},"body":{"dependencies.html":{}}}],["7.0.1",{"_index":2484,"title":{},"body":{"dependencies.html":{}}}],["7.0.2",{"_index":2480,"title":{},"body":{"dependencies.html":{}}}],["7.11.0",{"_index":2418,"title":{},"body":{"dependencies.html":{}}}],["7.3.1",{"_index":2499,"title":{},"body":{"dependencies.html":{}}}],["7.9.0",{"_index":2405,"title":{},"body":{"dependencies.html":{}}}],["8.0.0",{"_index":2417,"title":{},"body":{"dependencies.html":{}}}],["8.0.1",{"_index":2419,"title":{},"body":{"dependencies.html":{}}}],["8.0.2",{"_index":2420,"title":{},"body":{"dependencies.html":{}}}],["8.0.9",{"_index":2414,"title":{},"body":{"dependencies.html":{}}}],["8.154.0",{"_index":2500,"title":{},"body":{"dependencies.html":{}}}],["8.2.0",{"_index":2492,"title":{},"body":{"dependencies.html":{}}}],["8.3.0",{"_index":2503,"title":{},"body":{"dependencies.html":{}}}],["82.0.0",{"_index":2475,"title":{},"body":{"dependencies.html":{}}}],["9.0.2",{"_index":2486,"title":{},"body":{"dependencies.html":{}}}],["9]\\d{1,14",{"_index":1824,"title":{},"body":{"classes/RegisterDto.html":{}}}],["__dirname",{"_index":869,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["access",{"_index":1709,"title":{},"body":{"injectables/PostsService.html":{}}}],["access_token",{"_index":1175,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["accesstokencookie",{"_index":273,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["accountsid",{"_index":1888,"title":{},"body":{"injectables/SmsService.html":{}}}],["addavatar",{"_index":2257,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["addavatar(@req",{"_index":2271,"title":{},"body":{"controllers/UsersController.html":{}}}],["addavatar(request",{"_index":2259,"title":{},"body":{"controllers/UsersController.html":{}}}],["addavatar(userid",{"_index":2301,"title":{},"body":{"injectables/UsersService.html":{}}}],["addcreditcard",{"_index":749,"title":{},"body":{"controllers/CreditCardsController.html":{}}}],["addcreditcard(@body",{"_index":767,"title":{},"body":{"controllers/CreditCardsController.html":{}}}],["addcreditcard(creditcard",{"_index":752,"title":{},"body":{"controllers/CreditCardsController.html":{}}}],["addcreditcarddto",{"_index":1,"title":{"classes/AddCreditCardDto.html":{}},"body":{"classes/AddCreditCardDto.html":{},"controllers/CreditCardsController.html":{},"coverage.html":{}}}],["address",{"_index":26,"title":{"classes/Address.html":{}},"body":{"classes/Address.html":{},"injectables/EmailConfirmationService.html":{},"classes/User.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["address.entity",{"_index":2249,"title":{},"body":{"classes/User.html":{}}}],["addsubscriber",{"_index":2071,"title":{},"body":{"interfaces/SubscribersService.html":{}}}],["addsubscriber(subscriber",{"_index":2073,"title":{},"body":{"interfaces/SubscribersService.html":{}}}],["adm",{"_index":2458,"title":{},"body":{"dependencies.html":{}}}],["age=${this.configservice.get('jwt_access_token_expiration_time",{"_index":387,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["age=${this.configservice.get('jwt_refresh_token_expiration_time",{"_index":391,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["age=0",{"_index":392,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["allocated",{"_index":1228,"title":{},"body":{"controllers/HealthController.html":{}}}],["already",{"_index":371,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/EmailConfirmationService.html":{},"controllers/SmsController.html":{},"injectables/StripeWebhookService.html":{},"injectables/SubscriptionsService.html":{}}}],["amazing",{"_index":2566,"title":{},"body":{"index.html":{}}}],["amount",{"_index":665,"title":{},"body":{"classes/CreateChargeDto.html":{},"injectables/StripeService.html":{}}}],["amqp",{"_index":2459,"title":{},"body":{"dependencies.html":{}}}],["amqplib",{"_index":2461,"title":{},"body":{"dependencies.html":{}}}],["anyfilesinterceptor",{"_index":1382,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["apiversion",{"_index":1953,"title":{},"body":{"injectables/StripeService.html":{}}}],["apollo",{"_index":2463,"title":{},"body":{"dependencies.html":{}}}],["app",{"_index":2545,"title":{},"body":{"index.html":{}}}],["application",{"_index":958,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["applications",{"_index":2538,"title":{},"body":{"index.html":{}}}],["apply(logsmiddleware",{"_index":203,"title":{},"body":{"modules/AppModule.html":{}}}],["appmodule",{"_index":51,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["approved",{"_index":1904,"title":{},"body":{"injectables/SmsService.html":{}}}],["args",{"_index":1581,"title":{},"body":{"classes/PostsResolver.html":{}}}],["args('input",{"_index":1608,"title":{},"body":{"classes/PostsResolver.html":{}}}],["array",{"_index":1441,"title":{},"body":{"classes/Post.html":{},"interfaces/PostSearchResult.html":{}}}],["asc",{"_index":1651,"title":{},"body":{"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{}}}],["async",{"_index":138,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/ChargeController.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"controllers/CommentsController.html":{},"classes/CreateCommentHandler.html":{},"controllers/CreditCardsController.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"controllers/EmailConfirmationController.html":{},"injectables/EmailConfirmationService.html":{},"controllers/EmailSchedulingController.html":{},"injectables/FilesService.html":{},"classes/GetCommentsHandler.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsService.html":{},"controllers/OptimizeController.html":{},"controllers/PostsController.html":{},"classes/PostsResolver.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"controllers/ProductCategoriesController.html":{},"injectables/ProductCategoriesService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"modules/SearchModule.html":{},"controllers/SmsController.html":{},"injectables/SmsService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/StripeWebhookService.html":{},"controllers/SubscribersController.html":{},"controllers/SubscriptionsController.html":{},"injectables/SubscriptionsService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["attachcreditcard",{"_index":1921,"title":{},"body":{"injectables/StripeService.html":{}}}],["attachcreditcard(paymentmethodid",{"_index":1929,"title":{},"body":{"injectables/StripeService.html":{}}}],["auth",{"_index":1039,"title":{},"body":{"injectables/EmailService.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/SearchModule.html":{}}}],["auth.guard",{"_index":1588,"title":{},"body":{"classes/PostsResolver.html":{}}}],["auth.guard.ts",{"_index":1194,"title":{},"body":{"injectables/GraphqlJwtAuthGuard.html":{},"coverage.html":{}}}],["auth.guard.ts:7",{"_index":1197,"title":{},"body":{"injectables/GraphqlJwtAuthGuard.html":{}}}],["auth.oauth2client",{"_index":1164,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authenticate",{"_index":210,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["authenticate(@body",{"_index":1140,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["authenticate(@req",{"_index":288,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["authenticate(request",{"_index":215,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["authenticate(token",{"_index":1154,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authenticate(tokendata",{"_index":1131,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["authentication",{"_index":209,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/ChatService.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["authentication.controller",{"_index":306,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["authentication.guard",{"_index":251,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/CategoriesController.html":{},"controllers/ChargeController.html":{},"controllers/CommentsController.html":{},"controllers/CreditCardsController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/EmailSchedulingController.html":{},"controllers/ProductCategoriesController.html":{},"controllers/ProductsController.html":{},"controllers/SmsController.html":{},"controllers/SubscribersController.html":{},"controllers/SubscriptionsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{}}}],["authentication.guard.ts",{"_index":1260,"title":{},"body":{"injectables/JwtAuthenticationGuard.html":{},"coverage.html":{}}}],["authentication.service",{"_index":244,"title":{},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/LocalStrategy.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["authentication/authentication.module",{"_index":102,"title":{},"body":{"modules/AppModule.html":{},"modules/ChatModule.html":{},"modules/GoogleAuthenticationModule.html":{}}}],["authentication/authentication.service",{"_index":593,"title":{},"body":{"injectables/ChatService.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["authentication/graphql",{"_index":1587,"title":{},"body":{"classes/PostsResolver.html":{}}}],["authentication/jwt",{"_index":449,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/ChargeController.html":{},"controllers/CommentsController.html":{},"controllers/CreditCardsController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/EmailSchedulingController.html":{},"controllers/PostsController.html":{},"controllers/ProductCategoriesController.html":{},"controllers/ProductsController.html":{},"controllers/SmsController.html":{},"controllers/SubscribersController.html":{},"controllers/SubscriptionsController.html":{},"controllers/UsersController.html":{}}}],["authentication/requestwithuser.interface",{"_index":523,"title":{},"body":{"controllers/ChargeController.html":{},"controllers/CommentsController.html":{},"controllers/CreditCardsController.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"controllers/PostsController.html":{},"classes/PostsResolver.html":{},"controllers/SmsController.html":{},"controllers/SubscriptionsController.html":{},"controllers/UsersController.html":{}}}],["authentication=${token",{"_index":384,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["authenticationcontroller",{"_index":206,"title":{"controllers/AuthenticationController.html":{}},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"coverage.html":{}}}],["authenticationmodule",{"_index":56,"title":{"modules/AuthenticationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/ChatModule.html":{},"modules/GoogleAuthenticationModule.html":{},"modules.html":{},"overview.html":{}}}],["authenticationservice",{"_index":243,"title":{"injectables/AuthenticationService.html":{}},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/ChatService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/LocalStrategy.html":{},"controllers/TwoFactorAuthenticationController.html":{},"coverage.html":{},"overview.html":{}}}],["authenticationtoken",{"_index":603,"title":{},"body":{"injectables/ChatService.html":{}}}],["authenticator",{"_index":2193,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["authenticator.generatesecret",{"_index":2197,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["authenticator.keyuri(user.email",{"_index":2198,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["authenticator.verify",{"_index":2201,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["authguard",{"_index":1198,"title":{},"body":{"injectables/GraphqlJwtAuthGuard.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/LocalAuthenticationGuard.html":{}}}],["authguard('jwt",{"_index":1200,"title":{},"body":{"injectables/GraphqlJwtAuthGuard.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtTwoFactorGuard.html":{}}}],["authguard('local",{"_index":1296,"title":{},"body":{"injectables/LocalAuthenticationGuard.html":{}}}],["author",{"_index":567,"title":{},"body":{"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"classes/Comment.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentHandler.html":{},"classes/Message.html":{},"classes/Post.html":{},"classes/Post-1.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"index.html":{}}}],["author.posts",{"_index":620,"title":{},"body":{"classes/Comment.html":{},"classes/Post.html":{}}}],["authorid",{"_index":1425,"title":{},"body":{"classes/Post.html":{},"classes/Post-1.html":{},"interfaces/PostSearchBody.html":{},"injectables/PostsSearchService.html":{}}}],["authorids",{"_index":1534,"title":{},"body":{"injectables/PostsLoaders.html":{}}}],["authorids.map(authorid",{"_index":1539,"title":{},"body":{"injectables/PostsLoaders.html":{}}}],["authors",{"_index":408,"title":{},"body":{"interfaces/BookProperties.html":{}}}],["authtoken",{"_index":1890,"title":{},"body":{"injectables/SmsService.html":{}}}],["autoschemafile",{"_index":148,"title":{},"body":{"modules/AppModule.html":{}}}],["available",{"_index":1235,"title":{},"body":{"controllers/HealthController.html":{},"modules.html":{}}}],["avatar",{"_index":2215,"title":{},"body":{"classes/User.html":{},"injectables/UsersService.html":{}}}],["await",{"_index":265,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/CategoriesService.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"classes/CreateCommentHandler.html":{},"controllers/CreditCardsController.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"controllers/EmailConfirmationController.html":{},"injectables/EmailConfirmationService.html":{},"injectables/FilesService.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LogsService.html":{},"controllers/OptimizeController.html":{},"injectables/PostsLoaders.html":{},"classes/PostsResolver.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"injectables/ProductCategoriesService.html":{},"injectables/ProductsService.html":{},"controllers/SmsController.html":{},"injectables/SmsService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/StripeWebhookService.html":{},"injectables/SubscriptionsService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"injectables/UsersService.html":{}}}],["aws",{"_index":1088,"title":{},"body":{"injectables/FilesService.html":{},"dependencies.html":{}}}],["aws_access_key_id",{"_index":169,"title":{},"body":{"modules/AppModule.html":{}}}],["aws_public_bucket_name",{"_index":171,"title":{},"body":{"modules/AppModule.html":{}}}],["aws_region",{"_index":168,"title":{},"body":{"modules/AppModule.html":{}}}],["aws_secret_access_key",{"_index":170,"title":{},"body":{"modules/AppModule.html":{}}}],["backers",{"_index":2567,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":948,"title":{},"body":{"injectables/EmailConfirmationService.html":{},"controllers/SmsController.html":{},"injectables/SmsService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/StripeWebhookService.html":{},"injectables/SubscriptionsService.html":{}}}],["badrequestexception('bad",{"_index":975,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["badrequestexception('credit",{"_index":1979,"title":{},"body":{"injectables/StripeService.html":{}}}],["badrequestexception('customer",{"_index":2113,"title":{},"body":{"injectables/SubscriptionsService.html":{}}}],["badrequestexception('email",{"_index":965,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["badrequestexception('missing",{"_index":1998,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["badrequestexception('phone",{"_index":1862,"title":{},"body":{"controllers/SmsController.html":{}}}],["badrequestexception('this",{"_index":2028,"title":{},"body":{"injectables/StripeWebhookService.html":{}}}],["badrequestexception('wrong",{"_index":1905,"title":{},"body":{"injectables/SmsService.html":{},"injectables/StripeService.html":{}}}],["batchauthors",{"_index":1531,"title":{},"body":{"injectables/PostsLoaders.html":{}}}],["bcrypt",{"_index":352,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["bcrypt.compare",{"_index":400,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/UsersService.html":{}}}],["bcrypt.hash(refreshtoken",{"_index":2362,"title":{},"body":{"injectables/UsersService.html":{}}}],["bcrypt.hash(registrationdata.password",{"_index":357,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["body",{"_index":236,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/CategoriesController.html":{},"controllers/ChargeController.html":{},"controllers/CommentsController.html":{},"controllers/CreditCardsController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/EmailSchedulingController.html":{},"injectables/FilesService.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/PostsController.html":{},"injectables/PostsSearchService.html":{},"controllers/ProductCategoriesController.html":{},"controllers/ProductsController.html":{},"controllers/SmsController.html":{},"injectables/SmsService.html":{},"controllers/SubscribersController.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["body.count",{"_index":1640,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["body.hits.hits",{"_index":1653,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["body.hits.total.value",{"_index":1652,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["bookproperties",{"_index":405,"title":{"interfaces/BookProperties.html":{}},"body":{"interfaces/BookProperties.html":{},"classes/Product.html":{},"coverage.html":{}}}],["bool",{"_index":1645,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["boolean",{"_index":919,"title":{},"body":{"guards/EmailConfirmationGuard.html":{},"interfaces/TokenPayload.html":{},"classes/User.html":{},"miscellaneous/functions.html":{}}}],["boolean(configservice.get('graphql_playground",{"_index":147,"title":{},"body":{"modules/AppModule.html":{}}}],["bootstrap",{"_index":2384,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["brand",{"_index":412,"title":{},"body":{"interfaces/CarProperties.html":{}}}],["browse",{"_index":2582,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":2580,"title":{},"body":{"modules.html":{}}}],["bucket",{"_index":1095,"title":{},"body":{"injectables/FilesService.html":{}}}],["buffer",{"_index":1083,"title":{},"body":{"injectables/FilesService.html":{},"interfaces/RequestWithRawBody.html":{},"injectables/StripeService.html":{},"injectables/UsersService.html":{}}}],["buffer.from(job.returnvalue",{"_index":1401,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["building",{"_index":2534,"title":{},"body":{"index.html":{}}}],["bull",{"_index":1379,"title":{},"body":{"controllers/OptimizeController.html":{},"dependencies.html":{}}}],["bullmodule",{"_index":122,"title":{},"body":{"modules/AppModule.html":{},"modules/OptimizeModule.html":{}}}],["bullmodule.forrootasync",{"_index":136,"title":{},"body":{"modules/AppModule.html":{}}}],["bullmodule.registerqueue",{"_index":1406,"title":{},"body":{"modules/OptimizeModule.html":{}}}],["cache",{"_index":1551,"title":{},"body":{"modules/PostsModule.html":{},"injectables/PostsService.html":{},"dependencies.html":{}}}],["cache_key_metadata",{"_index":1253,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["cache_manager",{"_index":1688,"title":{},"body":{"injectables/PostsService.html":{}}}],["cacheinterceptor",{"_index":1249,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["cachekey",{"_index":1254,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{},"controllers/PostsController.html":{}}}],["cachekey(get_posts_cache_key",{"_index":1515,"title":{},"body":{"controllers/PostsController.html":{}}}],["cachemanager",{"_index":1669,"title":{},"body":{"injectables/PostsService.html":{}}}],["cachemodule",{"_index":1554,"title":{},"body":{"modules/PostsModule.html":{}}}],["cachemodule.registerasync",{"_index":1561,"title":{},"body":{"modules/PostsModule.html":{}}}],["cachettl",{"_index":1503,"title":{},"body":{"controllers/PostsController.html":{}}}],["cachettl(120",{"_index":1516,"title":{},"body":{"controllers/PostsController.html":{}}}],["callhandler",{"_index":1049,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["canactivate",{"_index":915,"title":{},"body":{"guards/EmailConfirmationGuard.html":{}}}],["canactivate(context",{"_index":916,"title":{},"body":{"guards/EmailConfirmationGuard.html":{}}}],["card",{"_index":1973,"title":{},"body":{"injectables/StripeService.html":{}}}],["cards",{"_index":748,"title":{},"body":{"controllers/CreditCardsController.html":{}}}],["cards/creditcards.controller.ts",{"_index":747,"title":{},"body":{"controllers/CreditCardsController.html":{},"coverage.html":{}}}],["cards/creditcards.controller.ts:17",{"_index":753,"title":{},"body":{"controllers/CreditCardsController.html":{}}}],["cards/creditcards.controller.ts:24",{"_index":761,"title":{},"body":{"controllers/CreditCardsController.html":{}}}],["cards/creditcards.controller.ts:31",{"_index":757,"title":{},"body":{"controllers/CreditCardsController.html":{}}}],["cards/creditcards.module",{"_index":126,"title":{},"body":{"modules/AppModule.html":{}}}],["cards/creditcards.module.ts",{"_index":777,"title":{},"body":{"modules/CreditCardsModule.html":{}}}],["cards/dto/addcreditcarddto.ts",{"_index":7,"title":{},"body":{"classes/AddCreditCardDto.html":{},"coverage.html":{}}}],["cards/dto/addcreditcarddto.ts:6",{"_index":17,"title":{},"body":{"classes/AddCreditCardDto.html":{}}}],["cards/dto/setdefaultcreditcard.dto.ts",{"_index":1839,"title":{},"body":{"classes/SetDefaultCreditCardDto.html":{},"coverage.html":{}}}],["cards/dto/setdefaultcreditcard.dto.ts:6",{"_index":1840,"title":{},"body":{"classes/SetDefaultCreditCardDto.html":{}}}],["carproperties",{"_index":410,"title":{"interfaces/CarProperties.html":{}},"body":{"interfaces/CarProperties.html":{},"classes/Product.html":{},"coverage.html":{}}}],["cascade",{"_index":2225,"title":{},"body":{"classes/User.html":{}}}],["case",{"_index":2599,"title":{},"body":{"miscellaneous/variables.html":{}}}],["catch",{"_index":364,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/DatabaseLogger.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"injectables/EmailConfirmationService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/StripeService.html":{},"injectables/StripeWebhookService.html":{},"classes/Timestamp.html":{},"injectables/UsersService.html":{}}}],["categories",{"_index":419,"title":{},"body":{"controllers/CategoriesController.html":{},"classes/Post.html":{},"controllers/ProductCategoriesController.html":{}}}],["categories.controller",{"_index":464,"title":{},"body":{"modules/CategoriesModule.html":{}}}],["categories.service",{"_index":446,"title":{},"body":{"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{}}}],["categories/categories.module",{"_index":104,"title":{},"body":{"modules/AppModule.html":{}}}],["categories/category.entity",{"_index":1449,"title":{},"body":{"classes/Post.html":{}}}],["categoriescontroller",{"_index":417,"title":{"controllers/CategoriesController.html":{}},"body":{"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"coverage.html":{}}}],["categoriesmodule",{"_index":57,"title":{"modules/CategoriesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CategoriesModule.html":{},"modules.html":{},"overview.html":{}}}],["categoriesrepository",{"_index":473,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["categoriesservice",{"_index":445,"title":{"injectables/CategoriesService.html":{}},"body":{"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"coverage.html":{},"overview.html":{}}}],["category",{"_index":429,"title":{"classes/Category.html":{}},"body":{"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"classes/Category.html":{},"classes/CreateProductDto.html":{},"classes/Post.html":{},"classes/Product.html":{},"injectables/ProductCategoriesService.html":{},"coverage.html":{}}}],["category.entity",{"_index":465,"title":{},"body":{"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{}}}],["category.posts",{"_index":1454,"title":{},"body":{"classes/Post.html":{}}}],["category.products",{"_index":1740,"title":{},"body":{"classes/Product.html":{}}}],["categorynotfoundexception",{"_index":483,"title":{"classes/CategoryNotFoundException.html":{}},"body":{"injectables/CategoriesService.html":{},"classes/CategoryNotFoundException.html":{},"coverage.html":{}}}],["categorynotfoundexception(id",{"_index":490,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["channel",{"_index":1899,"title":{},"body":{"injectables/SmsService.html":{}}}],["charge",{"_index":517,"title":{},"body":{"controllers/ChargeController.html":{},"injectables/StripeService.html":{}}}],["charge(amount",{"_index":1932,"title":{},"body":{"injectables/StripeService.html":{}}}],["charge.controller",{"_index":536,"title":{},"body":{"modules/ChargeModule.html":{}}}],["charge.paymentmethodid",{"_index":529,"title":{},"body":{"controllers/ChargeController.html":{}}}],["charge/charge.module",{"_index":124,"title":{},"body":{"modules/AppModule.html":{}}}],["chargecontroller",{"_index":515,"title":{"controllers/ChargeController.html":{}},"body":{"controllers/ChargeController.html":{},"modules/ChargeModule.html":{},"coverage.html":{}}}],["chargemodule",{"_index":58,"title":{"modules/ChargeModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ChargeModule.html":{},"modules.html":{},"overview.html":{}}}],["chat.gateway",{"_index":578,"title":{},"body":{"modules/ChatModule.html":{}}}],["chat.service",{"_index":565,"title":{},"body":{"classes/ChatGateway.html":{},"modules/ChatModule.html":{}}}],["chat/chat.module",{"_index":113,"title":{},"body":{"modules/AppModule.html":{}}}],["chatgateway",{"_index":537,"title":{"classes/ChatGateway.html":{}},"body":{"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"coverage.html":{}}}],["chatmodule",{"_index":59,"title":{"modules/ChatModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ChatModule.html":{},"modules.html":{},"overview.html":{}}}],["chatservice",{"_index":546,"title":{"injectables/ChatService.html":{}},"body":{"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"coverage.html":{},"overview.html":{}}}],["check",{"_index":1207,"title":{},"body":{"controllers/HealthController.html":{}}}],["checkverificationcode",{"_index":1844,"title":{},"body":{"controllers/SmsController.html":{}}}],["checkverificationcode(@req",{"_index":1864,"title":{},"body":{"controllers/SmsController.html":{}}}],["checkverificationcode(request",{"_index":1846,"title":{},"body":{"controllers/SmsController.html":{}}}],["checkverificationcode.dto",{"_index":1858,"title":{},"body":{"controllers/SmsController.html":{}}}],["checkverificationcodedto",{"_index":607,"title":{"classes/CheckVerificationCodeDto.html":{}},"body":{"classes/CheckVerificationCodeDto.html":{},"controllers/SmsController.html":{},"coverage.html":{}}}],["chosen",{"_index":1974,"title":{},"body":{"injectables/StripeService.html":{}}}],["city",{"_index":29,"title":{},"body":{"classes/Address.html":{},"miscellaneous/variables.html":{}}}],["cityname",{"_index":2608,"title":{},"body":{"miscellaneous/variables.html":{}}}],["class",{"_index":0,"title":{"classes/AddCreditCardDto.html":{},"classes/Address.html":{},"classes/Category.html":{},"classes/CategoryNotFoundException.html":{},"classes/ChatGateway.html":{},"classes/CheckVerificationCodeDto.html":{},"classes/Comment.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostInput.html":{},"classes/CreateProductCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateSubscriberDto.html":{},"classes/CreateUserDto.html":{},"classes/DatabaseLogger.html":{},"classes/EmailScheduleDto.html":{},"classes/FindOneParams.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"classes/Log.html":{},"classes/LogInDto.html":{},"classes/Message.html":{},"classes/ObjectWithIdDto.html":{},"classes/PaginationParams.html":{},"classes/Post.html":{},"classes/Post-1.html":{},"classes/PostNotFoundException.html":{},"classes/PostsResolver.html":{},"classes/Product.html":{},"classes/ProductCategory.html":{},"classes/PublicFile.html":{},"classes/RegisterDto.html":{},"classes/SetDefaultCreditCardDto.html":{},"classes/StripeEvent.html":{},"classes/Timestamp.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"classes/User.html":{},"classes/User-1.html":{}},"body":{"classes/AddCreditCardDto.html":{},"classes/Address.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"classes/Category.html":{},"classes/CategoryNotFoundException.html":{},"controllers/ChargeController.html":{},"modules/ChargeModule.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/CheckVerificationCodeDto.html":{},"classes/Comment.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostInput.html":{},"classes/CreateProductCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateSubscriberDto.html":{},"classes/CreateUserDto.html":{},"controllers/CreditCardsController.html":{},"modules/CreditCardsModule.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"modules/DatabaseModule.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullInterceptor.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/FindOneParams.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthenticationModule.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/GraphqlJwtAuthGuard.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/Log.html":{},"classes/LogInDto.html":{},"modules/LoggerModule.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"classes/Message.html":{},"classes/ObjectWithIdDto.html":{},"controllers/OptimizeController.html":{},"modules/OptimizeModule.html":{},"classes/PaginationParams.html":{},"classes/Post.html":{},"classes/Post-1.html":{},"classes/PostNotFoundException.html":{},"controllers/PostsController.html":{},"injectables/PostsLoaders.html":{},"modules/PostsModule.html":{},"classes/PostsResolver.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"classes/Product.html":{},"controllers/ProductCategoriesController.html":{},"modules/ProductCategoriesModule.html":{},"injectables/ProductCategoriesService.html":{},"classes/ProductCategory.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"modules/PubSubModule.html":{},"classes/PublicFile.html":{},"classes/RegisterDto.html":{},"modules/SearchModule.html":{},"classes/SetDefaultCreditCardDto.html":{},"controllers/SmsController.html":{},"modules/SmsModule.html":{},"injectables/SmsService.html":{},"classes/StripeEvent.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"modules/StripeWebhookModule.html":{},"injectables/StripeWebhookService.html":{},"controllers/SubscribersController.html":{},"modules/SubscribersModule.html":{},"controllers/SubscriptionsController.html":{},"modules/SubscriptionsModule.html":{},"injectables/SubscriptionsService.html":{},"classes/Timestamp.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AddCreditCardDto.html":{},"classes/Address.html":{},"classes/Category.html":{},"classes/CategoryNotFoundException.html":{},"classes/ChatGateway.html":{},"classes/CheckVerificationCodeDto.html":{},"classes/Comment.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostInput.html":{},"classes/CreateProductCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateSubscriberDto.html":{},"classes/CreateUserDto.html":{},"classes/DatabaseLogger.html":{},"classes/EmailScheduleDto.html":{},"classes/FindOneParams.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"classes/Log.html":{},"classes/LogInDto.html":{},"classes/Message.html":{},"classes/ObjectWithIdDto.html":{},"classes/PaginationParams.html":{},"classes/Post.html":{},"classes/Post-1.html":{},"classes/PostNotFoundException.html":{},"classes/PostsResolver.html":{},"classes/Product.html":{},"classes/ProductCategory.html":{},"classes/PublicFile.html":{},"classes/RegisterDto.html":{},"classes/SetDefaultCreditCardDto.html":{},"classes/StripeEvent.html":{},"classes/Timestamp.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"overview.html":{}}}],["classserializerinterceptor",{"_index":241,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/CategoriesController.html":{},"controllers/CommentsController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/PostsController.html":{},"controllers/ProductCategoriesController.html":{},"controllers/ProductsController.html":{},"controllers/SmsController.html":{},"controllers/SubscribersController.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["clearcache",{"_index":1665,"title":{},"body":{"injectables/PostsService.html":{}}}],["click",{"_index":959,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["client",{"_index":2054,"title":{},"body":{"controllers/SubscribersController.html":{}}}],["clientgrpc",{"_index":2048,"title":{},"body":{"controllers/SubscribersController.html":{}}}],["clientid",{"_index":1166,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["clientproxyfactory",{"_index":2061,"title":{},"body":{"modules/SubscribersModule.html":{}}}],["clientproxyfactory.create",{"_index":2064,"title":{},"body":{"modules/SubscribersModule.html":{}}}],["clientsecret",{"_index":1168,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["cluster_appmodule",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authenticationmodule",{"_index":294,"title":{},"body":{"modules/AuthenticationModule.html":{},"overview.html":{}}}],["cluster_authenticationmodule_exports",{"_index":295,"title":{},"body":{"modules/AuthenticationModule.html":{},"overview.html":{}}}],["cluster_authenticationmodule_imports",{"_index":296,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["cluster_authenticationmodule_providers",{"_index":297,"title":{},"body":{"modules/AuthenticationModule.html":{},"overview.html":{}}}],["cluster_categoriesmodule",{"_index":461,"title":{},"body":{"modules/CategoriesModule.html":{},"overview.html":{}}}],["cluster_categoriesmodule_providers",{"_index":462,"title":{},"body":{"modules/CategoriesModule.html":{},"overview.html":{}}}],["cluster_chargemodule",{"_index":531,"title":{},"body":{"modules/ChargeModule.html":{},"overview.html":{}}}],["cluster_chargemodule_imports",{"_index":532,"title":{},"body":{"modules/ChargeModule.html":{},"overview.html":{}}}],["cluster_chatmodule",{"_index":574,"title":{},"body":{"modules/ChatModule.html":{},"overview.html":{}}}],["cluster_chatmodule_imports",{"_index":575,"title":{},"body":{"modules/ChatModule.html":{}}}],["cluster_chatmodule_providers",{"_index":576,"title":{},"body":{"modules/ChatModule.html":{},"overview.html":{}}}],["cluster_creditcardsmodule",{"_index":775,"title":{},"body":{"modules/CreditCardsModule.html":{}}}],["cluster_creditcardsmodule_imports",{"_index":776,"title":{},"body":{"modules/CreditCardsModule.html":{}}}],["cluster_emailconfirmationmodule",{"_index":925,"title":{},"body":{"modules/EmailConfirmationModule.html":{},"overview.html":{}}}],["cluster_emailconfirmationmodule_exports",{"_index":927,"title":{},"body":{"modules/EmailConfirmationModule.html":{},"overview.html":{}}}],["cluster_emailconfirmationmodule_imports",{"_index":928,"title":{},"body":{"modules/EmailConfirmationModule.html":{},"overview.html":{}}}],["cluster_emailconfirmationmodule_providers",{"_index":926,"title":{},"body":{"modules/EmailConfirmationModule.html":{},"overview.html":{}}}],["cluster_emailmodule",{"_index":976,"title":{},"body":{"modules/EmailModule.html":{},"overview.html":{}}}],["cluster_emailmodule_exports",{"_index":978,"title":{},"body":{"modules/EmailModule.html":{},"overview.html":{}}}],["cluster_emailmodule_providers",{"_index":977,"title":{},"body":{"modules/EmailModule.html":{},"overview.html":{}}}],["cluster_emailschedulingmodule",{"_index":1004,"title":{},"body":{"modules/EmailSchedulingModule.html":{},"overview.html":{}}}],["cluster_emailschedulingmodule_imports",{"_index":1005,"title":{},"body":{"modules/EmailSchedulingModule.html":{}}}],["cluster_emailschedulingmodule_providers",{"_index":1006,"title":{},"body":{"modules/EmailSchedulingModule.html":{},"overview.html":{}}}],["cluster_filesmodule",{"_index":1061,"title":{},"body":{"modules/FilesModule.html":{},"overview.html":{}}}],["cluster_filesmodule_exports",{"_index":1063,"title":{},"body":{"modules/FilesModule.html":{},"overview.html":{}}}],["cluster_filesmodule_providers",{"_index":1062,"title":{},"body":{"modules/FilesModule.html":{},"overview.html":{}}}],["cluster_googleauthenticationmodule",{"_index":1142,"title":{},"body":{"modules/GoogleAuthenticationModule.html":{},"overview.html":{}}}],["cluster_googleauthenticationmodule_imports",{"_index":1144,"title":{},"body":{"modules/GoogleAuthenticationModule.html":{}}}],["cluster_googleauthenticationmodule_providers",{"_index":1143,"title":{},"body":{"modules/GoogleAuthenticationModule.html":{},"overview.html":{}}}],["cluster_healthmodule",{"_index":1241,"title":{},"body":{"modules/HealthModule.html":{},"overview.html":{}}}],["cluster_healthmodule_imports",{"_index":1243,"title":{},"body":{"modules/HealthModule.html":{}}}],["cluster_healthmodule_providers",{"_index":1242,"title":{},"body":{"modules/HealthModule.html":{},"overview.html":{}}}],["cluster_loggermodule",{"_index":1320,"title":{},"body":{"modules/LoggerModule.html":{},"overview.html":{}}}],["cluster_loggermodule_exports",{"_index":1322,"title":{},"body":{"modules/LoggerModule.html":{},"overview.html":{}}}],["cluster_loggermodule_providers",{"_index":1321,"title":{},"body":{"modules/LoggerModule.html":{},"overview.html":{}}}],["cluster_postsmodule",{"_index":1545,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_imports",{"_index":1547,"title":{},"body":{"modules/PostsModule.html":{}}}],["cluster_postsmodule_providers",{"_index":1546,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_productcategoriesmodule",{"_index":1756,"title":{},"body":{"modules/ProductCategoriesModule.html":{},"overview.html":{}}}],["cluster_productcategoriesmodule_providers",{"_index":1757,"title":{},"body":{"modules/ProductCategoriesModule.html":{},"overview.html":{}}}],["cluster_productsmodule",{"_index":1793,"title":{},"body":{"modules/ProductsModule.html":{},"overview.html":{}}}],["cluster_productsmodule_providers",{"_index":1794,"title":{},"body":{"modules/ProductsModule.html":{},"overview.html":{}}}],["cluster_smsmodule",{"_index":1868,"title":{},"body":{"modules/SmsModule.html":{},"overview.html":{}}}],["cluster_smsmodule_exports",{"_index":1870,"title":{},"body":{"modules/SmsModule.html":{},"overview.html":{}}}],["cluster_smsmodule_imports",{"_index":1871,"title":{},"body":{"modules/SmsModule.html":{}}}],["cluster_smsmodule_providers",{"_index":1869,"title":{},"body":{"modules/SmsModule.html":{},"overview.html":{}}}],["cluster_stripemodule",{"_index":1914,"title":{},"body":{"modules/StripeModule.html":{},"overview.html":{}}}],["cluster_stripemodule_exports",{"_index":1916,"title":{},"body":{"modules/StripeModule.html":{},"overview.html":{}}}],["cluster_stripemodule_providers",{"_index":1915,"title":{},"body":{"modules/StripeModule.html":{},"overview.html":{}}}],["cluster_stripewebhookmodule",{"_index":2007,"title":{},"body":{"modules/StripeWebhookModule.html":{},"overview.html":{}}}],["cluster_stripewebhookmodule_imports",{"_index":2008,"title":{},"body":{"modules/StripeWebhookModule.html":{}}}],["cluster_stripewebhookmodule_providers",{"_index":2009,"title":{},"body":{"modules/StripeWebhookModule.html":{},"overview.html":{}}}],["cluster_subscriptionsmodule",{"_index":2098,"title":{},"body":{"modules/SubscriptionsModule.html":{},"overview.html":{}}}],["cluster_subscriptionsmodule_imports",{"_index":2099,"title":{},"body":{"modules/SubscriptionsModule.html":{}}}],["cluster_subscriptionsmodule_providers",{"_index":2100,"title":{},"body":{"modules/SubscriptionsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":2278,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":2281,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_imports",{"_index":2279,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_providers",{"_index":2280,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["code",{"_index":609,"title":{},"body":{"classes/CheckVerificationCodeDto.html":{},"controllers/SmsController.html":{},"injectables/SmsService.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["code')@useguards(jwtauthenticationguard",{"_index":1850,"title":{},"body":{"controllers/SmsController.html":{}}}],["column",{"_index":35,"title":{},"body":{"classes/Address.html":{},"classes/Category.html":{},"classes/Comment.html":{},"classes/Log.html":{},"classes/Message.html":{},"classes/Post.html":{},"classes/Product.html":{},"classes/ProductCategory.html":{},"classes/PublicFile.html":{},"classes/User.html":{}}}],["column('text",{"_index":1440,"title":{},"body":{"classes/Post.html":{}}}],["column({default",{"_index":2235,"title":{},"body":{"classes/User.html":{}}}],["column({nullable",{"_index":1433,"title":{},"body":{"classes/Post.html":{},"classes/User.html":{}}}],["column({type",{"_index":1443,"title":{},"body":{"classes/Post.html":{},"classes/Product.html":{}}}],["column({unique",{"_index":2232,"title":{},"body":{"classes/User.html":{}}}],["command",{"_index":691,"title":{},"body":{"classes/CreateCommentHandler.html":{}}}],["command.author",{"_index":699,"title":{},"body":{"classes/CreateCommentHandler.html":{}}}],["command.comment",{"_index":698,"title":{},"body":{"classes/CreateCommentHandler.html":{}}}],["commandbus",{"_index":634,"title":{},"body":{"controllers/CommentsController.html":{}}}],["commandhandler",{"_index":692,"title":{},"body":{"classes/CreateCommentHandler.html":{}}}],["commandhandler(createcommentcommand",{"_index":694,"title":{},"body":{"classes/CreateCommentHandler.html":{}}}],["commands/handlers/create",{"_index":654,"title":{},"body":{"modules/CommentsModule.html":{}}}],["commands/implementations/createcomment.command",{"_index":638,"title":{},"body":{"controllers/CommentsController.html":{}}}],["comment",{"_index":611,"title":{"classes/Comment.html":{}},"body":{"classes/Comment.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentHandler.html":{},"classes/GetCommentsHandler.html":{},"classes/Post.html":{},"coverage.html":{}}}],["comment.entity",{"_index":650,"title":{},"body":{"modules/CommentsModule.html":{},"classes/CreateCommentHandler.html":{},"classes/GetCommentsHandler.html":{}}}],["comment.handler",{"_index":655,"title":{},"body":{"modules/CommentsModule.html":{}}}],["comment.handler.ts",{"_index":683,"title":{},"body":{"classes/CreateCommentHandler.html":{},"coverage.html":{}}}],["comment.handler.ts:14",{"_index":690,"title":{},"body":{"classes/CreateCommentHandler.html":{}}}],["comment.handler.ts:8",{"_index":687,"title":{},"body":{"classes/CreateCommentHandler.html":{}}}],["comment.post",{"_index":1455,"title":{},"body":{"classes/Post.html":{}}}],["comments",{"_index":623,"title":{},"body":{"controllers/CommentsController.html":{},"classes/Post.html":{}}}],["comments.controller",{"_index":651,"title":{},"body":{"modules/CommentsModule.html":{}}}],["comments/comment.entity",{"_index":1450,"title":{},"body":{"classes/Post.html":{}}}],["comments/comments.module",{"_index":107,"title":{},"body":{"modules/AppModule.html":{}}}],["commentscontroller",{"_index":621,"title":{"controllers/CommentsController.html":{}},"body":{"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"coverage.html":{}}}],["commentsmodule",{"_index":60,"title":{"modules/CommentsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CommentsModule.html":{},"modules.html":{},"overview.html":{}}}],["commentsrepository",{"_index":688,"title":{},"body":{"classes/CreateCommentHandler.html":{},"classes/GetCommentsHandler.html":{}}}],["compodoc/compodoc",{"_index":2402,"title":{},"body":{"dependencies.html":{}}}],["configmodule",{"_index":96,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/DatabaseModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/EmailModule.html":{},"modules/FilesModule.html":{},"modules/GoogleAuthenticationModule.html":{},"modules/LoggerModule.html":{},"modules/PostsModule.html":{},"modules/PubSubModule.html":{},"modules/SearchModule.html":{},"modules/SmsModule.html":{},"modules/StripeModule.html":{},"modules/SubscribersModule.html":{},"modules/SubscriptionsModule.html":{}}}],["configmodule.forroot",{"_index":154,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":97,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthenticationService.html":{},"injectables/CustomLogger.html":{},"modules/DatabaseModule.html":{},"injectables/EmailConfirmationService.html":{},"injectables/EmailService.html":{},"injectables/FilesService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"modules/PostsModule.html":{},"modules/PubSubModule.html":{},"modules/SearchModule.html":{},"injectables/SmsService.html":{},"injectables/StripeService.html":{},"modules/SubscribersModule.html":{},"injectables/SubscriptionsService.html":{},"injectables/TwoFactorAuthenticationService.html":{}}}],["configservice.get('elasticsearch_node",{"_index":1836,"title":{},"body":{"modules/SearchModule.html":{}}}],["configservice.get('elasticsearch_password",{"_index":1838,"title":{},"body":{"modules/SearchModule.html":{}}}],["configservice.get('elasticsearch_username",{"_index":1837,"title":{},"body":{"modules/SearchModule.html":{}}}],["configservice.get('email_password",{"_index":1042,"title":{},"body":{"injectables/EmailService.html":{}}}],["configservice.get('email_service",{"_index":1038,"title":{},"body":{"injectables/EmailService.html":{}}}],["configservice.get('email_user",{"_index":1040,"title":{},"body":{"injectables/EmailService.html":{}}}],["configservice.get('grpc_connection_url",{"_index":2069,"title":{},"body":{"modules/SubscribersModule.html":{}}}],["configservice.get('jwt_access_token_secret",{"_index":1286,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["configservice.get('jwt_refresh_token_secret",{"_index":1276,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["configservice.get('node_env",{"_index":809,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["configservice.get('postgres_db",{"_index":867,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('postgres_host",{"_index":861,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('postgres_password",{"_index":865,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('postgres_port",{"_index":862,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('postgres_user",{"_index":864,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('redis_host",{"_index":141,"title":{},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules/PubSubModule.html":{}}}],["configservice.get('redis_port",{"_index":1562,"title":{},"body":{"modules/PostsModule.html":{},"modules/PubSubModule.html":{}}}],["configservice.get('twilio_account_sid",{"_index":1889,"title":{},"body":{"injectables/SmsService.html":{}}}],["configservice.get('twilio_auth_token",{"_index":1891,"title":{},"body":{"injectables/SmsService.html":{}}}],["configure",{"_index":85,"title":{},"body":{"modules/AppModule.html":{}}}],["configure(consumer",{"_index":86,"title":{},"body":{"modules/AppModule.html":{}}}],["confirm",{"_index":893,"title":{},"body":{"controllers/EmailConfirmationController.html":{},"injectables/EmailConfirmationService.html":{},"injectables/StripeService.html":{}}}],["confirm(@body",{"_index":906,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["confirm(confirmationdata",{"_index":895,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["confirmation",{"_index":892,"title":{},"body":{"controllers/EmailConfirmationController.html":{},"injectables/EmailConfirmationService.html":{}}}],["confirmationdata",{"_index":898,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["confirmed",{"_index":966,"title":{},"body":{"injectables/EmailConfirmationService.html":{},"controllers/SmsController.html":{}}}],["confirmemail",{"_index":934,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["confirmemail(email",{"_index":940,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["confirmemail.dto",{"_index":903,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["confirmemaildto",{"_index":659,"title":{"classes/ConfirmEmailDto.html":{}},"body":{"classes/ConfirmEmailDto.html":{},"controllers/EmailConfirmationController.html":{},"coverage.html":{}}}],["confirmphonenumber",{"_index":1876,"title":{},"body":{"injectables/SmsService.html":{}}}],["confirmphonenumber(userid",{"_index":1879,"title":{},"body":{"injectables/SmsService.html":{}}}],["connectedsocket",{"_index":559,"title":{},"body":{"classes/ChatGateway.html":{}}}],["connection",{"_index":1813,"title":{},"body":{"modules/PubSubModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["consolelogger",{"_index":781,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["consoleloggeroptions",{"_index":789,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["const",{"_index":264,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/CategoriesService.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"controllers/CommentsController.html":{},"classes/CreateCommentHandler.html":{},"injectables/CustomLogger.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailConfirmationService.html":{},"injectables/EmailSchedulingService.html":{},"injectables/FilesService.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/GraphqlJwtAuthGuard.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"controllers/OptimizeController.html":{},"injectables/PostsLoaders.html":{},"classes/PostsResolver.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"injectables/ProductCategoriesService.html":{},"injectables/ProductsService.html":{},"modules/PubSubModule.html":{},"injectables/SmsService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/StripeWebhookService.html":{},"injectables/SubscriptionsService.html":{},"classes/Timestamp.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"injectables/UsersService.html":{}}}],["constructeventfrompayload",{"_index":1922,"title":{},"body":{"injectables/StripeService.html":{}}}],["constructeventfrompayload(signature",{"_index":1934,"title":{},"body":{"injectables/StripeService.html":{}}}],["constructor",{"_index":260,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CategoryNotFoundException.html":{},"controllers/ChargeController.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"controllers/CommentsController.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentHandler.html":{},"controllers/CreditCardsController.html":{},"injectables/CustomLogger.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"controllers/EmailConfirmationController.html":{},"injectables/EmailConfirmationService.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/FilesService.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/HealthController.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsService.html":{},"controllers/OptimizeController.html":{},"classes/PostNotFoundException.html":{},"controllers/PostsController.html":{},"injectables/PostsLoaders.html":{},"classes/PostsResolver.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"controllers/ProductCategoriesController.html":{},"injectables/ProductCategoriesService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"controllers/SmsController.html":{},"injectables/SmsService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/StripeWebhookService.html":{},"controllers/SubscriptionsController.html":{},"injectables/SubscriptionsService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor(@inject('subscribers_package",{"_index":2053,"title":{},"body":{"controllers/SubscribersController.html":{}}}],["constructor(authenticationservice",{"_index":585,"title":{},"body":{"injectables/ChatService.html":{},"injectables/LocalStrategy.html":{}}}],["constructor(categoriesrepository",{"_index":470,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["constructor(chatservice",{"_index":545,"title":{},"body":{"classes/ChatGateway.html":{}}}],["constructor(comment",{"_index":670,"title":{},"body":{"classes/CreateCommentCommand.html":{}}}],["constructor(commentsrepository",{"_index":686,"title":{},"body":{"classes/CreateCommentHandler.html":{},"classes/GetCommentsHandler.html":{}}}],["constructor(configservice",{"_index":1027,"title":{},"body":{"injectables/EmailService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/SmsService.html":{},"injectables/StripeService.html":{}}}],["constructor(context",{"_index":787,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["constructor(elasticsearchservice",{"_index":876,"title":{},"body":{"injectables/ElasticsearchHealthIndicator.html":{},"injectables/PostsSearchService.html":{}}}],["constructor(emailservice",{"_index":1010,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["constructor(eventsrepository",{"_index":2017,"title":{},"body":{"injectables/StripeWebhookService.html":{}}}],["constructor(jwtservice",{"_index":937,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["constructor(logsrepository",{"_index":1344,"title":{},"body":{"injectables/LogsService.html":{}}}],["constructor(postid",{"_index":510,"title":{},"body":{"classes/CategoryNotFoundException.html":{},"classes/GetCommentsQuery.html":{},"classes/PostNotFoundException.html":{}}}],["constructor(postsrepository",{"_index":1668,"title":{},"body":{"injectables/PostsService.html":{}}}],["constructor(postsservice",{"_index":1568,"title":{},"body":{"classes/PostsResolver.html":{}}}],["constructor(private",{"_index":1302,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(productcategoriesrepository",{"_index":1765,"title":{},"body":{"injectables/ProductCategoriesService.html":{}}}],["constructor(productsrepository",{"_index":1800,"title":{},"body":{"injectables/ProductsService.html":{}}}],["constructor(publicfilesrepository",{"_index":1074,"title":{},"body":{"injectables/FilesService.html":{}}}],["constructor(stripeservice",{"_index":2104,"title":{},"body":{"injectables/SubscriptionsService.html":{}}}],["constructor(usersrepository",{"_index":2298,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(usersservice",{"_index":328,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PostsLoaders.html":{},"injectables/TwoFactorAuthenticationService.html":{}}}],["consumer",{"_index":91,"title":{},"body":{"modules/AppModule.html":{}}}],["content",{"_index":555,"title":{},"body":{"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"classes/Comment.html":{},"classes/CreateCommentDto.html":{},"classes/EmailScheduleDto.html":{},"classes/Message.html":{}}}],["context",{"_index":703,"title":{},"body":{"classes/CreateLogDto.html":{},"injectables/CustomLogger.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/GraphqlJwtAuthGuard.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/Log.html":{},"classes/PostsResolver.html":{}}}],["context.gethandler",{"_index":1256,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["context.req.user",{"_index":1610,"title":{},"body":{"classes/PostsResolver.html":{}}}],["context.switchtohttp().getrequest",{"_index":921,"title":{},"body":{"guards/EmailConfirmationGuard.html":{},"injectables/HttpCacheInterceptor.html":{}}}],["controller",{"_index":205,"title":{"controllers/AuthenticationController.html":{},"controllers/CategoriesController.html":{},"controllers/ChargeController.html":{},"controllers/CommentsController.html":{},"controllers/CreditCardsController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/EmailSchedulingController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/HealthController.html":{},"controllers/OptimizeController.html":{},"controllers/PostsController.html":{},"controllers/ProductCategoriesController.html":{},"controllers/ProductsController.html":{},"controllers/SmsController.html":{},"controllers/StripeWebhookController.html":{},"controllers/SubscribersController.html":{},"controllers/SubscriptionsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AuthenticationController.html":{},"controllers/CategoriesController.html":{},"controllers/ChargeController.html":{},"controllers/CommentsController.html":{},"controllers/CreditCardsController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/EmailSchedulingController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/HealthController.html":{},"controllers/OptimizeController.html":{},"controllers/PostsController.html":{},"controllers/ProductCategoriesController.html":{},"controllers/ProductsController.html":{},"controllers/SmsController.html":{},"controllers/StripeWebhookController.html":{},"controllers/SubscribersController.html":{},"controllers/SubscriptionsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('2fa",{"_index":2171,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["controller('authentication",{"_index":258,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["controller('categories",{"_index":451,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["controller('charge",{"_index":526,"title":{},"body":{"controllers/ChargeController.html":{}}}],["controller('comments",{"_index":642,"title":{},"body":{"controllers/CommentsController.html":{}}}],["controller('credit",{"_index":766,"title":{},"body":{"controllers/CreditCardsController.html":{}}}],["controller('email",{"_index":905,"title":{},"body":{"controllers/EmailConfirmationController.html":{},"controllers/EmailSchedulingController.html":{}}}],["controller('google",{"_index":1139,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["controller('health",{"_index":1215,"title":{},"body":{"controllers/HealthController.html":{}}}],["controller('optimize",{"_index":1384,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["controller('posts",{"_index":1513,"title":{},"body":{"controllers/PostsController.html":{}}}],["controller('product",{"_index":1751,"title":{},"body":{"controllers/ProductCategoriesController.html":{}}}],["controller('products",{"_index":1790,"title":{},"body":{"controllers/ProductsController.html":{}}}],["controller('sms",{"_index":1859,"title":{},"body":{"controllers/SmsController.html":{}}}],["controller('subscribers",{"_index":2052,"title":{},"body":{"controllers/SubscribersController.html":{}}}],["controller('subscriptions",{"_index":2091,"title":{},"body":{"controllers/SubscriptionsController.html":{}}}],["controller('users",{"_index":2268,"title":{},"body":{"controllers/UsersController.html":{}}}],["controller('webhook",{"_index":1996,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["controllers",{"_index":201,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"controllers/ChargeController.html":{},"modules/ChargeModule.html":{},"modules/ChatModule.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"controllers/CreditCardsController.html":{},"modules/CreditCardsModule.html":{},"controllers/EmailConfirmationController.html":{},"modules/EmailConfirmationModule.html":{},"modules/EmailModule.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthenticationModule.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/OptimizeController.html":{},"modules/OptimizeModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/ProductCategoriesController.html":{},"modules/ProductCategoriesModule.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"controllers/SmsController.html":{},"modules/SmsModule.html":{},"controllers/StripeWebhookController.html":{},"modules/StripeWebhookModule.html":{},"controllers/SubscribersController.html":{},"modules/SubscribersModule.html":{},"controllers/SubscriptionsController.html":{},"modules/SubscriptionsModule.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["cookie",{"_index":275,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/ChatService.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"dependencies.html":{}}}],["core",{"_index":2464,"title":{},"body":{"dependencies.html":{}}}],["count",{"_index":1470,"title":{},"body":{"interfaces/PostCountResult.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{}}}],["count(query",{"_index":1617,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["country",{"_index":30,"title":{},"body":{"classes/Address.html":{},"miscellaneous/variables.html":{}}}],["countryname",{"_index":2609,"title":{},"body":{"miscellaneous/variables.html":{}}}],["coverage",{"_index":2366,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["cqrsmodule",{"_index":652,"title":{},"body":{"modules/CommentsModule.html":{}}}],["create",{"_index":1898,"title":{},"body":{"injectables/SmsService.html":{},"injectables/UsersService.html":{}}}],["create(userdata",{"_index":2304,"title":{},"body":{"injectables/UsersService.html":{}}}],["create({to",{"_index":1901,"title":{},"body":{"injectables/SmsService.html":{}}}],["createcategory",{"_index":420,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{}}}],["createcategory(@body",{"_index":455,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["createcategory(category",{"_index":425,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{}}}],["createcategorydto",{"_index":426,"title":{"classes/CreateCategoryDto.html":{}},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CreateCategoryDto.html":{},"coverage.html":{}}}],["createcharge",{"_index":518,"title":{},"body":{"controllers/ChargeController.html":{}}}],["createcharge(@body",{"_index":527,"title":{},"body":{"controllers/ChargeController.html":{}}}],["createcharge(charge",{"_index":519,"title":{},"body":{"controllers/ChargeController.html":{}}}],["createchargedto",{"_index":520,"title":{"classes/CreateChargeDto.html":{}},"body":{"controllers/ChargeController.html":{},"classes/CreateChargeDto.html":{},"coverage.html":{}}}],["createcomment",{"_index":624,"title":{},"body":{"controllers/CommentsController.html":{}}}],["createcomment(@body",{"_index":643,"title":{},"body":{"controllers/CommentsController.html":{}}}],["createcomment(comment",{"_index":626,"title":{},"body":{"controllers/CommentsController.html":{}}}],["createcommentcommand",{"_index":637,"title":{"classes/CreateCommentCommand.html":{}},"body":{"controllers/CommentsController.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentHandler.html":{},"coverage.html":{}}}],["createcommentcommand(comment",{"_index":646,"title":{},"body":{"controllers/CommentsController.html":{}}}],["createcommentdto",{"_index":627,"title":{"classes/CreateCommentDto.html":{}},"body":{"controllers/CommentsController.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"coverage.html":{}}}],["createcommenthandler",{"_index":653,"title":{"classes/CreateCommentHandler.html":{}},"body":{"modules/CommentsModule.html":{},"classes/CreateCommentHandler.html":{},"coverage.html":{}}}],["createcustomer",{"_index":1923,"title":{},"body":{"injectables/StripeService.html":{}}}],["createcustomer(name",{"_index":1937,"title":{},"body":{"injectables/StripeService.html":{}}}],["createdat",{"_index":1426,"title":{},"body":{"classes/Post.html":{},"classes/Post-1.html":{}}}],["createdatecolumn",{"_index":1308,"title":{},"body":{"classes/Log.html":{},"classes/Post.html":{}}}],["createdatecolumn({type",{"_index":1437,"title":{},"body":{"classes/Post.html":{}}}],["createduser",{"_index":360,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["createduser.password",{"_index":363,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["createevent",{"_index":2015,"title":{},"body":{"injectables/StripeWebhookService.html":{}}}],["createevent(id",{"_index":2020,"title":{},"body":{"injectables/StripeWebhookService.html":{}}}],["createlog",{"_index":1343,"title":{},"body":{"injectables/LogsService.html":{}}}],["createlog(log",{"_index":1347,"title":{},"body":{"injectables/LogsService.html":{}}}],["createlogdto",{"_index":701,"title":{"classes/CreateLogDto.html":{}},"body":{"classes/CreateLogDto.html":{},"injectables/LogsService.html":{},"coverage.html":{}}}],["createmonthlysubscription",{"_index":2081,"title":{},"body":{"controllers/SubscriptionsController.html":{},"injectables/SubscriptionsService.html":{}}}],["createmonthlysubscription(@req",{"_index":2093,"title":{},"body":{"controllers/SubscriptionsController.html":{}}}],["createmonthlysubscription(customerid",{"_index":2106,"title":{},"body":{"injectables/SubscriptionsService.html":{}}}],["createmonthlysubscription(request",{"_index":2083,"title":{},"body":{"controllers/SubscriptionsController.html":{}}}],["createpost",{"_index":1484,"title":{},"body":{"controllers/PostsController.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"controllers/SubscribersController.html":{}}}],["createpost(@body",{"_index":1523,"title":{},"body":{"controllers/PostsController.html":{},"controllers/SubscribersController.html":{}}}],["createpost(createpostinput",{"_index":1572,"title":{},"body":{"classes/PostsResolver.html":{}}}],["createpost(post",{"_index":1489,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["createpost(subscriber",{"_index":2043,"title":{},"body":{"controllers/SubscribersController.html":{}}}],["createpostdto",{"_index":708,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["createpostinput",{"_index":717,"title":{"classes/CreatePostInput.html":{}},"body":{"classes/CreatePostInput.html":{},"classes/PostsResolver.html":{},"coverage.html":{}}}],["createproduct",{"_index":1743,"title":{},"body":{"controllers/ProductCategoriesController.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["createproduct(@body",{"_index":1754,"title":{},"body":{"controllers/ProductCategoriesController.html":{},"controllers/ProductsController.html":{}}}],["createproduct(product",{"_index":1785,"title":{},"body":{"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["createproduct(productcategory",{"_index":1745,"title":{},"body":{"controllers/ProductCategoriesController.html":{}}}],["createproductcategory",{"_index":1763,"title":{},"body":{"injectables/ProductCategoriesService.html":{}}}],["createproductcategory(category",{"_index":1768,"title":{},"body":{"injectables/ProductCategoriesService.html":{}}}],["createproductcategorydto",{"_index":729,"title":{"classes/CreateProductCategoryDto.html":{}},"body":{"classes/CreateProductCategoryDto.html":{},"controllers/ProductCategoriesController.html":{},"injectables/ProductCategoriesService.html":{},"coverage.html":{}}}],["createproductdto",{"_index":732,"title":{"classes/CreateProductDto.html":{}},"body":{"classes/CreateProductDto.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"coverage.html":{}}}],["createsubscriberdto",{"_index":737,"title":{"classes/CreateSubscriberDto.html":{}},"body":{"classes/CreateSubscriberDto.html":{},"controllers/SubscribersController.html":{},"interfaces/SubscribersService.html":{},"coverage.html":{}}}],["createsubscription",{"_index":1924,"title":{},"body":{"injectables/StripeService.html":{}}}],["createsubscription(priceid",{"_index":1939,"title":{},"body":{"injectables/StripeService.html":{}}}],["createtransport",{"_index":1033,"title":{},"body":{"injectables/EmailService.html":{}}}],["createuserdto",{"_index":741,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createwithgoogle",{"_index":2287,"title":{},"body":{"injectables/UsersService.html":{}}}],["createwithgoogle(email",{"_index":2306,"title":{},"body":{"injectables/UsersService.html":{}}}],["creationdate",{"_index":1306,"title":{},"body":{"classes/Log.html":{}}}],["credentials",{"_index":397,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ChatService.html":{}}}],["credit",{"_index":125,"title":{},"body":{"modules/AppModule.html":{},"controllers/CreditCardsController.html":{},"injectables/StripeService.html":{}}}],["creditcard",{"_index":754,"title":{},"body":{"controllers/CreditCardsController.html":{}}}],["creditcards.controller",{"_index":778,"title":{},"body":{"modules/CreditCardsModule.html":{}}}],["creditcardscontroller",{"_index":746,"title":{"controllers/CreditCardsController.html":{}},"body":{"controllers/CreditCardsController.html":{},"modules/CreditCardsModule.html":{},"coverage.html":{}}}],["creditcardsmodule",{"_index":61,"title":{"modules/CreditCardsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CreditCardsModule.html":{},"modules.html":{},"overview.html":{}}}],["cron",{"_index":1015,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["cronjob",{"_index":1014,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["cronjob(date",{"_index":1018,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["ctx",{"_index":1201,"title":{},"body":{"injectables/GraphqlJwtAuthGuard.html":{}}}],["ctx._source.${key}='${value",{"_index":1661,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["ctx.getcontext().req",{"_index":1203,"title":{},"body":{"injectables/GraphqlJwtAuthGuard.html":{}}}],["currency",{"_index":1964,"title":{},"body":{"injectables/StripeService.html":{}}}],["currenthashedrefreshtoken",{"_index":2216,"title":{},"body":{"classes/User.html":{},"injectables/UsersService.html":{}}}],["customer",{"_index":1962,"title":{},"body":{"injectables/StripeService.html":{}}}],["customer.subscription.created",{"_index":2005,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["customer.subscription.updated",{"_index":2004,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["customerid",{"_index":1930,"title":{},"body":{"injectables/StripeService.html":{},"injectables/StripeWebhookService.html":{},"injectables/SubscriptionsService.html":{}}}],["customlogger",{"_index":779,"title":{"injectables/CustomLogger.html":{}},"body":{"injectables/CustomLogger.html":{},"modules/LoggerModule.html":{},"coverage.html":{},"overview.html":{}}}],["customscalar",{"_index":2119,"title":{},"body":{"classes/Timestamp.html":{}}}],["data",{"_index":1354,"title":{},"body":{"injectables/LogsService.html":{},"injectables/StripeWebhookService.html":{}}}],["data.customer",{"_index":2032,"title":{},"body":{"injectables/StripeWebhookService.html":{}}}],["data.latest_invoice",{"_index":1984,"title":{},"body":{"injectables/StripeService.html":{}}}],["data.latest_invoice.payment_intent",{"_index":1985,"title":{},"body":{"injectables/StripeService.html":{}}}],["data.status",{"_index":2034,"title":{},"body":{"injectables/StripeWebhookService.html":{}}}],["database",{"_index":866,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["database/database.module",{"_index":101,"title":{},"body":{"modules/AppModule.html":{}}}],["database/postgreserrorcode.enum",{"_index":354,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/StripeWebhookService.html":{}}}],["databaselogger",{"_index":820,"title":{"classes/DatabaseLogger.html":{}},"body":{"classes/DatabaseLogger.html":{},"modules/DatabaseModule.html":{},"coverage.html":{}}}],["databasemodule",{"_index":62,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules.html":{},"overview.html":{}}}],["databuffer",{"_index":1086,"title":{},"body":{"injectables/FilesService.html":{}}}],["dataloader",{"_index":1543,"title":{},"body":{"injectables/PostsLoaders.html":{},"dependencies.html":{}}}],["dataloader(async",{"_index":1533,"title":{},"body":{"injectables/PostsLoaders.html":{}}}],["date",{"_index":722,"title":{},"body":{"classes/CreatePostInput.html":{},"classes/EmailScheduleDto.html":{},"injectables/EmailSchedulingService.html":{},"classes/Log.html":{},"classes/Post.html":{},"classes/Post-1.html":{},"classes/Timestamp.html":{}}}],["date(emailschedule.date",{"_index":1016,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["date(number",{"_index":2145,"title":{},"body":{"classes/Timestamp.html":{}}}],["debug",{"_index":783,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["debug(message",{"_index":791,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["decodeconfirmationtoken",{"_index":935,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["decodeconfirmationtoken(token",{"_index":942,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["decorators",{"_index":14,"title":{},"body":{"classes/AddCreditCardDto.html":{},"classes/Address.html":{},"controllers/AuthenticationController.html":{},"controllers/CategoriesController.html":{},"classes/Category.html":{},"controllers/ChargeController.html":{},"classes/ChatGateway.html":{},"classes/CheckVerificationCodeDto.html":{},"classes/Comment.html":{},"controllers/CommentsController.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostInput.html":{},"classes/CreateProductCategoryDto.html":{},"classes/CreateProductDto.html":{},"controllers/CreditCardsController.html":{},"controllers/EmailConfirmationController.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"classes/FindOneParams.html":{},"classes/GetCommentsDto.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/HealthController.html":{},"classes/Log.html":{},"classes/LogInDto.html":{},"classes/Message.html":{},"classes/ObjectWithIdDto.html":{},"controllers/OptimizeController.html":{},"classes/PaginationParams.html":{},"classes/Post.html":{},"classes/Post-1.html":{},"controllers/PostsController.html":{},"classes/PostsResolver.html":{},"classes/Product.html":{},"controllers/ProductCategoriesController.html":{},"classes/ProductCategory.html":{},"controllers/ProductsController.html":{},"classes/PublicFile.html":{},"classes/RegisterDto.html":{},"classes/SetDefaultCreditCardDto.html":{},"controllers/SmsController.html":{},"classes/StripeEvent.html":{},"controllers/StripeWebhookController.html":{},"controllers/SubscribersController.html":{},"controllers/SubscriptionsController.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"controllers/UsersController.html":{}}}],["default",{"_index":23,"title":{},"body":{"classes/AddCreditCardDto.html":{},"classes/Address.html":{},"injectables/AuthenticationService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/Category.html":{},"classes/CategoryNotFoundException.html":{},"controllers/ChargeController.html":{},"classes/CheckVerificationCodeDto.html":{},"classes/Comment.html":{},"controllers/CommentsController.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateProductCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateSubscriberDto.html":{},"classes/CreateUserDto.html":{},"controllers/CreditCardsController.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"classes/FindOneParams.html":{},"classes/GetCommentsDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtTwoFactorGuard.html":{},"classes/Log.html":{},"classes/LogInDto.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"classes/Message.html":{},"classes/ObjectWithIdDto.html":{},"classes/Post.html":{},"interfaces/PostCountResult.html":{},"classes/PostNotFoundException.html":{},"interfaces/PostSearchBody.html":{},"interfaces/PostSearchResult.html":{},"controllers/PostsController.html":{},"injectables/PostsLoaders.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"classes/Product.html":{},"controllers/ProductCategoriesController.html":{},"injectables/ProductCategoriesService.html":{},"classes/ProductCategory.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"classes/PublicFile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithRawBody.html":{},"interfaces/RequestWithUser.html":{},"classes/SetDefaultCreditCardDto.html":{},"controllers/SmsController.html":{},"injectables/SmsService.html":{},"classes/StripeEvent.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/StripeWebhookService.html":{},"interfaces/Subscriber.html":{},"controllers/SubscribersController.html":{},"interfaces/SubscribersService.html":{},"controllers/SubscriptionsController.html":{},"injectables/SubscriptionsService.html":{},"classes/Timestamp.html":{},"interfaces/TokenPayload.html":{},"classes/TokenVerificationDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"classes/User.html":{},"interfaces/VerificationTokenPayload.html":{},"miscellaneous/variables.html":{}}}],["default_payment_method",{"_index":1970,"title":{},"body":{"injectables/StripeService.html":{}}}],["defined",{"_index":16,"title":{},"body":{"classes/AddCreditCardDto.html":{},"classes/Address.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/Category.html":{},"classes/CategoryNotFoundException.html":{},"controllers/ChargeController.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"classes/CheckVerificationCodeDto.html":{},"classes/Comment.html":{},"controllers/CommentsController.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostInput.html":{},"classes/CreateProductCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateSubscriberDto.html":{},"classes/CreateUserDto.html":{},"controllers/CreditCardsController.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailConfirmationService.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/FilesService.html":{},"classes/FindOneParams.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/GraphqlJwtAuthGuard.html":{},"controllers/HealthController.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Log.html":{},"classes/LogInDto.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"classes/Message.html":{},"classes/ObjectWithIdDto.html":{},"controllers/OptimizeController.html":{},"classes/PaginationParams.html":{},"classes/Post.html":{},"classes/Post-1.html":{},"classes/PostNotFoundException.html":{},"controllers/PostsController.html":{},"injectables/PostsLoaders.html":{},"classes/PostsResolver.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"classes/Product.html":{},"controllers/ProductCategoriesController.html":{},"injectables/ProductCategoriesService.html":{},"classes/ProductCategory.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"classes/PublicFile.html":{},"classes/RegisterDto.html":{},"classes/SetDefaultCreditCardDto.html":{},"controllers/SmsController.html":{},"injectables/SmsService.html":{},"classes/StripeEvent.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/StripeWebhookService.html":{},"controllers/SubscribersController.html":{},"interfaces/SubscribersService.html":{},"controllers/SubscriptionsController.html":{},"injectables/SubscriptionsService.html":{},"classes/Timestamp.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":442,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["delete(':id",{"_index":432,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/PostsController.html":{}}}],["delete('avatar",{"_index":2275,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete('avatar')@useguards(jwtauthenticationguard",{"_index":2263,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleteavatar",{"_index":2258,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["deleteavatar(@req",{"_index":2276,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleteavatar(request",{"_index":2262,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleteavatar(userid",{"_index":2308,"title":{},"body":{"injectables/UsersService.html":{}}}],["deletecategory",{"_index":421,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{}}}],["deletecategory(@param",{"_index":459,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["deletecategory(id",{"_index":475,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["deletecategory(undefined",{"_index":430,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["deletepost",{"_index":1485,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["deletepost(@param",{"_index":1527,"title":{},"body":{"controllers/PostsController.html":{}}}],["deletepost(id",{"_index":1674,"title":{},"body":{"injectables/PostsService.html":{}}}],["deletepost(undefined",{"_index":1492,"title":{},"body":{"controllers/PostsController.html":{}}}],["deletepublicfile",{"_index":1071,"title":{},"body":{"injectables/FilesService.html":{}}}],["deletepublicfile(fileid",{"_index":1077,"title":{},"body":{"injectables/FilesService.html":{}}}],["deletepublicfilewithqueryrunner",{"_index":1072,"title":{},"body":{"injectables/FilesService.html":{}}}],["deletepublicfilewithqueryrunner(fileid",{"_index":1080,"title":{},"body":{"injectables/FilesService.html":{}}}],["deleteresponse",{"_index":496,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/PostsService.html":{}}}],["deleteresponse.affected",{"_index":498,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/PostsService.html":{}}}],["dependencies",{"_index":53,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/CategoriesModule.html":{},"modules/ChargeModule.html":{},"modules/ChatModule.html":{},"modules/CreditCardsModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"modules/FilesModule.html":{},"modules/GoogleAuthenticationModule.html":{},"modules/HealthModule.html":{},"modules/LoggerModule.html":{},"modules/PostsModule.html":{},"modules/ProductCategoriesModule.html":{},"modules/ProductsModule.html":{},"modules/SmsModule.html":{},"modules/StripeModule.html":{},"modules/StripeWebhookModule.html":{},"modules/SubscriptionsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":2120,"title":{},"body":{"classes/Timestamp.html":{},"index.html":{}}}],["development",{"_index":2546,"title":{},"body":{"index.html":{}}}],["disk",{"_index":1231,"title":{},"body":{"controllers/HealthController.html":{}}}],["diskhealthindicator",{"_index":1214,"title":{},"body":{"controllers/HealthController.html":{}}}],["documentation",{"_index":2367,"title":{},"body":{"coverage.html":{}}}],["donecallback",{"_index":2527,"title":{},"body":{"miscellaneous/functions.html":{}}}],["dto/addcreditcarddto",{"_index":762,"title":{},"body":{"controllers/CreditCardsController.html":{}}}],["dto/createcategory.dto",{"_index":447,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{}}}],["dto/createcharge.dto",{"_index":522,"title":{},"body":{"controllers/ChargeController.html":{}}}],["dto/createcomment.dto",{"_index":633,"title":{},"body":{"controllers/CommentsController.html":{},"classes/CreateCommentCommand.html":{}}}],["dto/createlog.dto",{"_index":1349,"title":{},"body":{"injectables/LogsService.html":{}}}],["dto/createpost.dto",{"_index":1506,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["dto/createproduct.dto",{"_index":1788,"title":{},"body":{"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["dto/createproductcategory.dto",{"_index":1750,"title":{},"body":{"controllers/ProductCategoriesController.html":{},"injectables/ProductCategoriesService.html":{}}}],["dto/createsubscriber.dto",{"_index":2047,"title":{},"body":{"controllers/SubscribersController.html":{},"interfaces/SubscribersService.html":{}}}],["dto/createuser.dto",{"_index":2332,"title":{},"body":{"injectables/UsersService.html":{}}}],["dto/emailschedule.dto",{"_index":1000,"title":{},"body":{"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{}}}],["dto/getcomments.dto",{"_index":641,"title":{},"body":{"controllers/CommentsController.html":{}}}],["dto/register.dto",{"_index":245,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["dto/setdefaultcreditcard.dto",{"_index":763,"title":{},"body":{"controllers/CreditCardsController.html":{}}}],["dto/twofactorauthenticationcode.dto",{"_index":2170,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["dto/updatecategory.dto",{"_index":448,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{}}}],["dto/updatepost.dto",{"_index":1507,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["e2e",{"_index":2555,"title":{},"body":{"index.html":{}}}],["each",{"_index":716,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["eager",{"_index":2224,"title":{},"body":{"classes/User.html":{}}}],["efficient",{"_index":2535,"title":{},"body":{"index.html":{}}}],["elastic/elasticsearch",{"_index":2404,"title":{},"body":{"dependencies.html":{}}}],["elasticsearch_node",{"_index":173,"title":{},"body":{"modules/AppModule.html":{}}}],["elasticsearch_password",{"_index":176,"title":{},"body":{"modules/AppModule.html":{}}}],["elasticsearch_username",{"_index":175,"title":{},"body":{"modules/AppModule.html":{}}}],["elasticsearchhealthindicator",{"_index":872,"title":{"injectables/ElasticsearchHealthIndicator.html":{}},"body":{"injectables/ElasticsearchHealthIndicator.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"coverage.html":{},"overview.html":{}}}],["elasticsearchmodule",{"_index":1833,"title":{},"body":{"modules/SearchModule.html":{}}}],["elasticsearchmodule.registerasync",{"_index":1834,"title":{},"body":{"modules/SearchModule.html":{}}}],["elasticsearchservice",{"_index":877,"title":{},"body":{"injectables/ElasticsearchHealthIndicator.html":{},"injectables/PostsSearchService.html":{}}}],["email",{"_index":334,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/CreateSubscriberDto.html":{},"classes/CreateUserDto.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailConfirmationService.html":{},"controllers/EmailSchedulingController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"classes/RegisterDto.html":{},"injectables/StripeService.html":{},"interfaces/Subscriber.html":{},"classes/User.html":{},"classes/User-1.html":{},"injectables/UsersService.html":{},"interfaces/VerificationTokenPayload.html":{},"miscellaneous/variables.html":{}}}],["email.service",{"_index":980,"title":{},"body":{"modules/EmailModule.html":{}}}],["email/email.module",{"_index":931,"title":{},"body":{"modules/EmailConfirmationModule.html":{},"modules/EmailSchedulingModule.html":{}}}],["email/email.service",{"_index":951,"title":{},"body":{"injectables/EmailConfirmationService.html":{},"injectables/EmailSchedulingService.html":{}}}],["email_confirmation_url",{"_index":194,"title":{},"body":{"modules/AppModule.html":{}}}],["email_password",{"_index":184,"title":{},"body":{"modules/AppModule.html":{}}}],["email_service",{"_index":182,"title":{},"body":{"modules/AppModule.html":{}}}],["email_user",{"_index":183,"title":{},"body":{"modules/AppModule.html":{}}}],["emailconfirmation.controller",{"_index":932,"title":{},"body":{"modules/EmailConfirmationModule.html":{}}}],["emailconfirmation.service",{"_index":904,"title":{},"body":{"controllers/EmailConfirmationController.html":{},"modules/EmailConfirmationModule.html":{}}}],["emailconfirmation/emailconfirmation.guard",{"_index":765,"title":{},"body":{"controllers/CreditCardsController.html":{}}}],["emailconfirmation/emailconfirmation.module",{"_index":129,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{}}}],["emailconfirmation/emailconfirmation.service",{"_index":257,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["emailconfirmationcontroller",{"_index":890,"title":{"controllers/EmailConfirmationController.html":{}},"body":{"controllers/EmailConfirmationController.html":{},"modules/EmailConfirmationModule.html":{},"coverage.html":{}}}],["emailconfirmationguard",{"_index":764,"title":{"guards/EmailConfirmationGuard.html":{}},"body":{"controllers/CreditCardsController.html":{},"guards/EmailConfirmationGuard.html":{},"coverage.html":{}}}],["emailconfirmationmodule",{"_index":63,"title":{"modules/EmailConfirmationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/EmailConfirmationModule.html":{},"modules.html":{},"overview.html":{}}}],["emailconfirmationservice",{"_index":256,"title":{"injectables/EmailConfirmationService.html":{}},"body":{"controllers/AuthenticationController.html":{},"controllers/EmailConfirmationController.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"coverage.html":{},"overview.html":{}}}],["emailmodule",{"_index":929,"title":{"modules/EmailModule.html":{}},"body":{"modules/EmailConfirmationModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"modules.html":{},"overview.html":{}}}],["emailschedule",{"_index":997,"title":{},"body":{"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{}}}],["emailschedule.content",{"_index":1021,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["emailschedule.recipient",{"_index":1019,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["emailschedule.subject",{"_index":1020,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["emailscheduledto",{"_index":981,"title":{"classes/EmailScheduleDto.html":{}},"body":{"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"coverage.html":{}}}],["emailscheduling.controller",{"_index":1008,"title":{},"body":{"modules/EmailSchedulingModule.html":{}}}],["emailscheduling.service",{"_index":999,"title":{},"body":{"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{}}}],["emailscheduling/emailscheduling.module",{"_index":112,"title":{},"body":{"modules/AppModule.html":{}}}],["emailschedulingcontroller",{"_index":990,"title":{"controllers/EmailSchedulingController.html":{}},"body":{"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"coverage.html":{}}}],["emailschedulingmodule",{"_index":64,"title":{"modules/EmailSchedulingModule.html":{}},"body":{"modules/AppModule.html":{},"modules/EmailSchedulingModule.html":{},"modules.html":{},"overview.html":{}}}],["emailschedulingservice",{"_index":998,"title":{"injectables/EmailSchedulingService.html":{}},"body":{"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"coverage.html":{},"overview.html":{}}}],["emailservice",{"_index":938,"title":{"injectables/EmailService.html":{}},"body":{"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"coverage.html":{},"overview.html":{}}}],["engine",{"_index":413,"title":{},"body":{"interfaces/CarProperties.html":{}}}],["entities",{"_index":868,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["entity",{"_index":45,"title":{},"body":{"classes/Address.html":{},"classes/Category.html":{},"classes/Comment.html":{},"classes/Log.html":{},"classes/Message.html":{},"classes/Post.html":{},"classes/Product.html":{},"classes/ProductCategory.html":{},"classes/PublicFile.html":{},"classes/StripeEvent.html":{},"classes/User.html":{}}}],["entity{.ts,.js",{"_index":870,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["enumerations",{"_index":2505,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["environment",{"_index":808,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["epoch",{"_index":2129,"title":{},"body":{"classes/Timestamp.html":{}}}],["error",{"_index":365,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"injectables/EmailConfirmationService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/StripeService.html":{},"injectables/StripeWebhookService.html":{},"injectables/UsersService.html":{}}}],["error(message",{"_index":794,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["error.status",{"_index":1189,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["error?.code",{"_index":366,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/StripeService.html":{},"injectables/StripeWebhookService.html":{}}}],["error?.name",{"_index":972,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["error?.type",{"_index":1971,"title":{},"body":{"injectables/StripeService.html":{}}}],["event",{"_index":2000,"title":{},"body":{"controllers/StripeWebhookController.html":{},"injectables/StripeWebhookService.html":{}}}],["event.data.object",{"_index":2030,"title":{},"body":{"injectables/StripeWebhookService.html":{}}}],["event.type",{"_index":2003,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["eventsrepository",{"_index":2019,"title":{},"body":{"injectables/StripeWebhookService.html":{}}}],["exceed",{"_index":1233,"title":{},"body":{"controllers/HealthController.html":{}}}],["exceptions/categorynotfound.exception",{"_index":484,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["exceptions/postnotfound.exception",{"_index":1689,"title":{},"body":{"injectables/PostsService.html":{}}}],["exclude",{"_index":2248,"title":{},"body":{"classes/User.html":{}}}],["excludenullinterceptor",{"_index":1044,"title":{"injectables/ExcludeNullInterceptor.html":{}},"body":{"injectables/ExcludeNullInterceptor.html":{},"coverage.html":{}}}],["execute",{"_index":685,"title":{},"body":{"classes/CreateCommentHandler.html":{},"classes/GetCommentsHandler.html":{}}}],["execute(command",{"_index":689,"title":{},"body":{"classes/CreateCommentHandler.html":{}}}],["execute(query",{"_index":1118,"title":{},"body":{"classes/GetCommentsHandler.html":{}}}],["executioncontext",{"_index":917,"title":{},"body":{"guards/EmailConfirmationGuard.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/GraphqlJwtAuthGuard.html":{},"injectables/HttpCacheInterceptor.html":{}}}],["exist",{"_index":1710,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["exists",{"_index":372,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["expand",{"_index":1983,"title":{},"body":{"injectables/StripeService.html":{}}}],["expired",{"_index":974,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["expiresin",{"_index":382,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/EmailConfirmationService.html":{}}}],["export",{"_index":22,"title":{},"body":{"classes/AddCreditCardDto.html":{},"classes/Address.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"interfaces/BookProperties.html":{},"interfaces/CarProperties.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"classes/Category.html":{},"classes/CategoryNotFoundException.html":{},"controllers/ChargeController.html":{},"modules/ChargeModule.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/CheckVerificationCodeDto.html":{},"classes/Comment.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostInput.html":{},"classes/CreateProductCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateSubscriberDto.html":{},"classes/CreateUserDto.html":{},"controllers/CreditCardsController.html":{},"modules/CreditCardsModule.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"modules/DatabaseModule.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullInterceptor.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/FindOneParams.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthenticationModule.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/GraphqlJwtAuthGuard.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/Log.html":{},"classes/LogInDto.html":{},"modules/LoggerModule.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"classes/Message.html":{},"classes/ObjectWithIdDto.html":{},"controllers/OptimizeController.html":{},"modules/OptimizeModule.html":{},"classes/PaginationParams.html":{},"classes/Post.html":{},"classes/Post-1.html":{},"interfaces/PostCountResult.html":{},"classes/PostNotFoundException.html":{},"interfaces/PostSearchBody.html":{},"interfaces/PostSearchResult.html":{},"controllers/PostsController.html":{},"injectables/PostsLoaders.html":{},"modules/PostsModule.html":{},"classes/PostsResolver.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"classes/Product.html":{},"controllers/ProductCategoriesController.html":{},"modules/ProductCategoriesModule.html":{},"injectables/ProductCategoriesService.html":{},"classes/ProductCategory.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"modules/PubSubModule.html":{},"classes/PublicFile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithRawBody.html":{},"interfaces/RequestWithUser.html":{},"modules/SearchModule.html":{},"classes/SetDefaultCreditCardDto.html":{},"controllers/SmsController.html":{},"modules/SmsModule.html":{},"injectables/SmsService.html":{},"classes/StripeEvent.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"modules/StripeWebhookModule.html":{},"injectables/StripeWebhookService.html":{},"interfaces/Subscriber.html":{},"controllers/SubscribersController.html":{},"modules/SubscribersModule.html":{},"interfaces/SubscribersService.html":{},"controllers/SubscriptionsController.html":{},"modules/SubscriptionsModule.html":{},"injectables/SubscriptionsService.html":{},"classes/Timestamp.html":{},"interfaces/TokenPayload.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/VerificationTokenPayload.html":{}}}],["exports",{"_index":305,"title":{},"body":{"modules/AuthenticationModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/EmailModule.html":{},"modules/FilesModule.html":{},"modules/GoogleAuthenticationModule.html":{},"modules/LoggerModule.html":{},"modules/OptimizeModule.html":{},"modules/PubSubModule.html":{},"modules/SearchModule.html":{},"modules/SmsModule.html":{},"modules/StripeModule.html":{},"modules/UsersModule.html":{}}}],["express",{"_index":1138,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LogsMiddleware.html":{},"controllers/OptimizeController.html":{},"interfaces/RequestWithRawBody.html":{},"interfaces/RequestWithUser.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["express.multer.file",{"_index":1371,"title":{},"body":{"controllers/OptimizeController.html":{},"controllers/UsersController.html":{}}}],["extends",{"_index":508,"title":{},"body":{"classes/CategoryNotFoundException.html":{},"injectables/CustomLogger.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"injectables/GraphqlJwtAuthGuard.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/PostNotFoundException.html":{},"interfaces/RequestWithRawBody.html":{},"interfaces/RequestWithUser.html":{}}}],["extractjwt",{"_index":1268,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["extractjwt.fromextractors([(request",{"_index":1273,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["factor",{"_index":1290,"title":{},"body":{"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["factor.guard",{"_index":1512,"title":{},"body":{"controllers/PostsController.html":{}}}],["factor.guard.ts",{"_index":1289,"title":{},"body":{"injectables/JwtTwoFactorGuard.html":{},"coverage.html":{}}}],["factor.strategy",{"_index":317,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["factor.strategy.ts",{"_index":1291,"title":{},"body":{"injectables/JwtTwoFactorStrategy.html":{},"coverage.html":{}}}],["factor.strategy.ts:13",{"_index":1292,"title":{},"body":{"injectables/JwtTwoFactorStrategy.html":{}}}],["factor.strategy.ts:26",{"_index":1293,"title":{},"body":{"injectables/JwtTwoFactorStrategy.html":{}}}],["failed",{"_index":889,"title":{},"body":{"injectables/ElasticsearchHealthIndicator.html":{}}}],["false",{"_index":341,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"classes/User.html":{},"miscellaneous/variables.html":{}}}],["field",{"_index":725,"title":{},"body":{"classes/CreatePostInput.html":{},"classes/Post-1.html":{},"classes/User-1.html":{}}}],["field(undefined",{"_index":720,"title":{},"body":{"classes/CreatePostInput.html":{},"classes/Post-1.html":{},"classes/User-1.html":{}}}],["field({nullable",{"_index":723,"title":{},"body":{"classes/CreatePostInput.html":{},"classes/Post-1.html":{}}}],["fields",{"_index":1618,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AddCreditCardDto.html":{},"classes/Address.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"interfaces/BookProperties.html":{},"interfaces/CarProperties.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"classes/Category.html":{},"classes/CategoryNotFoundException.html":{},"controllers/ChargeController.html":{},"modules/ChargeModule.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/CheckVerificationCodeDto.html":{},"classes/Comment.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostInput.html":{},"classes/CreateProductCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateSubscriberDto.html":{},"classes/CreateUserDto.html":{},"controllers/CreditCardsController.html":{},"modules/CreditCardsModule.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"modules/DatabaseModule.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullInterceptor.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/FindOneParams.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthenticationModule.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/GraphqlJwtAuthGuard.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/Log.html":{},"classes/LogInDto.html":{},"modules/LoggerModule.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"classes/Message.html":{},"classes/ObjectWithIdDto.html":{},"controllers/OptimizeController.html":{},"modules/OptimizeModule.html":{},"classes/PaginationParams.html":{},"classes/Post.html":{},"classes/Post-1.html":{},"interfaces/PostCountResult.html":{},"classes/PostNotFoundException.html":{},"interfaces/PostSearchBody.html":{},"interfaces/PostSearchResult.html":{},"controllers/PostsController.html":{},"injectables/PostsLoaders.html":{},"modules/PostsModule.html":{},"classes/PostsResolver.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"classes/Product.html":{},"controllers/ProductCategoriesController.html":{},"modules/ProductCategoriesModule.html":{},"injectables/ProductCategoriesService.html":{},"classes/ProductCategory.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"modules/PubSubModule.html":{},"classes/PublicFile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithRawBody.html":{},"interfaces/RequestWithUser.html":{},"modules/SearchModule.html":{},"classes/SetDefaultCreditCardDto.html":{},"controllers/SmsController.html":{},"modules/SmsModule.html":{},"injectables/SmsService.html":{},"classes/StripeEvent.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"modules/StripeWebhookModule.html":{},"injectables/StripeWebhookService.html":{},"interfaces/Subscriber.html":{},"controllers/SubscribersController.html":{},"modules/SubscribersModule.html":{},"interfaces/SubscribersService.html":{},"controllers/SubscriptionsController.html":{},"modules/SubscriptionsModule.html":{},"injectables/SubscriptionsService.html":{},"classes/Timestamp.html":{},"interfaces/TokenPayload.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/VerificationTokenPayload.html":{},"coverage.html":{}}}],["file.buffer",{"_index":2273,"title":{},"body":{"controllers/UsersController.html":{}}}],["file.key",{"_index":1104,"title":{},"body":{"injectables/FilesService.html":{}}}],["file.originalname",{"_index":2274,"title":{},"body":{"controllers/UsersController.html":{}}}],["fileid",{"_index":1079,"title":{},"body":{"injectables/FilesService.html":{},"injectables/UsersService.html":{}}}],["fileinterceptor",{"_index":2267,"title":{},"body":{"controllers/UsersController.html":{}}}],["filename",{"_index":1084,"title":{},"body":{"injectables/FilesService.html":{},"injectables/UsersService.html":{}}}],["files",{"_index":1374,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["files.service",{"_index":1066,"title":{},"body":{"modules/FilesModule.html":{}}}],["files/files.module",{"_index":2283,"title":{},"body":{"modules/UsersModule.html":{}}}],["files/files.service",{"_index":2333,"title":{},"body":{"injectables/UsersService.html":{}}}],["files/publicfile.entity",{"_index":2250,"title":{},"body":{"classes/User.html":{}}}],["filesmodule",{"_index":1060,"title":{"modules/FilesModule.html":{}},"body":{"modules/FilesModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["filesservice",{"_index":1064,"title":{"injectables/FilesService.html":{}},"body":{"modules/FilesModule.html":{},"injectables/FilesService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["filter",{"_index":1646,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["finally",{"_index":2360,"title":{},"body":{"injectables/UsersService.html":{}}}],["find",{"_index":1727,"title":{},"body":{"injectables/PostsService.html":{}}}],["findmanyoptions",{"_index":1679,"title":{},"body":{"injectables/PostsService.html":{}}}],["findmanyoptions['where",{"_index":1698,"title":{},"body":{"injectables/PostsService.html":{}}}],["findoneparams",{"_index":431,"title":{"classes/FindOneParams.html":{}},"body":{"controllers/CategoriesController.html":{},"classes/FindOneParams.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["first",{"_index":924,"title":{},"body":{"guards/EmailConfirmationGuard.html":{}}}],["forroutes",{"_index":204,"title":{},"body":{"modules/AppModule.html":{}}}],["found",{"_index":514,"title":{},"body":{"classes/CategoryNotFoundException.html":{},"classes/PostNotFoundException.html":{}}}],["framework",{"_index":2533,"title":{},"body":{"index.html":{}}}],["frontend_url",{"_index":189,"title":{},"body":{"modules/AppModule.html":{}}}],["fuel",{"_index":415,"title":{},"body":{"interfaces/CarProperties.html":{}}}],["function",{"_index":2383,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":2516,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generatetwofactorauthenticationsecret",{"_index":2183,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["generatetwofactorauthenticationsecret(user",{"_index":2187,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["get(':id",{"_index":436,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/PostsController.html":{}}}],["get('image/:id",{"_index":1368,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["get('monthly",{"_index":2095,"title":{},"body":{"controllers/SubscriptionsController.html":{}}}],["get('monthly')@useguards(jwtauthenticationguard",{"_index":2087,"title":{},"body":{"controllers/SubscriptionsController.html":{}}}],["get('refresh",{"_index":291,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["get()@healthcheck",{"_index":1208,"title":{},"body":{"controllers/HealthController.html":{}}}],["get()@useguards(emailconfirmationguard)@useguards(jwtauthenticationguard",{"_index":756,"title":{},"body":{"controllers/CreditCardsController.html":{}}}],["get(key",{"_index":2597,"title":{},"body":{"miscellaneous/variables.html":{}}}],["get_posts_cache",{"_index":2596,"title":{},"body":{"miscellaneous/variables.html":{}}}],["get_posts_cache_key",{"_index":1510,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getallcategories",{"_index":422,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{}}}],["getallmessages",{"_index":582,"title":{},"body":{"injectables/ChatService.html":{}}}],["getallproductcategories",{"_index":1764,"title":{},"body":{"injectables/ProductCategoriesService.html":{}}}],["getallproducts",{"_index":1744,"title":{},"body":{"controllers/ProductCategoriesController.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["getallsubscribers",{"_index":2072,"title":{},"body":{"interfaces/SubscribersService.html":{}}}],["getallsubscribers(params",{"_index":2075,"title":{},"body":{"interfaces/SubscribersService.html":{}}}],["getauthenticateduser",{"_index":322,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getauthenticateduser(email",{"_index":331,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getbyemail",{"_index":2288,"title":{},"body":{"injectables/UsersService.html":{}}}],["getbyemail(email",{"_index":2310,"title":{},"body":{"injectables/UsersService.html":{}}}],["getbyid",{"_index":2289,"title":{},"body":{"injectables/UsersService.html":{}}}],["getbyid(id",{"_index":2312,"title":{},"body":{"injectables/UsersService.html":{}}}],["getbyids",{"_index":2290,"title":{},"body":{"injectables/UsersService.html":{}}}],["getbyids(ids",{"_index":2314,"title":{},"body":{"injectables/UsersService.html":{}}}],["getcategorybyid",{"_index":423,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{}}}],["getcategorybyid(@param",{"_index":453,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["getcategorybyid(id",{"_index":478,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["getcategorybyid(undefined",{"_index":435,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["getcomments",{"_index":625,"title":{},"body":{"controllers/CommentsController.html":{}}}],["getcomments(undefined",{"_index":629,"title":{},"body":{"controllers/CommentsController.html":{}}}],["getcommentsdto",{"_index":630,"title":{"classes/GetCommentsDto.html":{}},"body":{"controllers/CommentsController.html":{},"classes/GetCommentsDto.html":{},"coverage.html":{}}}],["getcommentshandler",{"_index":656,"title":{"classes/GetCommentsHandler.html":{}},"body":{"modules/CommentsModule.html":{},"classes/GetCommentsHandler.html":{},"coverage.html":{}}}],["getcommentsquery",{"_index":639,"title":{"classes/GetCommentsQuery.html":{}},"body":{"controllers/CommentsController.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"coverage.html":{}}}],["getcommentsquery(postid",{"_index":648,"title":{},"body":{"controllers/CommentsController.html":{}}}],["getcookiesforlogout",{"_index":323,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getcookiesforuser",{"_index":1149,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["getcookiesforuser(user",{"_index":1156,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["getcookiewithjwtaccesstoken",{"_index":324,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getcookiewithjwtaccesstoken(userid",{"_index":336,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getcookiewithjwtrefreshtoken",{"_index":325,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getcookiewithjwtrefreshtoken(userid",{"_index":342,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getcreditcards",{"_index":750,"title":{},"body":{"controllers/CreditCardsController.html":{}}}],["getcreditcards(@req",{"_index":773,"title":{},"body":{"controllers/CreditCardsController.html":{}}}],["getcreditcards(request",{"_index":755,"title":{},"body":{"controllers/CreditCardsController.html":{}}}],["getjobresult",{"_index":1365,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["getjobresult(@res",{"_index":1393,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["getjobresult(response",{"_index":1367,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["getloglevels",{"_index":805,"title":{},"body":{"injectables/CustomLogger.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["getloglevels(environment",{"_index":812,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["getloglevels(isproduction",{"_index":2523,"title":{},"body":{"miscellaneous/functions.html":{}}}],["getmonthlysubscription",{"_index":2082,"title":{},"body":{"controllers/SubscriptionsController.html":{},"injectables/SubscriptionsService.html":{}}}],["getmonthlysubscription(@req",{"_index":2096,"title":{},"body":{"controllers/SubscriptionsController.html":{}}}],["getmonthlysubscription(customerid",{"_index":2108,"title":{},"body":{"injectables/SubscriptionsService.html":{}}}],["getmonthlysubscription(request",{"_index":2086,"title":{},"body":{"controllers/SubscriptionsController.html":{}}}],["getpostbyid",{"_index":1486,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getpostbyid(@param",{"_index":1520,"title":{},"body":{"controllers/PostsController.html":{}}}],["getpostbyid(id",{"_index":1676,"title":{},"body":{"injectables/PostsService.html":{}}}],["getpostbyid(undefined",{"_index":1494,"title":{},"body":{"controllers/PostsController.html":{}}}],["getposts",{"_index":1487,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getposts(offset",{"_index":1678,"title":{},"body":{"injectables/PostsService.html":{}}}],["getposts(search",{"_index":1496,"title":{},"body":{"controllers/PostsController.html":{}}}],["getpostswithauthors",{"_index":1666,"title":{},"body":{"injectables/PostsService.html":{}}}],["getpostswithauthors(offset",{"_index":1681,"title":{},"body":{"injectables/PostsService.html":{}}}],["getrequest",{"_index":1195,"title":{},"body":{"injectables/GraphqlJwtAuthGuard.html":{}}}],["getrequest(context",{"_index":1196,"title":{},"body":{"injectables/GraphqlJwtAuthGuard.html":{}}}],["getsubscribers",{"_index":2041,"title":{},"body":{"controllers/SubscribersController.html":{}}}],["getting",{"_index":2529,"title":{"index.html":{}},"body":{}}],["getuserdata",{"_index":1150,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["getuserdata(token",{"_index":1158,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["getuserfromauthenticationtoken",{"_index":326,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getuserfromauthenticationtoken(token",{"_index":344,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getuserfromsocket",{"_index":583,"title":{},"body":{"injectables/ChatService.html":{}}}],["getuserfromsocket(socket",{"_index":589,"title":{},"body":{"injectables/ChatService.html":{}}}],["getuserifrefreshtokenmatches",{"_index":2291,"title":{},"body":{"injectables/UsersService.html":{}}}],["getuserifrefreshtokenmatches(refreshtoken",{"_index":2316,"title":{},"body":{"injectables/UsersService.html":{}}}],["global",{"_index":1811,"title":{},"body":{"modules/PubSubModule.html":{}}}],["google",{"_index":1130,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"dependencies.html":{}}}],["google.auth.oauth2",{"_index":1171,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["google.oauth2('v2').userinfo",{"_index":1173,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["google_auth_client_id",{"_index":199,"title":{},"body":{"modules/AppModule.html":{}}}],["google_auth_client_secret",{"_index":200,"title":{},"body":{"modules/AppModule.html":{}}}],["googleapis",{"_index":1165,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"dependencies.html":{}}}],["googleauthentication.controller",{"_index":1146,"title":{},"body":{"modules/GoogleAuthenticationModule.html":{}}}],["googleauthentication.service",{"_index":1137,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthenticationModule.html":{}}}],["googleauthentication/googleauthentication.module",{"_index":131,"title":{},"body":{"modules/AppModule.html":{}}}],["googleauthenticationcontroller",{"_index":1128,"title":{"controllers/GoogleAuthenticationController.html":{}},"body":{"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthenticationModule.html":{},"coverage.html":{}}}],["googleauthenticationmodule",{"_index":65,"title":{"modules/GoogleAuthenticationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/GoogleAuthenticationModule.html":{},"modules.html":{},"overview.html":{}}}],["googleauthenticationservice",{"_index":1136,"title":{"injectables/GoogleAuthenticationService.html":{}},"body":{"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthenticationModule.html":{},"injectables/GoogleAuthenticationService.html":{},"coverage.html":{},"overview.html":{}}}],["gqlexecutioncontext",{"_index":1199,"title":{},"body":{"injectables/GraphqlJwtAuthGuard.html":{}}}],["gqlexecutioncontext.create(context",{"_index":1202,"title":{},"body":{"injectables/GraphqlJwtAuthGuard.html":{}}}],["graph",{"_index":2583,"title":{},"body":{"modules.html":{}}}],["graphql",{"_index":1592,"title":{},"body":{"classes/PostsResolver.html":{},"modules/PubSubModule.html":{},"classes/Timestamp.html":{},"dependencies.html":{}}}],["graphql_playground",{"_index":185,"title":{},"body":{"modules/AppModule.html":{}}}],["graphqljwtauthguard",{"_index":1192,"title":{"injectables/GraphqlJwtAuthGuard.html":{}},"body":{"injectables/GraphqlJwtAuthGuard.html":{},"classes/PostsResolver.html":{},"coverage.html":{}}}],["graphqlmodule",{"_index":114,"title":{},"body":{"modules/AppModule.html":{}}}],["graphqlmodule.forrootasync",{"_index":145,"title":{},"body":{"modules/AppModule.html":{}}}],["graphqlresolveinfo",{"_index":1578,"title":{},"body":{"classes/PostsResolver.html":{}}}],["grow",{"_index":2562,"title":{},"body":{"index.html":{}}}],["grpc",{"_index":2481,"title":{},"body":{"dependencies.html":{}}}],["grpc/grpc",{"_index":2406,"title":{},"body":{"dependencies.html":{}}}],["grpc/proto",{"_index":2409,"title":{},"body":{"dependencies.html":{}}}],["grpc_connection_url",{"_index":179,"title":{},"body":{"modules/AppModule.html":{}}}],["gt",{"_index":1648,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["guard",{"_index":912,"title":{"guards/EmailConfirmationGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":913,"title":{},"body":{"guards/EmailConfirmationGuard.html":{}}}],["handle",{"_index":1057,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["handleconnection",{"_index":542,"title":{},"body":{"classes/ChatGateway.html":{}}}],["handleconnection(socket",{"_index":549,"title":{},"body":{"classes/ChatGateway.html":{}}}],["handleincomingevents",{"_index":1989,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["handleincomingevents(signature",{"_index":1990,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["handleregistereduser",{"_index":1151,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["handleregistereduser(user",{"_index":1160,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["hapi/joi",{"_index":100,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["hash",{"_index":2604,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hashedpassword",{"_index":348,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["header",{"_index":1999,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["headers",{"_index":1992,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["headers('stripe",{"_index":1997,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["health",{"_index":1206,"title":{},"body":{"controllers/HealthController.html":{}}}],["health.controller",{"_index":1245,"title":{},"body":{"modules/HealthModule.html":{}}}],["health/health.module",{"_index":135,"title":{},"body":{"modules/AppModule.html":{}}}],["healthcheck",{"_index":1211,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcheckerror",{"_index":884,"title":{},"body":{"injectables/ElasticsearchHealthIndicator.html":{}}}],["healthcheckservice",{"_index":1210,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcontroller",{"_index":1204,"title":{"controllers/HealthController.html":{}},"body":{"controllers/HealthController.html":{},"modules/HealthModule.html":{},"coverage.html":{}}}],["healthindicator",{"_index":874,"title":{},"body":{"injectables/ElasticsearchHealthIndicator.html":{}}}],["healthindicatorresult",{"_index":883,"title":{},"body":{"injectables/ElasticsearchHealthIndicator.html":{}}}],["healthmodule",{"_index":66,"title":{"modules/HealthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/HealthModule.html":{},"modules.html":{},"overview.html":{}}}],["heap",{"_index":1224,"title":{},"body":{"controllers/HealthController.html":{}}}],["here",{"_index":960,"title":{},"body":{"injectables/EmailConfirmationService.html":{},"index.html":{}}}],["hits",{"_index":1479,"title":{},"body":{"interfaces/PostSearchResult.html":{},"injectables/PostsSearchService.html":{}}}],["hits.map((item",{"_index":1654,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["host",{"_index":140,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/PostsModule.html":{},"modules/PubSubModule.html":{}}}],["httpcache.interceptor",{"_index":1509,"title":{},"body":{"controllers/PostsController.html":{}}}],["httpcacheinterceptor",{"_index":1247,"title":{"injectables/HttpCacheInterceptor.html":{}},"body":{"injectables/HttpCacheInterceptor.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["httpcode",{"_index":238,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/CreditCardsController.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["httpcode(200",{"_index":269,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/CreditCardsController.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["httpcode(200)@useguards(localauthenticationguard)@post('log",{"_index":221,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["httpexception",{"_index":350,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/UsersService.html":{}}}],["httpexception('something",{"_index":374,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["httpexception('user",{"_index":370,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/UsersService.html":{}}}],["httpexception('wrong",{"_index":396,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["httponly",{"_index":385,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["https://nestjs.com",{"_index":2576,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":351,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/UsersService.html":{}}}],["httpstatus.bad_request",{"_index":373,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["httpstatus.internal_server_error",{"_index":377,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["httpstatus.not_found",{"_index":2337,"title":{},"body":{"injectables/UsersService.html":{}}}],["icommandhandler",{"_index":684,"title":{},"body":{"classes/CreateCommentHandler.html":{}}}],["id",{"_index":31,"title":{},"body":{"classes/Address.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/Category.html":{},"classes/CategoryNotFoundException.html":{},"classes/Comment.html":{},"injectables/FilesService.html":{},"classes/FindOneParams.html":{},"classes/GetCommentsHandler.html":{},"classes/Log.html":{},"classes/Message.html":{},"classes/ObjectWithIdDto.html":{},"controllers/OptimizeController.html":{},"classes/Post.html":{},"classes/Post-1.html":{},"classes/PostNotFoundException.html":{},"interfaces/PostSearchBody.html":{},"controllers/PostsController.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"classes/Product.html":{},"classes/ProductCategory.html":{},"classes/PublicFile.html":{},"classes/StripeEvent.html":{},"injectables/StripeWebhookService.html":{},"interfaces/Subscriber.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["identifier",{"_index":2368,"title":{},"body":{"coverage.html":{}}}],["ids",{"_index":1722,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["ids.length",{"_index":1725,"title":{},"body":{"injectables/PostsService.html":{}}}],["image",{"_index":1407,"title":{},"body":{"modules/OptimizeModule.html":{}}}],["image.processor.js",{"_index":1410,"title":{},"body":{"modules/OptimizeModule.html":{}}}],["imagebuffer",{"_index":2302,"title":{},"body":{"injectables/UsersService.html":{}}}],["imagemin",{"_index":2483,"title":{},"body":{"dependencies.html":{}}}],["imageprocessor",{"_index":2386,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["imageprocessor(job",{"_index":2526,"title":{},"body":{"miscellaneous/functions.html":{}}}],["imagequeue",{"_index":1386,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["implementations/createcomment.command",{"_index":693,"title":{},"body":{"classes/CreateCommentHandler.html":{}}}],["implementations/getcomments.query",{"_index":1121,"title":{},"body":{"classes/GetCommentsHandler.html":{}}}],["implements",{"_index":539,"title":{},"body":{"classes/ChatGateway.html":{},"classes/CreateCommentHandler.html":{},"classes/DatabaseLogger.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/ExcludeNullInterceptor.html":{},"classes/GetCommentsHandler.html":{},"injectables/LogsMiddleware.html":{},"controllers/SubscribersController.html":{},"classes/Timestamp.html":{}}}],["import",{"_index":18,"title":{},"body":{"classes/AddCreditCardDto.html":{},"classes/Address.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"classes/Category.html":{},"classes/CategoryNotFoundException.html":{},"controllers/ChargeController.html":{},"modules/ChargeModule.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/CheckVerificationCodeDto.html":{},"classes/Comment.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommentHandler.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostInput.html":{},"classes/CreateProductCategoryDto.html":{},"classes/CreateProductDto.html":{},"controllers/CreditCardsController.html":{},"modules/CreditCardsModule.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"modules/DatabaseModule.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullInterceptor.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/FindOneParams.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthenticationModule.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/GraphqlJwtAuthGuard.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/Log.html":{},"classes/LogInDto.html":{},"modules/LoggerModule.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"classes/Message.html":{},"classes/ObjectWithIdDto.html":{},"controllers/OptimizeController.html":{},"modules/OptimizeModule.html":{},"classes/PaginationParams.html":{},"classes/Post.html":{},"classes/Post-1.html":{},"classes/PostNotFoundException.html":{},"interfaces/PostSearchResult.html":{},"controllers/PostsController.html":{},"injectables/PostsLoaders.html":{},"modules/PostsModule.html":{},"classes/PostsResolver.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"classes/Product.html":{},"controllers/ProductCategoriesController.html":{},"modules/ProductCategoriesModule.html":{},"injectables/ProductCategoriesService.html":{},"classes/ProductCategory.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"modules/PubSubModule.html":{},"classes/PublicFile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithRawBody.html":{},"interfaces/RequestWithUser.html":{},"modules/SearchModule.html":{},"classes/SetDefaultCreditCardDto.html":{},"controllers/SmsController.html":{},"modules/SmsModule.html":{},"injectables/SmsService.html":{},"classes/StripeEvent.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"modules/StripeWebhookModule.html":{},"injectables/StripeWebhookService.html":{},"controllers/SubscribersController.html":{},"modules/SubscribersModule.html":{},"interfaces/SubscribersService.html":{},"controllers/SubscriptionsController.html":{},"modules/SubscriptionsModule.html":{},"injectables/SubscriptionsService.html":{},"classes/Timestamp.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":83,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/CategoriesModule.html":{},"modules/ChargeModule.html":{},"modules/ChatModule.html":{},"modules/CommentsModule.html":{},"modules/CreditCardsModule.html":{},"modules/DatabaseModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"modules/FilesModule.html":{},"modules/GoogleAuthenticationModule.html":{},"modules/HealthModule.html":{},"modules/LoggerModule.html":{},"modules/OptimizeModule.html":{},"modules/PostsModule.html":{},"modules/ProductCategoriesModule.html":{},"modules/ProductsModule.html":{},"modules/PubSubModule.html":{},"modules/SearchModule.html":{},"modules/SmsModule.html":{},"modules/StripeModule.html":{},"modules/StripeWebhookModule.html":{},"modules/SubscribersModule.html":{},"modules/SubscriptionsModule.html":{},"modules/UsersModule.html":{}}}],["in(ids",{"_index":1728,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["index",{"_index":8,"title":{"index.html":{}},"body":{"classes/AddCreditCardDto.html":{},"classes/Address.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"interfaces/BookProperties.html":{},"interfaces/CarProperties.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/Category.html":{},"controllers/ChargeController.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"classes/CheckVerificationCodeDto.html":{},"classes/Comment.html":{},"controllers/CommentsController.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostInput.html":{},"classes/CreateProductCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateSubscriberDto.html":{},"classes/CreateUserDto.html":{},"controllers/CreditCardsController.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailConfirmationService.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/FilesService.html":{},"classes/FindOneParams.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/GraphqlJwtAuthGuard.html":{},"controllers/HealthController.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Log.html":{},"classes/LogInDto.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"classes/Message.html":{},"classes/ObjectWithIdDto.html":{},"controllers/OptimizeController.html":{},"classes/PaginationParams.html":{},"classes/Post.html":{},"classes/Post-1.html":{},"interfaces/PostCountResult.html":{},"interfaces/PostSearchBody.html":{},"interfaces/PostSearchResult.html":{},"controllers/PostsController.html":{},"injectables/PostsLoaders.html":{},"classes/PostsResolver.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"classes/Product.html":{},"controllers/ProductCategoriesController.html":{},"injectables/ProductCategoriesService.html":{},"classes/ProductCategory.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"classes/PublicFile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithRawBody.html":{},"interfaces/RequestWithUser.html":{},"classes/SetDefaultCreditCardDto.html":{},"controllers/SmsController.html":{},"injectables/SmsService.html":{},"classes/StripeEvent.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/StripeWebhookService.html":{},"interfaces/Subscriber.html":{},"controllers/SubscribersController.html":{},"interfaces/SubscribersService.html":{},"controllers/SubscriptionsController.html":{},"injectables/SubscriptionsService.html":{},"classes/Timestamp.html":{},"interfaces/TokenPayload.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"interfaces/VerificationTokenPayload.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["index('post_authorid_index",{"_index":1451,"title":{},"body":{"classes/Post.html":{}}}],["index('post_authorid_index')@manytoone(undefined",{"_index":1427,"title":{},"body":{"classes/Post.html":{}}}],["indexpost",{"_index":1613,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["indexpost(post",{"_index":1620,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AddCreditCardDto.html":{},"classes/Address.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"interfaces/BookProperties.html":{},"interfaces/CarProperties.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"classes/Category.html":{},"classes/CategoryNotFoundException.html":{},"controllers/ChargeController.html":{},"modules/ChargeModule.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/CheckVerificationCodeDto.html":{},"classes/Comment.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostInput.html":{},"classes/CreateProductCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateSubscriberDto.html":{},"classes/CreateUserDto.html":{},"controllers/CreditCardsController.html":{},"modules/CreditCardsModule.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"modules/DatabaseModule.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullInterceptor.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/FindOneParams.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthenticationModule.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/GraphqlJwtAuthGuard.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/Log.html":{},"classes/LogInDto.html":{},"modules/LoggerModule.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"classes/Message.html":{},"classes/ObjectWithIdDto.html":{},"controllers/OptimizeController.html":{},"modules/OptimizeModule.html":{},"classes/PaginationParams.html":{},"classes/Post.html":{},"classes/Post-1.html":{},"interfaces/PostCountResult.html":{},"classes/PostNotFoundException.html":{},"interfaces/PostSearchBody.html":{},"interfaces/PostSearchResult.html":{},"controllers/PostsController.html":{},"injectables/PostsLoaders.html":{},"modules/PostsModule.html":{},"classes/PostsResolver.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"classes/Product.html":{},"controllers/ProductCategoriesController.html":{},"modules/ProductCategoriesModule.html":{},"injectables/ProductCategoriesService.html":{},"classes/ProductCategory.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"modules/PubSubModule.html":{},"classes/PublicFile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithRawBody.html":{},"interfaces/RequestWithUser.html":{},"modules/SearchModule.html":{},"classes/SetDefaultCreditCardDto.html":{},"controllers/SmsController.html":{},"modules/SmsModule.html":{},"injectables/SmsService.html":{},"classes/StripeEvent.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"modules/StripeWebhookModule.html":{},"injectables/StripeWebhookService.html":{},"interfaces/Subscriber.html":{},"controllers/SubscribersController.html":{},"modules/SubscribersModule.html":{},"interfaces/SubscribersService.html":{},"controllers/SubscriptionsController.html":{},"modules/SubscriptionsModule.html":{},"injectables/SubscriptionsService.html":{},"classes/Timestamp.html":{},"interfaces/TokenPayload.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/VerificationTokenPayload.html":{},"dependencies.html":{}}}],["info.returntype",{"_index":1601,"title":{},"body":{"classes/PostsResolver.html":{}}}],["initiatephonenumberverification",{"_index":1845,"title":{},"body":{"controllers/SmsController.html":{},"injectables/SmsService.html":{}}}],["initiatephonenumberverification(@req",{"_index":1860,"title":{},"body":{"controllers/SmsController.html":{}}}],["initiatephonenumberverification(phonenumber",{"_index":1882,"title":{},"body":{"injectables/SmsService.html":{}}}],["initiatephonenumberverification(request",{"_index":1852,"title":{},"body":{"controllers/SmsController.html":{}}}],["inject",{"_index":144,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/PostsModule.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"modules/PubSubModule.html":{},"modules/SearchModule.html":{},"controllers/SubscribersController.html":{},"modules/SubscribersModule.html":{}}}],["inject(cache_manager",{"_index":1692,"title":{},"body":{"injectables/PostsService.html":{}}}],["inject(pub_sub",{"_index":1597,"title":{},"body":{"classes/PostsResolver.html":{}}}],["injectable",{"_index":319,"title":{"injectables/AuthenticationService.html":{},"injectables/CategoriesService.html":{},"injectables/ChatService.html":{},"injectables/CustomLogger.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"injectables/EmailConfirmationService.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/FilesService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/GraphqlJwtAuthGuard.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"injectables/PostsLoaders.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"injectables/ProductCategoriesService.html":{},"injectables/ProductsService.html":{},"injectables/SmsService.html":{},"injectables/StripeService.html":{},"injectables/StripeWebhookService.html":{},"injectables/SubscriptionsService.html":{},"injectables/TwoFactorAuthenticationService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AuthenticationService.html":{},"injectables/CategoriesService.html":{},"injectables/ChatService.html":{},"injectables/CustomLogger.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailConfirmationService.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/FilesService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/GraphqlJwtAuthGuard.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"injectables/PostsLoaders.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"injectables/ProductCategoriesService.html":{},"injectables/ProductsService.html":{},"injectables/SmsService.html":{},"injectables/StripeService.html":{},"injectables/StripeWebhookService.html":{},"injectables/SubscriptionsService.html":{},"injectables/TwoFactorAuthenticationService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":320,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/CategoriesService.html":{},"injectables/ChatService.html":{},"injectables/CustomLogger.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"injectables/EmailConfirmationService.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/FilesService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/GraphqlJwtAuthGuard.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"injectables/PostsLoaders.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"injectables/ProductCategoriesService.html":{},"injectables/ProductsService.html":{},"injectables/SmsService.html":{},"injectables/StripeService.html":{},"injectables/StripeWebhookService.html":{},"injectables/SubscriptionsService.html":{},"injectables/TwoFactorAuthenticationService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectqueue",{"_index":1377,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["injectqueue('image",{"_index":1385,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["injectrepository",{"_index":482,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/ChatService.html":{},"classes/CreateCommentHandler.html":{},"injectables/FilesService.html":{},"classes/GetCommentsHandler.html":{},"injectables/LogsService.html":{},"injectables/PostsService.html":{},"injectables/ProductCategoriesService.html":{},"injectables/ProductsService.html":{},"injectables/StripeWebhookService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(category",{"_index":485,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["injectrepository(comment",{"_index":695,"title":{},"body":{"classes/CreateCommentHandler.html":{},"classes/GetCommentsHandler.html":{}}}],["injectrepository(log",{"_index":1350,"title":{},"body":{"injectables/LogsService.html":{}}}],["injectrepository(message",{"_index":597,"title":{},"body":{"injectables/ChatService.html":{}}}],["injectrepository(post",{"_index":1691,"title":{},"body":{"injectables/PostsService.html":{}}}],["injectrepository(product",{"_index":1805,"title":{},"body":{"injectables/ProductsService.html":{}}}],["injectrepository(productcategory",{"_index":1771,"title":{},"body":{"injectables/ProductCategoriesService.html":{}}}],["injectrepository(publicfile",{"_index":1092,"title":{},"body":{"injectables/FilesService.html":{}}}],["injectrepository(stripeevent",{"_index":2025,"title":{},"body":{"injectables/StripeWebhookService.html":{}}}],["injectrepository(user",{"_index":2334,"title":{},"body":{"injectables/UsersService.html":{}}}],["inline",{"_index":1663,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["inputs/post.input",{"_index":1586,"title":{},"body":{"classes/PostsResolver.html":{}}}],["inputtype",{"_index":727,"title":{},"body":{"classes/CreatePostInput.html":{}}}],["installation",{"_index":2542,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":2544,"title":{},"body":{"index.html":{}}}],["installsubscriptionhandlers",{"_index":151,"title":{},"body":{"modules/AppModule.html":{}}}],["instanceof",{"_index":2142,"title":{},"body":{"classes/Timestamp.html":{}}}],["int",{"_index":1465,"title":{},"body":{"classes/Post-1.html":{},"classes/User-1.html":{}}}],["integer",{"_index":2124,"title":{},"body":{"classes/Timestamp.html":{}}}],["intercept",{"_index":1046,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["intercept(context",{"_index":1047,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["interface",{"_index":404,"title":{"interfaces/BookProperties.html":{},"interfaces/CarProperties.html":{},"interfaces/PostCountResult.html":{},"interfaces/PostSearchBody.html":{},"interfaces/PostSearchResult.html":{},"interfaces/RequestWithRawBody.html":{},"interfaces/RequestWithUser.html":{},"interfaces/Subscriber.html":{},"interfaces/SubscribersService.html":{},"interfaces/TokenPayload.html":{},"interfaces/VerificationTokenPayload.html":{}},"body":{"interfaces/BookProperties.html":{},"interfaces/CarProperties.html":{},"interfaces/PostCountResult.html":{},"interfaces/PostSearchBody.html":{},"interfaces/PostSearchResult.html":{},"interfaces/RequestWithRawBody.html":{},"interfaces/RequestWithUser.html":{},"interfaces/Subscriber.html":{},"interfaces/SubscribersService.html":{},"interfaces/TokenPayload.html":{},"interfaces/VerificationTokenPayload.html":{},"coverage.html":{}}}],["interfaces",{"_index":406,"title":{},"body":{"interfaces/BookProperties.html":{},"interfaces/CarProperties.html":{},"interfaces/PostCountResult.html":{},"interfaces/PostSearchBody.html":{},"interfaces/PostSearchResult.html":{},"interfaces/RequestWithRawBody.html":{},"interfaces/RequestWithUser.html":{},"interfaces/Subscriber.html":{},"interfaces/SubscribersService.html":{},"interfaces/TokenPayload.html":{},"interfaces/VerificationTokenPayload.html":{},"overview.html":{}}}],["internalservererrorexception",{"_index":1948,"title":{},"body":{"injectables/StripeService.html":{},"injectables/UsersService.html":{}}}],["invalidrequest",{"_index":2512,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["invoice_settings",{"_index":1969,"title":{},"body":{"injectables/StripeService.html":{}}}],["iqueryhandler",{"_index":1116,"title":{},"body":{"classes/GetCommentsHandler.html":{}}}],["iscodevalid",{"_index":2177,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["iscompleted",{"_index":1397,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["iscreatinglogs",{"_index":1355,"title":{},"body":{"injectables/LogsService.html":{}}}],["isdatestring",{"_index":985,"title":{},"body":{"classes/EmailScheduleDto.html":{}}}],["isemail",{"_index":987,"title":{},"body":{"classes/EmailScheduleDto.html":{},"classes/LogInDto.html":{},"classes/RegisterDto.html":{}}}],["isemailconfirmed",{"_index":2217,"title":{},"body":{"classes/User.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["ishealthy",{"_index":875,"title":{},"body":{"injectables/ElasticsearchHealthIndicator.html":{}}}],["ishealthy(key",{"_index":879,"title":{},"body":{"injectables/ElasticsearchHealthIndicator.html":{}}}],["isnotempty",{"_index":20,"title":{},"body":{"classes/AddCreditCardDto.html":{},"classes/CheckVerificationCodeDto.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateProductCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/EmailScheduleDto.html":{},"classes/LogInDto.html":{},"classes/RegisterDto.html":{},"classes/SetDefaultCreditCardDto.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{}}}],["isnumber",{"_index":666,"title":{},"body":{"classes/CreateChargeDto.html":{},"classes/ObjectWithIdDto.html":{},"classes/PaginationParams.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{}}}],["isnumber()@isoptional",{"_index":2205,"title":{},"body":{"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{}}}],["isnumberstring",{"_index":1109,"title":{},"body":{"classes/FindOneParams.html":{}}}],["isoptional",{"_index":1114,"title":{},"body":{"classes/GetCommentsDto.html":{},"classes/PaginationParams.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{}}}],["isoptional()@type(undefined)@isnumber()@min(0",{"_index":1418,"title":{},"body":{"classes/PaginationParams.html":{}}}],["isoptional()@type(undefined)@isnumber()@min(1",{"_index":1416,"title":{},"body":{"classes/PaginationParams.html":{}}}],["ispasswordmatching",{"_index":399,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["isphonenumberconfirmed",{"_index":2218,"title":{},"body":{"classes/User.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["isproduction",{"_index":2524,"title":{},"body":{"miscellaneous/functions.html":{}}}],["isrefreshtokenmatching",{"_index":2363,"title":{},"body":{"injectables/UsersService.html":{}}}],["isregisteredwithgoogle",{"_index":2219,"title":{},"body":{"classes/User.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["issecondfactorauthenticated",{"_index":337,"title":{},"body":{"injectables/AuthenticationService.html":{},"interfaces/TokenPayload.html":{}}}],["isstring",{"_index":19,"title":{},"body":{"classes/AddCreditCardDto.html":{},"classes/CheckVerificationCodeDto.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateProductCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/EmailScheduleDto.html":{},"classes/LogInDto.html":{},"classes/RegisterDto.html":{},"classes/SetDefaultCreditCardDto.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{}}}],["isstring()@isnotempty",{"_index":15,"title":{},"body":{"classes/AddCreditCardDto.html":{},"classes/CheckVerificationCodeDto.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateProductCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/EmailScheduleDto.html":{},"classes/RegisterDto.html":{},"classes/SetDefaultCreditCardDto.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{}}}],["isstring()@isnotempty()@isoptional",{"_index":2207,"title":{},"body":{"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{}}}],["isstring()@isnotempty()@matches(/^\\+[1",{"_index":1823,"title":{},"body":{"classes/RegisterDto.html":{}}}],["isstring()@isnotempty()@minlength(7",{"_index":1316,"title":{},"body":{"classes/LogInDto.html":{},"classes/RegisterDto.html":{}}}],["isstring({each",{"_index":712,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/UpdatePostDto.html":{}}}],["istwofactorauthenticationcodevalid",{"_index":2184,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["istwofactorauthenticationcodevalid(twofactorauthenticationcode",{"_index":2189,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["istwofactorauthenticationenabled",{"_index":2220,"title":{},"body":{"classes/User.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["item._source",{"_index":1655,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["items",{"_index":1702,"title":{},"body":{"injectables/PostsService.html":{},"injectables/StripeService.html":{}}}],["job",{"_index":1017,"title":{},"body":{"injectables/EmailSchedulingService.html":{},"controllers/OptimizeController.html":{},"miscellaneous/functions.html":{}}}],["job.id",{"_index":1392,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["job.iscompleted",{"_index":1398,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["job.start",{"_index":1023,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["jobid",{"_index":1391,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["john",{"_index":2603,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi",{"_index":99,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.number",{"_index":172,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.number().required",{"_index":160,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.object",{"_index":156,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string",{"_index":174,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().required",{"_index":158,"title":{},"body":{"modules/AppModule.html":{}}}],["join",{"_index":116,"title":{},"body":{"modules/AppModule.html":{},"modules/OptimizeModule.html":{},"modules/SubscribersModule.html":{},"index.html":{}}}],["join(__dirname",{"_index":1409,"title":{},"body":{"modules/OptimizeModule.html":{}}}],["join(process.cwd",{"_index":149,"title":{},"body":{"modules/AppModule.html":{},"modules/SubscribersModule.html":{}}}],["joincolumn",{"_index":2247,"title":{},"body":{"classes/User.html":{}}}],["joincolumn()@onetoone(undefined",{"_index":2228,"title":{},"body":{"classes/User.html":{}}}],["jointable",{"_index":1446,"title":{},"body":{"classes/Post.html":{}}}],["js",{"_index":2407,"title":{},"body":{"dependencies.html":{}}}],["json.stringify(parameters",{"_index":857,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["jsonb",{"_index":1735,"title":{},"body":{"classes/Product.html":{}}}],["jwt",{"_index":250,"title":{},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/GraphqlJwtAuthGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"classes/PostsResolver.html":{},"controllers/TwoFactorAuthenticationController.html":{},"coverage.html":{},"dependencies.html":{}}}],["jwt.strategy",{"_index":312,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["jwt_access_token_expiration_time",{"_index":165,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["jwt_access_token_secret",{"_index":164,"title":{},"body":{"modules/AppModule.html":{}}}],["jwt_refresh_token_expiration_time",{"_index":167,"title":{},"body":{"modules/AppModule.html":{}}}],["jwt_refresh_token_secret",{"_index":166,"title":{},"body":{"modules/AppModule.html":{}}}],["jwt_verification_token_expiration_time",{"_index":193,"title":{},"body":{"modules/AppModule.html":{}}}],["jwt_verification_token_secret",{"_index":192,"title":{},"body":{"modules/AppModule.html":{}}}],["jwtauthenticationguard",{"_index":249,"title":{"injectables/JwtAuthenticationGuard.html":{}},"body":{"controllers/AuthenticationController.html":{},"controllers/CategoriesController.html":{},"controllers/ChargeController.html":{},"controllers/CommentsController.html":{},"controllers/CreditCardsController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/EmailSchedulingController.html":{},"injectables/JwtAuthenticationGuard.html":{},"controllers/ProductCategoriesController.html":{},"controllers/ProductsController.html":{},"controllers/SmsController.html":{},"controllers/SubscribersController.html":{},"controllers/SubscriptionsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":1272,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["jwtmodule",{"_index":310,"title":{},"body":{"modules/AuthenticationModule.html":{},"modules/EmailConfirmationModule.html":{}}}],["jwtmodule.register",{"_index":318,"title":{},"body":{"modules/AuthenticationModule.html":{},"modules/EmailConfirmationModule.html":{}}}],["jwtrefreshguard",{"_index":254,"title":{"injectables/JwtRefreshGuard.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/JwtRefreshGuard.html":{},"coverage.html":{}}}],["jwtrefreshtokenstrategy",{"_index":298,"title":{"injectables/JwtRefreshTokenStrategy.html":{}},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["jwtservice",{"_index":329,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/EmailConfirmationService.html":{}}}],["jwtstrategy",{"_index":299,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["jwttwofactorguard",{"_index":1288,"title":{"injectables/JwtTwoFactorGuard.html":{}},"body":{"injectables/JwtTwoFactorGuard.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["jwttwofactorstrategy",{"_index":300,"title":{"injectables/JwtTwoFactorStrategy.html":{}},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtTwoFactorStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":2573,"title":{},"body":{"index.html":{}}}],["key",{"_index":881,"title":{},"body":{"injectables/ElasticsearchHealthIndicator.html":{},"injectables/FilesService.html":{},"injectables/PostsSearchService.html":{},"classes/PublicFile.html":{},"miscellaneous/variables.html":{}}}],["key.startswith(get_posts_cache_key",{"_index":1696,"title":{},"body":{"injectables/PostsService.html":{}}}],["keys",{"_index":1693,"title":{},"body":{"injectables/PostsService.html":{}}}],["keys.foreach((key",{"_index":1695,"title":{},"body":{"injectables/PostsService.html":{}}}],["kind",{"_index":2140,"title":{},"body":{"classes/Timestamp.html":{}}}],["kind.int",{"_index":2147,"title":{},"body":{"classes/Timestamp.html":{}}}],["kind.string",{"_index":2148,"title":{},"body":{"classes/Timestamp.html":{}}}],["level",{"_index":704,"title":{},"body":{"classes/CreateLogDto.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"classes/Log.html":{}}}],["license",{"_index":2579,"title":{},"body":{"index.html":{}}}],["licensed",{"_index":2559,"title":{},"body":{"index.html":{}}}],["limit",{"_index":1413,"title":{},"body":{"classes/PaginationParams.html":{},"controllers/PostsController.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{}}}],["link",{"_index":909,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["link')@useguards(jwtauthenticationguard",{"_index":901,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["listcreditcards",{"_index":1925,"title":{},"body":{"injectables/StripeService.html":{}}}],["listcreditcards(customerid",{"_index":1942,"title":{},"body":{"injectables/StripeService.html":{}}}],["listenformessages",{"_index":543,"title":{},"body":{"classes/ChatGateway.html":{}}}],["listenformessages(content",{"_index":552,"title":{},"body":{"classes/ChatGateway.html":{}}}],["listsubscriptions",{"_index":1926,"title":{},"body":{"injectables/StripeService.html":{}}}],["listsubscriptions(priceid",{"_index":1944,"title":{},"body":{"injectables/StripeService.html":{}}}],["literal",{"_index":414,"title":{},"body":{"interfaces/CarProperties.html":{},"interfaces/PostSearchResult.html":{},"classes/PostsResolver.html":{},"interfaces/SubscribersService.html":{}}}],["loader",{"_index":2410,"title":{},"body":{"dependencies.html":{}}}],["loaders/posts.loaders",{"_index":1560,"title":{},"body":{"modules/PostsModule.html":{}}}],["local",{"_index":1301,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["local.strategy",{"_index":309,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["localauthentication.guard",{"_index":248,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["localauthenticationguard",{"_index":247,"title":{"injectables/LocalAuthenticationGuard.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/LocalAuthenticationGuard.html":{},"coverage.html":{}}}],["localstrategy",{"_index":301,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthenticationModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["log",{"_index":784,"title":{"classes/Log.html":{}},"body":{"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"classes/Log.html":{},"modules/LoggerModule.html":{},"injectables/LogsService.html":{},"coverage.html":{}}}],["log(level",{"_index":832,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["log(message",{"_index":797,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["log.entity",{"_index":1324,"title":{},"body":{"modules/LoggerModule.html":{},"injectables/LogsService.html":{}}}],["logger",{"_index":823,"title":{},"body":{"classes/DatabaseLogger.html":{},"modules/DatabaseModule.html":{},"injectables/LogsMiddleware.html":{},"injectables/PostsService.html":{}}}],["logger('http",{"_index":1331,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["logger(postsservice.name",{"_index":1687,"title":{},"body":{"injectables/PostsService.html":{}}}],["logger.service",{"_index":804,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logger/logger.module",{"_index":134,"title":{},"body":{"modules/AppModule.html":{}}}],["loggermodule",{"_index":67,"title":{"modules/LoggerModule.html":{}},"body":{"modules/AppModule.html":{},"modules/LoggerModule.html":{},"modules.html":{},"overview.html":{}}}],["login",{"_index":211,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["login(@req",{"_index":272,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["login(request",{"_index":220,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["logindto",{"_index":1313,"title":{"classes/LogInDto.html":{}},"body":{"classes/LogInDto.html":{},"coverage.html":{}}}],["loglevel",{"_index":2525,"title":{},"body":{"miscellaneous/functions.html":{}}}],["loglevels",{"_index":811,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logmigration",{"_index":824,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logmigration(message",{"_index":835,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logout",{"_index":212,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["logout(@req",{"_index":285,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["logout(request",{"_index":224,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["logquery",{"_index":825,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logquery(query",{"_index":837,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logqueryerror",{"_index":826,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logqueryerror(error",{"_index":839,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logqueryslow",{"_index":827,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logqueryslow(time",{"_index":841,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logs.service",{"_index":807,"title":{},"body":{"injectables/CustomLogger.html":{},"modules/LoggerModule.html":{}}}],["logschemabuild",{"_index":828,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logschemabuild(message",{"_index":844,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logsmiddleware",{"_index":132,"title":{"injectables/LogsMiddleware.html":{}},"body":{"modules/AppModule.html":{},"injectables/LogsMiddleware.html":{},"coverage.html":{}}}],["logsrepository",{"_index":1346,"title":{},"body":{"injectables/LogsService.html":{}}}],["logsservice",{"_index":782,"title":{"injectables/LogsService.html":{}},"body":{"injectables/CustomLogger.html":{},"modules/LoggerModule.html":{},"injectables/LogsService.html":{},"coverage.html":{},"overview.html":{}}}],["mail",{"_index":1032,"title":{},"body":{"injectables/EmailService.html":{}}}],["mail.options",{"_index":1030,"title":{},"body":{"injectables/EmailService.html":{}}}],["manager",{"_index":1552,"title":{},"body":{"modules/PostsModule.html":{},"injectables/PostsService.html":{},"dependencies.html":{}}}],["manytomany",{"_index":504,"title":{},"body":{"classes/Category.html":{},"classes/Post.html":{}}}],["manytomany(undefined",{"_index":502,"title":{},"body":{"classes/Category.html":{},"classes/Post.html":{}}}],["manytoone",{"_index":618,"title":{},"body":{"classes/Comment.html":{},"classes/Message.html":{},"classes/Post.html":{},"classes/Product.html":{}}}],["manytoone(undefined",{"_index":613,"title":{},"body":{"classes/Comment.html":{},"classes/Message.html":{},"classes/Product.html":{}}}],["map",{"_index":1054,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["map(users.map(user",{"_index":1538,"title":{},"body":{"injectables/PostsLoaders.html":{}}}],["markemailasconfirmed",{"_index":2292,"title":{},"body":{"injectables/UsersService.html":{}}}],["markemailasconfirmed(email",{"_index":2318,"title":{},"body":{"injectables/UsersService.html":{}}}],["markphonenumberasconfirmed",{"_index":2293,"title":{},"body":{"injectables/UsersService.html":{}}}],["markphonenumberasconfirmed(userid",{"_index":2320,"title":{},"body":{"injectables/UsersService.html":{}}}],["match",{"_index":1657,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["matches",{"_index":1826,"title":{},"body":{"classes/RegisterDto.html":{}}}],["matches(/^\\+[1",{"_index":1827,"title":{},"body":{"classes/RegisterDto.html":{}}}],["matching",{"_index":25,"title":{},"body":{"classes/AddCreditCardDto.html":{},"classes/Address.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"interfaces/BookProperties.html":{},"interfaces/CarProperties.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"classes/Category.html":{},"classes/CategoryNotFoundException.html":{},"controllers/ChargeController.html":{},"modules/ChargeModule.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/CheckVerificationCodeDto.html":{},"classes/Comment.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostInput.html":{},"classes/CreateProductCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateSubscriberDto.html":{},"classes/CreateUserDto.html":{},"controllers/CreditCardsController.html":{},"modules/CreditCardsModule.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"modules/DatabaseModule.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullInterceptor.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/FindOneParams.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthenticationModule.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/GraphqlJwtAuthGuard.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/Log.html":{},"classes/LogInDto.html":{},"modules/LoggerModule.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"classes/Message.html":{},"classes/ObjectWithIdDto.html":{},"controllers/OptimizeController.html":{},"modules/OptimizeModule.html":{},"classes/PaginationParams.html":{},"classes/Post.html":{},"classes/Post-1.html":{},"interfaces/PostCountResult.html":{},"classes/PostNotFoundException.html":{},"interfaces/PostSearchBody.html":{},"interfaces/PostSearchResult.html":{},"controllers/PostsController.html":{},"injectables/PostsLoaders.html":{},"modules/PostsModule.html":{},"classes/PostsResolver.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"classes/Product.html":{},"controllers/ProductCategoriesController.html":{},"modules/ProductCategoriesModule.html":{},"injectables/ProductCategoriesService.html":{},"classes/ProductCategory.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"modules/PubSubModule.html":{},"classes/PublicFile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithRawBody.html":{},"interfaces/RequestWithUser.html":{},"modules/SearchModule.html":{},"classes/SetDefaultCreditCardDto.html":{},"controllers/SmsController.html":{},"modules/SmsModule.html":{},"injectables/SmsService.html":{},"classes/StripeEvent.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"modules/StripeWebhookModule.html":{},"injectables/StripeWebhookService.html":{},"interfaces/Subscriber.html":{},"controllers/SubscribersController.html":{},"modules/SubscribersModule.html":{},"interfaces/SubscribersService.html":{},"controllers/SubscriptionsController.html":{},"modules/SubscriptionsModule.html":{},"injectables/SubscriptionsService.html":{},"classes/Timestamp.html":{},"interfaces/TokenPayload.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/VerificationTokenPayload.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["max",{"_index":386,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["memory",{"_index":1222,"title":{},"body":{"controllers/HealthController.html":{}}}],["memoryhealthindicator",{"_index":1213,"title":{},"body":{"controllers/HealthController.html":{}}}],["message",{"_index":568,"title":{"classes/Message.html":{}},"body":{"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/CreateLogDto.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"classes/Log.html":{},"injectables/LogsMiddleware.html":{},"classes/Message.html":{},"injectables/SmsService.html":{},"coverage.html":{}}}],["message.entity",{"_index":579,"title":{},"body":{"modules/ChatModule.html":{},"injectables/ChatService.html":{}}}],["messagebody",{"_index":560,"title":{},"body":{"classes/ChatGateway.html":{}}}],["messages",{"_index":571,"title":{},"body":{"classes/ChatGateway.html":{}}}],["messagesrepository",{"_index":586,"title":{},"body":{"injectables/ChatService.html":{}}}],["metadata",{"_index":2495,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":1335,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["methods",{"_index":84,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/ChargeController.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"controllers/CommentsController.html":{},"classes/CreateCommentHandler.html":{},"controllers/CreditCardsController.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailConfirmationService.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/FilesService.html":{},"classes/GetCommentsHandler.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/GraphqlJwtAuthGuard.html":{},"controllers/HealthController.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"controllers/OptimizeController.html":{},"controllers/PostsController.html":{},"classes/PostsResolver.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"controllers/ProductCategoriesController.html":{},"injectables/ProductCategoriesService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"controllers/SmsController.html":{},"injectables/SmsService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/StripeWebhookService.html":{},"controllers/SubscribersController.html":{},"interfaces/SubscribersService.html":{},"controllers/SubscriptionsController.html":{},"injectables/SubscriptionsService.html":{},"classes/Timestamp.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["middlewareconsumer",{"_index":87,"title":{},"body":{"modules/AppModule.html":{}}}],["milliseconds",{"_index":2126,"title":{},"body":{"classes/Timestamp.html":{}}}],["min",{"_index":1421,"title":{},"body":{"classes/PaginationParams.html":{}}}],["min(0",{"_index":1423,"title":{},"body":{"classes/PaginationParams.html":{}}}],["min(1",{"_index":1422,"title":{},"body":{"classes/PaginationParams.html":{}}}],["minlength",{"_index":1318,"title":{},"body":{"classes/LogInDto.html":{},"classes/RegisterDto.html":{}}}],["minlength(7",{"_index":1319,"title":{},"body":{"classes/LogInDto.html":{},"classes/RegisterDto.html":{}}}],["miscellaneous",{"_index":2504,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":2558,"title":{},"body":{"index.html":{}}}],["mockedconfigservice",{"_index":2392,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mockedjwtservice",{"_index":2394,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mockeduser",{"_index":2378,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mode",{"_index":2549,"title":{},"body":{"index.html":{}}}],["models/post.model",{"_index":1585,"title":{},"body":{"classes/PostsResolver.html":{}}}],["module",{"_index":50,"title":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/CategoriesModule.html":{},"modules/ChargeModule.html":{},"modules/ChatModule.html":{},"modules/CommentsModule.html":{},"modules/CreditCardsModule.html":{},"modules/DatabaseModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"modules/FilesModule.html":{},"modules/GoogleAuthenticationModule.html":{},"modules/HealthModule.html":{},"modules/LoggerModule.html":{},"modules/OptimizeModule.html":{},"modules/PostsModule.html":{},"modules/ProductCategoriesModule.html":{},"modules/ProductsModule.html":{},"modules/PubSubModule.html":{},"modules/SearchModule.html":{},"modules/SmsModule.html":{},"modules/StripeModule.html":{},"modules/StripeWebhookModule.html":{},"modules/SubscribersModule.html":{},"modules/SubscriptionsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/CategoriesModule.html":{},"modules/ChargeModule.html":{},"modules/ChatModule.html":{},"modules/CommentsModule.html":{},"modules/CreditCardsModule.html":{},"modules/DatabaseModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"modules/FilesModule.html":{},"modules/GoogleAuthenticationModule.html":{},"modules/HealthModule.html":{},"modules/LoggerModule.html":{},"modules/OptimizeModule.html":{},"modules/PostsModule.html":{},"modules/ProductCategoriesModule.html":{},"modules/ProductsModule.html":{},"modules/PubSubModule.html":{},"modules/SearchModule.html":{},"modules/SmsModule.html":{},"modules/StripeModule.html":{},"modules/StripeWebhookModule.html":{},"modules/SubscribersModule.html":{},"modules/SubscriptionsModule.html":{},"modules/UsersModule.html":{}}}],["modules",{"_index":52,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/CategoriesModule.html":{},"modules/ChargeModule.html":{},"modules/ChatModule.html":{},"modules/CommentsModule.html":{},"modules/CreditCardsModule.html":{},"modules/DatabaseModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"modules/FilesModule.html":{},"modules/GoogleAuthenticationModule.html":{},"modules/HealthModule.html":{},"modules/LoggerModule.html":{},"modules/OptimizeModule.html":{},"modules/PostsModule.html":{},"modules/ProductCategoriesModule.html":{},"modules/ProductsModule.html":{},"modules/PubSubModule.html":{},"modules/SearchModule.html":{},"modules/SmsModule.html":{},"modules/StripeModule.html":{},"modules/StripeWebhookModule.html":{},"modules/SubscribersModule.html":{},"modules/SubscriptionsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["monthly_subscription_price_id",{"_index":190,"title":{},"body":{"modules/AppModule.html":{}}}],["monthlysubscriptionstatus",{"_index":2221,"title":{},"body":{"classes/User.html":{},"injectables/UsersService.html":{}}}],["more",{"_index":1220,"title":{},"body":{"controllers/HealthController.html":{},"index.html":{}}}],["morethan",{"_index":1690,"title":{},"body":{"injectables/PostsService.html":{}}}],["morethan(startid",{"_index":1700,"title":{},"body":{"injectables/PostsService.html":{}}}],["multi_match",{"_index":1639,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["mutation",{"_index":1582,"title":{},"body":{"classes/PostsResolver.html":{}}}],["mutation(undefined)@useguards(graphqljwtauthguard",{"_index":1573,"title":{},"body":{"classes/PostsResolver.html":{}}}],["myśliwiec",{"_index":2574,"title":{},"body":{"index.html":{}}}],["name",{"_index":90,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/Category.html":{},"classes/CategoryNotFoundException.html":{},"controllers/ChargeController.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"controllers/CommentsController.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateProductCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateSubscriberDto.html":{},"classes/CreateUserDto.html":{},"controllers/CreditCardsController.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailConfirmationService.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/FilesService.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/GraphqlJwtAuthGuard.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"controllers/OptimizeController.html":{},"modules/OptimizeModule.html":{},"classes/PostNotFoundException.html":{},"controllers/PostsController.html":{},"injectables/PostsLoaders.html":{},"classes/PostsResolver.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"classes/Product.html":{},"controllers/ProductCategoriesController.html":{},"injectables/ProductCategoriesService.html":{},"classes/ProductCategory.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"classes/RegisterDto.html":{},"controllers/SmsController.html":{},"injectables/SmsService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/StripeWebhookService.html":{},"interfaces/Subscriber.html":{},"controllers/SubscribersController.html":{},"interfaces/SubscribersService.html":{},"controllers/SubscriptionsController.html":{},"injectables/SubscriptionsService.html":{},"classes/Timestamp.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateCategoryDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["nest",{"_index":2539,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":2578,"title":{},"body":{"index.html":{}}}],["nestinterceptor",{"_index":1052,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["nestjs/bull",{"_index":123,"title":{},"body":{"modules/AppModule.html":{},"controllers/OptimizeController.html":{},"modules/OptimizeModule.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":94,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"classes/CategoryNotFoundException.html":{},"controllers/ChargeController.html":{},"modules/ChargeModule.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"controllers/CreditCardsController.html":{},"modules/CreditCardsModule.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"modules/DatabaseModule.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullInterceptor.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthenticationModule.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/GraphqlJwtAuthGuard.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"modules/LoggerModule.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"controllers/OptimizeController.html":{},"modules/OptimizeModule.html":{},"classes/PostNotFoundException.html":{},"controllers/PostsController.html":{},"injectables/PostsLoaders.html":{},"modules/PostsModule.html":{},"classes/PostsResolver.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"controllers/ProductCategoriesController.html":{},"modules/ProductCategoriesModule.html":{},"injectables/ProductCategoriesService.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"modules/PubSubModule.html":{},"modules/SearchModule.html":{},"controllers/SmsController.html":{},"modules/SmsModule.html":{},"injectables/SmsService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"modules/StripeWebhookModule.html":{},"injectables/StripeWebhookService.html":{},"controllers/SubscribersController.html":{},"modules/SubscribersModule.html":{},"controllers/SubscriptionsController.html":{},"modules/SubscriptionsModule.html":{},"injectables/SubscriptionsService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/common/services/console",{"_index":803,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["nestjs/config",{"_index":98,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/CustomLogger.html":{},"modules/DatabaseModule.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"modules/GoogleAuthenticationModule.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"modules/LoggerModule.html":{},"modules/PostsModule.html":{},"modules/PubSubModule.html":{},"modules/SearchModule.html":{},"modules/SmsModule.html":{},"injectables/SmsService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/SubscribersModule.html":{},"modules/SubscriptionsModule.html":{},"injectables/SubscriptionsService.html":{},"injectables/TwoFactorAuthenticationService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":2416,"title":{},"body":{"dependencies.html":{}}}],["nestjs/cqrs",{"_index":636,"title":{},"body":{"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"classes/CreateCommentHandler.html":{},"classes/GetCommentsHandler.html":{},"dependencies.html":{}}}],["nestjs/elasticsearch",{"_index":886,"title":{},"body":{"injectables/ElasticsearchHealthIndicator.html":{},"injectables/PostsSearchService.html":{},"modules/SearchModule.html":{},"dependencies.html":{}}}],["nestjs/graphql",{"_index":115,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostInput.html":{},"injectables/GraphqlJwtAuthGuard.html":{},"classes/Post-1.html":{},"classes/PostsResolver.html":{},"classes/Timestamp.html":{},"classes/User-1.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":311,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"dependencies.html":{}}}],["nestjs/microservices",{"_index":2049,"title":{},"body":{"controllers/SubscribersController.html":{},"modules/SubscribersModule.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":308,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/GraphqlJwtAuthGuard.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1383,"title":{},"body":{"controllers/OptimizeController.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/schedule",{"_index":111,"title":{},"body":{"modules/AppModule.html":{},"injectables/EmailSchedulingService.html":{},"dependencies.html":{}}}],["nestjs/terminus",{"_index":885,"title":{},"body":{"injectables/ElasticsearchHealthIndicator.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":467,"title":{},"body":{"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"modules/CommentsModule.html":{},"classes/CreateCommentHandler.html":{},"modules/DatabaseModule.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/GetCommentsHandler.html":{},"modules/LoggerModule.html":{},"injectables/LogsService.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/ProductCategoriesModule.html":{},"injectables/ProductCategoriesService.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"modules/StripeWebhookModule.html":{},"injectables/StripeWebhookService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/websockets",{"_index":563,"title":{},"body":{"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"dependencies.html":{}}}],["nestlogger",{"_index":848,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["nestlogger('sql",{"_index":830,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["nestmiddleware",{"_index":1333,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["new",{"_index":369,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/CategoriesService.html":{},"injectables/ChatService.html":{},"controllers/CommentsController.html":{},"classes/DatabaseLogger.html":{},"modules/DatabaseModule.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailConfirmationService.html":{},"injectables/EmailSchedulingService.html":{},"injectables/FilesService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/LogsMiddleware.html":{},"injectables/PostsLoaders.html":{},"injectables/PostsService.html":{},"modules/PubSubModule.html":{},"controllers/SmsController.html":{},"injectables/SmsService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/StripeWebhookService.html":{},"injectables/SubscriptionsService.html":{},"classes/Timestamp.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["newbody",{"_index":1658,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["newcategory",{"_index":491,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["newfile",{"_index":1097,"title":{},"body":{"injectables/FilesService.html":{}}}],["newlog",{"_index":1351,"title":{},"body":{"injectables/LogsService.html":{}}}],["newmessage",{"_index":598,"title":{},"body":{"injectables/ChatService.html":{}}}],["newpost",{"_index":696,"title":{},"body":{"classes/CreateCommentHandler.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{}}}],["newproduct",{"_index":1807,"title":{},"body":{"injectables/ProductsService.html":{}}}],["newproductcategory",{"_index":1773,"title":{},"body":{"injectables/ProductCategoriesService.html":{}}}],["newuser",{"_index":2342,"title":{},"body":{"injectables/UsersService.html":{}}}],["next",{"_index":1048,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{},"injectables/LogsMiddleware.html":{}}}],["nextfunction",{"_index":1329,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["node",{"_index":1835,"title":{},"body":{"modules/SearchModule.html":{}}}],["node.js",{"_index":2532,"title":{},"body":{"index.html":{}}}],["nodemailer",{"_index":1034,"title":{},"body":{"injectables/EmailService.html":{},"dependencies.html":{}}}],["nodemailer/lib/mailer",{"_index":1035,"title":{},"body":{"injectables/EmailService.html":{}}}],["nodemailertransport",{"_index":1025,"title":{},"body":{"injectables/EmailService.html":{}}}],["notfoundexception",{"_index":509,"title":{},"body":{"classes/CategoryNotFoundException.html":{},"classes/PostNotFoundException.html":{},"injectables/StripeService.html":{},"injectables/SubscriptionsService.html":{}}}],["notfoundexception('customer",{"_index":2116,"title":{},"body":{"injectables/SubscriptionsService.html":{}}}],["npm",{"_index":2543,"title":{},"body":{"index.html":{}}}],["null",{"_index":2135,"title":{},"body":{"classes/Timestamp.html":{},"injectables/UsersService.html":{}}}],["nullable",{"_index":728,"title":{},"body":{"classes/CreatePostInput.html":{},"classes/Post.html":{},"classes/Post-1.html":{},"classes/User.html":{}}}],["number",{"_index":38,"title":{},"body":{"classes/Address.html":{},"injectables/AuthenticationService.html":{},"interfaces/CarProperties.html":{},"injectables/CategoriesService.html":{},"classes/Category.html":{},"classes/CategoryNotFoundException.html":{},"classes/Comment.html":{},"classes/CreateChargeDto.html":{},"classes/DatabaseLogger.html":{},"injectables/EmailConfirmationService.html":{},"injectables/FilesService.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsQuery.html":{},"classes/Log.html":{},"classes/Message.html":{},"classes/ObjectWithIdDto.html":{},"classes/PaginationParams.html":{},"classes/Post.html":{},"classes/Post-1.html":{},"interfaces/PostCountResult.html":{},"classes/PostNotFoundException.html":{},"interfaces/PostSearchBody.html":{},"interfaces/PostSearchResult.html":{},"injectables/PostsLoaders.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"classes/Product.html":{},"classes/ProductCategory.html":{},"classes/PublicFile.html":{},"controllers/SmsController.html":{},"injectables/SmsService.html":{},"injectables/StripeService.html":{},"interfaces/Subscriber.html":{},"classes/Timestamp.html":{},"interfaces/TokenPayload.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"injectables/UsersService.html":{}}}],["number(configservice.get('redis_port",{"_index":143,"title":{},"body":{"modules/AppModule.html":{}}}],["number(value",{"_index":2144,"title":{},"body":{"classes/Timestamp.html":{}}}],["number(valuenode.value",{"_index":2149,"title":{},"body":{"classes/Timestamp.html":{}}}],["numberofcylinders",{"_index":416,"title":{},"body":{"interfaces/CarProperties.html":{}}}],["oauth20",{"_index":2449,"title":{},"body":{"dependencies.html":{}}}],["oauthclient",{"_index":1148,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["object",{"_index":970,"title":{},"body":{"injectables/EmailConfirmationService.html":{},"miscellaneous/variables.html":{}}}],["object.entries(newbody).reduce((result",{"_index":1660,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["objecttype",{"_index":1466,"title":{},"body":{"classes/Post-1.html":{},"classes/User-1.html":{}}}],["objectwithiddto",{"_index":676,"title":{"classes/ObjectWithIdDto.html":{}},"body":{"classes/CreateCommentDto.html":{},"classes/CreateProductDto.html":{},"classes/ObjectWithIdDto.html":{},"coverage.html":{}}}],["observable",{"_index":1051,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["off_session",{"_index":1966,"title":{},"body":{"injectables/StripeService.html":{}}}],["offset",{"_index":1414,"title":{},"body":{"classes/PaginationParams.html":{},"controllers/PostsController.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{}}}],["on')@httpcode(200)@useguards(jwtauthenticationguard",{"_index":2167,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["onetomany",{"_index":1447,"title":{},"body":{"classes/Post.html":{},"classes/ProductCategory.html":{},"classes/User.html":{}}}],["onetomany(undefined",{"_index":1435,"title":{},"body":{"classes/Post.html":{},"classes/ProductCategory.html":{},"classes/User.html":{}}}],["onetoone",{"_index":46,"title":{},"body":{"classes/Address.html":{},"classes/User.html":{}}}],["onetoone(undefined",{"_index":42,"title":{},"body":{"classes/Address.html":{},"classes/User.html":{}}}],["ongatewayconnection",{"_index":540,"title":{},"body":{"classes/ChatGateway.html":{}}}],["onmoduleinit",{"_index":2042,"title":{},"body":{"controllers/SubscribersController.html":{}}}],["open",{"_index":2560,"title":{},"body":{"index.html":{}}}],["optimize",{"_index":1364,"title":{},"body":{"controllers/OptimizeController.html":{},"modules/OptimizeModule.html":{}}}],["optimize.controller",{"_index":1405,"title":{},"body":{"modules/OptimizeModule.html":{}}}],["optimize/optimize.module",{"_index":121,"title":{},"body":{"modules/AppModule.html":{}}}],["optimizecontroller",{"_index":1362,"title":{"controllers/OptimizeController.html":{}},"body":{"controllers/OptimizeController.html":{},"modules/OptimizeModule.html":{},"coverage.html":{}}}],["optimizemodule",{"_index":68,"title":{"modules/OptimizeModule.html":{}},"body":{"modules/AppModule.html":{},"modules/OptimizeModule.html":{},"modules.html":{},"overview.html":{}}}],["optional",{"_index":33,"title":{},"body":{"classes/Address.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CategoryNotFoundException.html":{},"controllers/ChargeController.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"controllers/CommentsController.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentHandler.html":{},"classes/CreatePostInput.html":{},"controllers/CreditCardsController.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailConfirmationService.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/FilesService.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/GraphqlJwtAuthGuard.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"controllers/OptimizeController.html":{},"classes/PaginationParams.html":{},"classes/Post.html":{},"classes/Post-1.html":{},"classes/PostNotFoundException.html":{},"controllers/PostsController.html":{},"injectables/PostsLoaders.html":{},"classes/PostsResolver.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"controllers/ProductCategoriesController.html":{},"injectables/ProductCategoriesService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"controllers/SmsController.html":{},"injectables/SmsService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/StripeWebhookService.html":{},"controllers/SubscribersController.html":{},"interfaces/SubscribersService.html":{},"controllers/SubscriptionsController.html":{},"injectables/SubscriptionsService.html":{},"classes/Timestamp.html":{},"interfaces/TokenPayload.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":788,"title":{},"body":{"injectables/CustomLogger.html":{},"injectables/EmailService.html":{},"injectables/PostsService.html":{},"modules/SubscribersModule.html":{}}}],["order",{"_index":1650,"title":{},"body":{"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{}}}],["originalurl",{"_index":1336,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["otpauthurl",{"_index":2174,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{}}}],["otplib",{"_index":2194,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{},"dependencies.html":{}}}],["out",{"_index":81,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"modules/CategoriesModule.html":{},"modules/ChargeModule.html":{},"modules/ChatModule.html":{},"modules/CreditCardsModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"modules/FilesModule.html":{},"modules/GoogleAuthenticationModule.html":{},"modules/HealthModule.html":{},"modules/LoggerModule.html":{},"modules/PostsModule.html":{},"modules/ProductCategoriesModule.html":{},"modules/ProductsModule.html":{},"modules/SmsModule.html":{},"modules/StripeModule.html":{},"modules/StripeWebhookModule.html":{},"modules/SubscriptionsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["out')@httpcode(200",{"_index":226,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["overview",{"_index":2584,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":2066,"title":{"dependencies.html":{}},"body":{"modules/SubscribersModule.html":{}}}],["paginationparams",{"_index":1411,"title":{"classes/PaginationParams.html":{}},"body":{"classes/PaginationParams.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["paragraphs",{"_index":710,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostInput.html":{},"classes/Post.html":{},"classes/Post-1.html":{},"interfaces/PostSearchBody.html":{},"injectables/PostsSearchService.html":{},"classes/UpdatePostDto.html":{}}}],["param",{"_index":443,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/OptimizeController.html":{},"controllers/PostsController.html":{}}}],["param('id",{"_index":1394,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["parameters",{"_index":89,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CategoryNotFoundException.html":{},"controllers/ChargeController.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"controllers/CommentsController.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentHandler.html":{},"controllers/CreditCardsController.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailConfirmationService.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/FilesService.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/GraphqlJwtAuthGuard.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"controllers/OptimizeController.html":{},"classes/PostNotFoundException.html":{},"controllers/PostsController.html":{},"injectables/PostsLoaders.html":{},"classes/PostsResolver.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"controllers/ProductCategoriesController.html":{},"injectables/ProductCategoriesService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"controllers/SmsController.html":{},"injectables/SmsService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/StripeWebhookService.html":{},"controllers/SubscribersController.html":{},"interfaces/SubscribersService.html":{},"controllers/SubscriptionsController.html":{},"injectables/SubscriptionsService.html":{},"classes/Timestamp.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":2077,"title":{},"body":{"interfaces/SubscribersService.html":{}}}],["parse",{"_index":594,"title":{},"body":{"injectables/ChatService.html":{},"classes/PostsResolver.html":{},"dependencies.html":{}}}],["parse(cookie",{"_index":604,"title":{},"body":{"injectables/ChatService.html":{}}}],["parsedinfo",{"_index":1598,"title":{},"body":{"classes/PostsResolver.html":{}}}],["parseliteral",{"_index":2121,"title":{},"body":{"classes/Timestamp.html":{}}}],["parseliteral(valuenode",{"_index":2131,"title":{},"body":{"classes/Timestamp.html":{}}}],["parser",{"_index":2434,"title":{},"body":{"dependencies.html":{}}}],["parseresolveinfo",{"_index":1589,"title":{},"body":{"classes/PostsResolver.html":{}}}],["parseresolveinfo(info",{"_index":1599,"title":{},"body":{"classes/PostsResolver.html":{}}}],["parsevalue",{"_index":2122,"title":{},"body":{"classes/Timestamp.html":{}}}],["parsevalue(value",{"_index":2134,"title":{},"body":{"classes/Timestamp.html":{}}}],["pass",{"_index":1041,"title":{},"body":{"injectables/EmailService.html":{}}}],["passport",{"_index":1270,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":307,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["passportstrategy",{"_index":1271,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":1284,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passreqtocallback",{"_index":1277,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["password",{"_index":362,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"classes/RegisterDto.html":{},"modules/SearchModule.html":{},"classes/User.html":{},"miscellaneous/variables.html":{}}}],["patch",{"_index":444,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/PostsController.html":{}}}],["patch(':id",{"_index":440,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/PostsController.html":{}}}],["path",{"_index":117,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthenticationService.html":{},"controllers/HealthController.html":{},"modules/OptimizeModule.html":{},"modules/SubscribersModule.html":{}}}],["payload",{"_index":378,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/EmailConfirmationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/StripeService.html":{}}}],["payload.email",{"_index":971,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["payload.issecondfactorauthenticated",{"_index":1294,"title":{},"body":{"injectables/JwtTwoFactorStrategy.html":{}}}],["payload.userid",{"_index":402,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{}}}],["payment_method",{"_index":1963,"title":{},"body":{"injectables/StripeService.html":{}}}],["paymentmethodid",{"_index":10,"title":{},"body":{"classes/AddCreditCardDto.html":{},"classes/CreateChargeDto.html":{},"classes/SetDefaultCreditCardDto.html":{},"injectables/StripeService.html":{}}}],["pg",{"_index":2491,"title":{},"body":{"dependencies.html":{}}}],["phonenumber",{"_index":1819,"title":{},"body":{"classes/RegisterDto.html":{},"injectables/SmsService.html":{},"classes/User.html":{},"miscellaneous/variables.html":{}}}],["pipe(map(value",{"_index":1058,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["pipeqrcodestream",{"_index":2185,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["pipeqrcodestream(stream",{"_index":2191,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["plaintextpassword",{"_index":332,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["playground",{"_index":146,"title":{},"body":{"modules/AppModule.html":{}}}],["please",{"_index":2569,"title":{},"body":{"index.html":{}}}],["pngquant",{"_index":2485,"title":{},"body":{"dependencies.html":{}}}],["port",{"_index":142,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/PostsModule.html":{},"modules/PubSubModule.html":{}}}],["post",{"_index":239,"title":{"classes/Post.html":{},"classes/Post-1.html":{}},"body":{"controllers/AuthenticationController.html":{},"controllers/CategoriesController.html":{},"classes/Category.html":{},"controllers/ChargeController.html":{},"classes/Comment.html":{},"controllers/CommentsController.html":{},"classes/CreateCommentDto.html":{},"controllers/CreditCardsController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/EmailSchedulingController.html":{},"classes/GetCommentsHandler.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/OptimizeController.html":{},"classes/Post.html":{},"classes/Post-1.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"classes/PostsResolver.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"controllers/ProductCategoriesController.html":{},"controllers/ProductsController.html":{},"controllers/SmsController.html":{},"controllers/StripeWebhookController.html":{},"controllers/SubscribersController.html":{},"controllers/SubscriptionsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["post('authenticate",{"_index":2181,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["post('authenticate')@httpcode(200)@useguards(jwtauthenticationguard",{"_index":2160,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["post('avatar",{"_index":2269,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('avatar')@useguards(jwtauthenticationguard)@useinterceptors(undefined",{"_index":2260,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('check",{"_index":1848,"title":{},"body":{"controllers/SmsController.html":{}}}],["post('confirm",{"_index":896,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["post('default",{"_index":769,"title":{},"body":{"controllers/CreditCardsController.html":{}}}],["post('default')@httpcode(200)@useguards(jwtauthenticationguard",{"_index":760,"title":{},"body":{"controllers/CreditCardsController.html":{}}}],["post('generate",{"_index":2172,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["post('generate')@useguards(jwtauthenticationguard",{"_index":2163,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["post('image",{"_index":1387,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["post('image')@useinterceptors(undefined",{"_index":1372,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["post('initiate",{"_index":1853,"title":{},"body":{"controllers/SmsController.html":{}}}],["post('log",{"_index":271,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["post('monthly",{"_index":2092,"title":{},"body":{"controllers/SubscriptionsController.html":{}}}],["post('monthly')@useguards(jwtauthenticationguard",{"_index":2084,"title":{},"body":{"controllers/SubscriptionsController.html":{}}}],["post('register",{"_index":233,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["post('resend",{"_index":900,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["post('schedule",{"_index":1001,"title":{},"body":{"controllers/EmailSchedulingController.html":{}}}],["post('schedule')@useguards(jwtauthenticationguard",{"_index":995,"title":{},"body":{"controllers/EmailSchedulingController.html":{}}}],["post('turn",{"_index":2166,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["post()@useguards(jwtauthenticationguard",{"_index":427,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/ChargeController.html":{},"controllers/CommentsController.html":{},"controllers/CreditCardsController.html":{},"controllers/ProductCategoriesController.html":{},"controllers/ProductsController.html":{},"controllers/SubscribersController.html":{}}}],["post()@useguards(jwttwofactorguard",{"_index":1490,"title":{},"body":{"controllers/PostsController.html":{}}}],["post.author",{"_index":1453,"title":{},"body":{"classes/Post.html":{},"classes/User.html":{}}}],["post.author.id",{"_index":1637,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["post.categories",{"_index":506,"title":{},"body":{"classes/Category.html":{}}}],["post.comments",{"_index":619,"title":{},"body":{"classes/Comment.html":{}}}],["post.entity",{"_index":1556,"title":{},"body":{"modules/PostsModule.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{}}}],["post.id",{"_index":1634,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["post.paragraphs",{"_index":1636,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["post.title",{"_index":1635,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["post_added_event",{"_index":1596,"title":{},"body":{"classes/PostsResolver.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["postadded",{"_index":1567,"title":{},"body":{"classes/PostsResolver.html":{},"miscellaneous/variables.html":{}}}],["postcountresult",{"_index":1468,"title":{"interfaces/PostCountResult.html":{}},"body":{"interfaces/PostCountResult.html":{},"injectables/PostsSearchService.html":{},"coverage.html":{}}}],["postgres",{"_index":860,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["postgres_db",{"_index":163,"title":{},"body":{"modules/AppModule.html":{}}}],["postgres_host",{"_index":157,"title":{},"body":{"modules/AppModule.html":{}}}],["postgres_password",{"_index":162,"title":{},"body":{"modules/AppModule.html":{}}}],["postgres_port",{"_index":159,"title":{},"body":{"modules/AppModule.html":{}}}],["postgres_user",{"_index":161,"title":{},"body":{"modules/AppModule.html":{}}}],["postgreserrorcode",{"_index":353,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/StripeWebhookService.html":{},"miscellaneous/enumerations.html":{}}}],["postgreserrorcode.uniqueviolation",{"_index":367,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/StripeWebhookService.html":{}}}],["postid",{"_index":512,"title":{},"body":{"classes/CategoryNotFoundException.html":{},"controllers/CommentsController.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsQuery.html":{},"classes/PostNotFoundException.html":{},"injectables/PostsSearchService.html":{}}}],["postnotfoundexception",{"_index":1471,"title":{"classes/PostNotFoundException.html":{}},"body":{"classes/PostNotFoundException.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["postnotfoundexception(id",{"_index":1711,"title":{},"body":{"injectables/PostsService.html":{}}}],["posts",{"_index":488,"title":{},"body":{"injectables/CategoriesService.html":{},"classes/Category.html":{},"controllers/PostsController.html":{},"classes/PostsResolver.html":{},"injectables/PostsSearchService.html":{},"classes/User.html":{}}}],["posts(info",{"_index":1577,"title":{},"body":{"classes/PostsResolver.html":{}}}],["posts.controller",{"_index":1555,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts.items",{"_index":1605,"title":{},"body":{"classes/PostsResolver.html":{}}}],["posts.resolver",{"_index":1559,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts.service",{"_index":1505,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"classes/PostsResolver.html":{}}}],["posts/post.entity",{"_index":505,"title":{},"body":{"classes/Category.html":{},"classes/Comment.html":{},"classes/User.html":{}}}],["posts/posts.module",{"_index":95,"title":{},"body":{"modules/AppModule.html":{}}}],["postscachekey.constant",{"_index":1511,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["postscontroller",{"_index":1482,"title":{"controllers/PostsController.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postsearchbody",{"_index":1475,"title":{"interfaces/PostSearchBody.html":{}},"body":{"interfaces/PostSearchBody.html":{},"interfaces/PostSearchResult.html":{},"injectables/PostsSearchService.html":{},"coverage.html":{}}}],["postsearchbody.interface",{"_index":1480,"title":{},"body":{"interfaces/PostSearchResult.html":{}}}],["postsearchresult",{"_index":1477,"title":{"interfaces/PostSearchResult.html":{}},"body":{"interfaces/PostSearchResult.html":{},"injectables/PostsSearchService.html":{},"coverage.html":{}}}],["postsloaders",{"_index":1529,"title":{"injectables/PostsLoaders.html":{}},"body":{"injectables/PostsLoaders.html":{},"modules/PostsModule.html":{},"coverage.html":{},"overview.html":{}}}],["postsmodule",{"_index":69,"title":{"modules/PostsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsrepository",{"_index":1671,"title":{},"body":{"injectables/PostsService.html":{}}}],["postsresolver",{"_index":1558,"title":{"classes/PostsResolver.html":{}},"body":{"modules/PostsModule.html":{},"classes/PostsResolver.html":{},"coverage.html":{}}}],["postssearch.service",{"_index":1557,"title":{},"body":{"modules/PostsModule.html":{},"injectables/PostsService.html":{}}}],["postssearchservice",{"_index":1548,"title":{"injectables/PostsSearchService.html":{}},"body":{"modules/PostsModule.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["postsservice",{"_index":1504,"title":{"injectables/PostsService.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["prefix",{"_index":208,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/CategoriesController.html":{},"controllers/ChargeController.html":{},"controllers/CommentsController.html":{},"controllers/CreditCardsController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/EmailSchedulingController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/HealthController.html":{},"controllers/OptimizeController.html":{},"controllers/PostsController.html":{},"controllers/ProductCategoriesController.html":{},"controllers/ProductsController.html":{},"controllers/SmsController.html":{},"controllers/StripeWebhookController.html":{},"controllers/SubscribersController.html":{},"controllers/SubscriptionsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{}}}],["price",{"_index":1977,"title":{},"body":{"injectables/StripeService.html":{}}}],["priceid",{"_index":1941,"title":{},"body":{"injectables/StripeService.html":{},"injectables/SubscriptionsService.html":{}}}],["primarycolumn",{"_index":1912,"title":{},"body":{"classes/StripeEvent.html":{}}}],["primarygeneratedcolumn",{"_index":39,"title":{},"body":{"classes/Address.html":{},"classes/Category.html":{},"classes/Comment.html":{},"classes/Log.html":{},"classes/Message.html":{},"classes/Post.html":{},"classes/Product.html":{},"classes/ProductCategory.html":{},"classes/PublicFile.html":{},"classes/User.html":{}}}],["private",{"_index":261,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/ChargeController.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"controllers/CommentsController.html":{},"classes/CreateCommentHandler.html":{},"controllers/CreditCardsController.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"controllers/EmailConfirmationController.html":{},"injectables/EmailConfirmationService.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/FilesService.html":{},"classes/GetCommentsHandler.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/HealthController.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"controllers/OptimizeController.html":{},"controllers/PostsController.html":{},"injectables/PostsLoaders.html":{},"classes/PostsResolver.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"controllers/ProductCategoriesController.html":{},"injectables/ProductCategoriesService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"controllers/SmsController.html":{},"injectables/SmsService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/StripeWebhookService.html":{},"controllers/SubscribersController.html":{},"controllers/SubscriptionsController.html":{},"injectables/SubscriptionsService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["process",{"_index":1218,"title":{},"body":{"controllers/HealthController.html":{}}}],["processed",{"_index":2029,"title":{},"body":{"injectables/StripeWebhookService.html":{}}}],["processimage",{"_index":1366,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["processimage(@uploadedfiles",{"_index":1389,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["processimage(files",{"_index":1370,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["processors",{"_index":1408,"title":{},"body":{"modules/OptimizeModule.html":{}}}],["processsubscriptionupdate",{"_index":2016,"title":{},"body":{"injectables/StripeWebhookService.html":{}}}],["processsubscriptionupdate(event",{"_index":2022,"title":{},"body":{"injectables/StripeWebhookService.html":{}}}],["product",{"_index":1729,"title":{"classes/Product.html":{}},"body":{"classes/Product.html":{},"controllers/ProductCategoriesController.html":{},"classes/ProductCategory.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"coverage.html":{}}}],["product.category",{"_index":1782,"title":{},"body":{"classes/ProductCategory.html":{}}}],["product.entity",{"_index":1796,"title":{},"body":{"modules/ProductsModule.html":{},"injectables/ProductsService.html":{}}}],["productcategories.controller",{"_index":1760,"title":{},"body":{"modules/ProductCategoriesModule.html":{}}}],["productcategories.service",{"_index":1749,"title":{},"body":{"controllers/ProductCategoriesController.html":{},"modules/ProductCategoriesModule.html":{}}}],["productcategories/productcategories.module",{"_index":108,"title":{},"body":{"modules/AppModule.html":{}}}],["productcategories/productcategory.entity",{"_index":1737,"title":{},"body":{"classes/Product.html":{}}}],["productcategoriescontroller",{"_index":1741,"title":{"controllers/ProductCategoriesController.html":{}},"body":{"controllers/ProductCategoriesController.html":{},"modules/ProductCategoriesModule.html":{},"coverage.html":{}}}],["productcategoriesmodule",{"_index":70,"title":{"modules/ProductCategoriesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ProductCategoriesModule.html":{},"modules.html":{},"overview.html":{}}}],["productcategoriesrepository",{"_index":1767,"title":{},"body":{"injectables/ProductCategoriesService.html":{}}}],["productcategoriesservice",{"_index":1748,"title":{"injectables/ProductCategoriesService.html":{}},"body":{"controllers/ProductCategoriesController.html":{},"modules/ProductCategoriesModule.html":{},"injectables/ProductCategoriesService.html":{},"coverage.html":{},"overview.html":{}}}],["productcategory",{"_index":1731,"title":{"classes/ProductCategory.html":{}},"body":{"classes/Product.html":{},"controllers/ProductCategoriesController.html":{},"modules/ProductCategoriesModule.html":{},"injectables/ProductCategoriesService.html":{},"classes/ProductCategory.html":{},"coverage.html":{}}}],["productcategory.entity",{"_index":1759,"title":{},"body":{"modules/ProductCategoriesModule.html":{},"injectables/ProductCategoriesService.html":{}}}],["production",{"_index":813,"title":{},"body":{"injectables/CustomLogger.html":{},"index.html":{}}}],["products",{"_index":1777,"title":{},"body":{"classes/ProductCategory.html":{},"controllers/ProductsController.html":{}}}],["products.controller",{"_index":1797,"title":{},"body":{"modules/ProductsModule.html":{}}}],["products.service",{"_index":1789,"title":{},"body":{"controllers/ProductsController.html":{},"modules/ProductsModule.html":{}}}],["products/product.entity",{"_index":1781,"title":{},"body":{"classes/ProductCategory.html":{}}}],["products/products.module",{"_index":109,"title":{},"body":{"modules/AppModule.html":{}}}],["productscontroller",{"_index":1783,"title":{"controllers/ProductsController.html":{}},"body":{"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"coverage.html":{}}}],["productsmodule",{"_index":71,"title":{"modules/ProductsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ProductsModule.html":{},"modules.html":{},"overview.html":{}}}],["productsrepository",{"_index":1802,"title":{},"body":{"injectables/ProductsService.html":{}}}],["productsservice",{"_index":1752,"title":{"injectables/ProductsService.html":{}},"body":{"controllers/ProductCategoriesController.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"coverage.html":{},"overview.html":{}}}],["progressive",{"_index":2531,"title":{},"body":{"index.html":{}}}],["project",{"_index":2561,"title":{},"body":{"index.html":{}}}],["promise",{"_index":882,"title":{},"body":{"injectables/ElasticsearchHealthIndicator.html":{},"injectables/FilesService.html":{},"injectables/LocalStrategy.html":{},"interfaces/SubscribersService.html":{}}}],["properties",{"_index":9,"title":{},"body":{"classes/AddCreditCardDto.html":{},"classes/Address.html":{},"interfaces/BookProperties.html":{},"interfaces/CarProperties.html":{},"classes/Category.html":{},"classes/ChatGateway.html":{},"classes/CheckVerificationCodeDto.html":{},"classes/Comment.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostInput.html":{},"classes/CreateProductCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateSubscriberDto.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"classes/EmailScheduleDto.html":{},"injectables/EmailService.html":{},"classes/FindOneParams.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsQuery.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/Log.html":{},"classes/LogInDto.html":{},"injectables/LogsMiddleware.html":{},"classes/Message.html":{},"classes/ObjectWithIdDto.html":{},"classes/PaginationParams.html":{},"classes/Post.html":{},"classes/Post-1.html":{},"interfaces/PostCountResult.html":{},"interfaces/PostSearchBody.html":{},"interfaces/PostSearchResult.html":{},"injectables/PostsLoaders.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"classes/Product.html":{},"classes/ProductCategory.html":{},"classes/PublicFile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithRawBody.html":{},"interfaces/RequestWithUser.html":{},"classes/SetDefaultCreditCardDto.html":{},"injectables/SmsService.html":{},"classes/StripeEvent.html":{},"injectables/StripeService.html":{},"interfaces/Subscriber.html":{},"classes/Timestamp.html":{},"interfaces/TokenPayload.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"interfaces/VerificationTokenPayload.html":{}}}],["protopath",{"_index":2067,"title":{},"body":{"modules/SubscribersModule.html":{}}}],["provide",{"_index":1812,"title":{},"body":{"modules/PubSubModule.html":{},"modules/SubscribersModule.html":{}}}],["provided",{"_index":398,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/SmsService.html":{}}}],["providers",{"_index":202,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/CategoriesModule.html":{},"modules/ChargeModule.html":{},"modules/ChatModule.html":{},"modules/CommentsModule.html":{},"modules/CreditCardsModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"modules/FilesModule.html":{},"modules/GoogleAuthenticationModule.html":{},"modules/HealthModule.html":{},"modules/LoggerModule.html":{},"modules/OptimizeModule.html":{},"modules/PostsModule.html":{},"modules/ProductCategoriesModule.html":{},"modules/ProductsModule.html":{},"modules/PubSubModule.html":{},"modules/SmsModule.html":{},"modules/StripeModule.html":{},"modules/StripeWebhookModule.html":{},"modules/SubscribersModule.html":{},"modules/SubscriptionsModule.html":{},"modules/UsersModule.html":{}}}],["pub_sub",{"_index":1595,"title":{},"body":{"classes/PostsResolver.html":{},"modules/PubSubModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["public",{"_index":28,"title":{},"body":{"classes/Address.html":{},"injectables/AuthenticationService.html":{},"classes/Category.html":{},"classes/Comment.html":{},"classes/CreateCommentCommand.html":{},"injectables/EmailConfirmationService.html":{},"classes/GetCommentsQuery.html":{},"classes/Log.html":{},"classes/Message.html":{},"classes/Post.html":{},"injectables/PostsLoaders.html":{},"classes/Product.html":{},"classes/ProductCategory.html":{},"classes/PublicFile.html":{},"classes/StripeEvent.html":{},"injectables/StripeService.html":{},"injectables/SubscriptionsService.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/User.html":{}}}],["publicationyear",{"_index":409,"title":{},"body":{"interfaces/BookProperties.html":{}}}],["publicfile",{"_index":1067,"title":{"classes/PublicFile.html":{}},"body":{"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/PublicFile.html":{},"classes/User.html":{},"coverage.html":{}}}],["publicfile.entity",{"_index":1068,"title":{},"body":{"modules/FilesModule.html":{},"injectables/FilesService.html":{}}}],["publicfilesrepository",{"_index":1076,"title":{},"body":{"injectables/FilesService.html":{}}}],["pubsub",{"_index":1569,"title":{},"body":{"classes/PostsResolver.html":{}}}],["pubsub/pubsub.module",{"_index":118,"title":{},"body":{"modules/AppModule.html":{},"classes/PostsResolver.html":{}}}],["pubsubmodule",{"_index":72,"title":{"modules/PubSubModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PubSubModule.html":{},"modules.html":{},"overview.html":{}}}],["qrcode",{"_index":2196,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{},"dependencies.html":{}}}],["queries/handlers/getcomments.handler",{"_index":657,"title":{},"body":{"modules/CommentsModule.html":{}}}],["queries/implementations/getcomments.query",{"_index":640,"title":{},"body":{"controllers/CommentsController.html":{}}}],["query",{"_index":632,"title":{},"body":{"controllers/CommentsController.html":{},"classes/DatabaseLogger.html":{},"classes/GetCommentsHandler.html":{},"controllers/PostsController.html":{},"classes/PostsResolver.html":{},"injectables/PostsSearchService.html":{}}}],["query('search",{"_index":1517,"title":{},"body":{"controllers/PostsController.html":{}}}],["query(undefined",{"_index":1579,"title":{},"body":{"classes/PostsResolver.html":{}}}],["query.postid",{"_index":1123,"title":{},"body":{"classes/GetCommentsHandler.html":{}}}],["querybus",{"_index":635,"title":{},"body":{"controllers/CommentsController.html":{}}}],["queryhandler",{"_index":1120,"title":{},"body":{"classes/GetCommentsHandler.html":{}}}],["queryhandler(getcommentsquery",{"_index":1122,"title":{},"body":{"classes/GetCommentsHandler.html":{}}}],["queryrunner",{"_index":833,"title":{},"body":{"classes/DatabaseLogger.html":{},"injectables/FilesService.html":{},"injectables/UsersService.html":{}}}],["queryrunner.committransaction",{"_index":2358,"title":{},"body":{"injectables/UsersService.html":{}}}],["queryrunner.connect",{"_index":2354,"title":{},"body":{"injectables/UsersService.html":{}}}],["queryrunner.manager.delete(publicfile",{"_index":1107,"title":{},"body":{"injectables/FilesService.html":{}}}],["queryrunner.manager.findone(publicfile",{"_index":1106,"title":{},"body":{"injectables/FilesService.html":{}}}],["queryrunner.manager.update(user",{"_index":2356,"title":{},"body":{"injectables/UsersService.html":{}}}],["queryrunner.release",{"_index":2361,"title":{},"body":{"injectables/UsersService.html":{}}}],["queryrunner.rollbacktransaction",{"_index":2359,"title":{},"body":{"injectables/UsersService.html":{}}}],["queryrunner.starttransaction",{"_index":2355,"title":{},"body":{"injectables/UsersService.html":{}}}],["queryrunner?.data?.iscreatinglogs",{"_index":849,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["queue",{"_index":1378,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["range",{"_index":1647,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["rawbody",{"_index":1830,"title":{},"body":{"interfaces/RequestWithRawBody.html":{}}}],["rawbodymiddleware",{"_index":2396,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["read",{"_index":2570,"title":{},"body":{"index.html":{}}}],["readable",{"_index":1380,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["readable.from(result",{"_index":1402,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["readonly",{"_index":262,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/CategoriesController.html":{},"controllers/ChargeController.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"classes/CreateCommentCommand.html":{},"controllers/CreditCardsController.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"controllers/EmailConfirmationController.html":{},"injectables/EmailConfirmationService.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/FilesService.html":{},"classes/GetCommentsQuery.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LogsMiddleware.html":{},"controllers/OptimizeController.html":{},"controllers/PostsController.html":{},"injectables/PostsLoaders.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"controllers/ProductCategoriesController.html":{},"controllers/ProductsController.html":{},"controllers/SmsController.html":{},"injectables/SmsService.html":{},"controllers/StripeWebhookController.html":{},"injectables/StripeWebhookService.html":{},"controllers/SubscriptionsController.html":{},"injectables/SubscriptionsService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["receiverphonenumber",{"_index":1886,"title":{},"body":{"injectables/SmsService.html":{}}}],["recipient",{"_index":983,"title":{},"body":{"classes/EmailScheduleDto.html":{}}}],["recursivelystripnullvalues",{"_index":1056,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["recursivelystripnullvalues(value",{"_index":1059,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{},"miscellaneous/functions.html":{}}}],["redis",{"_index":139,"title":{},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"classes/PostsResolver.html":{},"modules/PubSubModule.html":{},"dependencies.html":{}}}],["redis_host",{"_index":180,"title":{},"body":{"modules/AppModule.html":{}}}],["redis_port",{"_index":181,"title":{},"body":{"modules/AppModule.html":{}}}],["redispubsub",{"_index":1570,"title":{},"body":{"classes/PostsResolver.html":{},"modules/PubSubModule.html":{}}}],["redisstore",{"_index":1550,"title":{},"body":{"modules/PostsModule.html":{}}}],["reflect",{"_index":2494,"title":{},"body":{"dependencies.html":{}}}],["refresh",{"_index":213,"title":{},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"coverage.html":{}}}],["refresh(@req",{"_index":292,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["refresh(request",{"_index":228,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["refresh.guard",{"_index":255,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["refresh.guard.ts",{"_index":1261,"title":{},"body":{"injectables/JwtRefreshGuard.html":{},"coverage.html":{}}}],["refresh=${token",{"_index":390,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["refreshtoken",{"_index":278,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/UsersService.html":{}}}],["refreshtokencookie",{"_index":276,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["register",{"_index":214,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["register(@body",{"_index":263,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["register(@res",{"_index":2173,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["register(registrationdata",{"_index":231,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["register(response",{"_index":2162,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["registerdto",{"_index":232,"title":{"classes/RegisterDto.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/RegisterDto.html":{},"coverage.html":{}}}],["registeruser",{"_index":1152,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["registeruser(token",{"_index":1162,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["registrationdata",{"_index":235,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["relationid",{"_index":1448,"title":{},"body":{"classes/Post.html":{}}}],["relationid((post",{"_index":1452,"title":{},"body":{"classes/Post.html":{}}}],["relationid(undefined",{"_index":1429,"title":{},"body":{"classes/Post.html":{}}}],["relations",{"_index":487,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/ChatService.html":{},"injectables/PostsService.html":{}}}],["remove",{"_index":1614,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["remove(postid",{"_index":1622,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["removerefreshtoken",{"_index":2294,"title":{},"body":{"injectables/UsersService.html":{}}}],["removerefreshtoken(userid",{"_index":2322,"title":{},"body":{"injectables/UsersService.html":{}}}],["repository",{"_index":471,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/ChatService.html":{},"classes/CreateCommentHandler.html":{},"injectables/FilesService.html":{},"classes/GetCommentsHandler.html":{},"injectables/LogsService.html":{},"injectables/PostsService.html":{},"injectables/ProductCategoriesService.html":{},"injectables/ProductsService.html":{},"injectables/StripeWebhookService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["represents",{"_index":2125,"title":{},"body":{"classes/Timestamp.html":{}}}],["req",{"_index":237,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/ChargeController.html":{},"controllers/CommentsController.html":{},"controllers/CreditCardsController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/PostsController.html":{},"classes/PostsResolver.html":{},"controllers/SmsController.html":{},"controllers/StripeWebhookController.html":{},"controllers/SubscriptionsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{}}}],["req.user",{"_index":644,"title":{},"body":{"controllers/CommentsController.html":{},"controllers/PostsController.html":{}}}],["request",{"_index":219,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/ChargeController.html":{},"controllers/CreditCardsController.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LogsMiddleware.html":{},"interfaces/RequestWithRawBody.html":{},"interfaces/RequestWithUser.html":{},"controllers/SmsController.html":{},"controllers/StripeWebhookController.html":{},"controllers/SubscriptionsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{}}}],["request._parsedurl.query",{"_index":1257,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["request.cookies?.refresh",{"_index":1278,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["request.rawbody",{"_index":2002,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["request.res.setheader('set",{"_index":282,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["request.user",{"_index":289,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["request.user.isphonenumberconfirmed",{"_index":1861,"title":{},"body":{"controllers/SmsController.html":{}}}],["request.user.phonenumber",{"_index":1866,"title":{},"body":{"controllers/SmsController.html":{}}}],["request.user.stripecustomerid",{"_index":530,"title":{},"body":{"controllers/ChargeController.html":{},"controllers/CreditCardsController.html":{}}}],["request.user?.isemailconfirmed",{"_index":922,"title":{},"body":{"guards/EmailConfirmationGuard.html":{}}}],["request?.cookies?.authentication",{"_index":1285,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["request?.cookies?.refresh",{"_index":1274,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["requestallmessages",{"_index":544,"title":{},"body":{"classes/ChatGateway.html":{}}}],["requestallmessages(socket",{"_index":556,"title":{},"body":{"classes/ChatGateway.html":{}}}],["requestwithrawbody",{"_index":1828,"title":{"interfaces/RequestWithRawBody.html":{}},"body":{"interfaces/RequestWithRawBody.html":{},"controllers/StripeWebhookController.html":{},"coverage.html":{}}}],["requestwithrawbody.interface",{"_index":1993,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["requestwithuser",{"_index":216,"title":{"interfaces/RequestWithUser.html":{}},"body":{"controllers/AuthenticationController.html":{},"controllers/ChargeController.html":{},"controllers/CommentsController.html":{},"controllers/CreditCardsController.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"controllers/PostsController.html":{},"classes/PostsResolver.html":{},"interfaces/RequestWithUser.html":{},"controllers/SmsController.html":{},"controllers/SubscriptionsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["requestwithuser.interface",{"_index":246,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["res",{"_index":1375,"title":{},"body":{"controllers/OptimizeController.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["resendconfirmationlink",{"_index":894,"title":{},"body":{"controllers/EmailConfirmationController.html":{},"injectables/EmailConfirmationService.html":{}}}],["resendconfirmationlink(@req",{"_index":910,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["resendconfirmationlink(request",{"_index":899,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["resendconfirmationlink(userid",{"_index":944,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["reset",{"_index":80,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/CategoriesModule.html":{},"modules/ChargeModule.html":{},"modules/ChatModule.html":{},"modules/CreditCardsModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"modules/FilesModule.html":{},"modules/GoogleAuthenticationModule.html":{},"modules/HealthModule.html":{},"modules/LoggerModule.html":{},"modules/PostsModule.html":{},"modules/ProductCategoriesModule.html":{},"modules/ProductsModule.html":{},"modules/SmsModule.html":{},"modules/StripeModule.html":{},"modules/StripeWebhookModule.html":{},"modules/SubscriptionsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resolve",{"_index":1593,"title":{},"body":{"classes/PostsResolver.html":{},"dependencies.html":{}}}],["resolver",{"_index":1583,"title":{},"body":{"classes/PostsResolver.html":{}}}],["resolvetree",{"_index":1590,"title":{},"body":{"classes/PostsResolver.html":{}}}],["resource_missing",{"_index":2515,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["resourcemissing",{"_index":2514,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["response",{"_index":1328,"title":{},"body":{"injectables/LogsMiddleware.html":{},"controllers/OptimizeController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{}}}],["response.on('finish",{"_index":1334,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["response.sendstatus(202",{"_index":1399,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["response.sendstatus(404",{"_index":1396,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["result",{"_index":1400,"title":{},"body":{"controllers/OptimizeController.html":{},"injectables/PostsSearchService.html":{},"injectables/SmsService.html":{}}}],["result.id",{"_index":1724,"title":{},"body":{"injectables/PostsService.html":{}}}],["result.status",{"_index":1903,"title":{},"body":{"injectables/SmsService.html":{}}}],["result.valid",{"_index":1902,"title":{},"body":{"injectables/SmsService.html":{}}}],["results",{"_index":24,"title":{},"body":{"classes/AddCreditCardDto.html":{},"classes/Address.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"interfaces/BookProperties.html":{},"interfaces/CarProperties.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"classes/Category.html":{},"classes/CategoryNotFoundException.html":{},"controllers/ChargeController.html":{},"modules/ChargeModule.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/CheckVerificationCodeDto.html":{},"classes/Comment.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostInput.html":{},"classes/CreateProductCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateSubscriberDto.html":{},"classes/CreateUserDto.html":{},"controllers/CreditCardsController.html":{},"modules/CreditCardsModule.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"modules/DatabaseModule.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullInterceptor.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/FindOneParams.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthenticationModule.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/GraphqlJwtAuthGuard.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/Log.html":{},"classes/LogInDto.html":{},"modules/LoggerModule.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"classes/Message.html":{},"classes/ObjectWithIdDto.html":{},"controllers/OptimizeController.html":{},"modules/OptimizeModule.html":{},"classes/PaginationParams.html":{},"classes/Post.html":{},"classes/Post-1.html":{},"interfaces/PostCountResult.html":{},"classes/PostNotFoundException.html":{},"interfaces/PostSearchBody.html":{},"interfaces/PostSearchResult.html":{},"controllers/PostsController.html":{},"injectables/PostsLoaders.html":{},"modules/PostsModule.html":{},"classes/PostsResolver.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"classes/Product.html":{},"controllers/ProductCategoriesController.html":{},"modules/ProductCategoriesModule.html":{},"injectables/ProductCategoriesService.html":{},"classes/ProductCategory.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"modules/PubSubModule.html":{},"classes/PublicFile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithRawBody.html":{},"interfaces/RequestWithUser.html":{},"modules/SearchModule.html":{},"classes/SetDefaultCreditCardDto.html":{},"controllers/SmsController.html":{},"modules/SmsModule.html":{},"injectables/SmsService.html":{},"classes/StripeEvent.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"modules/StripeWebhookModule.html":{},"injectables/StripeWebhookService.html":{},"interfaces/Subscriber.html":{},"controllers/SubscribersController.html":{},"modules/SubscribersModule.html":{},"interfaces/SubscribersService.html":{},"controllers/SubscriptionsController.html":{},"modules/SubscriptionsModule.html":{},"injectables/SubscriptionsService.html":{},"classes/Timestamp.html":{},"interfaces/TokenPayload.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/VerificationTokenPayload.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["results.map(result",{"_index":1723,"title":{},"body":{"injectables/PostsService.html":{}}}],["return",{"_index":268,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/ChargeController.html":{},"injectables/ChatService.html":{},"controllers/CommentsController.html":{},"classes/CreateCommentHandler.html":{},"controllers/CreditCardsController.html":{},"classes/DatabaseLogger.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailConfirmationService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/FilesService.html":{},"classes/GetCommentsHandler.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/GraphqlJwtAuthGuard.html":{},"controllers/HealthController.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"controllers/OptimizeController.html":{},"controllers/PostsController.html":{},"injectables/PostsLoaders.html":{},"classes/PostsResolver.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"controllers/ProductCategoriesController.html":{},"injectables/ProductCategoriesService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"injectables/SmsService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/StripeWebhookService.html":{},"controllers/SubscribersController.html":{},"modules/SubscribersModule.html":{},"controllers/SubscriptionsController.html":{},"injectables/SubscriptionsService.html":{},"classes/Timestamp.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":92,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/ChargeController.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"controllers/CommentsController.html":{},"classes/CreateCommentHandler.html":{},"controllers/CreditCardsController.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailConfirmationService.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/FilesService.html":{},"classes/GetCommentsHandler.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/GraphqlJwtAuthGuard.html":{},"controllers/HealthController.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"controllers/OptimizeController.html":{},"controllers/PostsController.html":{},"classes/PostsResolver.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"controllers/ProductCategoriesController.html":{},"injectables/ProductCategoriesService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"controllers/SmsController.html":{},"injectables/SmsService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/StripeWebhookService.html":{},"controllers/SubscribersController.html":{},"interfaces/SubscribersService.html":{},"controllers/SubscriptionsController.html":{},"injectables/SubscriptionsService.html":{},"classes/Timestamp.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["rimraf",{"_index":2497,"title":{},"body":{"dependencies.html":{}}}],["rss",{"_index":1227,"title":{},"body":{"controllers/HealthController.html":{}}}],["run",{"_index":2547,"title":{},"body":{"index.html":{}}}],["runincluster",{"_index":2399,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["runincluster(bootstrap",{"_index":2528,"title":{},"body":{"miscellaneous/functions.html":{}}}],["rxjs",{"_index":1053,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":1055,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["s3",{"_index":1087,"title":{},"body":{"injectables/FilesService.html":{}}}],["s3.deleteobject",{"_index":1103,"title":{},"body":{"injectables/FilesService.html":{}}}],["s3.upload",{"_index":1094,"title":{},"body":{"injectables/FilesService.html":{}}}],["savemessage",{"_index":584,"title":{},"body":{"injectables/ChatService.html":{}}}],["savemessage(content",{"_index":591,"title":{},"body":{"injectables/ChatService.html":{}}}],["scalable",{"_index":2536,"title":{},"body":{"index.html":{}}}],["scalar",{"_index":2139,"title":{},"body":{"classes/Timestamp.html":{}}}],["scalar('timestamp",{"_index":2141,"title":{},"body":{"classes/Timestamp.html":{}}}],["scheduleddate",{"_index":719,"title":{},"body":{"classes/CreatePostInput.html":{},"classes/Post.html":{},"classes/Post-1.html":{}}}],["scheduleemail",{"_index":993,"title":{},"body":{"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{}}}],["scheduleemail(@body",{"_index":1002,"title":{},"body":{"controllers/EmailSchedulingController.html":{}}}],["scheduleemail(emailschedule",{"_index":994,"title":{},"body":{"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{}}}],["schedulemodule",{"_index":110,"title":{},"body":{"modules/AppModule.html":{}}}],["schedulemodule.forroot",{"_index":153,"title":{},"body":{"modules/AppModule.html":{}}}],["schedulerregistry",{"_index":1011,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["scheduling",{"_index":992,"title":{},"body":{"controllers/EmailSchedulingController.html":{}}}],["scope",{"_index":1542,"title":{},"body":{"injectables/PostsLoaders.html":{}}}],["scope.request",{"_index":1544,"title":{},"body":{"injectables/PostsLoaders.html":{}}}],["script",{"_index":1659,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["sdk",{"_index":1089,"title":{},"body":{"injectables/FilesService.html":{},"dependencies.html":{}}}],["search",{"_index":1499,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsSearchService.html":{}}}],["search(text",{"_index":1624,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["search/search.module",{"_index":105,"title":{},"body":{"modules/AppModule.html":{},"modules/HealthModule.html":{},"modules/PostsModule.html":{}}}],["searchforposts",{"_index":1667,"title":{},"body":{"injectables/PostsService.html":{}}}],["searchforposts(text",{"_index":1683,"title":{},"body":{"injectables/PostsService.html":{}}}],["searchmodule",{"_index":73,"title":{"modules/SearchModule.html":{}},"body":{"modules/AppModule.html":{},"modules/HealthModule.html":{},"modules/PostsModule.html":{},"modules/SearchModule.html":{},"modules.html":{},"overview.html":{}}}],["secret",{"_index":380,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/EmailConfirmationService.html":{},"injectables/TwoFactorAuthenticationService.html":{},"injectables/UsersService.html":{}}}],["secretorkey",{"_index":1275,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["senderphonenumber",{"_index":1907,"title":{},"body":{"injectables/SmsService.html":{}}}],["sendmail",{"_index":1026,"title":{},"body":{"injectables/EmailService.html":{}}}],["sendmail(options",{"_index":1029,"title":{},"body":{"injectables/EmailService.html":{}}}],["sendmessage",{"_index":1877,"title":{},"body":{"injectables/SmsService.html":{}}}],["sendmessage(receiverphonenumber",{"_index":1884,"title":{},"body":{"injectables/SmsService.html":{}}}],["sendverificationlink",{"_index":936,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["sendverificationlink(email",{"_index":946,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["separatecount",{"_index":1641,"title":{},"body":{"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{}}}],["serialize",{"_index":2123,"title":{},"body":{"classes/Timestamp.html":{}}}],["serialize(value",{"_index":2137,"title":{},"body":{"classes/Timestamp.html":{}}}],["server",{"_index":541,"title":{},"body":{"classes/ChatGateway.html":{},"dependencies.html":{},"index.html":{}}}],["service",{"_index":1037,"title":{},"body":{"injectables/EmailService.html":{}}}],["servicesid",{"_index":1894,"title":{},"body":{"injectables/SmsService.html":{}}}],["set",{"_index":1980,"title":{},"body":{"injectables/StripeService.html":{}}}],["setcurrentrefreshtoken",{"_index":2295,"title":{},"body":{"injectables/UsersService.html":{}}}],["setcurrentrefreshtoken(refreshtoken",{"_index":2324,"title":{},"body":{"injectables/UsersService.html":{}}}],["setdefaultcard",{"_index":751,"title":{},"body":{"controllers/CreditCardsController.html":{}}}],["setdefaultcard(@body",{"_index":770,"title":{},"body":{"controllers/CreditCardsController.html":{}}}],["setdefaultcard(creditcard",{"_index":758,"title":{},"body":{"controllers/CreditCardsController.html":{}}}],["setdefaultcreditcard",{"_index":1927,"title":{},"body":{"injectables/StripeService.html":{}}}],["setdefaultcreditcard(paymentmethodid",{"_index":1946,"title":{},"body":{"injectables/StripeService.html":{}}}],["setdefaultcreditcarddto",{"_index":759,"title":{"classes/SetDefaultCreditCardDto.html":{}},"body":{"controllers/CreditCardsController.html":{},"classes/SetDefaultCreditCardDto.html":{},"coverage.html":{}}}],["settwofactorauthenticationsecret",{"_index":2296,"title":{},"body":{"injectables/UsersService.html":{}}}],["settwofactorauthenticationsecret(secret",{"_index":2326,"title":{},"body":{"injectables/UsersService.html":{}}}],["side",{"_index":2537,"title":{},"body":{"index.html":{}}}],["sign",{"_index":2601,"title":{},"body":{"miscellaneous/variables.html":{}}}],["signature",{"_index":1936,"title":{},"body":{"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{}}}],["simplifiedinfo",{"_index":1600,"title":{},"body":{"classes/PostsResolver.html":{}}}],["simplifiedinfo.fields",{"_index":1602,"title":{},"body":{"classes/PostsResolver.html":{}}}],["simplifyparsedresolveinfofragmentwithtype",{"_index":1591,"title":{},"body":{"classes/PostsResolver.html":{}}}],["size",{"_index":1644,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["skip",{"_index":1704,"title":{},"body":{"injectables/PostsService.html":{}}}],["sms",{"_index":1843,"title":{},"body":{"controllers/SmsController.html":{},"injectables/SmsService.html":{}}}],["sms.controller",{"_index":1873,"title":{},"body":{"modules/SmsModule.html":{}}}],["sms.service",{"_index":1857,"title":{},"body":{"controllers/SmsController.html":{},"modules/SmsModule.html":{}}}],["sms/sms.module",{"_index":130,"title":{},"body":{"modules/AppModule.html":{}}}],["smscontroller",{"_index":1841,"title":{"controllers/SmsController.html":{}},"body":{"controllers/SmsController.html":{},"modules/SmsModule.html":{},"coverage.html":{}}}],["smsmodule",{"_index":74,"title":{"modules/SmsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/SmsModule.html":{},"modules.html":{},"overview.html":{}}}],["smsservice",{"_index":1856,"title":{"injectables/SmsService.html":{}},"body":{"controllers/SmsController.html":{},"modules/SmsModule.html":{},"injectables/SmsService.html":{},"coverage.html":{},"overview.html":{}}}],["socket",{"_index":550,"title":{},"body":{"classes/ChatGateway.html":{},"injectables/ChatService.html":{}}}],["socket.emit('send_all_messages",{"_index":573,"title":{},"body":{"classes/ChatGateway.html":{}}}],["socket.handshake.headers.cookie",{"_index":602,"title":{},"body":{"injectables/ChatService.html":{}}}],["socket.io",{"_index":564,"title":{},"body":{"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"dependencies.html":{}}}],["sort",{"_index":1649,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AddCreditCardDto.html":{},"classes/Address.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"interfaces/BookProperties.html":{},"interfaces/CarProperties.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"classes/Category.html":{},"classes/CategoryNotFoundException.html":{},"controllers/ChargeController.html":{},"modules/ChargeModule.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/CheckVerificationCodeDto.html":{},"classes/Comment.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostInput.html":{},"classes/CreateProductCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateSubscriberDto.html":{},"classes/CreateUserDto.html":{},"controllers/CreditCardsController.html":{},"modules/CreditCardsModule.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"modules/DatabaseModule.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullInterceptor.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/FindOneParams.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthenticationModule.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/GraphqlJwtAuthGuard.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/Log.html":{},"classes/LogInDto.html":{},"modules/LoggerModule.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"classes/Message.html":{},"classes/ObjectWithIdDto.html":{},"controllers/OptimizeController.html":{},"modules/OptimizeModule.html":{},"classes/PaginationParams.html":{},"classes/Post.html":{},"classes/Post-1.html":{},"interfaces/PostCountResult.html":{},"classes/PostNotFoundException.html":{},"interfaces/PostSearchBody.html":{},"interfaces/PostSearchResult.html":{},"controllers/PostsController.html":{},"injectables/PostsLoaders.html":{},"modules/PostsModule.html":{},"classes/PostsResolver.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"classes/Product.html":{},"controllers/ProductCategoriesController.html":{},"modules/ProductCategoriesModule.html":{},"injectables/ProductCategoriesService.html":{},"classes/ProductCategory.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"modules/PubSubModule.html":{},"classes/PublicFile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithRawBody.html":{},"interfaces/RequestWithUser.html":{},"modules/SearchModule.html":{},"classes/SetDefaultCreditCardDto.html":{},"controllers/SmsController.html":{},"modules/SmsModule.html":{},"injectables/SmsService.html":{},"classes/StripeEvent.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"modules/StripeWebhookModule.html":{},"injectables/StripeWebhookService.html":{},"interfaces/Subscriber.html":{},"controllers/SubscribersController.html":{},"modules/SubscribersModule.html":{},"interfaces/SubscribersService.html":{},"controllers/SubscriptionsController.html":{},"modules/SubscriptionsModule.html":{},"injectables/SubscriptionsService.html":{},"classes/Timestamp.html":{},"interfaces/TokenPayload.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/VerificationTokenPayload.html":{},"index.html":{}}}],["space",{"_index":1236,"title":{},"body":{"controllers/HealthController.html":{}}}],["sponsors",{"_index":2564,"title":{},"body":{"index.html":{}}}],["src/.../config.service.ts",{"_index":2591,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../getloglevels.ts",{"_index":2518,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../image.processor.ts",{"_index":2519,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../jwt.service.ts",{"_index":2592,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":2517,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../postgreserrorcode.enum.ts",{"_index":2506,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../posts.resolver.ts",{"_index":2594,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../postscachekey.constant.ts",{"_index":2590,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../pubsub.module.ts",{"_index":2595,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../rawbody.middleware.ts",{"_index":2520,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../recursivelystripnullvalues.ts",{"_index":2521,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../runincluster.ts",{"_index":2522,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../stripeerror.enum.ts",{"_index":2507,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../user.mock.ts",{"_index":2593,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.module.ts",{"_index":82,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.module.ts:131",{"_index":88,"title":{},"body":{"modules/AppModule.html":{}}}],["src/authentication/authentication.controller.ts",{"_index":207,"title":{},"body":{"controllers/AuthenticationController.html":{},"coverage.html":{}}}],["src/authentication/authentication.controller.ts:29",{"_index":234,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/authentication/authentication.controller.ts:38",{"_index":222,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/authentication/authentication.controller.ts:60",{"_index":227,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/authentication/authentication.controller.ts:67",{"_index":218,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/authentication/authentication.controller.ts:73",{"_index":230,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/authentication/authentication.module.ts",{"_index":303,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["src/authentication/authentication.service.ts",{"_index":321,"title":{},"body":{"injectables/AuthenticationService.html":{},"coverage.html":{}}}],["src/authentication/authentication.service.ts:11",{"_index":330,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:18",{"_index":346,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:35",{"_index":338,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:44",{"_index":343,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:57",{"_index":335,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:64",{"_index":333,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:74",{"_index":349,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:84",{"_index":345,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/dto/login.dto.ts",{"_index":1314,"title":{},"body":{"classes/LogInDto.html":{},"coverage.html":{}}}],["src/authentication/dto/login.dto.ts:10",{"_index":1317,"title":{},"body":{"classes/LogInDto.html":{}}}],["src/authentication/dto/login.dto.ts:5",{"_index":1315,"title":{},"body":{"classes/LogInDto.html":{}}}],["src/authentication/dto/register.dto.ts",{"_index":1818,"title":{},"body":{"classes/RegisterDto.html":{},"coverage.html":{}}}],["src/authentication/dto/register.dto.ts:14",{"_index":1822,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/authentication/dto/register.dto.ts:19",{"_index":1825,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/authentication/dto/register.dto.ts:5",{"_index":1820,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/authentication/dto/register.dto.ts:9",{"_index":1821,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/authentication/graphql",{"_index":1193,"title":{},"body":{"injectables/GraphqlJwtAuthGuard.html":{},"coverage.html":{}}}],["src/authentication/jwt",{"_index":1259,"title":{},"body":{"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"coverage.html":{}}}],["src/authentication/jwt.strategy.ts",{"_index":1280,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/authentication/jwt.strategy.ts:10",{"_index":1281,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/authentication/jwt.strategy.ts:23",{"_index":1283,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/authentication/local.strategy.ts",{"_index":1297,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/authentication/local.strategy.ts:14",{"_index":1300,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/authentication/local.strategy.ts:8",{"_index":1298,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/authentication/localauthentication.guard.ts",{"_index":1295,"title":{},"body":{"injectables/LocalAuthenticationGuard.html":{},"coverage.html":{}}}],["src/authentication/requestwithuser.interface.ts",{"_index":1831,"title":{},"body":{"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["src/authentication/tests/user.mock.ts",{"_index":2376,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/authentication/tokenpayload.interface.ts",{"_index":2150,"title":{},"body":{"interfaces/TokenPayload.html":{},"coverage.html":{}}}],["src/authentication/twofactor/dto/twofactorauthenticationcode.dto.ts",{"_index":2154,"title":{},"body":{"classes/TwoFactorAuthenticationCodeDto.html":{},"coverage.html":{}}}],["src/authentication/twofactor/dto/twofactorauthenticationcode.dto.ts:6",{"_index":2156,"title":{},"body":{"classes/TwoFactorAuthenticationCodeDto.html":{}}}],["src/authentication/twofactor/twofactorauthentication.controller.ts",{"_index":2157,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{},"coverage.html":{}}}],["src/authentication/twofactor/twofactorauthentication.controller.ts:31",{"_index":2164,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["src/authentication/twofactor/twofactorauthentication.controller.ts:40",{"_index":2168,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["src/authentication/twofactor/twofactorauthentication.controller.ts:56",{"_index":2161,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["src/authentication/twofactor/twofactorauthentication.service.ts",{"_index":2182,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{},"coverage.html":{}}}],["src/authentication/twofactor/twofactorauthentication.service.ts:10",{"_index":2186,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["src/authentication/twofactor/twofactorauthentication.service.ts:16",{"_index":2188,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["src/authentication/twofactor/twofactorauthentication.service.ts:29",{"_index":2190,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["src/authentication/twofactor/twofactorauthentication.service.ts:36",{"_index":2192,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["src/categories/categories.controller.ts",{"_index":418,"title":{},"body":{"controllers/CategoriesController.html":{},"coverage.html":{}}}],["src/categories/categories.controller.ts:26",{"_index":434,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["src/categories/categories.controller.ts:31",{"_index":437,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["src/categories/categories.controller.ts:37",{"_index":428,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["src/categories/categories.controller.ts:42",{"_index":441,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["src/categories/categories.controller.ts:47",{"_index":433,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["src/categories/categories.module.ts",{"_index":463,"title":{},"body":{"modules/CategoriesModule.html":{}}}],["src/categories/categories.service.ts",{"_index":469,"title":{},"body":{"injectables/CategoriesService.html":{},"coverage.html":{}}}],["src/categories/categories.service.ts:10",{"_index":472,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/categories/categories.service.ts:16",{"_index":477,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/categories/categories.service.ts:20",{"_index":479,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/categories/categories.service.ts:28",{"_index":474,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/categories/categories.service.ts:34",{"_index":481,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/categories/categories.service.ts:43",{"_index":476,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/categories/category.entity.ts",{"_index":499,"title":{},"body":{"classes/Category.html":{},"coverage.html":{}}}],["src/categories/category.entity.ts:10",{"_index":501,"title":{},"body":{"classes/Category.html":{}}}],["src/categories/category.entity.ts:13",{"_index":503,"title":{},"body":{"classes/Category.html":{}}}],["src/categories/category.entity.ts:7",{"_index":500,"title":{},"body":{"classes/Category.html":{}}}],["src/categories/dto/createcategory.dto.ts",{"_index":662,"title":{},"body":{"classes/CreateCategoryDto.html":{},"coverage.html":{}}}],["src/categories/dto/createcategory.dto.ts:6",{"_index":663,"title":{},"body":{"classes/CreateCategoryDto.html":{}}}],["src/categories/dto/updatecategory.dto.ts",{"_index":2204,"title":{},"body":{"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["src/categories/dto/updatecategory.dto.ts:11",{"_index":2208,"title":{},"body":{"classes/UpdateCategoryDto.html":{}}}],["src/categories/dto/updatecategory.dto.ts:6",{"_index":2206,"title":{},"body":{"classes/UpdateCategoryDto.html":{}}}],["src/categories/exceptions/categorynotfound.exception.ts",{"_index":507,"title":{},"body":{"classes/CategoryNotFoundException.html":{},"coverage.html":{}}}],["src/categories/exceptions/categorynotfound.exception.ts:3",{"_index":511,"title":{},"body":{"classes/CategoryNotFoundException.html":{}}}],["src/charge/charge.controller.ts",{"_index":516,"title":{},"body":{"controllers/ChargeController.html":{},"coverage.html":{}}}],["src/charge/charge.controller.ts:15",{"_index":521,"title":{},"body":{"controllers/ChargeController.html":{}}}],["src/charge/charge.module.ts",{"_index":534,"title":{},"body":{"modules/ChargeModule.html":{}}}],["src/charge/dto/createcharge.dto.ts",{"_index":664,"title":{},"body":{"classes/CreateChargeDto.html":{},"coverage.html":{}}}],["src/charge/dto/createcharge.dto.ts:6",{"_index":668,"title":{},"body":{"classes/CreateChargeDto.html":{}}}],["src/charge/dto/createcharge.dto.ts:9",{"_index":667,"title":{},"body":{"classes/CreateChargeDto.html":{}}}],["src/chat/chat.gateway.ts",{"_index":538,"title":{},"body":{"classes/ChatGateway.html":{},"coverage.html":{}}}],["src/chat/chat.gateway.ts:14",{"_index":547,"title":{},"body":{"classes/ChatGateway.html":{}}}],["src/chat/chat.gateway.ts:21",{"_index":551,"title":{},"body":{"classes/ChatGateway.html":{}}}],["src/chat/chat.gateway.ts:26",{"_index":554,"title":{},"body":{"classes/ChatGateway.html":{}}}],["src/chat/chat.gateway.ts:37",{"_index":558,"title":{},"body":{"classes/ChatGateway.html":{}}}],["src/chat/chat.module.ts",{"_index":577,"title":{},"body":{"modules/ChatModule.html":{}}}],["src/chat/chat.service.ts",{"_index":581,"title":{},"body":{"injectables/ChatService.html":{},"coverage.html":{}}}],["src/chat/chat.service.ts:12",{"_index":587,"title":{},"body":{"injectables/ChatService.html":{}}}],["src/chat/chat.service.ts:20",{"_index":592,"title":{},"body":{"injectables/ChatService.html":{}}}],["src/chat/chat.service.ts:29",{"_index":588,"title":{},"body":{"injectables/ChatService.html":{}}}],["src/chat/chat.service.ts:35",{"_index":590,"title":{},"body":{"injectables/ChatService.html":{}}}],["src/chat/message.entity.ts",{"_index":1356,"title":{},"body":{"classes/Message.html":{},"coverage.html":{}}}],["src/chat/message.entity.ts:10",{"_index":1358,"title":{},"body":{"classes/Message.html":{}}}],["src/chat/message.entity.ts:13",{"_index":1357,"title":{},"body":{"classes/Message.html":{}}}],["src/chat/message.entity.ts:7",{"_index":1359,"title":{},"body":{"classes/Message.html":{}}}],["src/comments/commands/handlers/create",{"_index":682,"title":{},"body":{"classes/CreateCommentHandler.html":{},"coverage.html":{}}}],["src/comments/commands/implementations/createcomment.command.ts",{"_index":669,"title":{},"body":{"classes/CreateCommentCommand.html":{},"coverage.html":{}}}],["src/comments/commands/implementations/createcomment.command.ts:4",{"_index":671,"title":{},"body":{"classes/CreateCommentCommand.html":{}}}],["src/comments/commands/implementations/createcomment.command.ts:6",{"_index":673,"title":{},"body":{"classes/CreateCommentCommand.html":{}}}],["src/comments/commands/implementations/createcomment.command.ts:7",{"_index":672,"title":{},"body":{"classes/CreateCommentCommand.html":{}}}],["src/comments/comment.entity.ts",{"_index":612,"title":{},"body":{"classes/Comment.html":{},"coverage.html":{}}}],["src/comments/comment.entity.ts:11",{"_index":615,"title":{},"body":{"classes/Comment.html":{}}}],["src/comments/comment.entity.ts:14",{"_index":617,"title":{},"body":{"classes/Comment.html":{}}}],["src/comments/comment.entity.ts:17",{"_index":614,"title":{},"body":{"classes/Comment.html":{}}}],["src/comments/comment.entity.ts:8",{"_index":616,"title":{},"body":{"classes/Comment.html":{}}}],["src/comments/comments.controller.ts",{"_index":622,"title":{},"body":{"controllers/CommentsController.html":{},"coverage.html":{}}}],["src/comments/comments.controller.ts:28",{"_index":628,"title":{},"body":{"controllers/CommentsController.html":{}}}],["src/comments/comments.controller.ts:36",{"_index":631,"title":{},"body":{"controllers/CommentsController.html":{}}}],["src/comments/comments.module.ts",{"_index":649,"title":{},"body":{"modules/CommentsModule.html":{}}}],["src/comments/dto/createcomment.dto.ts",{"_index":674,"title":{},"body":{"classes/CreateCommentDto.html":{},"coverage.html":{}}}],["src/comments/dto/createcomment.dto.ts:12",{"_index":678,"title":{},"body":{"classes/CreateCommentDto.html":{}}}],["src/comments/dto/createcomment.dto.ts:8",{"_index":675,"title":{},"body":{"classes/CreateCommentDto.html":{}}}],["src/comments/dto/getcomments.dto.ts",{"_index":1111,"title":{},"body":{"classes/GetCommentsDto.html":{},"coverage.html":{}}}],["src/comments/dto/getcomments.dto.ts:7",{"_index":1113,"title":{},"body":{"classes/GetCommentsDto.html":{}}}],["src/comments/queries/handlers/getcomments.handler.ts",{"_index":1115,"title":{},"body":{"classes/GetCommentsHandler.html":{},"coverage.html":{}}}],["src/comments/queries/handlers/getcomments.handler.ts:14",{"_index":1119,"title":{},"body":{"classes/GetCommentsHandler.html":{}}}],["src/comments/queries/handlers/getcomments.handler.ts:8",{"_index":1117,"title":{},"body":{"classes/GetCommentsHandler.html":{}}}],["src/comments/queries/implementations/getcomments.query.ts",{"_index":1125,"title":{},"body":{"classes/GetCommentsQuery.html":{},"coverage.html":{}}}],["src/comments/queries/implementations/getcomments.query.ts:1",{"_index":1126,"title":{},"body":{"classes/GetCommentsQuery.html":{}}}],["src/comments/queries/implementations/getcomments.query.ts:3",{"_index":1127,"title":{},"body":{"classes/GetCommentsQuery.html":{}}}],["src/credit",{"_index":6,"title":{},"body":{"classes/AddCreditCardDto.html":{},"controllers/CreditCardsController.html":{},"modules/CreditCardsModule.html":{},"classes/SetDefaultCreditCardDto.html":{},"coverage.html":{}}}],["src/database/database.module.ts",{"_index":858,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["src/database/databaselogger.ts",{"_index":821,"title":{},"body":{"classes/DatabaseLogger.html":{},"coverage.html":{}}}],["src/database/databaselogger.ts:13",{"_index":840,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["src/database/databaselogger.ts:19",{"_index":842,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["src/database/databaselogger.ts:25",{"_index":836,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["src/database/databaselogger.ts:28",{"_index":845,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["src/database/databaselogger.ts:31",{"_index":834,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["src/database/databaselogger.ts:45",{"_index":847,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["src/database/databaselogger.ts:5",{"_index":831,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["src/database/databaselogger.ts:7",{"_index":838,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["src/database/postgreserrorcode.enum.ts",{"_index":2508,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/email/email.module.ts",{"_index":979,"title":{},"body":{"modules/EmailModule.html":{}}}],["src/email/email.service.ts",{"_index":1024,"title":{},"body":{"injectables/EmailService.html":{},"coverage.html":{}}}],["src/email/email.service.ts:22",{"_index":1031,"title":{},"body":{"injectables/EmailService.html":{}}}],["src/email/email.service.ts:8",{"_index":1028,"title":{},"body":{"injectables/EmailService.html":{}}}],["src/emailconfirmation/confirmemail.dto.ts",{"_index":660,"title":{},"body":{"classes/ConfirmEmailDto.html":{},"coverage.html":{}}}],["src/emailconfirmation/confirmemail.dto.ts:6",{"_index":661,"title":{},"body":{"classes/ConfirmEmailDto.html":{}}}],["src/emailconfirmation/emailconfirmation.controller.ts",{"_index":891,"title":{},"body":{"controllers/EmailConfirmationController.html":{},"coverage.html":{}}}],["src/emailconfirmation/emailconfirmation.controller.ts:23",{"_index":897,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["src/emailconfirmation/emailconfirmation.controller.ts:30",{"_index":902,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["src/emailconfirmation/emailconfirmation.guard.ts",{"_index":914,"title":{},"body":{"guards/EmailConfirmationGuard.html":{},"coverage.html":{}}}],["src/emailconfirmation/emailconfirmation.guard.ts:6",{"_index":918,"title":{},"body":{"guards/EmailConfirmationGuard.html":{}}}],["src/emailconfirmation/emailconfirmation.module.ts",{"_index":930,"title":{},"body":{"modules/EmailConfirmationModule.html":{}}}],["src/emailconfirmation/emailconfirmation.service.ts",{"_index":933,"title":{},"body":{"injectables/EmailConfirmationService.html":{},"coverage.html":{}}}],["src/emailconfirmation/emailconfirmation.service.ts:17",{"_index":947,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["src/emailconfirmation/emailconfirmation.service.ts:35",{"_index":945,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["src/emailconfirmation/emailconfirmation.service.ts:43",{"_index":941,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["src/emailconfirmation/emailconfirmation.service.ts:51",{"_index":943,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["src/emailconfirmation/emailconfirmation.service.ts:9",{"_index":939,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["src/emailconfirmation/verificationtokenpayload.interface.ts",{"_index":2365,"title":{},"body":{"interfaces/VerificationTokenPayload.html":{},"coverage.html":{}}}],["src/emailscheduling/dto/emailschedule.dto.ts",{"_index":982,"title":{},"body":{"classes/EmailScheduleDto.html":{},"coverage.html":{}}}],["src/emailscheduling/dto/emailschedule.dto.ts:13",{"_index":984,"title":{},"body":{"classes/EmailScheduleDto.html":{}}}],["src/emailscheduling/dto/emailschedule.dto.ts:16",{"_index":986,"title":{},"body":{"classes/EmailScheduleDto.html":{}}}],["src/emailscheduling/dto/emailschedule.dto.ts:5",{"_index":988,"title":{},"body":{"classes/EmailScheduleDto.html":{}}}],["src/emailscheduling/dto/emailschedule.dto.ts:9",{"_index":989,"title":{},"body":{"classes/EmailScheduleDto.html":{}}}],["src/emailscheduling/emailscheduling.controller.ts",{"_index":991,"title":{},"body":{"controllers/EmailSchedulingController.html":{},"coverage.html":{}}}],["src/emailscheduling/emailscheduling.controller.ts:19",{"_index":996,"title":{},"body":{"controllers/EmailSchedulingController.html":{}}}],["src/emailscheduling/emailscheduling.module.ts",{"_index":1007,"title":{},"body":{"modules/EmailSchedulingModule.html":{}}}],["src/emailscheduling/emailscheduling.service.ts",{"_index":1009,"title":{},"body":{"injectables/EmailSchedulingService.html":{},"coverage.html":{}}}],["src/emailscheduling/emailscheduling.service.ts:14",{"_index":1013,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["src/emailscheduling/emailscheduling.service.ts:8",{"_index":1012,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["src/files/files.module.ts",{"_index":1065,"title":{},"body":{"modules/FilesModule.html":{}}}],["src/files/files.service.ts",{"_index":1070,"title":{},"body":{"injectables/FilesService.html":{},"coverage.html":{}}}],["src/files/files.service.ts:10",{"_index":1075,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/files/files.service.ts:17",{"_index":1085,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/files/files.service.ts:34",{"_index":1078,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/files/files.service.ts:44",{"_index":1081,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/files/publicfile.entity.ts",{"_index":1814,"title":{},"body":{"classes/PublicFile.html":{},"coverage.html":{}}}],["src/files/publicfile.entity.ts:12",{"_index":1816,"title":{},"body":{"classes/PublicFile.html":{}}}],["src/files/publicfile.entity.ts:6",{"_index":1815,"title":{},"body":{"classes/PublicFile.html":{}}}],["src/files/publicfile.entity.ts:9",{"_index":1817,"title":{},"body":{"classes/PublicFile.html":{}}}],["src/googleauthentication/googleauthentication.controller.ts",{"_index":1129,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"coverage.html":{}}}],["src/googleauthentication/googleauthentication.controller.ts:19",{"_index":1133,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["src/googleauthentication/googleauthentication.module.ts",{"_index":1145,"title":{},"body":{"modules/GoogleAuthenticationModule.html":{}}}],["src/googleauthentication/googleauthentication.service.ts",{"_index":1147,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"coverage.html":{}}}],["src/googleauthentication/googleauthentication.service.ts:10",{"_index":1153,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["src/googleauthentication/googleauthentication.service.ts:25",{"_index":1159,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["src/googleauthentication/googleauthentication.service.ts:39",{"_index":1157,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["src/googleauthentication/googleauthentication.service.ts:54",{"_index":1161,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["src/googleauthentication/googleauthentication.service.ts:71",{"_index":1163,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["src/googleauthentication/googleauthentication.service.ts:80",{"_index":1155,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["src/googleauthentication/tokenverification.dto.ts",{"_index":2151,"title":{},"body":{"classes/TokenVerificationDto.html":{},"coverage.html":{}}}],["src/googleauthentication/tokenverification.dto.ts:6",{"_index":2152,"title":{},"body":{"classes/TokenVerificationDto.html":{}}}],["src/health/elasticsearchhealthindicator.ts",{"_index":873,"title":{},"body":{"injectables/ElasticsearchHealthIndicator.html":{},"coverage.html":{}}}],["src/health/elasticsearchhealthindicator.ts:13",{"_index":880,"title":{},"body":{"injectables/ElasticsearchHealthIndicator.html":{}}}],["src/health/elasticsearchhealthindicator.ts:6",{"_index":878,"title":{},"body":{"injectables/ElasticsearchHealthIndicator.html":{}}}],["src/health/health.controller.ts",{"_index":1205,"title":{},"body":{"controllers/HealthController.html":{},"coverage.html":{}}}],["src/health/health.controller.ts:24",{"_index":1209,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/health/health.module.ts",{"_index":1244,"title":{},"body":{"modules/HealthModule.html":{}}}],["src/logger/customlogger.ts",{"_index":780,"title":{},"body":{"injectables/CustomLogger.html":{},"coverage.html":{}}}],["src/logger/customlogger.ts:30",{"_index":798,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["src/logger/customlogger.ts:39",{"_index":796,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["src/logger/customlogger.ts:48",{"_index":802,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["src/logger/customlogger.ts:57",{"_index":792,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["src/logger/customlogger.ts:66",{"_index":800,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["src/logger/customlogger.ts:9",{"_index":790,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["src/logger/dto/createlog.dto.ts",{"_index":702,"title":{},"body":{"classes/CreateLogDto.html":{},"coverage.html":{}}}],["src/logger/dto/createlog.dto.ts:2",{"_index":705,"title":{},"body":{"classes/CreateLogDto.html":{}}}],["src/logger/dto/createlog.dto.ts:3",{"_index":707,"title":{},"body":{"classes/CreateLogDto.html":{}}}],["src/logger/dto/createlog.dto.ts:4",{"_index":706,"title":{},"body":{"classes/CreateLogDto.html":{}}}],["src/logger/log.entity.ts",{"_index":1305,"title":{},"body":{"classes/Log.html":{},"coverage.html":{}}}],["src/logger/log.entity.ts:12",{"_index":1312,"title":{},"body":{"classes/Log.html":{}}}],["src/logger/log.entity.ts:15",{"_index":1311,"title":{},"body":{"classes/Log.html":{}}}],["src/logger/log.entity.ts:18",{"_index":1309,"title":{},"body":{"classes/Log.html":{}}}],["src/logger/log.entity.ts:6",{"_index":1310,"title":{},"body":{"classes/Log.html":{}}}],["src/logger/log.entity.ts:9",{"_index":1307,"title":{},"body":{"classes/Log.html":{}}}],["src/logger/logger.module.ts",{"_index":1323,"title":{},"body":{"modules/LoggerModule.html":{}}}],["src/logger/logs.service.ts",{"_index":1342,"title":{},"body":{"injectables/LogsService.html":{},"coverage.html":{}}}],["src/logger/logs.service.ts:14",{"_index":1348,"title":{},"body":{"injectables/LogsService.html":{}}}],["src/logger/logs.service.ts:8",{"_index":1345,"title":{},"body":{"injectables/LogsService.html":{}}}],["src/main.ts",{"_index":2382,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/optimize/image.processor.ts",{"_index":2385,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/optimize/optimize.controller.ts",{"_index":1363,"title":{},"body":{"controllers/OptimizeController.html":{},"coverage.html":{}}}],["src/optimize/optimize.controller.ts:21",{"_index":1373,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["src/optimize/optimize.controller.ts:32",{"_index":1369,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["src/optimize/optimize.module.ts",{"_index":1404,"title":{},"body":{"modules/OptimizeModule.html":{}}}],["src/posts/dto/createpost.dto.ts",{"_index":709,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["src/posts/dto/createpost.dto.ts:10",{"_index":715,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["src/posts/dto/createpost.dto.ts:6",{"_index":714,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["src/posts/dto/updatepost.dto.ts",{"_index":2209,"title":{},"body":{"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["src/posts/dto/updatepost.dto.ts:11",{"_index":2212,"title":{},"body":{"classes/UpdatePostDto.html":{}}}],["src/posts/dto/updatepost.dto.ts:16",{"_index":2213,"title":{},"body":{"classes/UpdatePostDto.html":{}}}],["src/posts/dto/updatepost.dto.ts:6",{"_index":2210,"title":{},"body":{"classes/UpdatePostDto.html":{}}}],["src/posts/exceptions/postnotfound.exception.ts",{"_index":1472,"title":{},"body":{"classes/PostNotFoundException.html":{},"coverage.html":{}}}],["src/posts/exceptions/postnotfound.exception.ts:3",{"_index":1473,"title":{},"body":{"classes/PostNotFoundException.html":{}}}],["src/posts/httpcache.interceptor.ts",{"_index":1248,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{},"coverage.html":{}}}],["src/posts/httpcache.interceptor.ts:5",{"_index":1252,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["src/posts/inputs/post.input.ts",{"_index":718,"title":{},"body":{"classes/CreatePostInput.html":{},"coverage.html":{}}}],["src/posts/inputs/post.input.ts:12",{"_index":724,"title":{},"body":{"classes/CreatePostInput.html":{}}}],["src/posts/inputs/post.input.ts:6",{"_index":726,"title":{},"body":{"classes/CreatePostInput.html":{}}}],["src/posts/inputs/post.input.ts:9",{"_index":721,"title":{},"body":{"classes/CreatePostInput.html":{}}}],["src/posts/loaders/posts.loaders.ts",{"_index":1530,"title":{},"body":{"injectables/PostsLoaders.html":{},"coverage.html":{}}}],["src/posts/loaders/posts.loaders.ts:12",{"_index":1541,"title":{},"body":{"injectables/PostsLoaders.html":{}}}],["src/posts/loaders/posts.loaders.ts:6",{"_index":1532,"title":{},"body":{"injectables/PostsLoaders.html":{}}}],["src/posts/models/post.model.ts",{"_index":1457,"title":{},"body":{"classes/Post-1.html":{},"coverage.html":{}}}],["src/posts/models/post.model.ts:10",{"_index":1464,"title":{},"body":{"classes/Post-1.html":{}}}],["src/posts/models/post.model.ts:13",{"_index":1462,"title":{},"body":{"classes/Post-1.html":{}}}],["src/posts/models/post.model.ts:16",{"_index":1459,"title":{},"body":{"classes/Post-1.html":{}}}],["src/posts/models/post.model.ts:19",{"_index":1458,"title":{},"body":{"classes/Post-1.html":{}}}],["src/posts/models/post.model.ts:22",{"_index":1460,"title":{},"body":{"classes/Post-1.html":{}}}],["src/posts/models/post.model.ts:25",{"_index":1463,"title":{},"body":{"classes/Post-1.html":{}}}],["src/posts/models/post.model.ts:7",{"_index":1461,"title":{},"body":{"classes/Post-1.html":{}}}],["src/posts/post.entity.ts",{"_index":1424,"title":{},"body":{"classes/Post.html":{},"coverage.html":{}}}],["src/posts/post.entity.ts:20",{"_index":1439,"title":{},"body":{"classes/Post.html":{}}}],["src/posts/post.entity.ts:23",{"_index":1445,"title":{},"body":{"classes/Post.html":{}}}],["src/posts/post.entity.ts:26",{"_index":1442,"title":{},"body":{"classes/Post.html":{}}}],["src/posts/post.entity.ts:29",{"_index":1434,"title":{},"body":{"classes/Post.html":{}}}],["src/posts/post.entity.ts:33",{"_index":1428,"title":{},"body":{"classes/Post.html":{}}}],["src/posts/post.entity.ts:36",{"_index":1430,"title":{},"body":{"classes/Post.html":{}}}],["src/posts/post.entity.ts:40",{"_index":1432,"title":{},"body":{"classes/Post.html":{}}}],["src/posts/post.entity.ts:43",{"_index":1436,"title":{},"body":{"classes/Post.html":{}}}],["src/posts/post.entity.ts:46",{"_index":1438,"title":{},"body":{"classes/Post.html":{}}}],["src/posts/post.entity.ts:52",{"_index":1444,"title":{},"body":{"classes/Post.html":{}}}],["src/posts/posts.controller.ts",{"_index":1483,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["src/posts/posts.controller.ts:36",{"_index":1498,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:47",{"_index":1495,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:53",{"_index":1491,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:58",{"_index":1502,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:63",{"_index":1493,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.module.ts",{"_index":1549,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/posts/posts.resolver.ts",{"_index":1566,"title":{},"body":{"classes/PostsResolver.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/posts/posts.resolver.ts:16",{"_index":1571,"title":{},"body":{"classes/PostsResolver.html":{}}}],["src/posts/posts.resolver.ts:23",{"_index":1580,"title":{},"body":{"classes/PostsResolver.html":{}}}],["src/posts/posts.resolver.ts:40",{"_index":1576,"title":{},"body":{"classes/PostsResolver.html":{}}}],["src/posts/posts.resolver.ts:46",{"_index":1574,"title":{},"body":{"classes/PostsResolver.html":{}}}],["src/posts/posts.service.ts",{"_index":1664,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/posts.service.ts:104",{"_index":1684,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:16",{"_index":1670,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:25",{"_index":1672,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:34",{"_index":1680,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:58",{"_index":1682,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:64",{"_index":1677,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:73",{"_index":1673,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:84",{"_index":1686,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:95",{"_index":1675,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/postscachekey.constant.ts",{"_index":2388,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/posts/postssearch.service.ts",{"_index":1612,"title":{},"body":{"injectables/PostsSearchService.html":{},"coverage.html":{}}}],["src/posts/postssearch.service.ts:10",{"_index":1616,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["src/posts/postssearch.service.ts:104",{"_index":1628,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["src/posts/postssearch.service.ts:16",{"_index":1621,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["src/posts/postssearch.service.ts:28",{"_index":1619,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["src/posts/postssearch.service.ts:43",{"_index":1625,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["src/posts/postssearch.service.ts:91",{"_index":1623,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["src/posts/types/postcountbody.interface.ts",{"_index":1469,"title":{},"body":{"interfaces/PostCountResult.html":{},"coverage.html":{}}}],["src/posts/types/postsearchbody.interface.ts",{"_index":1476,"title":{},"body":{"interfaces/PostSearchBody.html":{},"coverage.html":{}}}],["src/posts/types/postsearchresponse.interface.ts",{"_index":1478,"title":{},"body":{"interfaces/PostSearchResult.html":{},"coverage.html":{}}}],["src/productcategories/dto/createproductcategory.dto.ts",{"_index":730,"title":{},"body":{"classes/CreateProductCategoryDto.html":{},"coverage.html":{}}}],["src/productcategories/dto/createproductcategory.dto.ts:6",{"_index":731,"title":{},"body":{"classes/CreateProductCategoryDto.html":{}}}],["src/productcategories/productcategories.controller.ts",{"_index":1742,"title":{},"body":{"controllers/ProductCategoriesController.html":{},"coverage.html":{}}}],["src/productcategories/productcategories.controller.ts:21",{"_index":1747,"title":{},"body":{"controllers/ProductCategoriesController.html":{}}}],["src/productcategories/productcategories.controller.ts:27",{"_index":1746,"title":{},"body":{"controllers/ProductCategoriesController.html":{}}}],["src/productcategories/productcategories.module.ts",{"_index":1758,"title":{},"body":{"modules/ProductCategoriesModule.html":{}}}],["src/productcategories/productcategories.service.ts",{"_index":1762,"title":{},"body":{"injectables/ProductCategoriesService.html":{},"coverage.html":{}}}],["src/productcategories/productcategories.service.ts:14",{"_index":1770,"title":{},"body":{"injectables/ProductCategoriesService.html":{}}}],["src/productcategories/productcategories.service.ts:18",{"_index":1769,"title":{},"body":{"injectables/ProductCategoriesService.html":{}}}],["src/productcategories/productcategories.service.ts:8",{"_index":1766,"title":{},"body":{"injectables/ProductCategoriesService.html":{}}}],["src/productcategories/productcategory.entity.ts",{"_index":1776,"title":{},"body":{"classes/ProductCategory.html":{},"coverage.html":{}}}],["src/productcategories/productcategory.entity.ts:10",{"_index":1779,"title":{},"body":{"classes/ProductCategory.html":{}}}],["src/productcategories/productcategory.entity.ts:13",{"_index":1780,"title":{},"body":{"classes/ProductCategory.html":{}}}],["src/productcategories/productcategory.entity.ts:7",{"_index":1778,"title":{},"body":{"classes/ProductCategory.html":{}}}],["src/products/dto/createproduct.dto.ts",{"_index":733,"title":{},"body":{"classes/CreateProductDto.html":{},"coverage.html":{}}}],["src/products/dto/createproduct.dto.ts:12",{"_index":734,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["src/products/dto/createproduct.dto.ts:8",{"_index":735,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["src/products/product.entity.ts",{"_index":1730,"title":{},"body":{"classes/Product.html":{},"coverage.html":{}}}],["src/products/product.entity.ts:12",{"_index":1734,"title":{},"body":{"classes/Product.html":{}}}],["src/products/product.entity.ts:15",{"_index":1732,"title":{},"body":{"classes/Product.html":{}}}],["src/products/product.entity.ts:20",{"_index":1736,"title":{},"body":{"classes/Product.html":{}}}],["src/products/product.entity.ts:9",{"_index":1733,"title":{},"body":{"classes/Product.html":{}}}],["src/products/products.controller.ts",{"_index":1784,"title":{},"body":{"controllers/ProductsController.html":{},"coverage.html":{}}}],["src/products/products.controller.ts:21",{"_index":1787,"title":{},"body":{"controllers/ProductsController.html":{}}}],["src/products/products.controller.ts:27",{"_index":1786,"title":{},"body":{"controllers/ProductsController.html":{}}}],["src/products/products.module.ts",{"_index":1795,"title":{},"body":{"modules/ProductsModule.html":{}}}],["src/products/products.service.ts",{"_index":1799,"title":{},"body":{"injectables/ProductsService.html":{},"coverage.html":{}}}],["src/products/products.service.ts:14",{"_index":1804,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/products/products.service.ts:18",{"_index":1803,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/products/products.service.ts:8",{"_index":1801,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/products/types/bookproperties.interface.ts",{"_index":407,"title":{},"body":{"interfaces/BookProperties.html":{},"coverage.html":{}}}],["src/products/types/carproperties.interface.ts",{"_index":411,"title":{},"body":{"interfaces/CarProperties.html":{},"coverage.html":{}}}],["src/pubsub/pubsub.module.ts",{"_index":1810,"title":{},"body":{"modules/PubSubModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/schema.gql",{"_index":150,"title":{},"body":{"modules/AppModule.html":{}}}],["src/search/search.module.ts",{"_index":1832,"title":{},"body":{"modules/SearchModule.html":{}}}],["src/sms/checkverificationcode.dto.ts",{"_index":608,"title":{},"body":{"classes/CheckVerificationCodeDto.html":{},"coverage.html":{}}}],["src/sms/checkverificationcode.dto.ts:6",{"_index":610,"title":{},"body":{"classes/CheckVerificationCodeDto.html":{}}}],["src/sms/sms.controller.ts",{"_index":1842,"title":{},"body":{"controllers/SmsController.html":{},"coverage.html":{}}}],["src/sms/sms.controller.ts:22",{"_index":1855,"title":{},"body":{"controllers/SmsController.html":{}}}],["src/sms/sms.controller.ts:31",{"_index":1851,"title":{},"body":{"controllers/SmsController.html":{}}}],["src/sms/sms.module.ts",{"_index":1872,"title":{},"body":{"modules/SmsModule.html":{}}}],["src/sms/sms.service.ts",{"_index":1874,"title":{},"body":{"injectables/SmsService.html":{},"coverage.html":{}}}],["src/sms/sms.service.ts:20",{"_index":1883,"title":{},"body":{"injectables/SmsService.html":{}}}],["src/sms/sms.service.ts:28",{"_index":1881,"title":{},"body":{"injectables/SmsService.html":{}}}],["src/sms/sms.service.ts:42",{"_index":1885,"title":{},"body":{"injectables/SmsService.html":{}}}],["src/sms/sms.service.ts:8",{"_index":1878,"title":{},"body":{"injectables/SmsService.html":{}}}],["src/stripe/stripe.module.ts",{"_index":1917,"title":{},"body":{"modules/StripeModule.html":{}}}],["src/stripe/stripe.service.ts",{"_index":1919,"title":{},"body":{"injectables/StripeService.html":{},"coverage.html":{}}}],["src/stripe/stripe.service.ts:18",{"_index":1935,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/stripe/stripe.service.ts:28",{"_index":1938,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/stripe/stripe.service.ts:35",{"_index":1933,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/stripe/stripe.service.ts:46",{"_index":1931,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/stripe/stripe.service.ts:53",{"_index":1947,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/stripe/stripe.service.ts:68",{"_index":1943,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/stripe/stripe.service.ts:75",{"_index":1940,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/stripe/stripe.service.ts:8",{"_index":1928,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/stripe/stripe.service.ts:93",{"_index":1945,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/stripewebhook/requestwithrawbody.interface.ts",{"_index":1829,"title":{},"body":{"interfaces/RequestWithRawBody.html":{},"coverage.html":{}}}],["src/stripewebhook/stripeevent.entity.ts",{"_index":1911,"title":{},"body":{"classes/StripeEvent.html":{},"coverage.html":{}}}],["src/stripewebhook/stripeevent.entity.ts:6",{"_index":1913,"title":{},"body":{"classes/StripeEvent.html":{}}}],["src/stripewebhook/stripewebhook.controller.ts",{"_index":1987,"title":{},"body":{"controllers/StripeWebhookController.html":{},"coverage.html":{}}}],["src/stripewebhook/stripewebhook.controller.ts:16",{"_index":1991,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["src/stripewebhook/stripewebhook.module.ts",{"_index":2010,"title":{},"body":{"modules/StripeWebhookModule.html":{}}}],["src/stripewebhook/stripewebhook.service.ts",{"_index":2014,"title":{},"body":{"injectables/StripeWebhookService.html":{},"coverage.html":{}}}],["src/stripewebhook/stripewebhook.service.ts:10",{"_index":2018,"title":{},"body":{"injectables/StripeWebhookService.html":{}}}],["src/stripewebhook/stripewebhook.service.ts:17",{"_index":2021,"title":{},"body":{"injectables/StripeWebhookService.html":{}}}],["src/stripewebhook/stripewebhook.service.ts:21",{"_index":2024,"title":{},"body":{"injectables/StripeWebhookService.html":{}}}],["src/subscribers/dto/createsubscriber.dto.ts",{"_index":738,"title":{},"body":{"classes/CreateSubscriberDto.html":{},"coverage.html":{}}}],["src/subscribers/dto/createsubscriber.dto.ts:2",{"_index":739,"title":{},"body":{"classes/CreateSubscriberDto.html":{}}}],["src/subscribers/dto/createsubscriber.dto.ts:3",{"_index":740,"title":{},"body":{"classes/CreateSubscriberDto.html":{}}}],["src/subscribers/subscriber.service.ts",{"_index":2037,"title":{},"body":{"interfaces/Subscriber.html":{},"coverage.html":{}}}],["src/subscribers/subscribers.controller.ts",{"_index":2039,"title":{},"body":{"controllers/SubscribersController.html":{},"coverage.html":{}}}],["src/subscribers/subscribers.controller.ts:22",{"_index":2046,"title":{},"body":{"controllers/SubscribersController.html":{}}}],["src/subscribers/subscribers.controller.ts:27",{"_index":2045,"title":{},"body":{"controllers/SubscribersController.html":{}}}],["src/subscribers/subscribers.controller.ts:33",{"_index":2044,"title":{},"body":{"controllers/SubscribersController.html":{}}}],["src/subscribers/subscribers.module.ts",{"_index":2059,"title":{},"body":{"modules/SubscribersModule.html":{}}}],["src/subscribers/subscribers.proto",{"_index":2068,"title":{},"body":{"modules/SubscribersModule.html":{}}}],["src/subscribers/subscribers.service.interface.ts",{"_index":2070,"title":{},"body":{"interfaces/SubscribersService.html":{},"coverage.html":{}}}],["src/subscribers/subscribers.service.interface.ts:5",{"_index":2074,"title":{},"body":{"interfaces/SubscribersService.html":{}}}],["src/subscribers/subscribers.service.interface.ts:6",{"_index":2076,"title":{},"body":{"interfaces/SubscribersService.html":{}}}],["src/subscriptions/subscriptions.controller.ts",{"_index":2080,"title":{},"body":{"controllers/SubscriptionsController.html":{},"coverage.html":{}}}],["src/subscriptions/subscriptions.controller.ts:14",{"_index":2085,"title":{},"body":{"controllers/SubscriptionsController.html":{}}}],["src/subscriptions/subscriptions.controller.ts:20",{"_index":2088,"title":{},"body":{"controllers/SubscriptionsController.html":{}}}],["src/subscriptions/subscriptions.module.ts",{"_index":2101,"title":{},"body":{"modules/SubscriptionsModule.html":{}}}],["src/subscriptions/subscriptions.service.ts",{"_index":2103,"title":{},"body":{"injectables/SubscriptionsService.html":{},"coverage.html":{}}}],["src/subscriptions/subscriptions.service.ts:12",{"_index":2107,"title":{},"body":{"injectables/SubscriptionsService.html":{}}}],["src/subscriptions/subscriptions.service.ts:22",{"_index":2109,"title":{},"body":{"injectables/SubscriptionsService.html":{}}}],["src/subscriptions/subscriptions.service.ts:6",{"_index":2105,"title":{},"body":{"injectables/SubscriptionsService.html":{}}}],["src/users/address.entity.ts",{"_index":27,"title":{},"body":{"classes/Address.html":{},"coverage.html":{}}}],["src/users/address.entity.ts:10",{"_index":41,"title":{},"body":{"classes/Address.html":{}}}],["src/users/address.entity.ts:13",{"_index":36,"title":{},"body":{"classes/Address.html":{}}}],["src/users/address.entity.ts:16",{"_index":37,"title":{},"body":{"classes/Address.html":{}}}],["src/users/address.entity.ts:19",{"_index":44,"title":{},"body":{"classes/Address.html":{}}}],["src/users/address.entity.ts:7",{"_index":40,"title":{},"body":{"classes/Address.html":{}}}],["src/users/dto/createuser.dto.ts",{"_index":742,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dto/createuser.dto.ts:2",{"_index":743,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/users/dto/createuser.dto.ts:3",{"_index":744,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/users/dto/createuser.dto.ts:4",{"_index":745,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/users/models/user.model.ts",{"_index":2252,"title":{},"body":{"classes/User-1.html":{},"coverage.html":{}}}],["src/users/models/user.model.ts:6",{"_index":2254,"title":{},"body":{"classes/User-1.html":{}}}],["src/users/models/user.model.ts:9",{"_index":2253,"title":{},"body":{"classes/User-1.html":{}}}],["src/users/user.entity.ts",{"_index":2214,"title":{},"body":{"classes/User.html":{},"coverage.html":{}}}],["src/users/user.entity.ts:10",{"_index":2234,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.entity.ts:13",{"_index":2233,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.entity.ts:16",{"_index":2243,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.entity.ts:19",{"_index":2241,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.entity.ts:23",{"_index":2242,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.entity.ts:26",{"_index":2238,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.entity.ts:33",{"_index":2227,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.entity.ts:36",{"_index":2244,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.entity.ts:46",{"_index":2229,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.entity.ts:52",{"_index":2231,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.entity.ts:55",{"_index":2246,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.entity.ts:58",{"_index":2239,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.entity.ts:61",{"_index":2245,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.entity.ts:64",{"_index":2240,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.entity.ts:67",{"_index":2236,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.entity.ts:70",{"_index":2237,"title":{},"body":{"classes/User.html":{}}}],["src/users/users.controller.ts",{"_index":2256,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:17",{"_index":2261,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:23",{"_index":2264,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module.ts",{"_index":2282,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service.ts",{"_index":2286,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:11",{"_index":2299,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:115",{"_index":2325,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:122",{"_index":2317,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:135",{"_index":2319,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:141",{"_index":2321,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:147",{"_index":2323,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:153",{"_index":2327,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:159",{"_index":2329,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:20",{"_index":2331,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:29",{"_index":2311,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:37",{"_index":2315,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:43",{"_index":2313,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:51",{"_index":2305,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:62",{"_index":2307,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:75",{"_index":2303,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:92",{"_index":2309,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/utils/excludenull.interceptor.ts",{"_index":1045,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{},"coverage.html":{}}}],["src/utils/excludenull.interceptor.ts:8",{"_index":1050,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["src/utils/findoneparams.ts",{"_index":1108,"title":{},"body":{"classes/FindOneParams.html":{},"coverage.html":{}}}],["src/utils/findoneparams.ts:5",{"_index":1110,"title":{},"body":{"classes/FindOneParams.html":{}}}],["src/utils/getloglevels.ts",{"_index":2390,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/utils/logs.middleware.ts",{"_index":1326,"title":{},"body":{"injectables/LogsMiddleware.html":{},"coverage.html":{}}}],["src/utils/logs.middleware.ts:6",{"_index":1332,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["src/utils/logs.middleware.ts:8",{"_index":1330,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["src/utils/mocks/config.service.ts",{"_index":2391,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/utils/mocks/jwt.service.ts",{"_index":2393,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/utils/rawbody.middleware.ts",{"_index":2395,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/utils/recursivelystripnullvalues.ts",{"_index":2397,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/utils/runincluster.ts",{"_index":2398,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/utils/scalars/timestamp.scalar.ts",{"_index":2118,"title":{},"body":{"classes/Timestamp.html":{},"coverage.html":{}}}],["src/utils/scalars/timestamp.scalar.ts:12",{"_index":2136,"title":{},"body":{"classes/Timestamp.html":{}}}],["src/utils/scalars/timestamp.scalar.ts:21",{"_index":2133,"title":{},"body":{"classes/Timestamp.html":{}}}],["src/utils/scalars/timestamp.scalar.ts:6",{"_index":2130,"title":{},"body":{"classes/Timestamp.html":{}}}],["src/utils/scalars/timestamp.scalar.ts:8",{"_index":2138,"title":{},"body":{"classes/Timestamp.html":{}}}],["src/utils/stripeerror.enum.ts",{"_index":2511,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/utils/types/objectwithid.dto",{"_index":681,"title":{},"body":{"classes/CreateCommentDto.html":{}}}],["src/utils/types/objectwithid.dto.ts",{"_index":1360,"title":{},"body":{"classes/ObjectWithIdDto.html":{},"coverage.html":{}}}],["src/utils/types/objectwithid.dto.ts:5",{"_index":1361,"title":{},"body":{"classes/ObjectWithIdDto.html":{}}}],["src/utils/types/paginationparams.ts",{"_index":1412,"title":{},"body":{"classes/PaginationParams.html":{},"coverage.html":{}}}],["src/utils/types/paginationparams.ts:15",{"_index":1419,"title":{},"body":{"classes/PaginationParams.html":{}}}],["src/utils/types/paginationparams.ts:21",{"_index":1417,"title":{},"body":{"classes/PaginationParams.html":{}}}],["src/utils/types/paginationparams.ts:9",{"_index":1420,"title":{},"body":{"classes/PaginationParams.html":{}}}],["stack",{"_index":795,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["start",{"_index":2127,"title":{},"body":{"classes/Timestamp.html":{},"index.html":{}}}],["start:dev",{"_index":2550,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":2551,"title":{},"body":{"index.html":{}}}],["started",{"_index":2530,"title":{"index.html":{}},"body":{}}],["starter",{"_index":2541,"title":{},"body":{"index.html":{}}}],["startid",{"_index":1415,"title":{},"body":{"classes/PaginationParams.html":{},"controllers/PostsController.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{}}}],["statements",{"_index":2369,"title":{},"body":{"coverage.html":{}}}],["statuscode",{"_index":1337,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["statusmessage",{"_index":1338,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["stay",{"_index":2571,"title":{},"body":{"index.html":{}}}],["storage",{"_index":1232,"title":{},"body":{"controllers/HealthController.html":{}}}],["store",{"_index":1553,"title":{},"body":{"modules/PostsModule.html":{},"dependencies.html":{}}}],["strategy",{"_index":1269,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["stream",{"_index":1381,"title":{},"body":{"controllers/OptimizeController.html":{},"injectables/TwoFactorAuthenticationService.html":{}}}],["stream.pipe(response",{"_index":1403,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["street",{"_index":32,"title":{},"body":{"classes/Address.html":{},"miscellaneous/variables.html":{}}}],["streetname",{"_index":2607,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string",{"_index":13,"title":{},"body":{"classes/AddCreditCardDto.html":{},"classes/Address.html":{},"injectables/AuthenticationService.html":{},"interfaces/BookProperties.html":{},"interfaces/CarProperties.html":{},"classes/Category.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"classes/CheckVerificationCodeDto.html":{},"classes/Comment.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostInput.html":{},"classes/CreateProductCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateSubscriberDto.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"injectables/EmailConfirmationService.html":{},"classes/EmailScheduleDto.html":{},"injectables/FilesService.html":{},"classes/FindOneParams.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/LocalStrategy.html":{},"classes/Log.html":{},"classes/LogInDto.html":{},"classes/Message.html":{},"controllers/OptimizeController.html":{},"classes/Post.html":{},"classes/Post-1.html":{},"interfaces/PostSearchBody.html":{},"controllers/PostsController.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"classes/Product.html":{},"classes/ProductCategory.html":{},"classes/PublicFile.html":{},"classes/RegisterDto.html":{},"classes/SetDefaultCreditCardDto.html":{},"injectables/SmsService.html":{},"classes/StripeEvent.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/StripeWebhookService.html":{},"interfaces/Subscriber.html":{},"injectables/SubscriptionsService.html":{},"classes/Timestamp.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"injectables/UsersService.html":{},"interfaces/VerificationTokenPayload.html":{},"miscellaneous/variables.html":{}}}],["stringifyparameters",{"_index":829,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["stringifyparameters(parameters",{"_index":846,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["stripe",{"_index":1920,"title":{},"body":{"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/StripeWebhookService.html":{},"dependencies.html":{}}}],["stripe(configservice.get('stripe_secret_key",{"_index":1952,"title":{},"body":{"injectables/StripeService.html":{}}}],["stripe.event",{"_index":2023,"title":{},"body":{"injectables/StripeWebhookService.html":{}}}],["stripe.service",{"_index":1918,"title":{},"body":{"modules/StripeModule.html":{}}}],["stripe.subscription",{"_index":2031,"title":{},"body":{"injectables/StripeWebhookService.html":{}}}],["stripe/stripe.module",{"_index":535,"title":{},"body":{"modules/ChargeModule.html":{},"modules/CreditCardsModule.html":{},"modules/StripeWebhookModule.html":{},"modules/SubscriptionsModule.html":{},"modules/UsersModule.html":{}}}],["stripe/stripe.service",{"_index":525,"title":{},"body":{"controllers/ChargeController.html":{},"controllers/CreditCardsController.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubscriptionsService.html":{},"injectables/UsersService.html":{}}}],["stripe_currency",{"_index":188,"title":{},"body":{"modules/AppModule.html":{}}}],["stripe_customer_id",{"_index":2605,"title":{},"body":{"miscellaneous/variables.html":{}}}],["stripe_secret_key",{"_index":187,"title":{},"body":{"modules/AppModule.html":{}}}],["stripe_webhook_secret",{"_index":191,"title":{},"body":{"modules/AppModule.html":{}}}],["stripecustomer",{"_index":2339,"title":{},"body":{"injectables/UsersService.html":{}}}],["stripecustomer.id",{"_index":2344,"title":{},"body":{"injectables/UsersService.html":{}}}],["stripecustomerid",{"_index":2222,"title":{},"body":{"classes/User.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["stripeerror",{"_index":1949,"title":{},"body":{"injectables/StripeService.html":{},"miscellaneous/enumerations.html":{}}}],["stripeerror.invalidrequest",{"_index":1972,"title":{},"body":{"injectables/StripeService.html":{}}}],["stripeerror.resourcemissing",{"_index":1978,"title":{},"body":{"injectables/StripeService.html":{}}}],["stripeevent",{"_index":1910,"title":{"classes/StripeEvent.html":{}},"body":{"classes/StripeEvent.html":{},"modules/StripeWebhookModule.html":{},"injectables/StripeWebhookService.html":{},"coverage.html":{}}}],["stripeevent.entity",{"_index":2012,"title":{},"body":{"modules/StripeWebhookModule.html":{},"injectables/StripeWebhookService.html":{}}}],["stripeinvalidrequesterror",{"_index":2513,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["stripemodule",{"_index":533,"title":{"modules/StripeModule.html":{}},"body":{"modules/ChargeModule.html":{},"modules/CreditCardsModule.html":{},"modules/StripeModule.html":{},"modules/StripeWebhookModule.html":{},"modules/SubscriptionsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["stripeservice",{"_index":524,"title":{"injectables/StripeService.html":{}},"body":{"controllers/ChargeController.html":{},"controllers/CreditCardsController.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubscriptionsService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["stripewebhook.controller",{"_index":2011,"title":{},"body":{"modules/StripeWebhookModule.html":{}}}],["stripewebhook.service",{"_index":1995,"title":{},"body":{"controllers/StripeWebhookController.html":{},"modules/StripeWebhookModule.html":{}}}],["stripewebhook/stripewebhook.module",{"_index":128,"title":{},"body":{"modules/AppModule.html":{}}}],["stripewebhookcontroller",{"_index":1986,"title":{"controllers/StripeWebhookController.html":{}},"body":{"controllers/StripeWebhookController.html":{},"modules/StripeWebhookModule.html":{},"coverage.html":{}}}],["stripewebhookmodule",{"_index":75,"title":{"modules/StripeWebhookModule.html":{}},"body":{"modules/AppModule.html":{},"modules/StripeWebhookModule.html":{},"modules.html":{},"overview.html":{}}}],["stripewebhookservice",{"_index":1994,"title":{"injectables/StripeWebhookService.html":{}},"body":{"controllers/StripeWebhookController.html":{},"modules/StripeWebhookModule.html":{},"injectables/StripeWebhookService.html":{},"coverage.html":{},"overview.html":{}}}],["subject",{"_index":962,"title":{},"body":{"injectables/EmailConfirmationService.html":{},"classes/EmailScheduleDto.html":{},"injectables/EmailSchedulingService.html":{}}}],["subscribed",{"_index":2114,"title":{},"body":{"injectables/SubscriptionsService.html":{}}}],["subscribemessage",{"_index":561,"title":{},"body":{"classes/ChatGateway.html":{}}}],["subscribemessage('request_all_messages",{"_index":557,"title":{},"body":{"classes/ChatGateway.html":{}}}],["subscribemessage('send_message",{"_index":553,"title":{},"body":{"classes/ChatGateway.html":{}}}],["subscriber",{"_index":2036,"title":{"interfaces/Subscriber.html":{}},"body":{"interfaces/Subscriber.html":{},"controllers/SubscribersController.html":{},"interfaces/SubscribersService.html":{},"coverage.html":{}}}],["subscriber.service",{"_index":2078,"title":{},"body":{"interfaces/SubscribersService.html":{}}}],["subscribers",{"_index":2040,"title":{},"body":{"controllers/SubscribersController.html":{},"modules/SubscribersModule.html":{}}}],["subscribers.controller",{"_index":2060,"title":{},"body":{"modules/SubscribersModule.html":{}}}],["subscribers.service.interface",{"_index":2051,"title":{},"body":{"controllers/SubscribersController.html":{}}}],["subscribers/subscribers.module",{"_index":106,"title":{},"body":{"modules/AppModule.html":{}}}],["subscribers_package",{"_index":2063,"title":{},"body":{"modules/SubscribersModule.html":{}}}],["subscribers_service_host",{"_index":177,"title":{},"body":{"modules/AppModule.html":{}}}],["subscribers_service_port",{"_index":178,"title":{},"body":{"modules/AppModule.html":{}}}],["subscriberscontroller",{"_index":2038,"title":{"controllers/SubscribersController.html":{}},"body":{"controllers/SubscribersController.html":{},"modules/SubscribersModule.html":{},"coverage.html":{}}}],["subscribersmodule",{"_index":76,"title":{"modules/SubscribersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/SubscribersModule.html":{},"modules.html":{},"overview.html":{}}}],["subscribersservice",{"_index":2050,"title":{"interfaces/SubscribersService.html":{}},"body":{"controllers/SubscribersController.html":{},"interfaces/SubscribersService.html":{},"coverage.html":{}}}],["subscription",{"_index":1584,"title":{},"body":{"classes/PostsResolver.html":{}}}],["subscription(undefined",{"_index":1575,"title":{},"body":{"classes/PostsResolver.html":{}}}],["subscriptions",{"_index":1594,"title":{},"body":{"classes/PostsResolver.html":{},"modules/PubSubModule.html":{},"controllers/SubscriptionsController.html":{},"injectables/SubscriptionsService.html":{},"dependencies.html":{}}}],["subscriptions.controller",{"_index":2102,"title":{},"body":{"modules/SubscriptionsModule.html":{}}}],["subscriptions.data.length",{"_index":2112,"title":{},"body":{"injectables/SubscriptionsService.html":{}}}],["subscriptions.data[0",{"_index":2117,"title":{},"body":{"injectables/SubscriptionsService.html":{}}}],["subscriptions.service",{"_index":2090,"title":{},"body":{"controllers/SubscriptionsController.html":{},"modules/SubscriptionsModule.html":{}}}],["subscriptions/subscriptions.module",{"_index":127,"title":{},"body":{"modules/AppModule.html":{}}}],["subscriptionscontroller",{"_index":2079,"title":{"controllers/SubscriptionsController.html":{}},"body":{"controllers/SubscriptionsController.html":{},"modules/SubscriptionsModule.html":{},"coverage.html":{}}}],["subscriptionsmodule",{"_index":77,"title":{"modules/SubscriptionsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/SubscriptionsModule.html":{},"modules.html":{},"overview.html":{}}}],["subscriptionsservice",{"_index":2089,"title":{"injectables/SubscriptionsService.html":{}},"body":{"controllers/SubscriptionsController.html":{},"modules/SubscriptionsModule.html":{},"injectables/SubscriptionsService.html":{},"coverage.html":{},"overview.html":{}}}],["subscriptionstatus",{"_index":2033,"title":{},"body":{"injectables/StripeWebhookService.html":{}}}],["super",{"_index":810,"title":{},"body":{"injectables/CustomLogger.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["super(`category",{"_index":513,"title":{},"body":{"classes/CategoryNotFoundException.html":{}}}],["super(`post",{"_index":1474,"title":{},"body":{"classes/PostNotFoundException.html":{}}}],["super.debug.apply(this",{"_index":819,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["super.error.apply(this",{"_index":817,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["super.log.apply(this",{"_index":815,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["super.trackby(context",{"_index":1258,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["super.warn.apply(this",{"_index":818,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["support",{"_index":2565,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":2581,"title":{},"body":{"modules.html":{}}}],["switch",{"_index":2598,"title":{},"body":{"miscellaneous/variables.html":{}}}],["synchronize",{"_index":871,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["table",{"_index":2401,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":2400,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":1705,"title":{},"body":{"injectables/PostsService.html":{}}}],["terminusmodule",{"_index":1246,"title":{},"body":{"modules/HealthModule.html":{}}}],["test",{"_index":2554,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":2557,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":2556,"title":{},"body":{"index.html":{}}}],["tests",{"_index":2553,"title":{},"body":{"index.html":{}}}],["text",{"_index":956,"title":{},"body":{"injectables/EmailConfirmationService.html":{},"injectables/EmailSchedulingService.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{}}}],["thanks",{"_index":2563,"title":{},"body":{"index.html":{}}}],["this.authenticationservice.getauthenticateduser(email",{"_index":1304,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.authenticationservice.getcookiesforlogout",{"_index":287,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.authenticationservice.getcookiewithjwtaccesstoken(request.user.id",{"_index":293,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["this.authenticationservice.getcookiewithjwtaccesstoken(user.id",{"_index":274,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["this.authenticationservice.getcookiewithjwtrefreshtoken(user.id",{"_index":279,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["this.authenticationservice.getuserfromauthenticationtoken(authenticationtoken",{"_index":605,"title":{},"body":{"injectables/ChatService.html":{}}}],["this.authenticationservice.register(registrationdata",{"_index":266,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.cachemanager.del(key",{"_index":1697,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.cachemanager.store.keys",{"_index":1694,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.categoriesrepository.create(category",{"_index":492,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.categoriesrepository.delete(id",{"_index":497,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.categoriesrepository.find",{"_index":486,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.categoriesrepository.findone(id",{"_index":489,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.categoriesrepository.save(newcategory",{"_index":493,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.categoriesrepository.update(id",{"_index":494,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.categoriesservice.createcategory(category",{"_index":456,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["this.categoriesservice.deletecategory(number(id",{"_index":460,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["this.categoriesservice.getallcategories",{"_index":452,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["this.categoriesservice.getcategorybyid(number(id",{"_index":454,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["this.categoriesservice.updatecategory(number(id",{"_index":458,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["this.chatservice.getallmessages",{"_index":572,"title":{},"body":{"classes/ChatGateway.html":{}}}],["this.chatservice.getuserfromsocket(socket",{"_index":566,"title":{},"body":{"classes/ChatGateway.html":{}}}],["this.chatservice.savemessage(content",{"_index":569,"title":{},"body":{"classes/ChatGateway.html":{}}}],["this.clearcache",{"_index":1715,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.client.getservice('subscribersservice",{"_index":2056,"title":{},"body":{"controllers/SubscribersController.html":{}}}],["this.commandbus.execute",{"_index":645,"title":{},"body":{"controllers/CommentsController.html":{}}}],["this.commentsrepository.create",{"_index":697,"title":{},"body":{"classes/CreateCommentHandler.html":{}}}],["this.commentsrepository.find",{"_index":1124,"title":{},"body":{"classes/GetCommentsHandler.html":{}}}],["this.commentsrepository.save(newpost",{"_index":700,"title":{},"body":{"classes/CreateCommentHandler.html":{}}}],["this.configservice.get('aws_public_bucket_name",{"_index":1096,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.configservice.get('email_confirmation_url')}?token=${token",{"_index":955,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["this.configservice.get('google_auth_client_id",{"_index":1167,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.configservice.get('google_auth_client_secret",{"_index":1169,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.configservice.get('jwt_access_token_expiration_time')}s",{"_index":383,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.configservice.get('jwt_access_token_secret",{"_index":381,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.configservice.get('jwt_refresh_token_expiration_time')}s",{"_index":389,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.configservice.get('jwt_refresh_token_secret",{"_index":388,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.configservice.get('jwt_verification_token_expiration_time')}s",{"_index":953,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["this.configservice.get('jwt_verification_token_secret",{"_index":952,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["this.configservice.get('monthly_subscription_price_id",{"_index":2110,"title":{},"body":{"injectables/SubscriptionsService.html":{}}}],["this.configservice.get('stripe_currency",{"_index":1965,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.configservice.get('stripe_webhook_secret",{"_index":1958,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.configservice.get('twilio_sender_phone_number",{"_index":1908,"title":{},"body":{"injectables/SmsService.html":{}}}],["this.configservice.get('twilio_verification_service_sid",{"_index":1895,"title":{},"body":{"injectables/SmsService.html":{}}}],["this.configservice.get('two_factor_authentication_app_name",{"_index":2199,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["this.connection.createqueryrunner",{"_index":2352,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.count(text",{"_index":1642,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["this.createevent(event.id",{"_index":2027,"title":{},"body":{"injectables/StripeWebhookService.html":{}}}],["this.diskhealthindicator.checkstorage('disk",{"_index":1237,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.elasticsearchhealthindicator.ishealthy('elasticsearch",{"_index":1240,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.elasticsearchservice.count",{"_index":1638,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["this.elasticsearchservice.deletebyquery",{"_index":1656,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["this.elasticsearchservice.index",{"_index":1632,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["this.elasticsearchservice.ping",{"_index":887,"title":{},"body":{"injectables/ElasticsearchHealthIndicator.html":{}}}],["this.elasticsearchservice.search",{"_index":1643,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["this.elasticsearchservice.updatebyquery",{"_index":1662,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["this.emailconfirmationservice.confirmemail(email",{"_index":908,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["this.emailconfirmationservice.decodeconfirmationtoken(confirmationdata.token",{"_index":907,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["this.emailconfirmationservice.resendconfirmationlink(request.user.id",{"_index":911,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["this.emailconfirmationservice.sendverificationlink(registrationdata.email",{"_index":267,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.emailschedulingservice.scheduleemail(emailschedule",{"_index":1003,"title":{},"body":{"controllers/EmailSchedulingController.html":{}}}],["this.emailservice.sendmail",{"_index":961,"title":{},"body":{"injectables/EmailConfirmationService.html":{},"injectables/EmailSchedulingService.html":{}}}],["this.eventsrepository.insert",{"_index":2026,"title":{},"body":{"injectables/StripeWebhookService.html":{}}}],["this.filesservice.deletepublicfile(user.avatar.id",{"_index":2350,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.filesservice.deletepublicfilewithqueryrunner(fileid",{"_index":2357,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.filesservice.uploadpublicfile(imagebuffer",{"_index":2351,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.getbyid(userid",{"_index":2347,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.getcookiesforuser(user",{"_index":1180,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.getposts(offset",{"_index":1706,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.getstatus(key",{"_index":888,"title":{},"body":{"injectables/ElasticsearchHealthIndicator.html":{}}}],["this.getuserdata(token",{"_index":1182,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.googleauthenticationservice.authenticate(tokendata.token",{"_index":1141,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["this.handleregistereduser(user",{"_index":1185,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.healthcheckservice.check",{"_index":1216,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.imagequeue.add('optimize",{"_index":1390,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["this.imagequeue.getjob(id",{"_index":1395,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["this.index",{"_index":1633,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["this.jwtservice.sign(payload",{"_index":379,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/EmailConfirmationService.html":{}}}],["this.jwtservice.verify(token",{"_index":401,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/EmailConfirmationService.html":{}}}],["this.logger.debug(message",{"_index":855,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["this.logger.error(`${query",{"_index":852,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["this.logger.error(message",{"_index":1340,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["this.logger.log(`${query",{"_index":850,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["this.logger.log(message",{"_index":854,"title":{},"body":{"classes/DatabaseLogger.html":{},"injectables/LogsMiddleware.html":{}}}],["this.logger.warn('tried",{"_index":1708,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.logger.warn(`time",{"_index":853,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["this.logger.warn(message",{"_index":856,"title":{},"body":{"classes/DatabaseLogger.html":{},"injectables/LogsMiddleware.html":{}}}],["this.logsrepository.create(log",{"_index":1352,"title":{},"body":{"injectables/LogsService.html":{}}}],["this.logsrepository.save(newlog",{"_index":1353,"title":{},"body":{"injectables/LogsService.html":{}}}],["this.logsservice",{"_index":814,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["this.logsservice.createlog",{"_index":816,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["this.memoryhealthindicator.checkheap('memory",{"_index":1223,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.memoryhealthindicator.checkrss('memory",{"_index":1229,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.messagesrepository.create",{"_index":599,"title":{},"body":{"injectables/ChatService.html":{}}}],["this.messagesrepository.find",{"_index":601,"title":{},"body":{"injectables/ChatService.html":{}}}],["this.messagesrepository.save(newmessage",{"_index":600,"title":{},"body":{"injectables/ChatService.html":{}}}],["this.nodemailertransport",{"_index":1036,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.nodemailertransport.sendmail(options",{"_index":1043,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.oauthclient",{"_index":1170,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.oauthclient.gettokeninfo(token",{"_index":1187,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.oauthclient.setcredentials",{"_index":1174,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.postsrepository",{"_index":1726,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.count",{"_index":1701,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.create",{"_index":1712,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.delete(id",{"_index":1719,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.findandcount",{"_index":1703,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.findone(id",{"_index":1707,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.save(newpost",{"_index":1713,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.update(id",{"_index":1716,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postssearchservice.indexpost(newpost",{"_index":1714,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postssearchservice.remove(id",{"_index":1720,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postssearchservice.search(text",{"_index":1721,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postssearchservice.update(updatedpost",{"_index":1718,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsservice.createpost(createpostinput",{"_index":1609,"title":{},"body":{"classes/PostsResolver.html":{}}}],["this.postsservice.createpost(post",{"_index":1524,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.deletepost(number(id",{"_index":1528,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.getpostbyid(number(id",{"_index":1521,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.getposts",{"_index":1604,"title":{},"body":{"classes/PostsResolver.html":{}}}],["this.postsservice.getpostswithauthors",{"_index":1603,"title":{},"body":{"classes/PostsResolver.html":{}}}],["this.postsservice.getpostswithauthors(offset",{"_index":1519,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.searchforposts(search",{"_index":1518,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.updatepost(number(id",{"_index":1526,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.productcategoriesrepository.create(category",{"_index":1774,"title":{},"body":{"injectables/ProductCategoriesService.html":{}}}],["this.productcategoriesrepository.find",{"_index":1772,"title":{},"body":{"injectables/ProductCategoriesService.html":{}}}],["this.productcategoriesrepository.save(newproductcategory",{"_index":1775,"title":{},"body":{"injectables/ProductCategoriesService.html":{}}}],["this.productsrepository.create(product",{"_index":1808,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.productsrepository.find",{"_index":1806,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.productsrepository.save(newproduct",{"_index":1809,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.productsservice.createproduct(product",{"_index":1792,"title":{},"body":{"controllers/ProductsController.html":{}}}],["this.productsservice.createproductcategory(productcategory",{"_index":1755,"title":{},"body":{"controllers/ProductCategoriesController.html":{}}}],["this.productsservice.getallproductcategories",{"_index":1753,"title":{},"body":{"controllers/ProductCategoriesController.html":{}}}],["this.productsservice.getallproducts",{"_index":1791,"title":{},"body":{"controllers/ProductsController.html":{}}}],["this.publicfilesrepository.create",{"_index":1098,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.publicfilesrepository.delete(fileid",{"_index":1105,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.publicfilesrepository.findone",{"_index":1102,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.publicfilesrepository.save(newfile",{"_index":1101,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.pubsub.asynciterator(post_added_event",{"_index":1606,"title":{},"body":{"classes/PostsResolver.html":{}}}],["this.pubsub.publish(post_added_event",{"_index":1611,"title":{},"body":{"classes/PostsResolver.html":{}}}],["this.querybus.execute",{"_index":647,"title":{},"body":{"controllers/CommentsController.html":{}}}],["this.reflector.get",{"_index":1255,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["this.registeruser(token",{"_index":1191,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.schedulerregistry.addcronjob(`${date.now",{"_index":1022,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["this.sendverificationlink(user.email",{"_index":967,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["this.server.sockets.emit('receive_message",{"_index":570,"title":{},"body":{"classes/ChatGateway.html":{}}}],["this.smsservice.confirmphonenumber(request.user.id",{"_index":1865,"title":{},"body":{"controllers/SmsController.html":{}}}],["this.smsservice.initiatephonenumberverification(request.user.phonenumber",{"_index":1863,"title":{},"body":{"controllers/SmsController.html":{}}}],["this.stringifyparameters(parameters",{"_index":851,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["this.stripe",{"_index":1951,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.stripe.customers.create",{"_index":1960,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.stripe.customers.update(customerid",{"_index":1968,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.stripe.paymentintents.create",{"_index":1961,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.stripe.paymentmethods.list",{"_index":1975,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.stripe.setupintents.create",{"_index":1967,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.stripe.subscriptions.create",{"_index":1976,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.stripe.subscriptions.list",{"_index":1982,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.stripe.webhooks.constructevent",{"_index":1959,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.stripeservice.attachcreditcard(creditcard.paymentmethodid",{"_index":768,"title":{},"body":{"controllers/CreditCardsController.html":{}}}],["this.stripeservice.charge(charge.amount",{"_index":528,"title":{},"body":{"controllers/ChargeController.html":{}}}],["this.stripeservice.constructeventfrompayload(signature",{"_index":2001,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.stripeservice.createcustomer(name",{"_index":2346,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.stripeservice.createcustomer(userdata.name",{"_index":2340,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.stripeservice.createsubscription(priceid",{"_index":2115,"title":{},"body":{"injectables/SubscriptionsService.html":{}}}],["this.stripeservice.listcreditcards(request.user.stripecustomerid",{"_index":774,"title":{},"body":{"controllers/CreditCardsController.html":{}}}],["this.stripeservice.listsubscriptions(priceid",{"_index":2111,"title":{},"body":{"injectables/SubscriptionsService.html":{}}}],["this.stripeservice.setdefaultcreditcard(creditcard.paymentmethodid",{"_index":771,"title":{},"body":{"controllers/CreditCardsController.html":{}}}],["this.stripewebhookservice.processsubscriptionupdate(event",{"_index":2006,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.subscribersservice",{"_index":2055,"title":{},"body":{"controllers/SubscribersController.html":{}}}],["this.subscribersservice.addsubscriber(subscriber",{"_index":2058,"title":{},"body":{"controllers/SubscribersController.html":{}}}],["this.subscribersservice.getallsubscribers",{"_index":2057,"title":{},"body":{"controllers/SubscribersController.html":{}}}],["this.subscriptionsservice.createmonthlysubscription(request.user.stripecustomerid",{"_index":2094,"title":{},"body":{"controllers/SubscriptionsController.html":{}}}],["this.subscriptionsservice.getmonthlysubscription(request.user.stripecustomerid",{"_index":2097,"title":{},"body":{"controllers/SubscriptionsController.html":{}}}],["this.twilioclient",{"_index":1892,"title":{},"body":{"injectables/SmsService.html":{}}}],["this.twilioclient.messages",{"_index":1909,"title":{},"body":{"injectables/SmsService.html":{}}}],["this.twilioclient.verify.services(servicesid",{"_index":1896,"title":{},"body":{"injectables/SmsService.html":{}}}],["this.twofactorauthenticationservice.generatetwofactorauthenticationsecret(request.user",{"_index":2175,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["this.twofactorauthenticationservice.istwofactorauthenticationcodevalid",{"_index":2178,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["this.twofactorauthenticationservice.pipeqrcodestream(response",{"_index":2176,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["this.typeormhealthindicator.pingcheck('database",{"_index":1217,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.userservice.getbyid(payload.userid",{"_index":1287,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["this.userservice.getuserifrefreshtokenmatches(refreshtoken",{"_index":1279,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["this.usersrepository.create",{"_index":2343,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.find",{"_index":2338,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.findone",{"_index":2336,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.save(newuser",{"_index":2345,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.update",{"_index":2335,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.update(userid",{"_index":2349,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.addavatar(request.user.id",{"_index":2272,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.create",{"_index":361,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.usersservice.createwithgoogle(email",{"_index":1184,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.usersservice.deleteavatar(request.user.id",{"_index":2277,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getbyemail(email",{"_index":393,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/EmailConfirmationService.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["this.usersservice.getbyid(payload.userid",{"_index":403,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.usersservice.getbyid(userid",{"_index":963,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["this.usersservice.getbyids(authorids",{"_index":1536,"title":{},"body":{"injectables/PostsLoaders.html":{}}}],["this.usersservice.markemailasconfirmed(email",{"_index":968,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["this.usersservice.markphonenumberasconfirmed(userid",{"_index":1906,"title":{},"body":{"injectables/SmsService.html":{}}}],["this.usersservice.removerefreshtoken(request.user.id",{"_index":286,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.usersservice.setcurrentrefreshtoken(refreshtoken",{"_index":280,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["this.usersservice.settwofactorauthenticationsecret(secret",{"_index":2200,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["this.usersservice.turnontwofactorauthentication(request.user.id",{"_index":2180,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["this.usersservice.updatemonthlysubscriptionstatus(customerid",{"_index":2035,"title":{},"body":{"injectables/StripeWebhookService.html":{}}}],["this.verifypassword(plaintextpassword",{"_index":394,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["thresholdpercent",{"_index":1238,"title":{},"body":{"controllers/HealthController.html":{}}}],["throw",{"_index":368,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/CategoriesService.html":{},"injectables/ChatService.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailConfirmationService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PostsService.html":{},"controllers/SmsController.html":{},"injectables/SmsService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/StripeWebhookService.html":{},"injectables/SubscriptionsService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/UsersService.html":{}}}],["time",{"_index":843,"title":{},"body":{"classes/DatabaseLogger.html":{},"classes/Timestamp.html":{}}}],["timestamp",{"_index":119,"title":{"classes/Timestamp.html":{}},"body":{"modules/AppModule.html":{},"classes/Post.html":{},"classes/Timestamp.html":{},"coverage.html":{}}}],["title",{"_index":711,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostInput.html":{},"classes/Post.html":{},"classes/Post-1.html":{},"interfaces/PostSearchBody.html":{},"injectables/PostsSearchService.html":{},"classes/UpdatePostDto.html":{}}}],["tofilestream",{"_index":2195,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["tofilestream(stream",{"_index":2203,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["token",{"_index":277,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/ConfirmEmailDto.html":{},"injectables/EmailConfirmationService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"classes/TokenVerificationDto.html":{},"injectables/TwoFactorAuthenticationService.html":{}}}],["token.strategy",{"_index":313,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["token.strategy.ts",{"_index":1262,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"coverage.html":{}}}],["token.strategy.ts:13",{"_index":1265,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["token.strategy.ts:27",{"_index":1267,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["tokendata",{"_index":1134,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["tokenexpirederror",{"_index":973,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["tokeninfo",{"_index":1186,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["tokeninfo.email",{"_index":1188,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["tokenpayload",{"_index":355,"title":{"interfaces/TokenPayload.html":{}},"body":{"injectables/AuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"interfaces/TokenPayload.html":{},"coverage.html":{}}}],["tokenpayload.interface",{"_index":356,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["tokenverification.dto",{"_index":1135,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["tokenverificationdto",{"_index":1132,"title":{"classes/TokenVerificationDto.html":{}},"body":{"controllers/GoogleAuthenticationController.html":{},"classes/TokenVerificationDto.html":{},"coverage.html":{}}}],["tools",{"_index":2479,"title":{},"body":{"dependencies.html":{}}}],["total",{"_index":1481,"title":{},"body":{"interfaces/PostSearchResult.html":{}}}],["touch",{"_index":2572,"title":{},"body":{"index.html":{}}}],["trackby",{"_index":1250,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["trackby(context",{"_index":1251,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["transformer",{"_index":680,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/CreateProductDto.html":{},"classes/GetCommentsDto.html":{},"classes/PaginationParams.html":{},"classes/User.html":{},"dependencies.html":{}}}],["transport",{"_index":2062,"title":{},"body":{"modules/SubscribersModule.html":{}}}],["transport.grpc",{"_index":2065,"title":{},"body":{"modules/SubscribersModule.html":{}}}],["true",{"_index":152,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostInput.html":{},"modules/DatabaseModule.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/LogsService.html":{},"classes/Post.html":{},"classes/Post-1.html":{},"injectables/StripeService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"classes/UpdatePostDto.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["true})@exclude",{"_index":2230,"title":{},"body":{"classes/User.html":{}}}],["true})@isnotempty",{"_index":713,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["true})@isnotempty()@isoptional",{"_index":2211,"title":{},"body":{"classes/UpdatePostDto.html":{}}}],["true})@joincolumn",{"_index":2226,"title":{},"body":{"classes/User.html":{}}}],["try",{"_index":359,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/DatabaseLogger.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"injectables/EmailConfirmationService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/StripeService.html":{},"injectables/StripeWebhookService.html":{},"classes/Timestamp.html":{},"injectables/UsersService.html":{}}}],["ttl",{"_index":1563,"title":{},"body":{"modules/PostsModule.html":{}}}],["turnontwofactorauthentication",{"_index":2159,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{},"injectables/UsersService.html":{}}}],["turnontwofactorauthentication(request",{"_index":2165,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["turnontwofactorauthentication(userid",{"_index":2328,"title":{},"body":{"injectables/UsersService.html":{}}}],["twilio",{"_index":1887,"title":{},"body":{"injectables/SmsService.html":{},"dependencies.html":{}}}],["twilio(accountsid",{"_index":1893,"title":{},"body":{"injectables/SmsService.html":{}}}],["twilio_account_sid",{"_index":195,"title":{},"body":{"modules/AppModule.html":{}}}],["twilio_auth_token",{"_index":196,"title":{},"body":{"modules/AppModule.html":{}}}],["twilio_sender_phone_number",{"_index":198,"title":{},"body":{"modules/AppModule.html":{}}}],["twilio_verification_service_sid",{"_index":197,"title":{},"body":{"modules/AppModule.html":{}}}],["twilioclient",{"_index":1875,"title":{},"body":{"injectables/SmsService.html":{}}}],["twitter",{"_index":2577,"title":{},"body":{"index.html":{}}}],["two",{"_index":316,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["two_factor_authentication_app_name",{"_index":186,"title":{},"body":{"modules/AppModule.html":{}}}],["twofactor/twofactorauthentication.controller",{"_index":314,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["twofactor/twofactorauthentication.service",{"_index":315,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["twofactorauthentication.service",{"_index":2169,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["twofactorauthenticationcode",{"_index":2155,"title":{},"body":{"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{}}}],["twofactorauthenticationcodedto",{"_index":2153,"title":{"classes/TwoFactorAuthenticationCodeDto.html":{}},"body":{"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"coverage.html":{}}}],["twofactorauthenticationcontroller",{"_index":304,"title":{"controllers/TwoFactorAuthenticationController.html":{}},"body":{"modules/AuthenticationModule.html":{},"controllers/TwoFactorAuthenticationController.html":{},"coverage.html":{}}}],["twofactorauthenticationsecret",{"_index":2223,"title":{},"body":{"classes/User.html":{},"injectables/UsersService.html":{}}}],["twofactorauthenticationservice",{"_index":302,"title":{"injectables/TwoFactorAuthenticationService.html":{}},"body":{"modules/AuthenticationModule.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"coverage.html":{},"overview.html":{}}}],["type",{"_index":11,"title":{},"body":{"classes/AddCreditCardDto.html":{},"classes/Address.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"interfaces/BookProperties.html":{},"interfaces/CarProperties.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/Category.html":{},"classes/CategoryNotFoundException.html":{},"controllers/ChargeController.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"classes/CheckVerificationCodeDto.html":{},"classes/Comment.html":{},"controllers/CommentsController.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostInput.html":{},"classes/CreateProductCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateSubscriberDto.html":{},"classes/CreateUserDto.html":{},"controllers/CreditCardsController.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"modules/DatabaseModule.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailConfirmationService.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/FilesService.html":{},"classes/FindOneParams.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/GraphqlJwtAuthGuard.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Log.html":{},"classes/LogInDto.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"classes/Message.html":{},"classes/ObjectWithIdDto.html":{},"controllers/OptimizeController.html":{},"classes/PaginationParams.html":{},"classes/Post.html":{},"classes/Post-1.html":{},"interfaces/PostCountResult.html":{},"classes/PostNotFoundException.html":{},"interfaces/PostSearchBody.html":{},"interfaces/PostSearchResult.html":{},"controllers/PostsController.html":{},"injectables/PostsLoaders.html":{},"classes/PostsResolver.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"classes/Product.html":{},"controllers/ProductCategoriesController.html":{},"injectables/ProductCategoriesService.html":{},"classes/ProductCategory.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"classes/PublicFile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithRawBody.html":{},"interfaces/RequestWithUser.html":{},"classes/SetDefaultCreditCardDto.html":{},"controllers/SmsController.html":{},"injectables/SmsService.html":{},"classes/StripeEvent.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/StripeWebhookService.html":{},"interfaces/Subscriber.html":{},"controllers/SubscribersController.html":{},"interfaces/SubscribersService.html":{},"controllers/SubscriptionsController.html":{},"injectables/SubscriptionsService.html":{},"classes/Timestamp.html":{},"interfaces/TokenPayload.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"interfaces/VerificationTokenPayload.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["type(undefined)@isoptional",{"_index":1112,"title":{},"body":{"classes/GetCommentsDto.html":{}}}],["typeof",{"_index":969,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["typeorm",{"_index":47,"title":{},"body":{"classes/Address.html":{},"injectables/CategoriesService.html":{},"classes/Category.html":{},"injectables/ChatService.html":{},"classes/Comment.html":{},"classes/CreateCommentHandler.html":{},"classes/DatabaseLogger.html":{},"injectables/FilesService.html":{},"classes/GetCommentsHandler.html":{},"classes/Log.html":{},"injectables/LogsService.html":{},"classes/Message.html":{},"classes/Post.html":{},"injectables/PostsService.html":{},"classes/Product.html":{},"injectables/ProductCategoriesService.html":{},"classes/ProductCategory.html":{},"injectables/ProductsService.html":{},"classes/PublicFile.html":{},"classes/StripeEvent.html":{},"injectables/StripeWebhookService.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["typeormhealthindicator",{"_index":1212,"title":{},"body":{"controllers/HealthController.html":{}}}],["typeormlogger",{"_index":822,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["typeormmodule",{"_index":466,"title":{},"body":{"modules/CategoriesModule.html":{},"modules/ChatModule.html":{},"modules/CommentsModule.html":{},"modules/DatabaseModule.html":{},"modules/FilesModule.html":{},"modules/LoggerModule.html":{},"modules/PostsModule.html":{},"modules/ProductCategoriesModule.html":{},"modules/ProductsModule.html":{},"modules/StripeWebhookModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([category",{"_index":468,"title":{},"body":{"modules/CategoriesModule.html":{}}}],["typeormmodule.forfeature([comment",{"_index":658,"title":{},"body":{"modules/CommentsModule.html":{}}}],["typeormmodule.forfeature([log",{"_index":1325,"title":{},"body":{"modules/LoggerModule.html":{}}}],["typeormmodule.forfeature([message",{"_index":580,"title":{},"body":{"modules/ChatModule.html":{}}}],["typeormmodule.forfeature([post",{"_index":1565,"title":{},"body":{"modules/PostsModule.html":{}}}],["typeormmodule.forfeature([product",{"_index":1798,"title":{},"body":{"modules/ProductsModule.html":{}}}],["typeormmodule.forfeature([productcategory",{"_index":1761,"title":{},"body":{"modules/ProductCategoriesModule.html":{}}}],["typeormmodule.forfeature([publicfile",{"_index":1069,"title":{},"body":{"modules/FilesModule.html":{}}}],["typeormmodule.forfeature([stripeevent",{"_index":2013,"title":{},"body":{"modules/StripeWebhookModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":2285,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":859,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["types/adm",{"_index":2421,"title":{},"body":{"dependencies.html":{}}}],["types/aws",{"_index":2424,"title":{},"body":{"dependencies.html":{}}}],["types/bcrypt",{"_index":2426,"title":{},"body":{"dependencies.html":{}}}],["types/bookproperties.interface",{"_index":1739,"title":{},"body":{"classes/Product.html":{}}}],["types/bull",{"_index":2428,"title":{},"body":{"dependencies.html":{}}}],["types/cache",{"_index":2430,"title":{},"body":{"dependencies.html":{}}}],["types/carproperties.interface",{"_index":1738,"title":{},"body":{"classes/Product.html":{}}}],["types/cookie",{"_index":2432,"title":{},"body":{"dependencies.html":{}}}],["types/cron",{"_index":2436,"title":{},"body":{"dependencies.html":{}}}],["types/hapi__joi",{"_index":2438,"title":{},"body":{"dependencies.html":{}}}],["types/imagemin",{"_index":2440,"title":{},"body":{"dependencies.html":{}}}],["types/ioredis",{"_index":2442,"title":{},"body":{"dependencies.html":{}}}],["types/multer",{"_index":2444,"title":{},"body":{"dependencies.html":{}}}],["types/nodemailer",{"_index":2446,"title":{},"body":{"dependencies.html":{}}}],["types/passport",{"_index":2448,"title":{},"body":{"dependencies.html":{}}}],["types/postcountbody.interface",{"_index":1631,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["types/postsearchbody.interface",{"_index":1630,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["types/postsearchresponse.interface",{"_index":1629,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["types/qrcode",{"_index":2453,"title":{},"body":{"dependencies.html":{}}}],["types/socket.io",{"_index":2455,"title":{},"body":{"dependencies.html":{}}}],["types/uuid",{"_index":2457,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":2540,"title":{},"body":{"index.html":{}}}],["unauthorizedexception",{"_index":920,"title":{},"body":{"guards/EmailConfirmationGuard.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["unauthorizedexception('confirm",{"_index":923,"title":{},"body":{"guards/EmailConfirmationGuard.html":{}}}],["unauthorizedexception('wrong",{"_index":2179,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["undefined",{"_index":43,"title":{},"body":{"classes/Address.html":{},"injectables/AuthenticationService.html":{},"classes/Category.html":{},"classes/Comment.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"classes/Product.html":{},"classes/ProductCategory.html":{},"controllers/TwoFactorAuthenticationController.html":{},"classes/User.html":{}}}],["undefined)@jointable",{"_index":1431,"title":{},"body":{"classes/Post.html":{}}}],["unique",{"_index":2251,"title":{},"body":{"classes/User.html":{}}}],["uniqueviolation",{"_index":2509,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["unit",{"_index":2552,"title":{},"body":{"index.html":{}}}],["unix",{"_index":2128,"title":{},"body":{"classes/Timestamp.html":{}}}],["unknown",{"_index":223,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/ChargeController.html":{},"injectables/ChatService.html":{},"controllers/CommentsController.html":{},"classes/CreateCommentHandler.html":{},"controllers/CreditCardsController.html":{},"classes/DatabaseLogger.html":{},"injectables/EmailConfirmationService.html":{},"injectables/FilesService.html":{},"classes/GetCommentsHandler.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LogsService.html":{},"controllers/OptimizeController.html":{},"controllers/PostsController.html":{},"classes/PostsResolver.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"controllers/ProductCategoriesController.html":{},"injectables/ProductCategoriesService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"injectables/SmsService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"controllers/SubscribersController.html":{},"controllers/SubscriptionsController.html":{},"injectables/SubscriptionsService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["up",{"_index":1981,"title":{},"body":{"injectables/StripeService.html":{}}}],["update",{"_index":1615,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["update(post",{"_index":1627,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["updatecategory",{"_index":424,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{}}}],["updatecategory(@param",{"_index":457,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["updatecategory(id",{"_index":480,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["updatecategory(undefined",{"_index":438,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["updatecategorydto",{"_index":439,"title":{"classes/UpdateCategoryDto.html":{}},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["updatedcategory",{"_index":495,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["updatedpost",{"_index":1717,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatemonthlysubscriptionstatus",{"_index":2297,"title":{},"body":{"injectables/UsersService.html":{}}}],["updatemonthlysubscriptionstatus(stripecustomerid",{"_index":2330,"title":{},"body":{"injectables/UsersService.html":{}}}],["updatepost",{"_index":1488,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["updatepost(@param",{"_index":1525,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(id",{"_index":1685,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatepost(undefined",{"_index":1500,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepostdto",{"_index":1501,"title":{"classes/UpdatePostDto.html":{}},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["uploadedfile",{"_index":2266,"title":{},"body":{"controllers/UsersController.html":{}}}],["uploadedfiles",{"_index":1376,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["uploadpublicfile",{"_index":1073,"title":{},"body":{"injectables/FilesService.html":{}}}],["uploadpublicfile(databuffer",{"_index":1082,"title":{},"body":{"injectables/FilesService.html":{}}}],["uploadresult",{"_index":1093,"title":{},"body":{"injectables/FilesService.html":{}}}],["uploadresult.key",{"_index":1099,"title":{},"body":{"injectables/FilesService.html":{}}}],["uploadresult.location",{"_index":1100,"title":{},"body":{"injectables/FilesService.html":{}}}],["url",{"_index":954,"title":{},"body":{"injectables/EmailConfirmationService.html":{},"injectables/FilesService.html":{},"classes/PublicFile.html":{},"modules/SubscribersModule.html":{}}}],["use",{"_index":1219,"title":{},"body":{"controllers/HealthController.html":{},"injectables/LogsMiddleware.html":{}}}],["use(request",{"_index":1327,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["used",{"_index":1230,"title":{},"body":{"controllers/HealthController.html":{}}}],["usefactory",{"_index":137,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/PostsModule.html":{},"modules/PubSubModule.html":{},"modules/SearchModule.html":{},"modules/SubscribersModule.html":{}}}],["useguards",{"_index":240,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/CategoriesController.html":{},"controllers/ChargeController.html":{},"controllers/CommentsController.html":{},"controllers/CreditCardsController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/EmailSchedulingController.html":{},"controllers/PostsController.html":{},"classes/PostsResolver.html":{},"controllers/ProductCategoriesController.html":{},"controllers/ProductsController.html":{},"controllers/SmsController.html":{},"controllers/SubscribersController.html":{},"controllers/SubscriptionsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{}}}],["useguards(emailconfirmationguard",{"_index":772,"title":{},"body":{"controllers/CreditCardsController.html":{}}}],["useguards(graphqljwtauthguard",{"_index":1607,"title":{},"body":{"classes/PostsResolver.html":{}}}],["useguards(jwtauthenticationguard",{"_index":284,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/CategoriesController.html":{},"controllers/ChargeController.html":{},"controllers/CommentsController.html":{},"controllers/CreditCardsController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/EmailSchedulingController.html":{},"controllers/ProductCategoriesController.html":{},"controllers/ProductsController.html":{},"controllers/SmsController.html":{},"controllers/SubscribersController.html":{},"controllers/SubscriptionsController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{}}}],["useguards(jwtauthenticationguard)@get",{"_index":217,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["useguards(jwtauthenticationguard)@post('log",{"_index":225,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["useguards(jwtrefreshguard",{"_index":290,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["useguards(jwtrefreshguard)@get('refresh",{"_index":229,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["useguards(jwttwofactorguard",{"_index":1522,"title":{},"body":{"controllers/PostsController.html":{}}}],["useguards(localauthenticationguard",{"_index":270,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["useinterceptors",{"_index":242,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/CategoriesController.html":{},"controllers/CommentsController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/OptimizeController.html":{},"controllers/PostsController.html":{},"controllers/ProductCategoriesController.html":{},"controllers/ProductsController.html":{},"controllers/SmsController.html":{},"controllers/SubscribersController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UsersController.html":{}}}],["useinterceptors(anyfilesinterceptor",{"_index":1388,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["useinterceptors(classserializerinterceptor",{"_index":259,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/CategoriesController.html":{},"controllers/CommentsController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/PostsController.html":{},"controllers/ProductCategoriesController.html":{},"controllers/ProductsController.html":{},"controllers/SmsController.html":{},"controllers/SubscribersController.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["useinterceptors(fileinterceptor('file",{"_index":2270,"title":{},"body":{"controllers/UsersController.html":{}}}],["useinterceptors(httpcacheinterceptor",{"_index":1514,"title":{},"body":{"controllers/PostsController.html":{}}}],["useinterceptors(httpcacheinterceptor)@cachekey(get_posts_cache_key)@cachettl(120)@get",{"_index":1497,"title":{},"body":{"controllers/PostsController.html":{}}}],["user",{"_index":34,"title":{"classes/User.html":{},"classes/User-1.html":{}},"body":{"classes/Address.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/ChatService.html":{},"classes/Comment.html":{},"controllers/CommentsController.html":{},"classes/CreateCommentCommand.html":{},"injectables/EmailConfirmationService.html":{},"injectables/EmailService.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Message.html":{},"classes/Post.html":{},"classes/Post-1.html":{},"injectables/PostsLoaders.html":{},"injectables/PostsService.html":{},"interfaces/RequestWithUser.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/User.html":{},"classes/User-1.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.address",{"_index":49,"title":{},"body":{"classes/Address.html":{}}}],["user.avatar",{"_index":2348,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.avatar?.id",{"_index":2353,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.currenthashedrefreshtoken",{"_index":2364,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.entity",{"_index":48,"title":{},"body":{"classes/Address.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["user.id",{"_index":281,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PostsLoaders.html":{},"injectables/TwoFactorAuthenticationService.html":{}}}],["user.isemailconfirmed",{"_index":964,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["user.isregisteredwithgoogle",{"_index":1179,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["user.istwofactorauthenticationenabled",{"_index":283,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["user.password",{"_index":395,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["user.twofactorauthenticationsecret",{"_index":2202,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["user@email.com",{"_index":2602,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userdata",{"_index":1181,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"injectables/UsersService.html":{}}}],["userdata.email",{"_index":2341,"title":{},"body":{"injectables/UsersService.html":{}}}],["userdata.name",{"_index":1183,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["userid",{"_index":340,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/EmailConfirmationService.html":{},"injectables/SmsService.html":{},"interfaces/TokenPayload.html":{},"injectables/UsersService.html":{}}}],["userinfoclient",{"_index":1172,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["userinfoclient.get",{"_index":1177,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["userinforesponse",{"_index":1176,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["userinforesponse.data",{"_index":1178,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["username",{"_index":863,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/SearchModule.html":{}}}],["usernamefield",{"_index":1303,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["users",{"_index":1535,"title":{},"body":{"injectables/PostsLoaders.html":{},"controllers/UsersController.html":{}}}],["users.controller",{"_index":2284,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":2265,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/models/user.model",{"_index":1467,"title":{},"body":{"classes/Post-1.html":{}}}],["users/user.entity",{"_index":596,"title":{},"body":{"injectables/ChatService.html":{},"classes/Comment.html":{},"classes/CreateCommentCommand.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/LocalStrategy.html":{},"classes/Message.html":{},"classes/Post.html":{},"injectables/PostsService.html":{},"interfaces/RequestWithUser.html":{},"injectables/TwoFactorAuthenticationService.html":{}}}],["users/users.module",{"_index":103,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/GoogleAuthenticationModule.html":{},"modules/PostsModule.html":{},"modules/SmsModule.html":{},"modules/StripeWebhookModule.html":{}}}],["users/users.service",{"_index":253,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/EmailConfirmationService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/PostsLoaders.html":{},"injectables/SmsService.html":{},"controllers/StripeWebhookController.html":{},"injectables/StripeWebhookService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{}}}],["userscontroller",{"_index":2255,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userservice",{"_index":1264,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["usersmap",{"_index":1537,"title":{},"body":{"injectables/PostsLoaders.html":{}}}],["usersmap.get(authorid",{"_index":1540,"title":{},"body":{"injectables/PostsLoaders.html":{}}}],["usersmodule",{"_index":78,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/GoogleAuthenticationModule.html":{},"modules/PostsModule.html":{},"modules/SmsModule.html":{},"modules/StripeWebhookModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersrepository",{"_index":2300,"title":{},"body":{"injectables/UsersService.html":{}}}],["usersservice",{"_index":252,"title":{"injectables/UsersService.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/EmailConfirmationService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/PostsLoaders.html":{},"injectables/SmsService.html":{},"controllers/StripeWebhookController.html":{},"injectables/StripeWebhookService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["utils/findoneparams",{"_index":450,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/PostsController.html":{}}}],["utils/getloglevels",{"_index":806,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["utils/logs.middleware",{"_index":133,"title":{},"body":{"modules/AppModule.html":{}}}],["utils/scalars/timestamp.scalar",{"_index":120,"title":{},"body":{"modules/AppModule.html":{}}}],["utils/stripeerror.enum",{"_index":1950,"title":{},"body":{"injectables/StripeService.html":{}}}],["utils/types/objectwithid.dto",{"_index":736,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["utils/types/paginationparams",{"_index":1508,"title":{},"body":{"controllers/PostsController.html":{}}}],["uuid",{"_index":1091,"title":{},"body":{"injectables/FilesService.html":{},"dependencies.html":{}}}],["v4",{"_index":1090,"title":{},"body":{"injectables/FilesService.html":{}}}],["validate",{"_index":1263,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["validate(email",{"_index":1299,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validate(payload",{"_index":1282,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["validate(request",{"_index":1266,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["validatenested",{"_index":679,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/CreateProductDto.html":{}}}],["validatenested()@type(undefined",{"_index":677,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/CreateProductDto.html":{}}}],["validationschema",{"_index":155,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":21,"title":{},"body":{"classes/AddCreditCardDto.html":{},"classes/CheckVerificationCodeDto.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateProductCategoryDto.html":{},"classes/CreateProductDto.html":{},"classes/EmailScheduleDto.html":{},"classes/FindOneParams.html":{},"classes/GetCommentsDto.html":{},"classes/LogInDto.html":{},"classes/ObjectWithIdDto.html":{},"classes/PaginationParams.html":{},"classes/RegisterDto.html":{},"classes/SetDefaultCreditCardDto.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"dependencies.html":{}}}],["value",{"_index":339,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/DatabaseLogger.html":{},"injectables/LogsMiddleware.html":{},"interfaces/PostSearchResult.html":{},"injectables/PostsLoaders.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"classes/Timestamp.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["value.gettime",{"_index":2143,"title":{},"body":{"classes/Timestamp.html":{}}}],["valuenode",{"_index":2132,"title":{},"body":{"classes/Timestamp.html":{}}}],["valuenode.kind",{"_index":2146,"title":{},"body":{"classes/Timestamp.html":{}}}],["variable",{"_index":2377,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":2589,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verbose",{"_index":785,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["verbose(message",{"_index":799,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["verification",{"_index":1849,"title":{},"body":{"controllers/SmsController.html":{}}}],["verification')@useguards(jwtauthenticationguard",{"_index":1854,"title":{},"body":{"controllers/SmsController.html":{}}}],["verificationchecks",{"_index":1900,"title":{},"body":{"injectables/SmsService.html":{}}}],["verificationcode",{"_index":1880,"title":{},"body":{"injectables/SmsService.html":{}}}],["verificationdata",{"_index":1847,"title":{},"body":{"controllers/SmsController.html":{}}}],["verificationdata.code",{"_index":1867,"title":{},"body":{"controllers/SmsController.html":{}}}],["verifications",{"_index":1897,"title":{},"body":{"injectables/SmsService.html":{}}}],["verificationtokenpayload",{"_index":949,"title":{"interfaces/VerificationTokenPayload.html":{}},"body":{"injectables/EmailConfirmationService.html":{},"interfaces/VerificationTokenPayload.html":{},"coverage.html":{}}}],["verificationtokenpayload.interface",{"_index":950,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["verifypassword",{"_index":327,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["verifypassword(plaintextpassword",{"_index":347,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["void",{"_index":93,"title":{},"body":{"modules/AppModule.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"injectables/EmailSchedulingService.html":{},"injectables/LogsMiddleware.html":{},"controllers/SubscribersController.html":{}}}],["warn",{"_index":786,"title":{},"body":{"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{}}}],["warn(message",{"_index":801,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["watch",{"_index":2548,"title":{},"body":{"index.html":{}}}],["webhook",{"_index":1988,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["webhooksecret",{"_index":1957,"title":{},"body":{"injectables/StripeService.html":{}}}],["website",{"_index":2575,"title":{},"body":{"index.html":{}}}],["websocketgateway",{"_index":562,"title":{},"body":{"classes/ChatGateway.html":{}}}],["websocketserver",{"_index":548,"title":{},"body":{"classes/ChatGateway.html":{}}}],["welcome",{"_index":957,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["went",{"_index":375,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["where.id",{"_index":1699,"title":{},"body":{"injectables/PostsService.html":{}}}],["wrong",{"_index":376,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["wsexception",{"_index":595,"title":{},"body":{"injectables/ChatService.html":{}}}],["wsexception('invalid",{"_index":606,"title":{},"body":{"injectables/ChatService.html":{}}}],["yes",{"_index":793,"title":{},"body":{"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"classes/GetCommentsQuery.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{}}}],["you'd",{"_index":2568,"title":{},"body":{"index.html":{}}}],["zip",{"_index":2422,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":79,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/CategoriesModule.html":{},"modules/ChargeModule.html":{},"modules/ChatModule.html":{},"modules/CreditCardsModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"modules/FilesModule.html":{},"modules/GoogleAuthenticationModule.html":{},"modules/HealthModule.html":{},"modules/LoggerModule.html":{},"modules/PostsModule.html":{},"modules/ProductCategoriesModule.html":{},"modules/ProductsModule.html":{},"modules/SmsModule.html":{},"modules/StripeModule.html":{},"modules/StripeWebhookModule.html":{},"modules/SubscriptionsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AddCreditCardDto.html":{"url":"classes/AddCreditCardDto.html","title":"class - AddCreditCardDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddCreditCardDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/credit-cards/dto/addCreditCardDto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                paymentMethodId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        paymentMethodId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/credit-cards/dto/addCreditCardDto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty } from 'class-validator';\n\nexport class AddCreditCardDto {\n  @IsString()\n  @IsNotEmpty()\n  paymentMethodId: string;\n}\n\nexport default AddCreditCardDto;\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Address.html":{"url":"classes/Address.html","title":"class - Address","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Address\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/address.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                city\n                            \n                            \n                                    Public\n                                country\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                street\n                            \n                            \n                                    Public\n                                    Optional\n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        city\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/address.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        country\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/address.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/address.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        street\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/address.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/address.entity.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Column, Entity, OneToOne, PrimaryGeneratedColumn } from 'typeorm';\nimport User from './user.entity';\n\n@Entity()\nclass Address {\n  @PrimaryGeneratedColumn()\n  public id: number;\n\n  @Column()\n  public street: string;\n\n  @Column()\n  public city: string;\n\n  @Column()\n  public country: string;\n\n  @OneToOne(() => User, (user: User) => user.address)\n  public user?: User;\n}\n\nexport default Address;\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthenticationModule\n\nAuthenticationModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthenticationModule->AppModule\n\n\n\n\n\nCategoriesModule\n\nCategoriesModule\n\nAppModule -->\n\nCategoriesModule->AppModule\n\n\n\n\n\nChargeModule\n\nChargeModule\n\nAppModule -->\n\nChargeModule->AppModule\n\n\n\n\n\nChatModule\n\nChatModule\n\nAppModule -->\n\nChatModule->AppModule\n\n\n\n\n\nCommentsModule\n\nCommentsModule\n\nAppModule -->\n\nCommentsModule->AppModule\n\n\n\n\n\nCreditCardsModule\n\nCreditCardsModule\n\nAppModule -->\n\nCreditCardsModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nEmailConfirmationModule\n\nEmailConfirmationModule\n\nAppModule -->\n\nEmailConfirmationModule->AppModule\n\n\n\n\n\nEmailSchedulingModule\n\nEmailSchedulingModule\n\nAppModule -->\n\nEmailSchedulingModule->AppModule\n\n\n\n\n\nGoogleAuthenticationModule\n\nGoogleAuthenticationModule\n\nAppModule -->\n\nGoogleAuthenticationModule->AppModule\n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\n\n\nLoggerModule\n\nLoggerModule\n\nAppModule -->\n\nLoggerModule->AppModule\n\n\n\n\n\nOptimizeModule\n\nOptimizeModule\n\nAppModule -->\n\nOptimizeModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nProductCategoriesModule\n\nProductCategoriesModule\n\nAppModule -->\n\nProductCategoriesModule->AppModule\n\n\n\n\n\nProductsModule\n\nProductsModule\n\nAppModule -->\n\nProductsModule->AppModule\n\n\n\n\n\nPubSubModule\n\nPubSubModule\n\nAppModule -->\n\nPubSubModule->AppModule\n\n\n\n\n\nSearchModule\n\nSearchModule\n\nAppModule -->\n\nSearchModule->AppModule\n\n\n\n\n\nSmsModule\n\nSmsModule\n\nAppModule -->\n\nSmsModule->AppModule\n\n\n\n\n\nStripeWebhookModule\n\nStripeWebhookModule\n\nAppModule -->\n\nStripeWebhookModule->AppModule\n\n\n\n\n\nSubscribersModule\n\nSubscribersModule\n\nAppModule -->\n\nSubscribersModule->AppModule\n\n\n\n\n\nSubscriptionsModule\n\nSubscriptionsModule\n\nAppModule -->\n\nSubscriptionsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthenticationModule\n                        \n                        \n                            CategoriesModule\n                        \n                        \n                            ChargeModule\n                        \n                        \n                            ChatModule\n                        \n                        \n                            CommentsModule\n                        \n                        \n                            CreditCardsModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            EmailConfirmationModule\n                        \n                        \n                            EmailSchedulingModule\n                        \n                        \n                            GoogleAuthenticationModule\n                        \n                        \n                            HealthModule\n                        \n                        \n                            LoggerModule\n                        \n                        \n                            OptimizeModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            ProductCategoriesModule\n                        \n                        \n                            ProductsModule\n                        \n                        \n                            PubSubModule\n                        \n                        \n                            SearchModule\n                        \n                        \n                            SmsModule\n                        \n                        \n                            StripeWebhookModule\n                        \n                        \n                            SubscribersModule\n                        \n                        \n                            SubscriptionsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: MiddlewareConsumer)\n                \n            \n\n\n            \n                \n                    Defined in src/app.module.ts:131\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                            MiddlewareConsumer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { MiddlewareConsumer, Module } from '@nestjs/common';\nimport { PostsModule } from './posts/posts.module';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport * as Joi from '@hapi/joi';\nimport { DatabaseModule } from './database/database.module';\nimport { AuthenticationModule } from './authentication/authentication.module';\nimport { UsersModule } from './users/users.module';\nimport { CategoriesModule } from './categories/categories.module';\nimport { SearchModule } from './search/search.module';\nimport { SubscribersModule } from './subscribers/subscribers.module';\nimport { CommentsModule } from './comments/comments.module';\nimport { ProductCategoriesModule } from './productCategories/productCategories.module';\nimport { ProductsModule } from './products/products.module';\nimport { ScheduleModule } from '@nestjs/schedule';\nimport { EmailSchedulingModule } from './emailScheduling/emailScheduling.module';\nimport { ChatModule } from './chat/chat.module';\nimport { GraphQLModule } from '@nestjs/graphql';\nimport { join } from 'path';\nimport { PubSubModule } from './pubSub/pubSub.module';\nimport { Timestamp } from './utils/scalars/timestamp.scalar';\nimport { OptimizeModule } from './optimize/optimize.module';\nimport { BullModule } from '@nestjs/bull';\nimport { ChargeModule } from './charge/charge.module';\nimport { CreditCardsModule } from './credit-cards/creditCards.module';\nimport { SubscriptionsModule } from './subscriptions/subscriptions.module';\nimport { StripeWebhookModule } from './stripeWebhook/stripeWebhook.module';\nimport { EmailConfirmationModule } from './emailConfirmation/emailConfirmation.module';\nimport { SmsModule } from './sms/sms.module';\nimport { GoogleAuthenticationModule } from './googleAuthentication/googleAuthentication.module';\nimport LogsMiddleware from './utils/logs.middleware';\nimport { LoggerModule } from './logger/logger.module';\nimport HealthModule from './health/health.module';\n\n@Module({\n  imports: [\n    BullModule.forRootAsync({\n      imports: [ConfigModule],\n      useFactory: async (configService: ConfigService) => ({\n        redis: {\n          host: configService.get('REDIS_HOST'),\n          port: Number(configService.get('REDIS_PORT')),\n        },\n      }),\n      inject: [ConfigService],\n    }),\n    GraphQLModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (\n        configService: ConfigService,\n      ) => ({\n        playground: Boolean(configService.get('GRAPHQL_PLAYGROUND')),\n        autoSchemaFile: join(process.cwd(), 'src/schema.gql'),\n        installSubscriptionHandlers: true\n      })\n    }),\n    ScheduleModule.forRoot(),\n    PostsModule,\n    ConfigModule.forRoot({\n      validationSchema: Joi.object({\n        POSTGRES_HOST: Joi.string().required(),\n        POSTGRES_PORT: Joi.number().required(),\n        POSTGRES_USER: Joi.string().required(),\n        POSTGRES_PASSWORD: Joi.string().required(),\n        POSTGRES_DB: Joi.string().required(),\n        JWT_ACCESS_TOKEN_SECRET: Joi.string().required(),\n        JWT_ACCESS_TOKEN_EXPIRATION_TIME: Joi.string().required(),\n        JWT_REFRESH_TOKEN_SECRET: Joi.string().required(),\n        JWT_REFRESH_TOKEN_EXPIRATION_TIME: Joi.string().required(),\n        AWS_REGION: Joi.string().required(),\n        AWS_ACCESS_KEY_ID: Joi.string().required(),\n        AWS_SECRET_ACCESS_KEY: Joi.string().required(),\n        AWS_PUBLIC_BUCKET_NAME: Joi.string().required(),\n        PORT: Joi.number(),\n        ELASTICSEARCH_NODE: Joi.string(),\n        ELASTICSEARCH_USERNAME: Joi.string(),\n        ELASTICSEARCH_PASSWORD: Joi.string(),\n        SUBSCRIBERS_SERVICE_HOST: Joi.string(),\n        SUBSCRIBERS_SERVICE_PORT: Joi.string(),\n        GRPC_CONNECTION_URL: Joi.string(),\n        REDIS_HOST: Joi.string().required(),\n        REDIS_PORT: Joi.number().required(),\n        EMAIL_SERVICE: Joi.string().required(),\n        EMAIL_USER: Joi.string().required(),\n        EMAIL_PASSWORD: Joi.string().required(),\n        GRAPHQL_PLAYGROUND: Joi.number(),\n        TWO_FACTOR_AUTHENTICATION_APP_NAME: Joi.string(),\n        STRIPE_SECRET_KEY: Joi.string(),\n        STRIPE_CURRENCY: Joi.string(),\n        FRONTEND_URL: Joi.string(),\n        MONTHLY_SUBSCRIPTION_PRICE_ID: Joi.string(),\n        STRIPE_WEBHOOK_SECRET: Joi.string(),\n        JWT_VERIFICATION_TOKEN_SECRET: Joi.string().required(),\n        JWT_VERIFICATION_TOKEN_EXPIRATION_TIME: Joi.string().required(),\n        EMAIL_CONFIRMATION_URL: Joi.string().required(),\n        TWILIO_ACCOUNT_SID: Joi.string().required(),\n        TWILIO_AUTH_TOKEN: Joi.string().required(),\n        TWILIO_VERIFICATION_SERVICE_SID: Joi.string().required(),\n        TWILIO_SENDER_PHONE_NUMBER: Joi.string().required(),\n        GOOGLE_AUTH_CLIENT_ID: Joi.string().required(),\n        GOOGLE_AUTH_CLIENT_SECRET: Joi.string().required(),\n      })\n    }),\n    DatabaseModule,\n    AuthenticationModule,\n    UsersModule,\n    CategoriesModule,\n    SearchModule,\n    SubscribersModule,\n    CommentsModule,\n    ProductCategoriesModule,\n    ProductsModule,\n    EmailSchedulingModule,\n    ChatModule,\n    PubSubModule,\n    OptimizeModule,\n    ChargeModule,\n    CreditCardsModule,\n    SubscriptionsModule,\n    StripeWebhookModule,\n    EmailConfirmationModule,\n    SmsModule,\n    GoogleAuthenticationModule,\n    LoggerModule,\n    HealthModule\n  ],\n  controllers: [],\n  providers: [Timestamp],\n})\nexport class AppModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer\n      .apply(LogsMiddleware)\n      .forRoutes('*');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthenticationController.html":{"url":"controllers/AuthenticationController.html","title":"controller - AuthenticationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthenticationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/authentication.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                authentication\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                authenticate\n                            \n                            \n                                    Async\n                                logIn\n                            \n                            \n                                    Async\n                                logOut\n                            \n                            \n                                refresh\n                            \n                            \n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        authenticate\n                        \n                    \n                \n            \n            \n                \nauthenticate(request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthenticationGuard)@Get()\n                \n            \n\n            \n                \n                    Defined in src/authentication/authentication.controller.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logIn\n                        \n                    \n                \n            \n            \n                \n                    \n                    logIn(request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(200)@UseGuards(LocalAuthenticationGuard)@Post('log-in')\n                \n            \n\n            \n                \n                    Defined in src/authentication/authentication.controller.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logOut\n                        \n                    \n                \n            \n            \n                \n                    \n                    logOut(request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthenticationGuard)@Post('log-out')@HttpCode(200)\n                \n            \n\n            \n                \n                    Defined in src/authentication/authentication.controller.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refresh\n                        \n                    \n                \n            \n            \n                \nrefresh(request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtRefreshGuard)@Get('refresh')\n                \n            \n\n            \n                \n                    Defined in src/authentication/authentication.controller.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(registrationData: RegisterDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('register')\n                \n            \n\n            \n                \n                    Defined in src/authentication/authentication.controller.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    registrationData\n                                    \n                                                RegisterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Req,\n  Controller,\n  HttpCode,\n  Post,\n  UseGuards,\n  Get, ClassSerializerInterceptor, UseInterceptors,\n} from '@nestjs/common';\nimport { AuthenticationService } from './authentication.service';\nimport RegisterDto from './dto/register.dto';\nimport RequestWithUser from './requestWithUser.interface';\nimport { LocalAuthenticationGuard } from './localAuthentication.guard';\nimport JwtAuthenticationGuard from './jwt-authentication.guard';\nimport { UsersService } from '../users/users.service';\nimport JwtRefreshGuard from './jwt-refresh.guard';\nimport { EmailConfirmationService } from '../emailConfirmation/emailConfirmation.service';\n\n@Controller('authentication')\n@UseInterceptors(ClassSerializerInterceptor)\nexport class AuthenticationController {\n  constructor(\n    private readonly authenticationService: AuthenticationService,\n    private readonly usersService: UsersService,\n    private readonly emailConfirmationService: EmailConfirmationService\n  ) {}\n\n  @Post('register')\n  async register(@Body() registrationData: RegisterDto) {\n    const user = await this.authenticationService.register(registrationData);\n    await this.emailConfirmationService.sendVerificationLink(registrationData.email);\n    return user;\n  }\n\n  @HttpCode(200)\n  @UseGuards(LocalAuthenticationGuard)\n  @Post('log-in')\n  async logIn(@Req() request: RequestWithUser) {\n    const { user } = request;\n    const accessTokenCookie = this.authenticationService.getCookieWithJwtAccessToken(user.id);\n    const {\n      cookie: refreshTokenCookie,\n      token: refreshToken\n    } = this.authenticationService.getCookieWithJwtRefreshToken(user.id);\n\n    await this.usersService.setCurrentRefreshToken(refreshToken, user.id);\n\n    request.res.setHeader('Set-Cookie', [accessTokenCookie, refreshTokenCookie]);\n\n    if (user.isTwoFactorAuthenticationEnabled) {\n      return;\n    }\n\n    return user;\n  }\n\n  @UseGuards(JwtAuthenticationGuard)\n  @Post('log-out')\n  @HttpCode(200)\n  async logOut(@Req() request: RequestWithUser) {\n    await this.usersService.removeRefreshToken(request.user.id);\n    request.res.setHeader('Set-Cookie', this.authenticationService.getCookiesForLogOut());\n  }\n\n  @UseGuards(JwtAuthenticationGuard)\n  @Get()\n  authenticate(@Req() request: RequestWithUser) {\n    return request.user;\n  }\n\n  @UseGuards(JwtRefreshGuard)\n  @Get('refresh')\n  refresh(@Req() request: RequestWithUser) {\n    const accessTokenCookie = this.authenticationService.getCookieWithJwtAccessToken(request.user.id);\n\n    request.res.setHeader('Set-Cookie', accessTokenCookie);\n    return request.user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthenticationModule.html":{"url":"modules/AuthenticationModule.html","title":"module - AuthenticationModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthenticationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthenticationModule\n\n\n\ncluster_AuthenticationModule_exports\n\n\n\ncluster_AuthenticationModule_imports\n\n\n\ncluster_AuthenticationModule_providers\n\n\n\n\nEmailConfirmationModule\n\nEmailConfirmationModule\n\n\n\nAuthenticationModule\n\nAuthenticationModule\n\nAuthenticationModule -->\n\nEmailConfirmationModule->AuthenticationModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthenticationModule -->\n\nUsersModule->AuthenticationModule\n\n\n\n\n\nAuthenticationService \n\nAuthenticationService \n\nAuthenticationService  -->\n\nAuthenticationModule->AuthenticationService \n\n\n\n\n\nAuthenticationService\n\nAuthenticationService\n\nAuthenticationModule -->\n\nAuthenticationService->AuthenticationModule\n\n\n\n\n\nJwtRefreshTokenStrategy\n\nJwtRefreshTokenStrategy\n\nAuthenticationModule -->\n\nJwtRefreshTokenStrategy->AuthenticationModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthenticationModule -->\n\nJwtStrategy->AuthenticationModule\n\n\n\n\n\nJwtTwoFactorStrategy\n\nJwtTwoFactorStrategy\n\nAuthenticationModule -->\n\nJwtTwoFactorStrategy->AuthenticationModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthenticationModule -->\n\nLocalStrategy->AuthenticationModule\n\n\n\n\n\nTwoFactorAuthenticationService\n\nTwoFactorAuthenticationService\n\nAuthenticationModule -->\n\nTwoFactorAuthenticationService->AuthenticationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/authentication/authentication.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthenticationService\n                        \n                        \n                            JwtRefreshTokenStrategy\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            JwtTwoFactorStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                        \n                            TwoFactorAuthenticationService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthenticationController\n                        \n                        \n                            TwoFactorAuthenticationController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            EmailConfirmationModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthenticationService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthenticationService } from './authentication.service';\nimport { UsersModule } from '../users/users.module';\nimport { AuthenticationController } from './authentication.controller';\nimport { PassportModule } from '@nestjs/passport';\nimport { LocalStrategy } from './local.strategy';\nimport { JwtModule } from '@nestjs/jwt';\nimport { ConfigModule } from '@nestjs/config';\nimport { JwtStrategy } from './jwt.strategy';\nimport { JwtRefreshTokenStrategy } from './jwt-refresh-token.strategy';\nimport { TwoFactorAuthenticationController } from './twoFactor/twoFactorAuthentication.controller';\nimport { TwoFactorAuthenticationService } from './twoFactor/twoFactorAuthentication.service';\nimport { JwtTwoFactorStrategy } from './jwt-two-factor.strategy';\nimport { EmailConfirmationModule } from '../emailConfirmation/emailConfirmation.module';\n\n@Module({\n  imports: [\n    UsersModule,\n    PassportModule,\n    ConfigModule,\n    JwtModule.register({}),\n    EmailConfirmationModule\n  ],\n  providers: [AuthenticationService, LocalStrategy, JwtStrategy, JwtRefreshTokenStrategy, TwoFactorAuthenticationService, JwtTwoFactorStrategy],\n  controllers: [AuthenticationController, TwoFactorAuthenticationController],\n  exports: [AuthenticationService]\n})\nexport class AuthenticationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthenticationService.html":{"url":"injectables/AuthenticationService.html","title":"injectable - AuthenticationService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthenticationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/authentication.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                getAuthenticatedUser\n                            \n                            \n                                    Public\n                                getCookiesForLogOut\n                            \n                            \n                                    Public\n                                getCookieWithJwtAccessToken\n                            \n                            \n                                    Public\n                                getCookieWithJwtRefreshToken\n                            \n                            \n                                    Public\n                                    Async\n                                getUserFromAuthenticationToken\n                            \n                            \n                                    Public\n                                    Async\n                                register\n                            \n                            \n                                    Private\n                                    Async\n                                verifyPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, jwtService: JwtService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/authentication/authentication.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getAuthenticatedUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAuthenticatedUser(email: string, plainTextPassword: string)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    plainTextPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getCookiesForLogOut\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCookiesForLogOut()\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getCookieWithJwtAccessToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCookieWithJwtAccessToken(userId: number, isSecondFactorAuthenticated)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    isSecondFactorAuthenticated\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getCookieWithJwtRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCookieWithJwtRefreshToken(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { cookie: string; token: any; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getUserFromAuthenticationToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserFromAuthenticationToken(token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:84\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(registrationData: RegisterDto)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    registrationData\n                                    \n                                                RegisterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        verifyPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    verifyPassword(plainTextPassword: string, hashedPassword: string)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    plainTextPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    hashedPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { UsersService } from '../users/users.service';\nimport RegisterDto from './dto/register.dto';\nimport * as bcrypt from 'bcrypt';\nimport PostgresErrorCode from '../database/postgresErrorCode.enum';\nimport { JwtService } from '@nestjs/jwt';\nimport { ConfigService } from '@nestjs/config';\nimport TokenPayload from './tokenPayload.interface';\n\n@Injectable()\nexport class AuthenticationService {\n  constructor(\n    private readonly usersService: UsersService,\n    private readonly jwtService: JwtService,\n    private readonly configService: ConfigService\n  ) {}\n\n  public async register(registrationData: RegisterDto) {\n    const hashedPassword = await bcrypt.hash(registrationData.password, 10);\n    try {\n      const createdUser = await this.usersService.create({\n        ...registrationData,\n        password: hashedPassword\n      });\n      createdUser.password = undefined;\n      return createdUser;\n    } catch (error) {\n      if (error?.code === PostgresErrorCode.UniqueViolation) {\n        throw new HttpException('User with that email already exists', HttpStatus.BAD_REQUEST);\n      }\n      throw new HttpException('Something went wrong', HttpStatus.INTERNAL_SERVER_ERROR);\n    }\n  }\n\n  public getCookieWithJwtAccessToken(userId: number, isSecondFactorAuthenticated = false) {\n    const payload: TokenPayload = { userId, isSecondFactorAuthenticated };\n    const token = this.jwtService.sign(payload, {\n      secret: this.configService.get('JWT_ACCESS_TOKEN_SECRET'),\n      expiresIn: `${this.configService.get('JWT_ACCESS_TOKEN_EXPIRATION_TIME')}s`\n    });\n    return `Authentication=${token}; HttpOnly; Path=/; Max-Age=${this.configService.get('JWT_ACCESS_TOKEN_EXPIRATION_TIME')}`;\n  }\n\n  public getCookieWithJwtRefreshToken(userId: number) {\n    const payload: TokenPayload = { userId };\n    const token = this.jwtService.sign(payload, {\n      secret: this.configService.get('JWT_REFRESH_TOKEN_SECRET'),\n      expiresIn: `${this.configService.get('JWT_REFRESH_TOKEN_EXPIRATION_TIME')}s`\n    });\n    const cookie = `Refresh=${token}; HttpOnly; Path=/; Max-Age=${this.configService.get('JWT_REFRESH_TOKEN_EXPIRATION_TIME')}`;\n    return {\n      cookie,\n      token\n    }\n  }\n\n  public getCookiesForLogOut() {\n    return [\n      'Authentication=; HttpOnly; Path=/; Max-Age=0',\n      'Refresh=; HttpOnly; Path=/; Max-Age=0'\n    ];\n  }\n\n  public async getAuthenticatedUser(email: string, plainTextPassword: string) {\n    try {\n      const user = await this.usersService.getByEmail(email);\n      await this.verifyPassword(plainTextPassword, user.password);\n      return user;\n    } catch (error) {\n      throw new HttpException('Wrong credentials provided', HttpStatus.BAD_REQUEST);\n    }\n  }\n\n  private async verifyPassword(plainTextPassword: string, hashedPassword: string) {\n    const isPasswordMatching = await bcrypt.compare(\n      plainTextPassword,\n      hashedPassword\n    );\n    if (!isPasswordMatching) {\n      throw new HttpException('Wrong credentials provided', HttpStatus.BAD_REQUEST);\n    }\n  }\n\n  public async getUserFromAuthenticationToken(token: string) {\n    const payload: TokenPayload = this.jwtService.verify(token, {\n      secret: this.configService.get('JWT_ACCESS_TOKEN_SECRET')\n    });\n    if (payload.userId) {\n      return this.usersService.getById(payload.userId);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BookProperties.html":{"url":"interfaces/BookProperties.html","title":"interface - BookProperties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  BookProperties\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/types/bookProperties.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            authors\n                                        \n                                \n                                \n                                        \n                                            publicationYear\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        authors\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        authors:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        publicationYear\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        publicationYear:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface BookProperties {\n  authors: string[];\n  publicationYear: string;\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CarProperties.html":{"url":"interfaces/CarProperties.html","title":"interface - CarProperties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CarProperties\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/types/carProperties.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            brand\n                                        \n                                \n                                \n                                        \n                                            engine\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        brand\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        brand:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        engine\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        engine:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface CarProperties {\n  brand: string;\n  engine: {\n    fuel: string;\n    numberOfCylinders: number;\n  }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CategoriesController.html":{"url":"controllers/CategoriesController.html","title":"controller - CategoriesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CategoriesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/categories/categories.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                categories\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createCategory\n                            \n                            \n                                    Async\n                                deleteCategory\n                            \n                            \n                                getAllCategories\n                            \n                            \n                                getCategoryById\n                            \n                            \n                                    Async\n                                updateCategory\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createCategory\n                        \n                    \n                \n            \n            \n                \n                    \n                    createCategory(category: CreateCategoryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/categories/categories.controller.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    category\n                                    \n                                                CreateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteCategory\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteCategory(undefined: FindOneParams)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/categories/categories.controller.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                FindOneParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllCategories\n                        \n                    \n                \n            \n            \n                \ngetAllCategories()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/categories/categories.controller.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCategoryById\n                        \n                    \n                \n            \n            \n                \ngetCategoryById(undefined: FindOneParams)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/categories/categories.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                FindOneParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateCategory\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateCategory(undefined: FindOneParams, category: UpdateCategoryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/categories/categories.controller.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                FindOneParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    category\n                                    \n                                                UpdateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Patch,\n  UseGuards,\n  UseInterceptors,\n  ClassSerializerInterceptor, Post,\n} from '@nestjs/common';\nimport CategoriesService from './categories.service';\nimport CreateCategoryDto from './dto/createCategory.dto';\nimport UpdateCategoryDto from './dto/updateCategory.dto';\nimport JwtAuthenticationGuard from '../authentication/jwt-authentication.guard';\nimport FindOneParams from '../utils/findOneParams';\n\n@Controller('categories')\n@UseInterceptors(ClassSerializerInterceptor)\nexport default class CategoriesController {\n  constructor(\n    private readonly categoriesService: CategoriesService\n  ) {}\n\n  @Get()\n  getAllCategories() {\n    return this.categoriesService.getAllCategories();\n  }\n\n  @Get(':id')\n  getCategoryById(@Param() { id }: FindOneParams) {\n    return this.categoriesService.getCategoryById(Number(id));\n  }\n\n  @Post()\n  @UseGuards(JwtAuthenticationGuard)\n  async createCategory(@Body() category: CreateCategoryDto) {\n    return this.categoriesService.createCategory(category);\n  }\n\n  @Patch(':id')\n  async updateCategory(@Param() { id }: FindOneParams, @Body() category: UpdateCategoryDto) {\n    return this.categoriesService.updateCategory(Number(id), category);\n  }\n\n  @Delete(':id')\n  async deleteCategory(@Param() { id }: FindOneParams) {\n    return this.categoriesService.deleteCategory(Number(id));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CategoriesModule.html":{"url":"modules/CategoriesModule.html","title":"module - CategoriesModule","body":"\n                   \n\n\n\n\n    Modules\n    CategoriesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_CategoriesModule\n\n\n\ncluster_CategoriesModule_providers\n\n\n\n\nCategoriesService\n\nCategoriesService\n\n\n\nCategoriesModule\n\nCategoriesModule\n\nCategoriesModule -->\n\nCategoriesService->CategoriesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/categories/categories.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CategoriesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CategoriesController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport CategoriesController from './categories.controller';\nimport CategoriesService from './categories.service';\nimport Category from './category.entity';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Category])],\n  controllers: [CategoriesController],\n  providers: [CategoriesService],\n})\nexport class CategoriesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CategoriesService.html":{"url":"injectables/CategoriesService.html","title":"injectable - CategoriesService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  CategoriesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/categories/categories.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createCategory\n                            \n                            \n                                    Async\n                                deleteCategory\n                            \n                            \n                                getAllCategories\n                            \n                            \n                                    Async\n                                getCategoryById\n                            \n                            \n                                    Async\n                                updateCategory\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(categoriesRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/categories/categories.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        categoriesRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createCategory\n                        \n                    \n                \n            \n            \n                \n                    \n                    createCategory(category: CreateCategoryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/categories/categories.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    category\n                                    \n                                                CreateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteCategory\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteCategory(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/categories/categories.service.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllCategories\n                        \n                    \n                \n            \n            \n                \ngetAllCategories()\n                \n            \n\n\n            \n                \n                    Defined in src/categories/categories.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getCategoryById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCategoryById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/categories/categories.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateCategory\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateCategory(id: number, category: UpdateCategoryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/categories/categories.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    category\n                                    \n                                                UpdateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport CreateCategoryDto from './dto/createCategory.dto';\nimport Category from './category.entity';\nimport UpdateCategoryDto from './dto/updateCategory.dto';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport CategoryNotFoundException from './exceptions/categoryNotFound.exception';\n\n@Injectable()\nexport default class CategoriesService {\n  constructor(\n    @InjectRepository(Category)\n    private categoriesRepository: Repository\n  ) {}\n\n  getAllCategories() {\n    return this.categoriesRepository.find({ relations: ['posts'] });\n  }\n\n  async getCategoryById(id: number) {\n    const category = await this.categoriesRepository.findOne(id, { relations: ['posts'] });\n    if (category) {\n      return category;\n    }\n    throw new CategoryNotFoundException(id);\n  }\n\n  async createCategory(category: CreateCategoryDto) {\n    const newCategory = await this.categoriesRepository.create(category);\n    await this.categoriesRepository.save(newCategory);\n    return newCategory;\n  }\n\n  async updateCategory(id: number, category: UpdateCategoryDto) {\n    await this.categoriesRepository.update(id, category);\n    const updatedCategory = await this.categoriesRepository.findOne(id, { relations: ['posts'] });\n    if (updatedCategory) {\n      return updatedCategory\n    }\n    throw new CategoryNotFoundException(id);\n  }\n\n  async deleteCategory(id: number) {\n    const deleteResponse = await this.categoriesRepository.delete(id);\n    if (!deleteResponse.affected) {\n      throw new CategoryNotFoundException(id);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Category.html":{"url":"classes/Category.html","title":"class - Category","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Category\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/categories/category.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                posts\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/category.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/category.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/category.entity.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Column, Entity, ManyToMany, PrimaryGeneratedColumn } from 'typeorm';\nimport Post from '../posts/post.entity';\n\n@Entity()\nclass Category {\n  @PrimaryGeneratedColumn()\n  public id: number;\n\n  @Column()\n  public name: string;\n\n  @ManyToMany(() => Post, (post: Post) => post.categories)\n  public posts: Post[];\n}\n\nexport default Category;\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CategoryNotFoundException.html":{"url":"classes/CategoryNotFoundException.html","title":"class - CategoryNotFoundException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CategoryNotFoundException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/categories/exceptions/categoryNotFound.exception.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    NotFoundException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(postId: number)\n                    \n                \n                        \n                            \n                                Defined in src/categories/exceptions/categoryNotFound.exception.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        postId\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { NotFoundException } from '@nestjs/common';\n\nclass CategoryNotFoundException extends NotFoundException {\n  constructor(postId: number) {\n    super(`Category with id ${postId} not found`);\n  }\n}\n\nexport default CategoryNotFoundException;\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ChargeController.html":{"url":"controllers/ChargeController.html","title":"controller - ChargeController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ChargeController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/charge/charge.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                charge\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createCharge\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createCharge\n                        \n                    \n                \n            \n            \n                \n                    \n                    createCharge(charge: CreateChargeDto, request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/charge/charge.controller.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    charge\n                                    \n                                                CreateChargeDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post, Req, UseGuards } from '@nestjs/common';\nimport JwtAuthenticationGuard from '../authentication/jwt-authentication.guard';\nimport CreateChargeDto from './dto/createCharge.dto';\nimport RequestWithUser from '../authentication/requestWithUser.interface';\nimport StripeService from '../stripe/stripe.service';\n\n@Controller('charge')\nexport default class ChargeController {\n  constructor(\n    private readonly stripeService: StripeService\n  ) {}\n\n  @Post()\n  @UseGuards(JwtAuthenticationGuard)\n  async createCharge(@Body() charge: CreateChargeDto, @Req() request: RequestWithUser) {\n    return this.stripeService.charge(charge.amount, charge.paymentMethodId, request.user.stripeCustomerId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ChargeModule.html":{"url":"modules/ChargeModule.html","title":"module - ChargeModule","body":"\n                   \n\n\n\n\n    Modules\n    ChargeModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ChargeModule\n\n\n\ncluster_ChargeModule_imports\n\n\n\n\nStripeModule\n\nStripeModule\n\n\n\nChargeModule\n\nChargeModule\n\nChargeModule -->\n\nStripeModule->ChargeModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/charge/charge.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            ChargeController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            StripeModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { StripeModule } from '../stripe/stripe.module';\nimport ChargeController from './charge.controller';\n\n@Module({\n  imports: [StripeModule],\n  controllers: [ChargeController],\n  providers: [],\n})\nexport class ChargeModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ChatGateway.html":{"url":"classes/ChatGateway.html","title":"class - ChatGateway","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ChatGateway\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/chat/chat.gateway.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        OnGatewayConnection\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                server\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                handleConnection\n                            \n                            \n                                    Async\n                                listenForMessages\n                            \n                            \n                                    Async\n                                requestAllMessages\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(chatService: ChatService)\n                    \n                \n                        \n                            \n                                Defined in src/chat/chat.gateway.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        chatService\n                                                  \n                                                        \n                                                                        ChatService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        server\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Server\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @WebSocketServer()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/chat/chat.gateway.ts:14\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        handleConnection\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleConnection(socket: Socket)\n                \n            \n\n\n            \n                \n                    Defined in src/chat/chat.gateway.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    socket\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        listenForMessages\n                        \n                    \n                \n            \n            \n                \n                    \n                    listenForMessages(content: string, socket: Socket)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('send_message')\n                \n            \n\n            \n                \n                    Defined in src/chat/chat.gateway.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    content\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    socket\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        requestAllMessages\n                        \n                    \n                \n            \n            \n                \n                    \n                    requestAllMessages(socket: Socket)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('request_all_messages')\n                \n            \n\n            \n                \n                    Defined in src/chat/chat.gateway.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    socket\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ConnectedSocket,\n  MessageBody, OnGatewayConnection,\n  SubscribeMessage,\n  WebSocketGateway,\n  WebSocketServer,\n} from '@nestjs/websockets';\nimport { Server, Socket } from 'socket.io';\nimport { ChatService } from './chat.service';\n\n@WebSocketGateway()\nexport class ChatGateway implements OnGatewayConnection {\n  @WebSocketServer()\n  server: Server;\n\n  constructor(\n    private readonly chatService: ChatService\n  ) {\n  }\n\n  async handleConnection(socket: Socket) {\n    await this.chatService.getUserFromSocket(socket);\n  }\n\n  @SubscribeMessage('send_message')\n  async listenForMessages(\n    @MessageBody() content: string,\n    @ConnectedSocket() socket: Socket,\n  ) {\n    const author = await this.chatService.getUserFromSocket(socket);\n    const message = await this.chatService.saveMessage(content, author);\n\n    this.server.sockets.emit('receive_message', message);\n  }\n\n  @SubscribeMessage('request_all_messages')\n  async requestAllMessages(\n    @ConnectedSocket() socket: Socket,\n  ) {\n    await this.chatService.getUserFromSocket(socket);\n    const messages = await this.chatService.getAllMessages();\n\n    socket.emit('send_all_messages', messages);\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ChatModule.html":{"url":"modules/ChatModule.html","title":"module - ChatModule","body":"\n                   \n\n\n\n\n    Modules\n    ChatModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ChatModule\n\n\n\ncluster_ChatModule_imports\n\n\n\ncluster_ChatModule_providers\n\n\n\n\nAuthenticationModule\n\nAuthenticationModule\n\n\n\nChatModule\n\nChatModule\n\nChatModule -->\n\nAuthenticationModule->ChatModule\n\n\n\n\n\nChatService\n\nChatService\n\nChatModule -->\n\nChatService->ChatModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/chat/chat.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ChatService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthenticationModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ChatGateway } from './chat.gateway';\nimport { AuthenticationModule } from '../authentication/authentication.module';\nimport { ChatService } from './chat.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport Message from './message.entity';\n\n@Module({\n  imports: [\n    AuthenticationModule,\n    TypeOrmModule.forFeature([Message]),\n  ],\n  controllers: [],\n  providers: [ChatGateway, ChatService],\n})\nexport class ChatModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ChatService.html":{"url":"injectables/ChatService.html","title":"injectable - ChatService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ChatService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/chat/chat.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getAllMessages\n                            \n                            \n                                    Async\n                                getUserFromSocket\n                            \n                            \n                                    Async\n                                saveMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authenticationService: AuthenticationService, messagesRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/chat/chat.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authenticationService\n                                                  \n                                                        \n                                                                        AuthenticationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        messagesRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllMessages\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllMessages()\n                \n            \n\n\n            \n                \n                    Defined in src/chat/chat.service.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserFromSocket\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserFromSocket(socket: Socket)\n                \n            \n\n\n            \n                \n                    Defined in src/chat/chat.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    socket\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        saveMessage\n                        \n                    \n                \n            \n            \n                \n                    \n                    saveMessage(content: string, author: User)\n                \n            \n\n\n            \n                \n                    Defined in src/chat/chat.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    content\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    author\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthenticationService } from '../authentication/authentication.service';\nimport { Socket } from 'socket.io';\nimport { parse } from 'cookie';\nimport { WsException } from '@nestjs/websockets';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport Message from './message.entity';\nimport User from '../users/user.entity';\nimport { Repository } from 'typeorm';\n\n@Injectable()\nexport class ChatService {\n  constructor(\n    private readonly authenticationService: AuthenticationService,\n    @InjectRepository(Message)\n    private messagesRepository: Repository,\n  ) {\n  }\n\n  async saveMessage(content: string, author: User) {\n    const newMessage = await this.messagesRepository.create({\n      content,\n      author\n    });\n    await this.messagesRepository.save(newMessage);\n    return newMessage;\n  }\n\n  async getAllMessages() {\n    return this.messagesRepository.find({\n      relations: ['author']\n    });\n  }\n\n  async getUserFromSocket(socket: Socket) {\n    const cookie = socket.handshake.headers.cookie;\n    const { Authentication: authenticationToken } = parse(cookie);\n    const user = await this.authenticationService.getUserFromAuthenticationToken(authenticationToken);\n    if (!user) {\n      throw new WsException('Invalid credentials.');\n    }\n    return user;\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CheckVerificationCodeDto.html":{"url":"classes/CheckVerificationCodeDto.html","title":"class - CheckVerificationCodeDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CheckVerificationCodeDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/sms/checkVerificationCode.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                code\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/sms/checkVerificationCode.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty } from 'class-validator';\n\nexport class CheckVerificationCodeDto {\n  @IsString()\n  @IsNotEmpty()\n  code: string;\n}\n\nexport default CheckVerificationCodeDto;\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Comment.html":{"url":"classes/Comment.html","title":"class - Comment","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Comment\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/comments/comment.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                author\n                            \n                            \n                                    Public\n                                content\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                post\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/comments/comment.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/comments/comment.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/comments/comment.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        post\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/comments/comment.entity.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Column, Entity, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\nimport User from '../users/user.entity';\nimport Post from '../posts/post.entity';\n\n@Entity()\nclass Comment {\n  @PrimaryGeneratedColumn()\n  public id: number;\n\n  @Column()\n  public content: string;\n\n  @ManyToOne(() => Post, (post: Post) => post.comments)\n  public post: Post;\n\n  @ManyToOne(() => User, (author: User) => author.posts)\n  public author: User;\n}\n\nexport default Comment;\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CommentsController.html":{"url":"controllers/CommentsController.html","title":"controller - CommentsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CommentsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/comments/comments.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                comments\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createComment\n                            \n                            \n                                    Async\n                                getComments\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createComment\n                        \n                    \n                \n            \n            \n                \n                    \n                    createComment(comment: CreateCommentDto, req: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/comments/comments.controller.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    comment\n                                    \n                                                CreateCommentDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getComments\n                        \n                    \n                \n            \n            \n                \n                    \n                    getComments(undefined: GetCommentsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/comments/comments.controller.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                GetCommentsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  ClassSerializerInterceptor,\n  Controller, Get,\n  Post, Query,\n  Req,\n  UseGuards,\n  UseInterceptors,\n} from '@nestjs/common';\nimport JwtAuthenticationGuard from '../authentication/jwt-authentication.guard';\nimport RequestWithUser from '../authentication/requestWithUser.interface';\nimport CreateCommentDto from './dto/createComment.dto';\nimport { CommandBus, QueryBus } from '@nestjs/cqrs';\nimport { CreateCommentCommand } from './commands/implementations/createComment.command';\nimport { GetCommentsQuery } from './queries/implementations/getComments.query';\nimport GetCommentsDto from './dto/getComments.dto';\n\n@Controller('comments')\n@UseInterceptors(ClassSerializerInterceptor)\nexport default class CommentsController {\n  constructor(\n    private commandBus: CommandBus,\n    private queryBus: QueryBus,\n  ) {}\n\n  @Post()\n  @UseGuards(JwtAuthenticationGuard)\n  async createComment(@Body() comment: CreateCommentDto, @Req() req: RequestWithUser) {\n    const user = req.user;\n    return this.commandBus.execute(\n      new CreateCommentCommand(comment, user)\n    )\n  }\n\n  @Get()\n  async getComments(\n    @Query() { postId }: GetCommentsDto,\n  ) {\n    return this.queryBus.execute(\n      new GetCommentsQuery(postId)\n    )\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CommentsModule.html":{"url":"modules/CommentsModule.html","title":"module - CommentsModule","body":"\n                   \n\n\n\n\n    Modules\n    CommentsModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/comments/comments.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            CommentsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport Comment from './comment.entity';\nimport CommentsController from './comments.controller';\nimport { CqrsModule } from '@nestjs/cqrs';\nimport { CreateCommentHandler } from './commands/handlers/create-comment.handler';\nimport { GetCommentsHandler } from './queries/handlers/getComments.handler';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Comment]), CqrsModule],\n  controllers: [CommentsController],\n  providers: [CreateCommentHandler, GetCommentsHandler],\n})\nexport class CommentsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ConfirmEmailDto.html":{"url":"classes/ConfirmEmailDto.html","title":"class - ConfirmEmailDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ConfirmEmailDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/emailConfirmation/confirmEmail.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/emailConfirmation/confirmEmail.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty } from 'class-validator';\n\nexport class ConfirmEmailDto {\n  @IsString()\n  @IsNotEmpty()\n  token: string;\n}\n\nexport default ConfirmEmailDto;\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCategoryDto.html":{"url":"classes/CreateCategoryDto.html","title":"class - CreateCategoryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCategoryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/categories/dto/createCategory.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/dto/createCategory.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty } from 'class-validator';\n\nexport class CreateCategoryDto {\n  @IsString()\n  @IsNotEmpty()\n  name: string;\n}\n\nexport default CreateCategoryDto;\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateChargeDto.html":{"url":"classes/CreateChargeDto.html","title":"class - CreateChargeDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateChargeDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/charge/dto/createCharge.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                amount\n                            \n                            \n                                paymentMethodId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        amount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/charge/dto/createCharge.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        paymentMethodId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/charge/dto/createCharge.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty, IsNumber } from 'class-validator';\n\nexport class CreateChargeDto {\n  @IsString()\n  @IsNotEmpty()\n  paymentMethodId: string;\n\n  @IsNumber()\n  amount: number;\n}\n\nexport default CreateChargeDto;\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCommentCommand.html":{"url":"classes/CreateCommentCommand.html","title":"class - CreateCommentCommand","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCommentCommand\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/comments/commands/implementations/createComment.command.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                author\n                            \n                            \n                                    Public\n                                    Readonly\n                                comment\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(comment: CreateCommentDto, author: User)\n                    \n                \n                        \n                            \n                                Defined in src/comments/commands/implementations/createComment.command.ts:4\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        comment\n                                                  \n                                                        \n                                                                        CreateCommentDto\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        author\n                                                  \n                                                        \n                                                                        User\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                    \n                        \n                                Defined in src/comments/commands/implementations/createComment.command.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        comment\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreateCommentDto\n\n                    \n                \n                    \n                        \n                                Defined in src/comments/commands/implementations/createComment.command.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import CreateCommentDto from '../../dto/createComment.dto';\nimport User from '../../../users/user.entity';\n\nexport class CreateCommentCommand {\n  constructor(\n    public readonly comment: CreateCommentDto,\n    public readonly author: User,\n  ) {}\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCommentDto.html":{"url":"classes/CreateCommentDto.html","title":"class - CreateCommentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCommentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/comments/dto/createComment.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                content\n                            \n                            \n                                post\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/comments/dto/createComment.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        post\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ObjectWithIdDTO\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/comments/dto/createComment.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty, ValidateNested } from 'class-validator';\nimport { Type } from 'class-transformer';\nimport ObjectWithIdDTO from 'src/utils/types/objectWithId.dto';\n\nclass CreateCommentDto {\n  @IsString()\n  @IsNotEmpty()\n  content: string;\n\n  @ValidateNested()\n  @Type(() => ObjectWithIdDTO)\n  post: ObjectWithIdDTO;\n}\n\nexport default CreateCommentDto;\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCommentHandler.html":{"url":"classes/CreateCommentHandler.html","title":"class - CreateCommentHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCommentHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/comments/commands/handlers/create-comment.handler.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ICommandHandler\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                execute\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(commentsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/comments/commands/handlers/create-comment.handler.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        commentsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        execute\n                        \n                    \n                \n            \n            \n                \n                    \n                    execute(command: CreateCommentCommand)\n                \n            \n\n\n            \n                \n                    Defined in src/comments/commands/handlers/create-comment.handler.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    command\n                                    \n                                                CreateCommentCommand\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { CommandHandler, ICommandHandler } from '@nestjs/cqrs';\nimport { CreateCommentCommand } from '../implementations/createComment.command';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport Comment from '../../comment.entity';\nimport { Repository } from 'typeorm';\n\n@CommandHandler(CreateCommentCommand)\nexport class CreateCommentHandler implements ICommandHandler {\n  constructor(\n    @InjectRepository(Comment)\n    private commentsRepository: Repository,\n  ) {}\n\n  async execute(command: CreateCommentCommand) {\n    const newPost = await this.commentsRepository.create({\n      ...command.comment,\n      author: command.author\n    });\n    await this.commentsRepository.save(newPost);\n    return newPost;\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateLogDto.html":{"url":"classes/CreateLogDto.html","title":"class - CreateLogDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateLogDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/logger/dto/createLog.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                context\n                            \n                            \n                                level\n                            \n                            \n                                message\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        context\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/logger/dto/createLog.dto.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        level\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/logger/dto/createLog.dto.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/logger/dto/createLog.dto.ts:3\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateLogDto {\n  context: string;\n  message: string;\n  level: string;\n}\n\nexport default CreateLogDto;\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dto/createPost.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                paragraphs\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        paragraphs\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString({each: true})@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/createPost.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/createPost.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty } from 'class-validator';\n\nexport class CreatePostDto {\n  @IsString({ each: true })\n  @IsNotEmpty()\n  paragraphs: string[];\n\n  @IsString()\n  @IsNotEmpty()\n  title: string;\n}\n\nexport default CreatePostDto;\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostInput.html":{"url":"classes/CreatePostInput.html","title":"class - CreatePostInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/inputs/post.input.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                paragraphs\n                            \n                            \n                                    Optional\n                                scheduledDate\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        paragraphs\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/inputs/post.input.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        scheduledDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/inputs/post.input.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/inputs/post.input.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { InputType, Field } from '@nestjs/graphql';\n\n@InputType()\nexport class CreatePostInput {\n  @Field()\n  title: string;\n\n  @Field(() => [String])\n  paragraphs: string[];\n\n  @Field({ nullable: true })\n  scheduledDate?: Date;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateProductCategoryDto.html":{"url":"classes/CreateProductCategoryDto.html","title":"class - CreateProductCategoryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateProductCategoryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/productCategories/dto/createProductCategory.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/productCategories/dto/createProductCategory.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty } from 'class-validator';\n\nexport class CreateProductCategoryDto {\n  @IsString()\n  @IsNotEmpty()\n  name: string;\n}\n\nexport default CreateProductCategoryDto;\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateProductDto.html":{"url":"classes/CreateProductDto.html","title":"class - CreateProductDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateProductDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/dto/createProduct.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                category\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ObjectWithIdDTO\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/createProduct.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/createProduct.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty, ValidateNested } from 'class-validator';\nimport { Type } from 'class-transformer';\nimport ObjectWithIdDTO from '../../utils/types/objectWithId.dto';\n\nexport class CreateProductDto {\n  @IsString()\n  @IsNotEmpty()\n  name: string;\n\n  @ValidateNested()\n  @Type(() => ObjectWithIdDTO)\n  category: ObjectWithIdDTO;\n}\n\nexport default CreateProductDto;\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateSubscriberDto.html":{"url":"classes/CreateSubscriberDto.html","title":"class - CreateSubscriberDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateSubscriberDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/subscribers/dto/createSubscriber.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/subscribers/dto/createSubscriber.dto.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/subscribers/dto/createSubscriber.dto.ts:3\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateSubscriberDto {\n  email: string;\n  name: string;\n}\n\nexport default CreateSubscriberDto;\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/createUser.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/dto/createUser.dto.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/dto/createUser.dto.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/dto/createUser.dto.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateUserDto {\n  email: string;\n  name: string;\n  password: string;\n}\n\nexport default CreateUserDto;\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CreditCardsController.html":{"url":"controllers/CreditCardsController.html","title":"controller - CreditCardsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CreditCardsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/credit-cards/creditCards.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                credit-cards\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addCreditCard\n                            \n                            \n                                    Async\n                                getCreditCards\n                            \n                            \n                                    Async\n                                setDefaultCard\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addCreditCard\n                        \n                    \n                \n            \n            \n                \n                    \n                    addCreditCard(creditCard: AddCreditCardDto, request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/credit-cards/creditCards.controller.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    creditCard\n                                    \n                                                AddCreditCardDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getCreditCards\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCreditCards(request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@UseGuards(EmailConfirmationGuard)@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/credit-cards/creditCards.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        setDefaultCard\n                        \n                    \n                \n            \n            \n                \n                    \n                    setDefaultCard(creditCard: SetDefaultCreditCardDto, request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('default')@HttpCode(200)@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/credit-cards/creditCards.controller.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    creditCard\n                                    \n                                                SetDefaultCreditCardDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post, Req, UseGuards, Get, HttpCode } from '@nestjs/common';\nimport JwtAuthenticationGuard from '../authentication/jwt-authentication.guard';\nimport RequestWithUser from '../authentication/requestWithUser.interface';\nimport StripeService from '../stripe/stripe.service';\nimport AddCreditCardDto from './dto/addCreditCardDto';\nimport SetDefaultCreditCardDto from './dto/setDefaultCreditCard.dto';\nimport { EmailConfirmationGuard } from '../emailConfirmation/emailConfirmation.guard';\n\n@Controller('credit-cards')\nexport default class CreditCardsController {\n  constructor(\n    private readonly stripeService: StripeService\n  ) {}\n\n  @Post()\n  @UseGuards(JwtAuthenticationGuard)\n  async addCreditCard(@Body() creditCard: AddCreditCardDto, @Req() request: RequestWithUser) {\n    return this.stripeService.attachCreditCard(creditCard.paymentMethodId, request.user.stripeCustomerId);\n  }\n\n  @Post('default')\n  @HttpCode(200)\n  @UseGuards(JwtAuthenticationGuard)\n  async setDefaultCard(@Body() creditCard: SetDefaultCreditCardDto, @Req() request: RequestWithUser) {\n    await this.stripeService.setDefaultCreditCard(creditCard.paymentMethodId, request.user.stripeCustomerId);\n  }\n\n  @Get()\n  @UseGuards(EmailConfirmationGuard)\n  @UseGuards(JwtAuthenticationGuard)\n  async getCreditCards(@Req() request: RequestWithUser) {\n    return this.stripeService.listCreditCards(request.user.stripeCustomerId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CreditCardsModule.html":{"url":"modules/CreditCardsModule.html","title":"module - CreditCardsModule","body":"\n                   \n\n\n\n\n    Modules\n    CreditCardsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_CreditCardsModule\n\n\n\ncluster_CreditCardsModule_imports\n\n\n\n\nStripeModule\n\nStripeModule\n\n\n\nCreditCardsModule\n\nCreditCardsModule\n\nCreditCardsModule -->\n\nStripeModule->CreditCardsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/credit-cards/creditCards.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            CreditCardsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            StripeModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { StripeModule } from '../stripe/stripe.module';\nimport CreditCardsController from './creditCards.controller';\n\n@Module({\n  imports: [StripeModule],\n  controllers: [CreditCardsController],\n  providers: [],\n})\nexport class CreditCardsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CustomLogger.html":{"url":"injectables/CustomLogger.html","title":"injectable - CustomLogger","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  CustomLogger\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/logger/customLogger.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ConsoleLogger\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logsService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                debug\n                            \n                            \n                                error\n                            \n                            \n                                log\n                            \n                            \n                                verbose\n                            \n                            \n                                warn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(context: string, options: ConsoleLoggerOptions, configService: ConfigService, logsService: LogsService)\n                    \n                \n                        \n                            \n                                Defined in src/logger/customLogger.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        context\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                        ConsoleLoggerOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        logsService\n                                                  \n                                                        \n                                                                        LogsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        debug\n                        \n                    \n                \n            \n            \n                \ndebug(message: string, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/logger/customLogger.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        error\n                        \n                    \n                \n            \n            \n                \nerror(message: string, stack?: string, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/logger/customLogger.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    stack\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        log\n                        \n                    \n                \n            \n            \n                \nlog(message: string, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/logger/customLogger.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verbose\n                        \n                    \n                \n            \n            \n                \nverbose(message: string, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/logger/customLogger.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        warn\n                        \n                    \n                \n            \n            \n                \nwarn(message: string, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/logger/customLogger.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logsService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         LogsService\n\n                    \n                \n                    \n                        \n                                Defined in src/logger/customLogger.ts:9\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, ConsoleLogger } from '@nestjs/common';\nimport { ConsoleLoggerOptions } from '@nestjs/common/services/console-logger.service';\nimport { ConfigService } from '@nestjs/config';\nimport getLogLevels from '../utils/getLogLevels';\nimport LogsService from './logs.service';\n\n@Injectable()\nclass CustomLogger extends ConsoleLogger {\n  private readonly logsService: LogsService;\n\n  constructor(\n    context: string,\n    options: ConsoleLoggerOptions,\n    configService: ConfigService,\n    logsService: LogsService\n  ) {\n    const environment = configService.get('NODE_ENV');\n\n    super(\n      context,\n      {\n        ...options,\n        logLevels: getLogLevels(environment === 'production')\n      }\n    );\n\n    this.logsService = logsService;\n  }\n\n  log(message: string, context?: string) {\n    super.log.apply(this, [message, context]);\n\n    this.logsService.createLog({\n      message,\n      context,\n      level: 'log'\n    })\n  }\n  error(message: string, stack?: string, context?: string) {\n    super.error.apply(this, [message, stack, context]);\n\n    this.logsService.createLog({\n      message,\n      context,\n      level: 'error'\n    })\n  }\n  warn(message: string, context?: string) {\n    super.warn.apply(this, [message, context]);\n\n    this.logsService.createLog({\n      message,\n      context,\n      level: 'error'\n    })\n  }\n  debug(message: string, context?: string) {\n    super.debug.apply(this, [message, context]);\n\n    this.logsService.createLog({\n      message,\n      context,\n      level: 'error'\n    })\n  }\n  verbose(message: string, context?: string) {\n    super.debug.apply(this, [message, context]);\n\n    this.logsService.createLog({\n      message,\n      context,\n      level: 'error'\n    })\n  }\n}\n\nexport default CustomLogger;\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DatabaseLogger.html":{"url":"classes/DatabaseLogger.html","title":"class - DatabaseLogger","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DatabaseLogger\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/databaseLogger.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            TypeOrmLogger\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                log\n                            \n                            \n                                logMigration\n                            \n                            \n                                logQuery\n                            \n                            \n                                logQueryError\n                            \n                            \n                                logQuerySlow\n                            \n                            \n                                logSchemaBuild\n                            \n                            \n                                    Private\n                                stringifyParameters\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new NestLogger('SQL')\n                    \n                \n                    \n                        \n                                Defined in src/database/databaseLogger.ts:5\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        log\n                        \n                    \n                \n            \n            \n                \nlog(level: \"log\" | \"info\" | \"warn\", message: string, queryRunner?: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/databaseLogger.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    level\n                                    \n                                            \"log\" | \"info\" | \"warn\"\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logMigration\n                        \n                    \n                \n            \n            \n                \nlogMigration(message: string)\n                \n            \n\n\n            \n                \n                    Defined in src/database/databaseLogger.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logQuery\n                        \n                    \n                \n            \n            \n                \nlogQuery(query: string, parameters?: [], queryRunner?: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/databaseLogger.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    parameters\n                                    \n                                            []\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logQueryError\n                        \n                    \n                \n            \n            \n                \nlogQueryError(error: string, query: string, parameters?: [], queryRunner?: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/databaseLogger.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    query\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    parameters\n                                    \n                                            []\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logQuerySlow\n                        \n                    \n                \n            \n            \n                \nlogQuerySlow(time: number, query: string, parameters?: [], queryRunner?: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/databaseLogger.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    time\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    query\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    parameters\n                                    \n                                            []\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logSchemaBuild\n                        \n                    \n                \n            \n            \n                \nlogSchemaBuild(message: string)\n                \n            \n\n\n            \n                \n                    Defined in src/database/databaseLogger.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        stringifyParameters\n                        \n                    \n                \n            \n            \n                \n                    \n                    stringifyParameters(parameters?: [])\n                \n            \n\n\n            \n                \n                    Defined in src/database/databaseLogger.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    parameters\n                                    \n                                            []\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Logger as TypeOrmLogger, QueryRunner } from 'typeorm';\nimport { Logger as NestLogger } from '@nestjs/common';\n\nclass DatabaseLogger implements TypeOrmLogger {\n  private readonly logger = new NestLogger('SQL');  \n\n  logQuery(query: string, parameters?: unknown[], queryRunner?: QueryRunner) {\n    if (queryRunner?.data?.isCreatingLogs) {\n      return;\n    }\n    this.logger.log(`${query} -- Parameters: ${this.stringifyParameters(parameters)}`);\n  }\n  logQueryError(error: string, query: string, parameters?: unknown[], queryRunner?: QueryRunner) {\n    if (queryRunner?.data?.isCreatingLogs) {\n      return;\n    }\n    this.logger.error(`${query} -- Parameters: ${this.stringifyParameters(parameters)} -- ${error}`);\n  }\n  logQuerySlow(time: number, query: string, parameters?: unknown[], queryRunner?: QueryRunner) {\n    if (queryRunner?.data?.isCreatingLogs) {\n      return;\n    }\n    this.logger.warn(`Time: ${time} -- Parameters: ${this.stringifyParameters(parameters)} -- ${query}`);\n  }\n  logMigration(message: string) {\n    this.logger.log(message);\n  }\n  logSchemaBuild(message: string) {\n    this.logger.log(message);\n  }\n  log(level: 'log' | 'info' | 'warn', message: string, queryRunner?: QueryRunner) {\n    if (queryRunner?.data?.isCreatingLogs) {\n      return;\n    }\n    if (level === 'log') {\n      return this.logger.log(message);\n    }\n    if (level === 'info') {\n      return this.logger.debug(message);\n    }\n    if (level === 'warn') {\n      return this.logger.warn(message);\n    }\n  }\n  private stringifyParameters(parameters?: unknown[]) {\n    try {\n      return JSON.stringify(parameters);\n    } catch {\n      return '';\n    }\n  }\n}\n\nexport default DatabaseLogger;\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/database/database.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport DatabaseLogger from './databaseLogger';\n\n@Module({\n  imports: [\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => ({\n        type: 'postgres',\n        logger: new DatabaseLogger(),\n        host: configService.get('POSTGRES_HOST'),\n        port: configService.get('POSTGRES_PORT'),\n        username: configService.get('POSTGRES_USER'),\n        password: configService.get('POSTGRES_PASSWORD'),\n        database: configService.get('POSTGRES_DB'),\n        entities: [\n          __dirname + '/../**/*.entity{.ts,.js}',\n        ],\n        synchronize: true,\n      })\n    }),\n  ],\n})\nexport class DatabaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ElasticsearchHealthIndicator.html":{"url":"injectables/ElasticsearchHealthIndicator.html","title":"injectable - ElasticsearchHealthIndicator","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ElasticsearchHealthIndicator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/health/elasticsearchHealthIndicator.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    HealthIndicator\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                isHealthy\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(elasticsearchService: ElasticsearchService)\n                    \n                \n                        \n                            \n                                Defined in src/health/elasticsearchHealthIndicator.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        elasticsearchService\n                                                  \n                                                        \n                                                                    ElasticsearchService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        isHealthy\n                        \n                    \n                \n            \n            \n                \n                    \n                    isHealthy(key: string)\n                \n            \n\n\n            \n                \n                    Defined in src/health/elasticsearchHealthIndicator.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { HealthIndicator, HealthIndicatorResult, HealthCheckError } from '@nestjs/terminus';\nimport { ElasticsearchService } from '@nestjs/elasticsearch';\n\n@Injectable()\nexport class ElasticsearchHealthIndicator extends HealthIndicator {\n  constructor(\n    private readonly elasticsearchService: ElasticsearchService\n  ) {\n    super();\n  }\n\n  async isHealthy(key: string): Promise {\n    try {\n      await this.elasticsearchService.ping();\n      return this.getStatus(key, true);\n    } catch (error) {\n      throw new HealthCheckError(\n        'ElasticsearchHealthIndicator failed',\n        this.getStatus(key, false)\n      );\n    }\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/EmailConfirmationController.html":{"url":"controllers/EmailConfirmationController.html","title":"controller - EmailConfirmationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  EmailConfirmationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/emailConfirmation/emailConfirmation.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                email-confirmation\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                confirm\n                            \n                            \n                                    Async\n                                resendConfirmationLink\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        confirm\n                        \n                    \n                \n            \n            \n                \n                    \n                    confirm(confirmationData: ConfirmEmailDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('confirm')\n                \n            \n\n            \n                \n                    Defined in src/emailConfirmation/emailConfirmation.controller.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    confirmationData\n                                    \n                                                ConfirmEmailDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        resendConfirmationLink\n                        \n                    \n                \n            \n            \n                \n                    \n                    resendConfirmationLink(request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('resend-confirmation-link')@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/emailConfirmation/emailConfirmation.controller.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  ClassSerializerInterceptor,\n  UseInterceptors,\n  Post,\n  Body,\n  UseGuards,\n  Req,\n} from '@nestjs/common';\nimport ConfirmEmailDto from './confirmEmail.dto';\nimport { EmailConfirmationService } from './emailConfirmation.service';\nimport JwtAuthenticationGuard from '../authentication/jwt-authentication.guard';\nimport RequestWithUser from '../authentication/requestWithUser.interface';\n\n@Controller('email-confirmation')\n@UseInterceptors(ClassSerializerInterceptor)\nexport class EmailConfirmationController {\n  constructor(\n    private readonly emailConfirmationService: EmailConfirmationService\n  ) {}\n\n  @Post('confirm')\n  async confirm(@Body() confirmationData: ConfirmEmailDto) {\n    const email = await this.emailConfirmationService.decodeConfirmationToken(confirmationData.token);\n    await this.emailConfirmationService.confirmEmail(email);\n  }\n\n  @Post('resend-confirmation-link')\n  @UseGuards(JwtAuthenticationGuard)\n  async resendConfirmationLink(@Req() request: RequestWithUser) {\n    await this.emailConfirmationService.resendConfirmationLink(request.user.id);\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/EmailConfirmationGuard.html":{"url":"guards/EmailConfirmationGuard.html","title":"guard - EmailConfirmationGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n    Guards\n    EmailConfirmationGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/emailConfirmation/emailConfirmation.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/emailConfirmation/emailConfirmation.guard.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable, CanActivate, ExecutionContext, UnauthorizedException } from '@nestjs/common';\nimport RequestWithUser from '../authentication/requestWithUser.interface';\n\n@Injectable()\nexport class EmailConfirmationGuard implements CanActivate {\n  canActivate(\n    context: ExecutionContext,\n  ) {\n    const request: RequestWithUser = context.switchToHttp().getRequest();\n\n    if (!request.user?.isEmailConfirmed) {\n      throw new UnauthorizedException('Confirm your email first');\n    }\n\n    return true;\n  }\n}\n        \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EmailConfirmationModule.html":{"url":"modules/EmailConfirmationModule.html","title":"module - EmailConfirmationModule","body":"\n                   \n\n\n\n\n    Modules\n    EmailConfirmationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_EmailConfirmationModule\n\n\n\ncluster_EmailConfirmationModule_providers\n\n\n\ncluster_EmailConfirmationModule_exports\n\n\n\ncluster_EmailConfirmationModule_imports\n\n\n\n\nEmailModule\n\nEmailModule\n\n\n\nEmailConfirmationModule\n\nEmailConfirmationModule\n\nEmailConfirmationModule -->\n\nEmailModule->EmailConfirmationModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nEmailConfirmationModule -->\n\nUsersModule->EmailConfirmationModule\n\n\n\n\n\nEmailConfirmationService \n\nEmailConfirmationService \n\nEmailConfirmationService  -->\n\nEmailConfirmationModule->EmailConfirmationService \n\n\n\n\n\nEmailConfirmationService\n\nEmailConfirmationService\n\nEmailConfirmationModule -->\n\nEmailConfirmationService->EmailConfirmationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/emailConfirmation/emailConfirmation.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EmailConfirmationService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            EmailConfirmationController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            EmailModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            EmailConfirmationService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { EmailConfirmationService } from './emailConfirmation.service';\nimport { ConfigModule } from '@nestjs/config';\nimport { EmailModule } from '../email/email.module';\nimport { JwtModule } from '@nestjs/jwt';\nimport { EmailConfirmationController } from './emailConfirmation.controller';\nimport { UsersModule } from '../users/users.module';\n\n@Module({\n  imports: [ConfigModule, EmailModule, JwtModule.register({}), UsersModule],\n  providers: [EmailConfirmationService],\n  exports: [EmailConfirmationService],\n  controllers: [EmailConfirmationController]\n})\nexport class EmailConfirmationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EmailConfirmationService.html":{"url":"injectables/EmailConfirmationService.html","title":"injectable - EmailConfirmationService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  EmailConfirmationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/emailConfirmation/emailConfirmation.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                confirmEmail\n                            \n                            \n                                    Public\n                                    Async\n                                decodeConfirmationToken\n                            \n                            \n                                    Public\n                                    Async\n                                resendConfirmationLink\n                            \n                            \n                                    Public\n                                sendVerificationLink\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, configService: ConfigService, emailService: EmailService, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/emailConfirmation/emailConfirmation.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        emailService\n                                                  \n                                                        \n                                                                        EmailService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        confirmEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    confirmEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/emailConfirmation/emailConfirmation.service.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        decodeConfirmationToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    decodeConfirmationToken(token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/emailConfirmation/emailConfirmation.service.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        resendConfirmationLink\n                        \n                    \n                \n            \n            \n                \n                    \n                    resendConfirmationLink(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/emailConfirmation/emailConfirmation.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        sendVerificationLink\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendVerificationLink(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/emailConfirmation/emailConfirmation.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { ConfigService } from '@nestjs/config';\nimport VerificationTokenPayload from './verificationTokenPayload.interface';\nimport EmailService from '../email/email.service';\nimport { UsersService } from '../users/users.service';\n\n@Injectable()\nexport class EmailConfirmationService {\n  constructor(\n    private readonly jwtService: JwtService,\n    private readonly configService: ConfigService,\n    private readonly emailService: EmailService,\n    private readonly usersService: UsersService,\n  ) {}\n\n  public sendVerificationLink(email: string) {\n    const payload: VerificationTokenPayload = { email };\n    const token = this.jwtService.sign(payload, {\n      secret: this.configService.get('JWT_VERIFICATION_TOKEN_SECRET'),\n      expiresIn: `${this.configService.get('JWT_VERIFICATION_TOKEN_EXPIRATION_TIME')}s`\n    });\n\n    const url = `${this.configService.get('EMAIL_CONFIRMATION_URL')}?token=${token}`;\n\n    const text = `Welcome to the application. To confirm the email address, click here: ${url}`;\n\n    return this.emailService.sendMail({\n      to: email,\n      subject: 'Email confirmation',\n      text,\n    })\n  }\n\n  public async resendConfirmationLink(userId: number) {\n    const user = await this.usersService.getById(userId);\n    if (user.isEmailConfirmed) {\n      throw new BadRequestException('Email already confirmed');\n    }\n    await this.sendVerificationLink(user.email);\n  }\n\n  public async confirmEmail(email: string) {\n    const user = await this.usersService.getByEmail(email);\n    if (user.isEmailConfirmed) {\n      throw new BadRequestException('Email already confirmed');\n    }\n    await this.usersService.markEmailAsConfirmed(email);\n  }\n\n  public async decodeConfirmationToken(token: string) {\n    try {\n      const payload = await this.jwtService.verify(token, {\n        secret: this.configService.get('JWT_VERIFICATION_TOKEN_SECRET'),\n      });\n\n      if (typeof payload === 'object' && 'email' in payload) {\n        return payload.email;\n      }\n      throw new BadRequestException();\n    } catch (error) {\n      if (error?.name === 'TokenExpiredError') {\n        throw new BadRequestException('Email confirmation token expired');\n      }\n      throw new BadRequestException('Bad confirmation token');\n    }\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EmailModule.html":{"url":"modules/EmailModule.html","title":"module - EmailModule","body":"\n                   \n\n\n\n\n    Modules\n    EmailModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_EmailModule\n\n\n\ncluster_EmailModule_providers\n\n\n\ncluster_EmailModule_exports\n\n\n\n\nEmailService \n\nEmailService \n\n\n\nEmailModule\n\nEmailModule\n\nEmailService  -->\n\nEmailModule->EmailService \n\n\n\n\n\nEmailService\n\nEmailService\n\nEmailModule -->\n\nEmailService->EmailModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/email/email.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EmailService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            EmailService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport EmailService from './email.service';\nimport { ConfigModule } from '@nestjs/config';\n\n@Module({\n  imports: [ConfigModule],\n  controllers: [],\n  providers: [EmailService],\n  exports: [EmailService]\n})\nexport class EmailModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EmailScheduleDto.html":{"url":"classes/EmailScheduleDto.html","title":"class - EmailScheduleDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EmailScheduleDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/emailScheduling/dto/emailSchedule.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                content\n                            \n                            \n                                date\n                            \n                            \n                                recipient\n                            \n                            \n                                subject\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/emailScheduling/dto/emailSchedule.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDateString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/emailScheduling/dto/emailSchedule.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        recipient\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/emailScheduling/dto/emailSchedule.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        subject\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/emailScheduling/dto/emailSchedule.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty, IsDateString, IsEmail } from 'class-validator';\n\nexport class EmailScheduleDto {\n  @IsEmail()\n  recipient: string;\n\n  @IsString()\n  @IsNotEmpty()\n  subject: string;\n\n  @IsString()\n  @IsNotEmpty()\n  content: string;\n\n  @IsDateString()\n  date: string;\n}\n\nexport default EmailScheduleDto;\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/EmailSchedulingController.html":{"url":"controllers/EmailSchedulingController.html","title":"controller - EmailSchedulingController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  EmailSchedulingController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/emailScheduling/emailScheduling.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                email-scheduling\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                scheduleEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        scheduleEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    scheduleEmail(emailSchedule: EmailScheduleDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('schedule')@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/emailScheduling/emailScheduling.controller.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    emailSchedule\n                                    \n                                                EmailScheduleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  UseGuards,\n  Post,\n} from '@nestjs/common';\nimport JwtAuthenticationGuard from '../authentication/jwt-authentication.guard';\nimport EmailSchedulingService from './emailScheduling.service';\nimport EmailScheduleDto from './dto/emailSchedule.dto';\n\n@Controller('email-scheduling')\nexport default class EmailSchedulingController {\n  constructor(\n    private readonly emailSchedulingService: EmailSchedulingService\n  ) {}\n\n  @Post('schedule')\n  @UseGuards(JwtAuthenticationGuard)\n  async scheduleEmail(@Body() emailSchedule: EmailScheduleDto) {\n    this.emailSchedulingService.scheduleEmail(emailSchedule);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EmailSchedulingModule.html":{"url":"modules/EmailSchedulingModule.html","title":"module - EmailSchedulingModule","body":"\n                   \n\n\n\n\n    Modules\n    EmailSchedulingModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_EmailSchedulingModule\n\n\n\ncluster_EmailSchedulingModule_imports\n\n\n\ncluster_EmailSchedulingModule_providers\n\n\n\n\nEmailModule\n\nEmailModule\n\n\n\nEmailSchedulingModule\n\nEmailSchedulingModule\n\nEmailSchedulingModule -->\n\nEmailModule->EmailSchedulingModule\n\n\n\n\n\nEmailSchedulingService\n\nEmailSchedulingService\n\nEmailSchedulingModule -->\n\nEmailSchedulingService->EmailSchedulingModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/emailScheduling/emailScheduling.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EmailSchedulingService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            EmailSchedulingController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            EmailModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport EmailSchedulingService from './emailScheduling.service';\nimport { EmailModule } from '../email/email.module';\nimport EmailSchedulingController from './emailScheduling.controller';\n\n@Module({\n  imports: [EmailModule],\n  controllers: [EmailSchedulingController],\n  providers: [EmailSchedulingService],\n})\nexport class EmailSchedulingModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EmailSchedulingService.html":{"url":"injectables/EmailSchedulingService.html","title":"injectable - EmailSchedulingService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  EmailSchedulingService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/emailScheduling/emailScheduling.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                scheduleEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(emailService: EmailService, schedulerRegistry: SchedulerRegistry)\n                    \n                \n                        \n                            \n                                Defined in src/emailScheduling/emailScheduling.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        emailService\n                                                  \n                                                        \n                                                                        EmailService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        schedulerRegistry\n                                                  \n                                                        \n                                                                    SchedulerRegistry\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        scheduleEmail\n                        \n                    \n                \n            \n            \n                \nscheduleEmail(emailSchedule: EmailScheduleDto)\n                \n            \n\n\n            \n                \n                    Defined in src/emailScheduling/emailScheduling.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    emailSchedule\n                                    \n                                                EmailScheduleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport EmailService from '../email/email.service';\nimport EmailScheduleDto from './dto/emailSchedule.dto';\nimport { SchedulerRegistry } from '@nestjs/schedule';\nimport { CronJob } from 'cron';\n\n@Injectable()\nexport default class EmailSchedulingService {\n  constructor(\n    private readonly emailService: EmailService,\n    private readonly schedulerRegistry: SchedulerRegistry\n  ) {}\n\n  scheduleEmail(emailSchedule: EmailScheduleDto) {\n    const date = new Date(emailSchedule.date);\n    const job = new CronJob(date, () => {\n      this.emailService.sendMail({\n        to: emailSchedule.recipient,\n        subject: emailSchedule.subject,\n        text: emailSchedule.content\n      })\n    });\n\n    this.schedulerRegistry.addCronJob(`${Date.now()}-${emailSchedule.subject}`, job);\n    job.start();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EmailService.html":{"url":"injectables/EmailService.html","title":"injectable - EmailService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  EmailService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/email/email.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                nodemailerTransport\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                sendMail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/email/email.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        sendMail\n                        \n                    \n                \n            \n            \n                \nsendMail(options: Mail.Options)\n                \n            \n\n\n            \n                \n                    Defined in src/email/email.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                            Mail.Options\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        nodemailerTransport\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Mail\n\n                    \n                \n                    \n                        \n                                Defined in src/email/email.service.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { createTransport } from 'nodemailer';\nimport * as Mail from 'nodemailer/lib/mailer';\nimport { ConfigService } from '@nestjs/config';\n\n@Injectable()\nexport default class EmailService {\n  private nodemailerTransport: Mail;\n\n  constructor(\n    private readonly configService: ConfigService\n  ) {\n    this.nodemailerTransport = createTransport({\n      service: configService.get('EMAIL_SERVICE'),\n      auth: {\n        user: configService.get('EMAIL_USER'),\n        pass: configService.get('EMAIL_PASSWORD'),\n      }\n    });\n  }\n\n  sendMail(options: Mail.Options) {\n    return this.nodemailerTransport.sendMail(options);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ExcludeNullInterceptor.html":{"url":"injectables/ExcludeNullInterceptor.html","title":"injectable - ExcludeNullInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ExcludeNullInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/excludeNull.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/utils/excludeNull.interceptor.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestInterceptor, ExecutionContext, CallHandler } from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport recursivelyStripNullValues from './recursivelyStripNullValues';\n\n@Injectable()\nexport class ExcludeNullInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    return next\n      .handle()\n      .pipe(map(value => recursivelyStripNullValues(value)));\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FilesModule.html":{"url":"modules/FilesModule.html","title":"module - FilesModule","body":"\n                   \n\n\n\n\n    Modules\n    FilesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_FilesModule\n\n\n\ncluster_FilesModule_providers\n\n\n\ncluster_FilesModule_exports\n\n\n\n\nFilesService \n\nFilesService \n\n\n\nFilesModule\n\nFilesModule\n\nFilesService  -->\n\nFilesModule->FilesService \n\n\n\n\n\nFilesService\n\nFilesService\n\nFilesModule -->\n\nFilesService->FilesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/files/files.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            FilesService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            FilesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { FilesService } from './files.service';\nimport { ConfigModule } from '@nestjs/config';\nimport PublicFile from './publicFile.entity';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([PublicFile]),\n    ConfigModule,\n  ],\n  providers: [FilesService],\n  exports: [FilesService]\n})\nexport class FilesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FilesService.html":{"url":"injectables/FilesService.html","title":"injectable - FilesService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  FilesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/files/files.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deletePublicFile\n                            \n                            \n                                    Async\n                                deletePublicFileWithQueryRunner\n                            \n                            \n                                    Async\n                                uploadPublicFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(publicFilesRepository: Repository, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/files/files.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        publicFilesRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deletePublicFile\n                        \n                    \n                \n            \n            \n                \n                    \n                    deletePublicFile(fileId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/files/files.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fileId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deletePublicFileWithQueryRunner\n                        \n                    \n                \n            \n            \n                \n                    \n                    deletePublicFileWithQueryRunner(fileId: number, queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/files/files.service.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fileId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadPublicFile\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadPublicFile(dataBuffer: Buffer, filename: string)\n                \n            \n\n\n            \n                \n                    Defined in src/files/files.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataBuffer\n                                    \n                                            Buffer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    filename\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository, QueryRunner } from 'typeorm';\nimport PublicFile from './publicFile.entity';\nimport { S3 } from 'aws-sdk';\nimport { ConfigService } from '@nestjs/config';\nimport { v4 as uuid } from 'uuid';\n\n@Injectable()\nexport class FilesService {\n  constructor(\n    @InjectRepository(PublicFile)\n    private publicFilesRepository: Repository,\n    private readonly configService: ConfigService\n  ) {}\n\n  async uploadPublicFile(dataBuffer: Buffer, filename: string) {\n    const s3 = new S3();\n    const uploadResult = await s3.upload({\n      Bucket: this.configService.get('AWS_PUBLIC_BUCKET_NAME'),\n      Body: dataBuffer,\n      Key: `${uuid()}-${filename}`\n    })\n      .promise();\n\n    const newFile = this.publicFilesRepository.create({\n      key: uploadResult.Key,\n      url: uploadResult.Location\n    });\n    await this.publicFilesRepository.save(newFile);\n    return newFile;\n  }\n\n  async deletePublicFile(fileId: number) {\n    const file = await this.publicFilesRepository.findOne({ id: fileId });\n    const s3 = new S3();\n    await s3.deleteObject({\n      Bucket: this.configService.get('AWS_PUBLIC_BUCKET_NAME'),\n      Key: file.key,\n    }).promise();\n    await this.publicFilesRepository.delete(fileId);\n  }\n\n  async deletePublicFileWithQueryRunner(fileId: number, queryRunner: QueryRunner) {\n    const file = await queryRunner.manager.findOne(PublicFile, { id: fileId });\n    const s3 = new S3();\n    await s3.deleteObject({\n      Bucket: this.configService.get('AWS_PUBLIC_BUCKET_NAME'),\n      Key: file.key,\n    }).promise();\n    await queryRunner.manager.delete(PublicFile, fileId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FindOneParams.html":{"url":"classes/FindOneParams.html","title":"class - FindOneParams","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FindOneParams\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/findOneParams.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumberString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/findOneParams.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNumberString } from 'class-validator';\n\nclass FindOneParams {\n  @IsNumberString()\n  id: string;\n}\n\nexport default FindOneParams\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetCommentsDto.html":{"url":"classes/GetCommentsDto.html","title":"class - GetCommentsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetCommentsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/comments/dto/getComments.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                postId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        postId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Type(undefined)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/comments/dto/getComments.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional } from 'class-validator';\nimport { Type } from 'class-transformer';\n\nclass GetCommentsDto {\n  @Type(() => Number)\n  @IsOptional()\n  postId?: number;\n}\n\nexport default GetCommentsDto\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetCommentsHandler.html":{"url":"classes/GetCommentsHandler.html","title":"class - GetCommentsHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetCommentsHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/comments/queries/handlers/getComments.handler.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        IQueryHandler\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                execute\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(commentsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/comments/queries/handlers/getComments.handler.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        commentsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        execute\n                        \n                    \n                \n            \n            \n                \n                    \n                    execute(query: GetCommentsQuery)\n                \n            \n\n\n            \n                \n                    Defined in src/comments/queries/handlers/getComments.handler.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                GetCommentsQuery\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { IQueryHandler, QueryHandler } from '@nestjs/cqrs';\nimport { GetCommentsQuery } from '../implementations/getComments.query';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport Comment from '../../comment.entity';\nimport { Repository } from 'typeorm';\n\n@QueryHandler(GetCommentsQuery)\nexport class GetCommentsHandler implements IQueryHandler {\n  constructor(\n    @InjectRepository(Comment)\n    private commentsRepository: Repository,\n  ) {}\n\n  async execute(query: GetCommentsQuery) {\n    if (query.postId) {\n      return this.commentsRepository.find({\n        post: {\n          id: query.postId\n        }\n      });\n    }\n    return this.commentsRepository.find();\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetCommentsQuery.html":{"url":"classes/GetCommentsQuery.html","title":"class - GetCommentsQuery","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetCommentsQuery\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/comments/queries/implementations/getComments.query.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                postId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(postId?: number)\n                    \n                \n                        \n                            \n                                Defined in src/comments/queries/implementations/getComments.query.ts:1\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        postId\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        postId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/comments/queries/implementations/getComments.query.ts:3\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class GetCommentsQuery {\n  constructor(\n    public readonly postId?: number,\n  ) {}\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/GoogleAuthenticationController.html":{"url":"controllers/GoogleAuthenticationController.html","title":"controller - GoogleAuthenticationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  GoogleAuthenticationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/googleAuthentication/googleAuthentication.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                google-authentication\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                authenticate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        authenticate\n                        \n                    \n                \n            \n            \n                \n                    \n                    authenticate(tokenData: TokenVerificationDto, request: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/googleAuthentication/googleAuthentication.controller.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tokenData\n                                    \n                                                TokenVerificationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  ClassSerializerInterceptor, UseInterceptors, Body, Req,\n} from '@nestjs/common';\nimport TokenVerificationDto from './tokenVerification.dto';\nimport { GoogleAuthenticationService } from './googleAuthentication.service';\nimport { Request } from 'express';\n\n@Controller('google-authentication')\n@UseInterceptors(ClassSerializerInterceptor)\nexport class GoogleAuthenticationController {\n  constructor(\n    private readonly googleAuthenticationService: GoogleAuthenticationService\n  ) {\n  }\n\n  @Post()\n  async authenticate(@Body() tokenData: TokenVerificationDto, @Req() request: Request) {\n    const {\n      accessTokenCookie,\n      refreshTokenCookie,\n      user\n    } = await this.googleAuthenticationService.authenticate(tokenData.token);\n\n    request.res.setHeader('Set-Cookie', [accessTokenCookie, refreshTokenCookie]);\n\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/GoogleAuthenticationModule.html":{"url":"modules/GoogleAuthenticationModule.html","title":"module - GoogleAuthenticationModule","body":"\n                   \n\n\n\n\n    Modules\n    GoogleAuthenticationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_GoogleAuthenticationModule\n\n\n\ncluster_GoogleAuthenticationModule_providers\n\n\n\ncluster_GoogleAuthenticationModule_imports\n\n\n\n\nAuthenticationModule\n\nAuthenticationModule\n\n\n\nGoogleAuthenticationModule\n\nGoogleAuthenticationModule\n\nGoogleAuthenticationModule -->\n\nAuthenticationModule->GoogleAuthenticationModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nGoogleAuthenticationModule -->\n\nUsersModule->GoogleAuthenticationModule\n\n\n\n\n\nGoogleAuthenticationService\n\nGoogleAuthenticationService\n\nGoogleAuthenticationModule -->\n\nGoogleAuthenticationService->GoogleAuthenticationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/googleAuthentication/googleAuthentication.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            GoogleAuthenticationService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            GoogleAuthenticationController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthenticationModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { GoogleAuthenticationController } from './googleAuthentication.controller';\nimport { ConfigModule } from '@nestjs/config';\nimport { UsersModule } from '../users/users.module';\nimport { GoogleAuthenticationService } from './googleAuthentication.service';\nimport { AuthenticationModule } from '../authentication/authentication.module';\n\n@Module({\n  imports: [ConfigModule, UsersModule, AuthenticationModule],\n  providers: [GoogleAuthenticationService],\n  controllers: [GoogleAuthenticationController],\n  exports: []\n})\nexport class GoogleAuthenticationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GoogleAuthenticationService.html":{"url":"injectables/GoogleAuthenticationService.html","title":"injectable - GoogleAuthenticationService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  GoogleAuthenticationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/googleAuthentication/googleAuthentication.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                oauthClient\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                authenticate\n                            \n                            \n                                    Async\n                                getCookiesForUser\n                            \n                            \n                                    Async\n                                getUserData\n                            \n                            \n                                    Async\n                                handleRegisteredUser\n                            \n                            \n                                    Async\n                                registerUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, configService: ConfigService, authenticationService: AuthenticationService)\n                    \n                \n                        \n                            \n                                Defined in src/googleAuthentication/googleAuthentication.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authenticationService\n                                                  \n                                                        \n                                                                        AuthenticationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        authenticate\n                        \n                    \n                \n            \n            \n                \n                    \n                    authenticate(token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/googleAuthentication/googleAuthentication.service.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getCookiesForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCookiesForUser(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/googleAuthentication/googleAuthentication.service.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserData\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserData(token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/googleAuthentication/googleAuthentication.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        handleRegisteredUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleRegisteredUser(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/googleAuthentication/googleAuthentication.service.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        registerUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    registerUser(token: string, email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/googleAuthentication/googleAuthentication.service.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        oauthClient\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Auth.OAuth2Client\n\n                    \n                \n                    \n                        \n                                Defined in src/googleAuthentication/googleAuthentication.service.ts:10\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { UsersService } from '../users/users.service';\nimport { ConfigService } from '@nestjs/config';\nimport { google, Auth } from 'googleapis';\nimport { AuthenticationService } from '../authentication/authentication.service';\nimport User from '../users/user.entity';\n\n@Injectable()\nexport class GoogleAuthenticationService {\n  oauthClient: Auth.OAuth2Client;\n  constructor(\n    private readonly usersService: UsersService,\n    private readonly configService: ConfigService,\n    private readonly authenticationService: AuthenticationService\n  ) {\n    const clientID = this.configService.get('GOOGLE_AUTH_CLIENT_ID');\n    const clientSecret = this.configService.get('GOOGLE_AUTH_CLIENT_SECRET');\n\n    this.oauthClient = new google.auth.OAuth2(\n      clientID,\n      clientSecret\n    );\n  }\n\n  async getUserData(token: string) {\n    const userInfoClient = google.oauth2('v2').userinfo;\n\n    this.oauthClient.setCredentials({\n      access_token: token\n    })\n\n    const userInfoResponse = await userInfoClient.get({\n      auth: this.oauthClient\n    });\n\n    return userInfoResponse.data;\n  }\n\n  async getCookiesForUser(user: User) {\n    const accessTokenCookie = this.authenticationService.getCookieWithJwtAccessToken(user.id);\n    const {\n      cookie: refreshTokenCookie,\n      token: refreshToken\n    } = this.authenticationService.getCookieWithJwtRefreshToken(user.id);\n\n    await this.usersService.setCurrentRefreshToken(refreshToken, user.id);\n\n    return {\n      accessTokenCookie,\n      refreshTokenCookie\n    }\n  }\n\n  async handleRegisteredUser(user: User) {\n    if (!user.isRegisteredWithGoogle) {\n      throw new UnauthorizedException();\n    }\n\n    const {\n      accessTokenCookie,\n      refreshTokenCookie\n    } = await this.getCookiesForUser(user);\n\n    return {\n      accessTokenCookie,\n      refreshTokenCookie,\n      user\n    }\n  }\n\n  async registerUser(token: string, email: string) {\n    const userData = await this.getUserData(token);\n    const name = userData.name;\n\n    const user = await this.usersService.createWithGoogle(email, name);\n\n    return this.handleRegisteredUser(user);\n  }\n\n  async authenticate(token: string) {\n    const tokenInfo = await this.oauthClient.getTokenInfo(token);\n\n    const email = tokenInfo.email;\n\n    try {\n      const user = await this.usersService.getByEmail(email);\n\n      return this.handleRegisteredUser(user);\n    } catch (error) {\n      if (error.status !== 404) {\n        throw new error;\n      }\n\n      return this.registerUser(token, email);\n    }\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GraphqlJwtAuthGuard.html":{"url":"injectables/GraphqlJwtAuthGuard.html","title":"injectable - GraphqlJwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  GraphqlJwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/graphql-jwt-auth.guard.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getRequest\n                        \n                    \n                \n            \n            \n                \ngetRequest(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/graphql-jwt-auth.guard.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { AuthGuard } from '@nestjs/passport';\nimport { ExecutionContext, Injectable } from '@nestjs/common';\nimport { GqlExecutionContext } from '@nestjs/graphql';\n\n@Injectable()\nexport class GraphqlJwtAuthGuard extends AuthGuard('jwt') {\n  getRequest(context: ExecutionContext) {\n    const ctx = GqlExecutionContext.create(context);\n    return ctx.getContext().req;\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HealthController.html":{"url":"controllers/HealthController.html","title":"controller - HealthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HealthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/health/health.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                health\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                check\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        check\n                        \n                    \n                \n            \n            \n                \ncheck()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HealthCheck()\n                \n            \n\n            \n                \n                    Defined in src/health/health.controller.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport {\n  HealthCheckService,\n  HealthCheck,\n  TypeOrmHealthIndicator,\n  MemoryHealthIndicator,\n  DiskHealthIndicator,\n} from '@nestjs/terminus';\nimport { ElasticsearchHealthIndicator } from './elasticsearchHealthIndicator';\n\n\n@Controller('health')\nclass HealthController {\n  constructor(\n    private healthCheckService: HealthCheckService,\n    private typeOrmHealthIndicator: TypeOrmHealthIndicator,\n    private memoryHealthIndicator: MemoryHealthIndicator,\n    private diskHealthIndicator: DiskHealthIndicator,\n    private elasticsearchHealthIndicator: ElasticsearchHealthIndicator\n  ) {}\n\n  @Get()\n  @HealthCheck()\n  check() {\n    return this.healthCheckService.check([\n      () => this.typeOrmHealthIndicator.pingCheck('database'),\n      // the process should not use more than 300MB memory\n      () => this.memoryHealthIndicator.checkHeap('memory heap', 300 * 1024 * 1024),\n      // The process should not have more than 300MB RSS memory allocated\n      () => this.memoryHealthIndicator.checkRSS('memory RSS', 300 * 1024 * 1024),\n      // the used disk storage should not exceed the 50% of the available space\n      () => this.diskHealthIndicator.checkStorage('disk health', {\n        thresholdPercent: 0.5, path: '/'\n      }),\n      () => this.elasticsearchHealthIndicator.isHealthy('elasticsearch')\n    ]);\n  }\n}\n\nexport default HealthController;\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HealthModule.html":{"url":"modules/HealthModule.html","title":"module - HealthModule","body":"\n                   \n\n\n\n\n    Modules\n    HealthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_HealthModule\n\n\n\ncluster_HealthModule_providers\n\n\n\ncluster_HealthModule_imports\n\n\n\n\nSearchModule\n\nSearchModule\n\n\n\nHealthModule\n\nHealthModule\n\nHealthModule -->\n\nSearchModule->HealthModule\n\n\n\n\n\nElasticsearchHealthIndicator\n\nElasticsearchHealthIndicator\n\nHealthModule -->\n\nElasticsearchHealthIndicator->HealthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/health/health.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ElasticsearchHealthIndicator\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            HealthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            SearchModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport HealthController from './health.controller';\nimport { TerminusModule } from '@nestjs/terminus';\nimport { ElasticsearchHealthIndicator } from './elasticsearchHealthIndicator';\nimport { SearchModule } from '../search/search.module';\n\n@Module({\n  imports: [TerminusModule, SearchModule],\n  controllers: [HealthController],\n  providers: [ElasticsearchHealthIndicator],\n})\nexport default class HealthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HttpCacheInterceptor.html":{"url":"injectables/HttpCacheInterceptor.html","title":"injectable - HttpCacheInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  HttpCacheInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/httpCache.interceptor.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    CacheInterceptor\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                trackBy\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        trackBy\n                        \n                    \n                \n            \n            \n                \ntrackBy(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/posts/httpCache.interceptor.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { CACHE_KEY_METADATA, CacheInterceptor, ExecutionContext, Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class HttpCacheInterceptor extends CacheInterceptor {\n  trackBy(context: ExecutionContext): string | undefined {\n    const cacheKey = this.reflector.get(\n      CACHE_KEY_METADATA,\n      context.getHandler(),\n    );\n\n    if (cacheKey) {\n      const request = context.switchToHttp().getRequest();\n      return `${cacheKey}-${request._parsedUrl.query}`;\n    }\n\n    return super.trackBy(context);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthenticationGuard.html":{"url":"injectables/JwtAuthenticationGuard.html","title":"injectable - JwtAuthenticationGuard","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthenticationGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/jwt-authentication.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport default class JwtAuthenticationGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtRefreshGuard.html":{"url":"injectables/JwtRefreshGuard.html","title":"injectable - JwtRefreshGuard","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtRefreshGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/jwt-refresh.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport default class JwtRefreshGuard extends AuthGuard('jwt-refresh-token') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtRefreshTokenStrategy.html":{"url":"injectables/JwtRefreshTokenStrategy.html","title":"injectable - JwtRefreshTokenStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtRefreshTokenStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/jwt-refresh-token.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, userService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/authentication/jwt-refresh-token.strategy.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(request: Request, payload: TokenPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/jwt-refresh-token.strategy.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                                TokenPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { Request } from 'express';\nimport { UsersService } from '../users/users.service';\nimport TokenPayload from './tokenPayload.interface';\n\n@Injectable()\nexport class JwtRefreshTokenStrategy extends PassportStrategy(\n  Strategy,\n  'jwt-refresh-token'\n) {\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly userService: UsersService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromExtractors([(request: Request) => {\n        return request?.cookies?.Refresh;\n      }]),\n      secretOrKey: configService.get('JWT_REFRESH_TOKEN_SECRET'),\n      passReqToCallback: true,\n    });\n  }\n\n  async validate(request: Request, payload: TokenPayload) {\n    const refreshToken = request.cookies?.Refresh;\n    return this.userService.getUserIfRefreshTokenMatches(refreshToken, payload.userId);\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/jwt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, userService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/authentication/jwt.strategy.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: TokenPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/jwt.strategy.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                TokenPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { Request } from 'express';\nimport { UsersService } from '../users/users.service';\nimport TokenPayload from './tokenPayload.interface';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly userService: UsersService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromExtractors([(request: Request) => {\n        return request?.cookies?.Authentication;\n      }]),\n      secretOrKey: configService.get('JWT_ACCESS_TOKEN_SECRET')\n    });\n  }\n\n  async validate(payload: TokenPayload) {\n    return this.userService.getById(payload.userId);\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtTwoFactorGuard.html":{"url":"injectables/JwtTwoFactorGuard.html","title":"injectable - JwtTwoFactorGuard","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtTwoFactorGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/jwt-two-factor.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport default class JwtTwoFactorGuard extends AuthGuard('jwt-two-factor') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtTwoFactorStrategy.html":{"url":"injectables/JwtTwoFactorStrategy.html","title":"injectable - JwtTwoFactorStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtTwoFactorStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/jwt-two-factor.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, userService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/authentication/jwt-two-factor.strategy.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: TokenPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/jwt-two-factor.strategy.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                TokenPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { Request } from 'express';\nimport { UsersService } from '../users/users.service';\nimport TokenPayload from './tokenPayload.interface';\n\n@Injectable()\nexport class JwtTwoFactorStrategy extends PassportStrategy(\n  Strategy,\n  'jwt-two-factor'\n) {\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly userService: UsersService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromExtractors([(request: Request) => {\n        return request?.cookies?.Authentication;\n      }]),\n      secretOrKey: configService.get('JWT_ACCESS_TOKEN_SECRET')\n    });\n  }\n\n  async validate(payload: TokenPayload) {\n    const user = await this.userService.getById(payload.userId);\n    if (!user.isTwoFactorAuthenticationEnabled) {\n      return user;\n    }\n    if (payload.isSecondFactorAuthenticated) {\n      return user;\n    }\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthenticationGuard.html":{"url":"injectables/LocalAuthenticationGuard.html","title":"injectable - LocalAuthenticationGuard","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthenticationGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/localAuthentication.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class LocalAuthenticationGuard extends AuthGuard('local') {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/local.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authenticationService: AuthenticationService)\n                    \n                \n                        \n                            \n                                Defined in src/authentication/local.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authenticationService\n                                                  \n                                                        \n                                                                        AuthenticationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/local.strategy.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Strategy } from 'passport-local';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { AuthenticationService } from './authentication.service';\nimport User from '../users/user.entity';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(private authenticationService: AuthenticationService) {\n    super({\n      usernameField: 'email'\n    });\n  }\n  async validate(email: string, password: string): Promise {\n    return this.authenticationService.getAuthenticatedUser(email, password);\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Log.html":{"url":"classes/Log.html","title":"class - Log","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Log\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/logger/log.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                context\n                            \n                            \n                                creationDate\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                level\n                            \n                            \n                                    Public\n                                message\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        context\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/logger/log.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        creationDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/logger/log.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/logger/log.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        level\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/logger/log.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/logger/log.entity.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Column, CreateDateColumn, Entity, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity()\nclass Log {\n  @PrimaryGeneratedColumn()\n  public id: number;\n\n  @Column()\n  public context: string;\n\n  @Column()\n  public message: string;\n\n  @Column()\n  public level: string;\n\n  @CreateDateColumn()\n  creationDate: Date;\n}\n\nexport default Log;\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LogInDto.html":{"url":"classes/LogInDto.html","title":"class - LogInDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LogInDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/dto/logIn.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/dto/logIn.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(7)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/dto/logIn.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsString, IsNotEmpty, MinLength } from 'class-validator';\n\nexport class LogInDto {\n  @IsEmail()\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(7)\n  password: string;\n}\n\nexport default LogInDto;\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/LoggerModule.html":{"url":"modules/LoggerModule.html","title":"module - LoggerModule","body":"\n                   \n\n\n\n\n    Modules\n    LoggerModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_LoggerModule\n\n\n\ncluster_LoggerModule_providers\n\n\n\ncluster_LoggerModule_exports\n\n\n\n\nCustomLogger \n\nCustomLogger \n\n\n\nLoggerModule\n\nLoggerModule\n\nCustomLogger  -->\n\nLoggerModule->CustomLogger \n\n\n\n\n\nCustomLogger\n\nCustomLogger\n\nLoggerModule -->\n\nCustomLogger->LoggerModule\n\n\n\n\n\nLogsService\n\nLogsService\n\nLoggerModule -->\n\nLogsService->LoggerModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/logger/logger.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CustomLogger\n                        \n                        \n                            LogsService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CustomLogger\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport CustomLogger from './customLogger';\nimport { ConfigModule } from '@nestjs/config';\nimport LogsService from './logs.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport Log from './log.entity';\n\n@Module({\n  imports: [ConfigModule, TypeOrmModule.forFeature([Log])],\n  providers: [CustomLogger, LogsService],\n  exports: [CustomLogger],\n})\nexport class LoggerModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LogsMiddleware.html":{"url":"injectables/LogsMiddleware.html","title":"injectable - LogsMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LogsMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/logs.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(request: Request, response: Response, next: NextFunction)\n                \n            \n\n\n            \n                \n                    Defined in src/utils/logs.middleware.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            NextFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger('HTTP')\n                    \n                \n                    \n                        \n                                Defined in src/utils/logs.middleware.ts:6\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger, NestMiddleware } from '@nestjs/common';\nimport { Request, Response, NextFunction } from 'express';\n\n@Injectable()\nclass LogsMiddleware implements NestMiddleware {\n  private readonly logger = new Logger('HTTP');\n\n  use(request: Request, response: Response, next: NextFunction) {\n    response.on('finish', () => {\n      const { method, originalUrl } = request;\n      const { statusCode, statusMessage } = response;\n\n      const message = `${method} ${originalUrl} ${statusCode} ${statusMessage}`;\n\n      if (statusCode >= 500) {\n        return this.logger.error(message);\n      }\n\n      if (statusCode >= 400) {\n        return this.logger.warn(message);\n      }\n\n      return this.logger.log(message);\n    });\n\n    next();\n  }\n}\n\nexport default LogsMiddleware;\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LogsService.html":{"url":"injectables/LogsService.html","title":"injectable - LogsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LogsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/logger/logs.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createLog\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/logger/logs.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        logsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createLog\n                        \n                    \n                \n            \n            \n                \n                    \n                    createLog(log: CreateLogDto)\n                \n            \n\n\n            \n                \n                    Defined in src/logger/logs.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    log\n                                    \n                                                CreateLogDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport Log from './log.entity';\nimport CreateLogDto from './dto/createLog.dto';\n\n@Injectable()\nexport default class LogsService {\n  constructor(\n    @InjectRepository(Log)\n    private logsRepository: Repository\n  ) {}\n\n  async createLog(log: CreateLogDto) {\n    const newLog = await this.logsRepository.create(log);\n    await this.logsRepository.save(newLog, {\n      data: {\n        isCreatingLogs: true\n      }\n    });\n    return newLog;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Message.html":{"url":"classes/Message.html","title":"class - Message","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Message\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/chat/message.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                author\n                            \n                            \n                                    Public\n                                content\n                            \n                            \n                                    Public\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/chat/message.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/chat/message.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/chat/message.entity.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Column, Entity, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\nimport User from '../users/user.entity';\n\n@Entity()\nclass Message {\n  @PrimaryGeneratedColumn()\n  public id: number;\n\n  @Column()\n  public content: string;\n\n  @ManyToOne(() => User)\n  public author: User;\n}\n\nexport default Message;\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ObjectWithIdDto.html":{"url":"classes/ObjectWithIdDto.html","title":"class - ObjectWithIdDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ObjectWithIdDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/types/objectWithId.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/types/objectWithId.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNumber } from 'class-validator';\n\nclass ObjectWithIdDto {\n  @IsNumber()\n  id: number;\n}\n\nexport default ObjectWithIdDto;\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/OptimizeController.html":{"url":"controllers/OptimizeController.html","title":"controller - OptimizeController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  OptimizeController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/optimize/optimize.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                optimize\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getJobResult\n                            \n                            \n                                    Async\n                                processImage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getJobResult\n                        \n                    \n                \n            \n            \n                \n                    \n                    getJobResult(response: Response, id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('image/:id')\n                \n            \n\n            \n                \n                    Defined in src/optimize/optimize.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    response\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        processImage\n                        \n                    \n                \n            \n            \n                \n                    \n                    processImage(files: Express.Multer.File[])\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('image')@UseInterceptors(undefined)\n                \n            \n\n            \n                \n                    Defined in src/optimize/optimize.controller.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    files\n                                    \n                                            Express.Multer.File[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Param, Post,\n  Res, UploadedFiles, UseInterceptors,\n} from '@nestjs/common';\nimport { Response } from 'express';\nimport { InjectQueue } from '@nestjs/bull';\nimport { Queue } from 'bull';\nimport { Readable } from 'stream';\nimport { AnyFilesInterceptor } from '@nestjs/platform-express';\n\n@Controller('optimize')\nexport class OptimizeController {\n  constructor(\n    @InjectQueue('image') private readonly imageQueue: Queue,\n  ) {}\n\n  @Post('image')\n  @UseInterceptors(AnyFilesInterceptor())\n  async processImage(@UploadedFiles() files: Express.Multer.File[]) {\n    const job = await this.imageQueue.add('optimize', {\n      files\n    });\n\n    return {\n      jobId: job.id\n    }\n  }\n\n  @Get('image/:id')\n  async getJobResult(@Res() response: Response, @Param('id') id: string) {\n    const job = await this.imageQueue.getJob(id);\n\n    if (!job) {\n      return response.sendStatus(404);\n    }\n\n    const isCompleted = await job.isCompleted();\n\n    if (!isCompleted) {\n      return response.sendStatus(202);\n    }\n\n    const result = Buffer.from(job.returnvalue);\n\n    const stream = Readable.from(result);\n\n    stream.pipe(response);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/OptimizeModule.html":{"url":"modules/OptimizeModule.html","title":"module - OptimizeModule","body":"\n                   \n\n\n\n\n    Modules\n    OptimizeModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/optimize/optimize.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            OptimizeController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { OptimizeController } from './optimize.controller';\nimport { BullModule } from '@nestjs/bull';\nimport { join } from 'path';\n\n@Module({\n  imports: [\n    BullModule.registerQueue({\n      name: 'image',\n      processors: [{\n        name: 'optimize',\n        path: join(__dirname, 'image.processor.js')\n      }],\n    })\n  ],\n  providers: [],\n  exports: [],\n  controllers: [OptimizeController]\n})\nexport class OptimizeModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationParams.html":{"url":"classes/PaginationParams.html","title":"class - PaginationParams","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationParams\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/types/paginationParams.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                limit\n                            \n                            \n                                    Optional\n                                offset\n                            \n                            \n                                    Optional\n                                startId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Type(undefined)@IsNumber()@Min(1)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/types/paginationParams.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        offset\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Type(undefined)@IsNumber()@Min(0)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/types/paginationParams.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        startId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Type(undefined)@IsNumber()@Min(1)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/types/paginationParams.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNumber, Min, IsOptional } from 'class-validator';\nimport { Type } from 'class-transformer';\n\nexport class PaginationParams {\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  startId?: number;\n\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(0)\n  offset?: number;\n\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  limit?: number;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Post.html":{"url":"classes/Post.html","title":"class - Post","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Post\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/post.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                author\n                            \n                            \n                                    Public\n                                authorId\n                            \n                            \n                                    Public\n                                categories\n                            \n                            \n                                    Public\n                                    Optional\n                                category\n                            \n                            \n                                    Public\n                                comments\n                            \n                            \n                                createdAt\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                paragraphs\n                            \n                            \n                                    Optional\n                                scheduledDate\n                            \n                            \n                                    Public\n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Index('post_authorId_index')@ManyToOne(undefined, undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        authorId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @RelationId(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        categories\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Category[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, undefined)@JoinTable()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        comments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Comment[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({type: 'timestamp'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        paragraphs\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('text', {array: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        scheduledDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:23\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Column,\n  Entity,\n  JoinTable,\n  ManyToMany,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n  Index,\n  OneToMany,\n  RelationId,\n  CreateDateColumn\n} from 'typeorm';\nimport User from '../users/user.entity';\nimport Category from '../categories/category.entity';\nimport Comment from '../comments/comment.entity';\n\n@Entity()\nclass Post {\n  @PrimaryGeneratedColumn()\n  public id: number;\n\n  @Column()\n  public title: string;\n\n  @Column('text', { array: true })\n  public paragraphs: string[];\n\n  @Column({ nullable: true })\n  public category?: string;\n\n  @Index('post_authorId_index')\n  @ManyToOne(() => User, (author: User) => author.posts)\n  public author: User\n\n  @RelationId((post: Post) => post.author)\n  public authorId: number;\n\n  @ManyToMany(() => Category, (category: Category) => category.posts)\n  @JoinTable()\n  public categories: Category[];\n\n  @OneToMany(() => Comment, (comment: Comment) => comment.post)\n  public comments: Comment[];\n\n  @CreateDateColumn({ type: 'timestamp' })\n  createdAt: Date;\n\n  @Column({\n    type: 'timestamp',\n    nullable: true\n  })\n  scheduledDate?: Date;\n}\n\nexport default Post;\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Post-1.html":{"url":"classes/Post-1.html","title":"class - Post-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Post\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/models/post.model.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                author\n                            \n                            \n                                authorId\n                            \n                            \n                                createdAt\n                            \n                            \n                                id\n                            \n                            \n                                paragraphs\n                            \n                            \n                                    Optional\n                                scheduledDate\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/models/post.model.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        authorId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/models/post.model.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/models/post.model.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/models/post.model.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        paragraphs\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/models/post.model.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        scheduledDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/models/post.model.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/models/post.model.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, Int, ObjectType } from '@nestjs/graphql';\nimport { User } from '../../users/models/user.model';\n\n@ObjectType()\nexport class Post {\n  @Field(() => Int)\n  id: number;\n\n  @Field()\n  title: string;\n\n  @Field(() => [String])\n  paragraphs: string[];\n\n  @Field(() => Int)\n  authorId: number;\n\n  @Field()\n  author: User;\n\n  @Field()\n  createdAt: Date;\n\n  @Field({ nullable: true })\n  scheduledDate?: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PostCountResult.html":{"url":"interfaces/PostCountResult.html","title":"interface - PostCountResult","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PostCountResult\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/types/postCountBody.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            count\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        count\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        count:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        interface PostCountResult {\n  count: number\n}\n\nexport default PostCountResult\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PostNotFoundException.html":{"url":"classes/PostNotFoundException.html","title":"class - PostNotFoundException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PostNotFoundException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/exceptions/postNotFound.exception.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    NotFoundException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(postId: number)\n                    \n                \n                        \n                            \n                                Defined in src/posts/exceptions/postNotFound.exception.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        postId\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { NotFoundException } from '@nestjs/common';\n\nclass PostNotFoundException extends NotFoundException {\n  constructor(postId: number) {\n    super(`Post with id ${postId} not found`);\n  }\n}\n\nexport default PostNotFoundException;\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PostSearchBody.html":{"url":"interfaces/PostSearchBody.html","title":"interface - PostSearchBody","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PostSearchBody\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/types/postSearchBody.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            authorId\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            paragraphs\n                                        \n                                \n                                \n                                        \n                                            title\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        authorId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        authorId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        paragraphs\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        paragraphs:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        interface PostSearchBody {\n  id: number,\n  title: string,\n  paragraphs: string[],\n  authorId: number\n}\n\nexport default PostSearchBody\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PostSearchResult.html":{"url":"interfaces/PostSearchResult.html","title":"interface - PostSearchResult","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PostSearchResult\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/types/postSearchResponse.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            hits\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        hits\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        hits:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import PostSearchBody from './postSearchBody.interface';\n\ninterface PostSearchResult {\n  hits: {\n    total: {\n      value: number;\n    };\n    hits: Array;\n  };\n}\n\nexport default PostSearchResult\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createPost\n                            \n                            \n                                    Async\n                                deletePost\n                            \n                            \n                                getPostById\n                            \n                            \n                                    Async\n                                getPosts\n                            \n                            \n                                    Async\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    createPost(post: CreatePostDto, req: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UseGuards(JwtTwoFactorGuard)\n                \n            \n\n            \n                \n                    Defined in src/posts/posts.controller.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    post\n                                    \n                                                CreatePostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    deletePost(undefined: FindOneParams)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/posts/posts.controller.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                FindOneParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPostById\n                        \n                    \n                \n            \n            \n                \ngetPostById(undefined: FindOneParams)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/posts/posts.controller.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                FindOneParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPosts\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPosts(search: string, undefined: PaginationParams)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseInterceptors(HttpCacheInterceptor)@CacheKey(GET_POSTS_CACHE_KEY)@CacheTTL(120)@Get()\n                \n            \n\n            \n                \n                    Defined in src/posts/posts.controller.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    search\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                PaginationParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    updatePost(undefined: FindOneParams, post: UpdatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/posts/posts.controller.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                FindOneParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    post\n                                    \n                                                UpdatePostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Patch,\n  Post,\n  UseGuards,\n  Req,\n  UseInterceptors,\n  ClassSerializerInterceptor,\n  Query, CacheKey, CacheTTL,\n} from '@nestjs/common';\nimport PostsService from './posts.service';\nimport CreatePostDto from './dto/createPost.dto';\nimport UpdatePostDto from './dto/updatePost.dto';\nimport FindOneParams from '../utils/findOneParams';\nimport RequestWithUser from '../authentication/requestWithUser.interface';\nimport { PaginationParams } from '../utils/types/paginationParams';\nimport { HttpCacheInterceptor } from './httpCache.interceptor';\nimport { GET_POSTS_CACHE_KEY } from './postsCacheKey.constant';\nimport JwtTwoFactorGuard from '../authentication/jwt-two-factor.guard';\n\n@Controller('posts')\n@UseInterceptors(ClassSerializerInterceptor)\nexport default class PostsController {\n  constructor(\n    private readonly postsService: PostsService\n  ) {}\n\n  @UseInterceptors(HttpCacheInterceptor)\n  @CacheKey(GET_POSTS_CACHE_KEY)\n  @CacheTTL(120)\n  @Get()\n  async getPosts(\n    @Query('search') search: string,\n    @Query() { offset, limit, startId }: PaginationParams\n  ) {\n    if (search) {\n      return this.postsService.searchForPosts(search, offset, limit, startId);\n    }\n    return this.postsService.getPostsWithAuthors(offset, limit, startId);\n  }\n\n  @Get(':id')\n  getPostById(@Param() { id }: FindOneParams) {\n    return this.postsService.getPostById(Number(id));\n  }\n\n  @Post()\n  @UseGuards(JwtTwoFactorGuard)\n  async createPost(@Body() post: CreatePostDto, @Req() req: RequestWithUser) {\n    return this.postsService.createPost(post, req.user);\n  }\n\n  @Patch(':id')\n  async updatePost(@Param() { id }: FindOneParams, @Body() post: UpdatePostDto) {\n    return this.postsService.updatePost(Number(id), post);\n  }\n\n  @Delete(':id')\n  async deletePost(@Param() { id }: FindOneParams) {\n    return this.postsService.deletePost(Number(id));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsLoaders.html":{"url":"injectables/PostsLoaders.html","title":"injectable - PostsLoaders","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  PostsLoaders\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/loaders/posts.loaders.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                batchAuthors\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/posts/loaders/posts.loaders.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        batchAuthors\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new DataLoader(async (authorIds: number[]) => {\n    const users = await this.usersService.getByIds(authorIds);\n    const usersMap = new Map(users.map(user => [user.id, user]));\n    return authorIds.map(authorId => usersMap.get(authorId));\n  })\n                    \n                \n                    \n                        \n                                Defined in src/posts/loaders/posts.loaders.ts:12\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Scope } from '@nestjs/common';\nimport { UsersService } from '../../users/users.service';\nimport * as DataLoader from 'dataloader';\n\n@Injectable({ scope: Scope.REQUEST })\nexport default class PostsLoaders {\n  constructor(\n    private usersService: UsersService,\n  ) {\n  }\n\n  public readonly batchAuthors = new DataLoader(async (authorIds: number[]) => {\n    const users = await this.usersService.getByIds(authorIds);\n    const usersMap = new Map(users.map(user => [user.id, user]));\n    return authorIds.map(authorId => usersMap.get(authorId));\n  })\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_PostsModule_imports\n\n\n\n\nSearchModule\n\nSearchModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nSearchModule->PostsModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\n\n\nPostsLoaders\n\nPostsLoaders\n\nPostsModule -->\n\nPostsLoaders->PostsModule\n\n\n\n\n\nPostsSearchService\n\nPostsSearchService\n\nPostsModule -->\n\nPostsSearchService->PostsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsLoaders\n                        \n                        \n                            PostsSearchService\n                        \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            SearchModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import * as redisStore from 'cache-manager-redis-store';\nimport { CacheModule, Module } from '@nestjs/common';\nimport PostsController from './posts.controller';\nimport PostsService from './posts.service';\nimport Post from './post.entity';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { SearchModule } from '../search/search.module';\nimport PostsSearchService from './postsSearch.service';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { PostsResolver } from './posts.resolver';\nimport { UsersModule } from '../users/users.module';\nimport PostsLoaders from './loaders/posts.loaders';\n\n@Module({\n  imports: [\n    CacheModule.registerAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n        useFactory: (configService: ConfigService) => ({\n          store: redisStore,\n          host: configService.get('REDIS_HOST'),\n          port: configService.get('REDIS_PORT'),\n          ttl: 120\n        }),\n    }),\n    TypeOrmModule.forFeature([Post]),\n    SearchModule,\n    UsersModule,\n  ],\n  controllers: [PostsController],\n  providers: [PostsService, PostsSearchService, PostsResolver, PostsLoaders],\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PostsResolver.html":{"url":"classes/PostsResolver.html","title":"class - PostsResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PostsResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.resolver.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createPost\n                            \n                            \n                                postAdded\n                            \n                            \n                                    Async\n                                posts\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(postsService: PostsService, pubSub: RedisPubSub)\n                    \n                \n                        \n                            \n                                Defined in src/posts/posts.resolver.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        postsService\n                                                  \n                                                        \n                                                                        PostsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        pubSub\n                                                  \n                                                        \n                                                                    RedisPubSub\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    createPost(createPostInput: CreatePostInput, context: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(undefined)@UseGuards(GraphqlJwtAuthGuard)\n                \n            \n\n            \n                \n                    Defined in src/posts/posts.resolver.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createPostInput\n                                    \n                                                CreatePostInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        postAdded\n                        \n                    \n                \n            \n            \n                \npostAdded()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Subscription(undefined)\n                \n            \n\n            \n                \n                    Defined in src/posts/posts.resolver.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        posts\n                        \n                    \n                \n            \n            \n                \n                    \n                    posts(info: GraphQLResolveInfo)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query(undefined)\n                \n            \n\n            \n                \n                    Defined in src/posts/posts.resolver.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    info\n                                    \n                                            GraphQLResolveInfo\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Args, Context, Info, Mutation, Query, Resolver, Subscription } from '@nestjs/graphql';\nimport { Post } from './models/post.model';\nimport PostsService from './posts.service';\nimport { CreatePostInput } from './inputs/post.input';\nimport { Inject, UseGuards } from '@nestjs/common';\nimport RequestWithUser from '../authentication/requestWithUser.interface';\nimport { GraphqlJwtAuthGuard } from '../authentication/graphql-jwt-auth.guard';\nimport { parseResolveInfo, ResolveTree, simplifyParsedResolveInfoFragmentWithType } from 'graphql-parse-resolve-info';\nimport { GraphQLResolveInfo } from 'graphql';\nimport { RedisPubSub } from 'graphql-redis-subscriptions';\nimport { PUB_SUB } from '../pubSub/pubSub.module';\n\nconst POST_ADDED_EVENT = 'postAdded';\n\n@Resolver(() => Post)\nexport class PostsResolver {\n  constructor(\n    private postsService: PostsService,\n    @Inject(PUB_SUB) private pubSub: RedisPubSub\n  ) {}\n\n  @Query(() => [Post])\n  async posts(\n    @Info() info: GraphQLResolveInfo\n  ) {\n    const parsedInfo = parseResolveInfo(info) as ResolveTree;\n    const simplifiedInfo = simplifyParsedResolveInfoFragmentWithType(\n      parsedInfo,\n      info.returnType\n    );\n\n    const posts = 'author' in simplifiedInfo.fields\n      ? await this.postsService.getPostsWithAuthors()\n      : await this.postsService.getPosts();\n\n    return posts.items;\n  }\n\n  @Subscription(() => Post)\n  postAdded() {\n    return this.pubSub.asyncIterator(POST_ADDED_EVENT);\n  }\n\n  @Mutation(() => Post)\n  @UseGuards(GraphqlJwtAuthGuard)\n  async createPost(\n    @Args('input') createPostInput: CreatePostInput,\n    @Context() context: { req: RequestWithUser },\n  ) {\n    const newPost = await this.postsService.createPost(createPostInput, context.req.user);\n    this.pubSub.publish(POST_ADDED_EVENT, { postAdded: newPost });\n    return newPost;\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsSearchService.html":{"url":"injectables/PostsSearchService.html","title":"injectable - PostsSearchService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  PostsSearchService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/postsSearch.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                index\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                count\n                            \n                            \n                                    Async\n                                indexPost\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                search\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(elasticsearchService: ElasticsearchService)\n                    \n                \n                        \n                            \n                                Defined in src/posts/postsSearch.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        elasticsearchService\n                                                  \n                                                        \n                                                                    ElasticsearchService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        count\n                        \n                    \n                \n            \n            \n                \n                    \n                    count(query: string, fields: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/posts/postsSearch.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    fields\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        indexPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    indexPost(post: Post)\n                \n            \n\n\n            \n                \n                    Defined in src/posts/postsSearch.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    post\n                                    \n                                                Post\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(postId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/posts/postsSearch.service.ts:91\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    postId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        search\n                        \n                    \n                \n            \n            \n                \n                    \n                    search(text: string, offset?: number, limit?: number, startId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/posts/postsSearch.service.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    offset\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    limit\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    startId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        0\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(post: Post)\n                \n            \n\n\n            \n                \n                    Defined in src/posts/postsSearch.service.ts:104\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    post\n                                    \n                                                Post\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        index\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'posts'\n                    \n                \n                    \n                        \n                                Defined in src/posts/postsSearch.service.ts:10\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ElasticsearchService } from '@nestjs/elasticsearch';\nimport Post from './post.entity';\nimport PostSearchResult from './types/postSearchResponse.interface';\nimport PostSearchBody from './types/postSearchBody.interface';\nimport PostCountResult from './types/postCountBody.interface';\n\n@Injectable()\nexport default class PostsSearchService {\n  index = 'posts'\n\n  constructor(\n    private readonly elasticsearchService: ElasticsearchService\n  ) {}\n\n  async indexPost(post: Post) {\n    return this.elasticsearchService.index({\n      index: this.index,\n      body: {\n        id: post.id,\n        title: post.title,\n        paragraphs: post.paragraphs,\n        authorId: post.author.id\n      }\n    })\n  }\n\n  async count(query: string, fields: string[]) {\n    const { body } = await this.elasticsearchService.count({\n      index: this.index,\n      body: {\n        query: {\n          multi_match: {\n            query,\n            fields\n          }\n        }\n      }\n    })\n    return body.count;\n  }\n\n  async search(\n    text: string,\n    offset?: number,\n    limit?: number,\n    startId = 0\n  ) {\n    let separateCount = 0;\n    if (startId) {\n      separateCount = await this.count(text, ['title', 'paragraphs']);\n    }\n    const { body } = await this.elasticsearchService.search({\n      index: this.index,\n      from: offset,\n      size: limit,\n      body: {\n        query: {\n          bool: {\n            should: {\n              multi_match: {\n                query: text,\n                fields: ['title', 'paragraphs']\n              }\n            },\n            filter: {\n              range: {\n                id: {\n                  gt: startId\n                }\n              }\n            }\n          }\n        },\n        sort: {\n          id: {\n            order: 'asc'\n          }\n        }\n      }\n    })\n    const count = body.hits.total.value;\n    const hits = body.hits.hits;\n    const results = hits.map((item) => item._source);\n    return {\n      count: startId ? separateCount : count,\n      results\n    }\n  }\n\n  async remove(postId: number) {\n    this.elasticsearchService.deleteByQuery({\n      index: this.index,\n      body: {\n        query: {\n          match: {\n            id: postId,\n          }\n        }\n      }\n    })\n  }\n\n  async update(post: Post) {\n    const newBody: PostSearchBody = {\n      id: post.id,\n      title: post.title,\n      paragraphs: post.paragraphs,\n      authorId: post.author.id\n    }\n\n    const script = Object.entries(newBody).reduce((result, [key, value]) => {\n      return `${result} ctx._source.${key}='${value}';`;\n    }, '');\n\n    return this.elasticsearchService.updateByQuery({\n      index: this.index,\n      body: {\n        query: {\n          match: {\n            id: post.id,\n          }\n        },\n        script: {\n          inline: script\n        }\n      }\n    })\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                clearCache\n                            \n                            \n                                    Async\n                                createPost\n                            \n                            \n                                    Async\n                                deletePost\n                            \n                            \n                                    Async\n                                getPostById\n                            \n                            \n                                    Async\n                                getPosts\n                            \n                            \n                                    Async\n                                getPostsWithAuthors\n                            \n                            \n                                    Async\n                                searchForPosts\n                            \n                            \n                                    Async\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(postsRepository: Repository, postsSearchService: PostsSearchService, cacheManager: Cache)\n                    \n                \n                        \n                            \n                                Defined in src/posts/posts.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        postsRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        postsSearchService\n                                                  \n                                                        \n                                                                        PostsSearchService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cacheManager\n                                                  \n                                                        \n                                                                    Cache\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        clearCache\n                        \n                    \n                \n            \n            \n                \n                    \n                    clearCache()\n                \n            \n\n\n            \n                \n                    Defined in src/posts/posts.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    createPost(post: CreatePostDto, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/posts/posts.service.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    post\n                                    \n                                                CreatePostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    deletePost(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/posts/posts.service.ts:95\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPostById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPostById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/posts/posts.service.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPosts\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPosts(offset?: number, limit?: number, startId?: number, options?: FindManyOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/posts/posts.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    offset\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    limit\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    startId\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            FindManyOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPostsWithAuthors\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPostsWithAuthors(offset?: number, limit?: number, startId?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/posts/posts.service.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    offset\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    limit\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    startId\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        searchForPosts\n                        \n                    \n                \n            \n            \n                \n                    \n                    searchForPosts(text: string, offset?: number, limit?: number, startId?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/posts/posts.service.ts:104\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    offset\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    limit\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    startId\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    updatePost(id: number, post: UpdatePostDto)\n                \n            \n\n\n            \n                \n                    Defined in src/posts/posts.service.ts:84\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    post\n                                    \n                                                UpdatePostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(PostsService.name)\n                    \n                \n                    \n                        \n                                Defined in src/posts/posts.service.ts:16\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { CACHE_MANAGER, Inject, Injectable, Logger } from '@nestjs/common';\nimport CreatePostDto from './dto/createPost.dto';\nimport Post from './post.entity';\nimport UpdatePostDto from './dto/updatePost.dto';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository, In } from 'typeorm';\nimport PostNotFoundException from './exceptions/postNotFound.exception';\nimport User from '../users/user.entity';\nimport PostsSearchService from './postsSearch.service';\nimport { MoreThan, FindManyOptions } from 'typeorm';\nimport { Cache } from 'cache-manager';\nimport { GET_POSTS_CACHE_KEY } from './postsCacheKey.constant';\n\n@Injectable()\nexport default class PostsService {\n  private readonly logger = new Logger(PostsService.name)\n\n  constructor(\n    @InjectRepository(Post)\n    private postsRepository: Repository,\n    private postsSearchService: PostsSearchService,\n    @Inject(CACHE_MANAGER) private cacheManager: Cache\n  ) {}\n\n  async clearCache() {\n    const keys: string[] = await this.cacheManager.store.keys();\n    keys.forEach((key) => {\n      if (key.startsWith(GET_POSTS_CACHE_KEY)) {\n        this.cacheManager.del(key);\n      }\n    })\n  }\n\n  async getPosts(offset?: number, limit?: number, startId?: number, options?: FindManyOptions) {\n    const where: FindManyOptions['where'] = {};\n    let separateCount = 0;\n    if (startId) {\n      where.id = MoreThan(startId);\n      separateCount = await this.postsRepository.count();\n    }\n\n    const [items, count] = await this.postsRepository.findAndCount({\n      where,\n      order: {\n        id: 'ASC'\n      },\n      skip: offset,\n      take: limit,\n      ...options\n    });\n\n    return {\n      items,\n      count: startId ? separateCount : count\n    }\n  }\n\n  async getPostsWithAuthors(offset?: number, limit?: number, startId?: number) {\n    return this.getPosts(offset, limit, startId, {\n      relations: ['author'],\n    })\n  }\n\n  async getPostById(id: number) {\n    const post = await this.postsRepository.findOne(id, { relations: ['author'] });\n    if (post) {\n      return post;\n    }\n    this.logger.warn('Tried to access a post that does not exist');\n    throw new PostNotFoundException(id);\n  }\n\n  async createPost(post: CreatePostDto, user: User) {\n    const newPost = await this.postsRepository.create({\n      ...post,\n      author: user\n    });\n    await this.postsRepository.save(newPost);\n    this.postsSearchService.indexPost(newPost);\n    await this.clearCache();\n    return newPost;\n  }\n\n  async updatePost(id: number, post: UpdatePostDto) {\n    await this.postsRepository.update(id, post);\n    const updatedPost = await this.postsRepository.findOne(id, { relations: ['author'] });\n    if (updatedPost) {\n      await this.postsSearchService.update(updatedPost);\n      await this.clearCache();\n      return updatedPost;\n    }\n    throw new PostNotFoundException(id);\n  }\n\n  async deletePost(id: number) {\n    const deleteResponse = await this.postsRepository.delete(id);\n    if (!deleteResponse.affected) {\n      throw new PostNotFoundException(id);\n    }\n    await this.postsSearchService.remove(id);\n    await this.clearCache();\n  }\n\n  async searchForPosts(text: string, offset?: number, limit?: number, startId?: number) {\n    const { results, count } = await this.postsSearchService.search(text, offset, limit, startId);\n    const ids = results.map(result => result.id);\n    if (!ids.length) {\n      return {\n        items: [],\n        count\n      }\n    }\n    const items = await this.postsRepository\n      .find({\n        where: { id: In(ids) }\n      });\n    return {\n      items,\n      count\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Product.html":{"url":"classes/Product.html","title":"class - Product","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Product\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/product.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                category\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                properties\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ProductCategory\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/product.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/product.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/product.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        properties\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CarProperties | BookProperties\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'jsonb'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/product.entity.ts:20\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Column, Entity, PrimaryGeneratedColumn, ManyToOne } from 'typeorm';\nimport ProductCategory from '../productCategories/productCategory.entity';\nimport { CarProperties } from './types/carProperties.interface';\nimport { BookProperties } from './types/bookProperties.interface';\n\n@Entity()\nclass Product {\n  @PrimaryGeneratedColumn()\n  public id: number;\n\n  @Column()\n  public name: string;\n\n  @ManyToOne(() => ProductCategory, (category: ProductCategory) => category.products)\n  public category: ProductCategory;\n\n  @Column({\n    type: 'jsonb'\n  })\n  public properties: CarProperties | BookProperties;\n}\n\nexport default Product;\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ProductCategoriesController.html":{"url":"controllers/ProductCategoriesController.html","title":"controller - ProductCategoriesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ProductCategoriesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/productCategories/productCategories.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                product-categories\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createProduct\n                            \n                            \n                                getAllProducts\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createProduct\n                        \n                    \n                \n            \n            \n                \n                    \n                    createProduct(productCategory: CreateProductCategoryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/productCategories/productCategories.controller.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    productCategory\n                                    \n                                                CreateProductCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllProducts\n                        \n                    \n                \n            \n            \n                \ngetAllProducts()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/productCategories/productCategories.controller.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Get,\n  UseGuards,\n  UseInterceptors,\n  ClassSerializerInterceptor, Post,\n} from '@nestjs/common';\nimport JwtAuthenticationGuard from '../authentication/jwt-authentication.guard';\nimport ProductCategoriesService from './productCategories.service';\nimport CreateProductCategoryDto from './dto/createProductCategory.dto';\n\n@Controller('product-categories')\n@UseInterceptors(ClassSerializerInterceptor)\nexport default class ProductCategoriesController {\n  constructor(\n    private readonly productsService: ProductCategoriesService\n  ) {}\n\n  @Get()\n  getAllProducts() {\n    return this.productsService.getAllProductCategories();\n  }\n\n  @Post()\n  @UseGuards(JwtAuthenticationGuard)\n  async createProduct(@Body() productCategory: CreateProductCategoryDto) {\n    return this.productsService.createProductCategory(productCategory);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ProductCategoriesModule.html":{"url":"modules/ProductCategoriesModule.html","title":"module - ProductCategoriesModule","body":"\n                   \n\n\n\n\n    Modules\n    ProductCategoriesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ProductCategoriesModule\n\n\n\ncluster_ProductCategoriesModule_providers\n\n\n\n\nProductCategoriesService\n\nProductCategoriesService\n\n\n\nProductCategoriesModule\n\nProductCategoriesModule\n\nProductCategoriesModule -->\n\nProductCategoriesService->ProductCategoriesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/productCategories/productCategories.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ProductCategoriesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ProductCategoriesController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport ProductCategory from './productCategory.entity';\nimport ProductCategoriesController from './productCategories.controller';\nimport ProductCategoriesService from './productCategories.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([ProductCategory])],\n  controllers: [ProductCategoriesController],\n  providers: [ProductCategoriesService],\n})\nexport class ProductCategoriesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ProductCategoriesService.html":{"url":"injectables/ProductCategoriesService.html","title":"injectable - ProductCategoriesService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ProductCategoriesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/productCategories/productCategories.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createProductCategory\n                            \n                            \n                                getAllProductCategories\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(productCategoriesRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/productCategories/productCategories.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        productCategoriesRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createProductCategory\n                        \n                    \n                \n            \n            \n                \n                    \n                    createProductCategory(category: CreateProductCategoryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/productCategories/productCategories.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    category\n                                    \n                                                CreateProductCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllProductCategories\n                        \n                    \n                \n            \n            \n                \ngetAllProductCategories()\n                \n            \n\n\n            \n                \n                    Defined in src/productCategories/productCategories.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport ProductCategory from './productCategory.entity';\nimport CreateProductCategoryDto from './dto/createProductCategory.dto';\n\n@Injectable()\nexport default class ProductCategoriesService {\n  constructor(\n    @InjectRepository(ProductCategory)\n    private productCategoriesRepository: Repository\n  ) {}\n\n  getAllProductCategories() {\n    return this.productCategoriesRepository.find();\n  }\n\n  async createProductCategory(category: CreateProductCategoryDto) {\n    const newProductCategory = await this.productCategoriesRepository.create(category);\n    await this.productCategoriesRepository.save(newProductCategory);\n    return newProductCategory;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ProductCategory.html":{"url":"classes/ProductCategory.html","title":"class - ProductCategory","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ProductCategory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/productCategories/productCategory.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                products\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/productCategories/productCategory.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/productCategories/productCategory.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        products\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Product[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/productCategories/productCategory.entity.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Column, Entity, PrimaryGeneratedColumn, OneToMany } from 'typeorm';\nimport Product from '../products/product.entity';\n\n@Entity()\nclass ProductCategory {\n  @PrimaryGeneratedColumn()\n  public id: number;\n\n  @Column()\n  public name: string;\n\n  @OneToMany(() => Product, (product: Product) => product.category)\n  public products: Product[];\n}\n\nexport default ProductCategory;\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ProductsController.html":{"url":"controllers/ProductsController.html","title":"controller - ProductsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ProductsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/products.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                products\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createProduct\n                            \n                            \n                                getAllProducts\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createProduct\n                        \n                    \n                \n            \n            \n                \n                    \n                    createProduct(product: CreateProductDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/products/products.controller.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    product\n                                    \n                                                CreateProductDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllProducts\n                        \n                    \n                \n            \n            \n                \ngetAllProducts()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/products/products.controller.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Get,\n  UseGuards,\n  UseInterceptors,\n  ClassSerializerInterceptor, Post,\n} from '@nestjs/common';\nimport JwtAuthenticationGuard from '../authentication/jwt-authentication.guard';\nimport CreateProductDto from './dto/createProduct.dto';\nimport ProductsService from './products.service';\n\n@Controller('products')\n@UseInterceptors(ClassSerializerInterceptor)\nexport default class ProductsController {\n  constructor(\n    private readonly productsService: ProductsService\n  ) {}\n\n  @Get()\n  getAllProducts() {\n    return this.productsService.getAllProducts();\n  }\n\n  @Post()\n  @UseGuards(JwtAuthenticationGuard)\n  async createProduct(@Body() product: CreateProductDto) {\n    return this.productsService.createProduct(product);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ProductsModule.html":{"url":"modules/ProductsModule.html","title":"module - ProductsModule","body":"\n                   \n\n\n\n\n    Modules\n    ProductsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ProductsModule\n\n\n\ncluster_ProductsModule_providers\n\n\n\n\nProductsService\n\nProductsService\n\n\n\nProductsModule\n\nProductsModule\n\nProductsModule -->\n\nProductsService->ProductsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/products/products.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ProductsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ProductsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport Product from './product.entity';\nimport ProductsController from './products.controller';\nimport ProductsService from './products.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Product])],\n  controllers: [ProductsController],\n  providers: [ProductsService],\n})\nexport class ProductsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ProductsService.html":{"url":"injectables/ProductsService.html","title":"injectable - ProductsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ProductsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/products.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createProduct\n                            \n                            \n                                getAllProducts\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(productsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/products/products.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        productsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createProduct\n                        \n                    \n                \n            \n            \n                \n                    \n                    createProduct(product: CreateProductDto)\n                \n            \n\n\n            \n                \n                    Defined in src/products/products.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    product\n                                    \n                                                CreateProductDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllProducts\n                        \n                    \n                \n            \n            \n                \ngetAllProducts()\n                \n            \n\n\n            \n                \n                    Defined in src/products/products.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport Product from './product.entity';\nimport CreateProductDto from './dto/createProduct.dto';\n\n@Injectable()\nexport default class ProductsService {\n  constructor(\n    @InjectRepository(Product)\n    private productsRepository: Repository\n  ) {}\n\n  getAllProducts() {\n    return this.productsRepository.find();\n  }\n\n  async createProduct(product: CreateProductDto) {\n    const newProduct = await this.productsRepository.create(product);\n    await this.productsRepository.save(newProduct);\n    return newProduct;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PubSubModule.html":{"url":"modules/PubSubModule.html","title":"module - PubSubModule","body":"\n                   \n\n\n\n\n    Modules\n    PubSubModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/pubSub/pubSub.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { ConfigModule, ConfigService } from '@nestjs/config';\nimport { RedisPubSub } from 'graphql-redis-subscriptions';\nimport { Global, Module } from '@nestjs/common';\n\nexport const PUB_SUB = 'PUB_SUB';\n\n@Global()\n@Module({\n  imports: [ConfigModule],\n  providers: [\n    {\n      provide: PUB_SUB,\n      useFactory: (\n        configService: ConfigService\n      ) => new RedisPubSub({\n        connection: {\n          host: configService.get('REDIS_HOST'),\n          port: configService.get('REDIS_PORT'),\n        }\n      }),\n      inject: [ConfigService]\n    }\n  ],\n  exports: [PUB_SUB],\n})\nexport class PubSubModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PublicFile.html":{"url":"classes/PublicFile.html","title":"class - PublicFile","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PublicFile\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/files/publicFile.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                key\n                            \n                            \n                                    Public\n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/files/publicFile.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/files/publicFile.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/files/publicFile.entity.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity()\nclass PublicFile {\n  @PrimaryGeneratedColumn()\n  public id: number;\n\n  @Column()\n  public url: string;\n\n  @Column()\n  public key: string;\n}\n\nexport default PublicFile;\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterDto.html":{"url":"classes/RegisterDto.html","title":"class - RegisterDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/dto/register.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                            \n                                phoneNumber\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/dto/register.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/dto/register.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(7)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/dto/register.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@Matches(/^\\+[1-9]\\d{1,14}$/)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/dto/register.dto.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsString, IsNotEmpty, MinLength, Matches } from 'class-validator';\n\nexport class RegisterDto {\n  @IsEmail()\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  name: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(7)\n  password: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @Matches(/^\\+[1-9]\\d{1,14}$/)\n  phoneNumber: string;\n}\n\nexport default RegisterDto;\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RequestWithRawBody.html":{"url":"interfaces/RequestWithRawBody.html","title":"interface - RequestWithRawBody","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RequestWithRawBody\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stripeWebhook/requestWithRawBody.interface.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Request\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            rawBody\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        rawBody\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        rawBody:     Buffer\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Buffer\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Request } from 'express';\n\ninterface RequestWithRawBody extends Request {\n  rawBody: Buffer;\n}\n\nexport default RequestWithRawBody;\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RequestWithUser.html":{"url":"interfaces/RequestWithUser.html","title":"interface - RequestWithUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RequestWithUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/requestWithUser.interface.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Request\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:         User\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         User\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Request } from 'express';\nimport User from '../users/user.entity';\n\ninterface RequestWithUser extends Request {\n  user: User;\n}\n\nexport default RequestWithUser;\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SearchModule.html":{"url":"modules/SearchModule.html","title":"module - SearchModule","body":"\n                   \n\n\n\n\n    Modules\n    SearchModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/search/search.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { ElasticsearchModule } from '@nestjs/elasticsearch';\n\n@Module({\n  imports: [\n    ConfigModule,\n    ElasticsearchModule.registerAsync({\n      imports: [ConfigModule],\n      useFactory: async (configService: ConfigService) => ({\n        node: configService.get('ELASTICSEARCH_NODE'),\n        auth: {\n          username: configService.get('ELASTICSEARCH_USERNAME'),\n          password: configService.get('ELASTICSEARCH_PASSWORD'),\n        }\n      }),\n      inject: [ConfigService],\n    }),\n  ],\n  exports: [ElasticsearchModule]\n})\nexport class SearchModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SetDefaultCreditCardDto.html":{"url":"classes/SetDefaultCreditCardDto.html","title":"class - SetDefaultCreditCardDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SetDefaultCreditCardDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/credit-cards/dto/setDefaultCreditCard.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                paymentMethodId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        paymentMethodId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/credit-cards/dto/setDefaultCreditCard.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty } from 'class-validator';\n\nexport class SetDefaultCreditCardDto {\n  @IsString()\n  @IsNotEmpty()\n  paymentMethodId: string;\n}\n\nexport default SetDefaultCreditCardDto;\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SmsController.html":{"url":"controllers/SmsController.html","title":"controller - SmsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  SmsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/sms/sms.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                sms\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                checkVerificationCode\n                            \n                            \n                                    Async\n                                initiatePhoneNumberVerification\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        checkVerificationCode\n                        \n                    \n                \n            \n            \n                \n                    \n                    checkVerificationCode(request: RequestWithUser, verificationData: CheckVerificationCodeDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('check-verification-code')@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/sms/sms.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    verificationData\n                                    \n                                                CheckVerificationCodeDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        initiatePhoneNumberVerification\n                        \n                    \n                \n            \n            \n                \n                    \n                    initiatePhoneNumberVerification(request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('initiate-verification')@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/sms/sms.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  UseGuards,\n  UseInterceptors,\n  ClassSerializerInterceptor, Post, Req, BadRequestException,\n} from '@nestjs/common';\nimport SmsService from './sms.service';\nimport JwtAuthenticationGuard from '../authentication/jwt-authentication.guard';\nimport RequestWithUser from '../authentication/requestWithUser.interface';\nimport CheckVerificationCodeDto from './checkVerificationCode.dto';\n\n@Controller('sms')\n@UseInterceptors(ClassSerializerInterceptor)\nexport default class SmsController {\n  constructor(\n    private readonly smsService: SmsService\n  ) {}\n\n  @Post('initiate-verification')\n  @UseGuards(JwtAuthenticationGuard)\n  async initiatePhoneNumberVerification(@Req() request: RequestWithUser) {\n    if (request.user.isPhoneNumberConfirmed) {\n      throw new BadRequestException('Phone number already confirmed');\n    }\n    await this.smsService.initiatePhoneNumberVerification(request.user.phoneNumber);\n  }\n\n  @Post('check-verification-code')\n  @UseGuards(JwtAuthenticationGuard)\n  async checkVerificationCode(@Req() request: RequestWithUser, @Body() verificationData: CheckVerificationCodeDto) {\n    if (request.user.isPhoneNumberConfirmed) {\n      throw new BadRequestException('Phone number already confirmed');\n    }\n    await this.smsService.confirmPhoneNumber(request.user.id, request.user.phoneNumber, verificationData.code);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SmsModule.html":{"url":"modules/SmsModule.html","title":"module - SmsModule","body":"\n                   \n\n\n\n\n    Modules\n    SmsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_SmsModule\n\n\n\ncluster_SmsModule_providers\n\n\n\ncluster_SmsModule_exports\n\n\n\ncluster_SmsModule_imports\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nSmsModule\n\nSmsModule\n\nSmsModule -->\n\nUsersModule->SmsModule\n\n\n\n\n\nSmsService \n\nSmsService \n\nSmsService  -->\n\nSmsModule->SmsService \n\n\n\n\n\nSmsService\n\nSmsService\n\nSmsModule -->\n\nSmsService->SmsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/sms/sms.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SmsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            SmsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SmsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport SmsService from './sms.service';\nimport SmsController from './sms.controller';\nimport { UsersModule } from '../users/users.module';\n\n@Module({\n  imports: [ConfigModule, UsersModule],\n  controllers: [SmsController],\n  providers: [SmsService],\n  exports: [SmsService]\n})\nexport class SmsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SmsService.html":{"url":"injectables/SmsService.html","title":"injectable - SmsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  SmsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/sms/sms.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                twilioClient\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                confirmPhoneNumber\n                            \n                            \n                                initiatePhoneNumberVerification\n                            \n                            \n                                    Async\n                                sendMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/sms/sms.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        confirmPhoneNumber\n                        \n                    \n                \n            \n            \n                \n                    \n                    confirmPhoneNumber(userId: number, phoneNumber: string, verificationCode: string)\n                \n            \n\n\n            \n                \n                    Defined in src/sms/sms.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    phoneNumber\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    verificationCode\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        initiatePhoneNumberVerification\n                        \n                    \n                \n            \n            \n                \ninitiatePhoneNumberVerification(phoneNumber: string)\n                \n            \n\n\n            \n                \n                    Defined in src/sms/sms.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    phoneNumber\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        sendMessage\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendMessage(receiverPhoneNumber: string, message: string)\n                \n            \n\n\n            \n                \n                    Defined in src/sms/sms.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    receiverPhoneNumber\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        twilioClient\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Twilio\n\n                    \n                \n                    \n                        \n                                Defined in src/sms/sms.service.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { Twilio } from 'twilio';\nimport { UsersService } from '../users/users.service';\n\n@Injectable()\nexport default class SmsService {\n  private twilioClient: Twilio;\n\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly usersService: UsersService\n  ) {\n    const accountSid = configService.get('TWILIO_ACCOUNT_SID');\n    const authToken = configService.get('TWILIO_AUTH_TOKEN');\n\n    this.twilioClient = new Twilio(accountSid, authToken);\n  }\n\n  initiatePhoneNumberVerification(phoneNumber: string) {\n    const serviceSid = this.configService.get('TWILIO_VERIFICATION_SERVICE_SID');\n\n    return this.twilioClient.verify.services(serviceSid)\n      .verifications\n      .create({ to: phoneNumber, channel: 'sms' })\n  }\n\n  async confirmPhoneNumber(userId: number, phoneNumber: string, verificationCode: string) {\n    const serviceSid = this.configService.get('TWILIO_VERIFICATION_SERVICE_SID');\n\n    const result = await this.twilioClient.verify.services(serviceSid)\n      .verificationChecks\n      .create({to: phoneNumber, code: verificationCode})\n\n    if (!result.valid || result.status !== 'approved') {\n      throw new BadRequestException('Wrong code provided');\n    }\n\n    await this.usersService.markPhoneNumberAsConfirmed(userId)\n  }\n\n  async sendMessage(receiverPhoneNumber: string, message: string) {\n    const senderPhoneNumber = this.configService.get('TWILIO_SENDER_PHONE_NUMBER');\n\n    return this.twilioClient.messages\n      .create({ body: message, from: senderPhoneNumber, to: receiverPhoneNumber })\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StripeEvent.html":{"url":"classes/StripeEvent.html","title":"class - StripeEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StripeEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stripeWebhook/StripeEvent.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/stripeWebhook/StripeEvent.entity.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Entity, PrimaryColumn } from 'typeorm';\n\n@Entity()\nclass StripeEvent {\n  @PrimaryColumn()\n  public id: string;\n}\n\nexport default StripeEvent;\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StripeModule.html":{"url":"modules/StripeModule.html","title":"module - StripeModule","body":"\n                   \n\n\n\n\n    Modules\n    StripeModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_StripeModule\n\n\n\ncluster_StripeModule_providers\n\n\n\ncluster_StripeModule_exports\n\n\n\n\nStripeService \n\nStripeService \n\n\n\nStripeModule\n\nStripeModule\n\nStripeService  -->\n\nStripeModule->StripeService \n\n\n\n\n\nStripeService\n\nStripeService\n\nStripeModule -->\n\nStripeService->StripeModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/stripe/stripe.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            StripeService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            StripeService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport StripeService from './stripe.service';\nimport { ConfigModule } from '@nestjs/config';\n\n@Module({\n  imports: [ConfigModule],\n  providers: [StripeService],\n  exports: [StripeService]\n})\nexport class StripeModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StripeService.html":{"url":"injectables/StripeService.html","title":"injectable - StripeService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  StripeService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stripe/stripe.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                stripe\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                attachCreditCard\n                            \n                            \n                                    Public\n                                    Async\n                                charge\n                            \n                            \n                                    Public\n                                    Async\n                                constructEventFromPayload\n                            \n                            \n                                    Public\n                                    Async\n                                createCustomer\n                            \n                            \n                                    Public\n                                    Async\n                                createSubscription\n                            \n                            \n                                    Public\n                                    Async\n                                listCreditCards\n                            \n                            \n                                    Public\n                                    Async\n                                listSubscriptions\n                            \n                            \n                                    Public\n                                    Async\n                                setDefaultCreditCard\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/stripe/stripe.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        attachCreditCard\n                        \n                    \n                \n            \n            \n                \n                    \n                    attachCreditCard(paymentMethodId: string, customerId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/stripe/stripe.service.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    paymentMethodId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    customerId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        charge\n                        \n                    \n                \n            \n            \n                \n                    \n                    charge(amount: number, paymentMethodId: string, customerId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/stripe/stripe.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    amount\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    paymentMethodId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    customerId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        constructEventFromPayload\n                        \n                    \n                \n            \n            \n                \n                    \n                    constructEventFromPayload(signature: string, payload: Buffer)\n                \n            \n\n\n            \n                \n                    Defined in src/stripe/stripe.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    signature\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                            Buffer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createCustomer\n                        \n                    \n                \n            \n            \n                \n                    \n                    createCustomer(name: string, email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/stripe/stripe.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createSubscription\n                        \n                    \n                \n            \n            \n                \n                    \n                    createSubscription(priceId: string, customerId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/stripe/stripe.service.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    priceId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    customerId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        listCreditCards\n                        \n                    \n                \n            \n            \n                \n                    \n                    listCreditCards(customerId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/stripe/stripe.service.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    customerId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        listSubscriptions\n                        \n                    \n                \n            \n            \n                \n                    \n                    listSubscriptions(priceId: string, customerId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/stripe/stripe.service.ts:93\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    priceId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    customerId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        setDefaultCreditCard\n                        \n                    \n                \n            \n            \n                \n                    \n                    setDefaultCreditCard(paymentMethodId: string, customerId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/stripe/stripe.service.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    paymentMethodId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    customerId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        stripe\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Stripe\n\n                    \n                \n                    \n                        \n                                Defined in src/stripe/stripe.service.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, BadRequestException, InternalServerErrorException, NotFoundException } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport Stripe from 'stripe';\nimport StripeError from '../utils/stripeError.enum';\n\n@Injectable()\nexport default class StripeService {\n  private stripe: Stripe;\n\n  constructor(\n    private configService: ConfigService\n  ) {\n    this.stripe = new Stripe(configService.get('STRIPE_SECRET_KEY'), {\n      apiVersion: '2020-08-27',\n    });\n  }\n\n  public async constructEventFromPayload(signature: string, payload: Buffer) {\n    const webhookSecret = this.configService.get('STRIPE_WEBHOOK_SECRET');\n\n    return this.stripe.webhooks.constructEvent(\n      payload,\n      signature,\n      webhookSecret\n    );\n  }\n\n  public async createCustomer(name: string, email: string) {\n    return this.stripe.customers.create({\n      name,\n      email\n    });\n  }\n\n  public async charge(amount: number, paymentMethodId: string, customerId: string) {\n    return this.stripe.paymentIntents.create({\n      amount,\n      customer: customerId,\n      payment_method: paymentMethodId,\n      currency: this.configService.get('STRIPE_CURRENCY'),\n      off_session: true,\n      confirm: true\n    })\n  }\n\n  public async attachCreditCard(paymentMethodId: string, customerId: string) {\n    return this.stripe.setupIntents.create({\n      customer: customerId,\n      payment_method: paymentMethodId,\n    })\n  }\n\n  public async setDefaultCreditCard(paymentMethodId: string, customerId: string) {\n    try {\n      return await this.stripe.customers.update(customerId, {\n        invoice_settings: {\n          default_payment_method: paymentMethodId\n        }\n      })\n    } catch (error) {\n      if (error?.type === StripeError.InvalidRequest) {\n        throw new BadRequestException('Wrong credit card chosen');\n      }\n      throw new InternalServerErrorException();\n    }\n  }\n\n  public async listCreditCards(customerId: string) {\n    return this.stripe.paymentMethods.list({\n      customer: customerId,\n      type: 'card',\n    });\n  }\n\n  public async createSubscription(priceId: string, customerId: string,) {\n    try {\n      return await this.stripe.subscriptions.create({\n        customer: customerId,\n        items: [\n          {\n            price: priceId\n          }\n        ]\n      })\n    } catch (error) {\n      if (error?.code === StripeError.ResourceMissing) {\n        throw new BadRequestException('Credit card not set up');\n      }\n      throw new InternalServerErrorException();\n    }\n  }\n\n  public async listSubscriptions(priceId: string, customerId: string,) {\n    return this.stripe.subscriptions.list({\n      customer: customerId,\n      price: priceId,\n      expand: ['data.latest_invoice', 'data.latest_invoice.payment_intent']\n    })\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/StripeWebhookController.html":{"url":"controllers/StripeWebhookController.html","title":"controller - StripeWebhookController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  StripeWebhookController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stripeWebhook/stripeWebhook.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                webhook\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                handleIncomingEvents\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        handleIncomingEvents\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleIncomingEvents(signature: string, request: RequestWithRawBody)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/stripeWebhook/stripeWebhook.controller.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    signature\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    request\n                                    \n                                                RequestWithRawBody\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post, Headers, Req, BadRequestException } from '@nestjs/common';\nimport StripeService from '../stripe/stripe.service';\nimport RequestWithRawBody from './requestWithRawBody.interface';\nimport { UsersService } from '../users/users.service';\nimport StripeWebhookService from './stripeWebhook.service';\n\n@Controller('webhook')\nexport default class StripeWebhookController {\n  constructor(\n    private readonly stripeService: StripeService,\n    private readonly usersService: UsersService,\n    private readonly stripeWebhookService: StripeWebhookService\n  ) {}\n\n  @Post()\n  async handleIncomingEvents(\n    @Headers('stripe-signature') signature: string,\n    @Req() request: RequestWithRawBody\n  ) {\n    if (!signature) {\n      throw new BadRequestException('Missing stripe-signature header');\n    }\n\n    const event = await this.stripeService.constructEventFromPayload(signature, request.rawBody);\n\n    if (event.type === 'customer.subscription.updated' || event.type === 'customer.subscription.created') {\n      return this.stripeWebhookService.processSubscriptionUpdate(event);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StripeWebhookModule.html":{"url":"modules/StripeWebhookModule.html","title":"module - StripeWebhookModule","body":"\n                   \n\n\n\n\n    Modules\n    StripeWebhookModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_StripeWebhookModule\n\n\n\ncluster_StripeWebhookModule_imports\n\n\n\ncluster_StripeWebhookModule_providers\n\n\n\n\nStripeModule\n\nStripeModule\n\n\n\nStripeWebhookModule\n\nStripeWebhookModule\n\nStripeWebhookModule -->\n\nStripeModule->StripeWebhookModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nStripeWebhookModule -->\n\nUsersModule->StripeWebhookModule\n\n\n\n\n\nStripeWebhookService\n\nStripeWebhookService\n\nStripeWebhookModule -->\n\nStripeWebhookService->StripeWebhookModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/stripeWebhook/stripeWebhook.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            StripeWebhookService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            StripeWebhookController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            StripeModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport StripeWebhookController from './stripeWebhook.controller';\nimport { StripeModule } from '../stripe/stripe.module';\nimport { UsersModule } from '../users/users.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport StripeEvent from './StripeEvent.entity';\nimport StripeWebhookService from './stripeWebhook.service';\n\n@Module({\n  imports: [\n    StripeModule,\n    UsersModule,\n    TypeOrmModule.forFeature([StripeEvent]),\n  ],\n  controllers: [StripeWebhookController],\n  providers: [StripeWebhookService],\n})\nexport class StripeWebhookModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StripeWebhookService.html":{"url":"injectables/StripeWebhookService.html","title":"injectable - StripeWebhookService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  StripeWebhookService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stripeWebhook/stripeWebhook.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createEvent\n                            \n                            \n                                    Async\n                                processSubscriptionUpdate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(eventsRepository: Repository, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/stripeWebhook/stripeWebhook.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        eventsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createEvent\n                        \n                    \n                \n            \n            \n                \ncreateEvent(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/stripeWebhook/stripeWebhook.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        processSubscriptionUpdate\n                        \n                    \n                \n            \n            \n                \n                    \n                    processSubscriptionUpdate(event: Stripe.Event)\n                \n            \n\n\n            \n                \n                    Defined in src/stripeWebhook/stripeWebhook.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                            Stripe.Event\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport StripeEvent from './StripeEvent.entity';\nimport { Repository } from 'typeorm';\nimport Stripe from 'stripe';\nimport PostgresErrorCode from '../database/postgresErrorCode.enum';\nimport { UsersService } from '../users/users.service';\n\n@Injectable()\nexport default class StripeWebhookService {\n  constructor(\n    @InjectRepository(StripeEvent)\n    private eventsRepository: Repository,\n    private readonly usersService: UsersService,\n  ) {}\n\n  createEvent(id: string) {\n    return this.eventsRepository.insert({ id });\n  }\n\n  async processSubscriptionUpdate(event: Stripe.Event) {\n    try {\n      await this.createEvent(event.id);\n    } catch (error) {\n      if (error?.code === PostgresErrorCode.UniqueViolation) {\n        throw new BadRequestException('This event was already processed');\n      }\n    }\n\n    const data = event.data.object as Stripe.Subscription;\n\n    const customerId: string = data.customer as string;\n    const subscriptionStatus = data.status;\n\n    await this.usersService.updateMonthlySubscriptionStatus(customerId, subscriptionStatus);\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Subscriber.html":{"url":"interfaces/Subscriber.html","title":"interface - Subscriber","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Subscriber\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/subscribers/subscriber.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Subscriber {\n  id: number;\n  email: string;\n  name: string;\n}\n\nexport default Subscriber;\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SubscribersController.html":{"url":"controllers/SubscribersController.html","title":"controller - SubscribersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  SubscribersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/subscribers/subscribers.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                subscribers\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createPost\n                            \n                            \n                                    Async\n                                getSubscribers\n                            \n                            \n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    createPost(subscriber: CreateSubscriberDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/subscribers/subscribers.controller.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    subscriber\n                                    \n                                                CreateSubscriberDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getSubscribers\n                        \n                    \n                \n            \n            \n                \n                    \n                    getSubscribers()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/subscribers/subscribers.controller.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \nonModuleInit()\n                \n            \n\n\n            \n                \n                    Defined in src/subscribers/subscribers.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Get,\n  Post,\n  UseGuards,\n  UseInterceptors,\n  ClassSerializerInterceptor, Inject, OnModuleInit,\n} from '@nestjs/common';\nimport JwtAuthenticationGuard from '../authentication/jwt-authentication.guard';\nimport CreateSubscriberDto from './dto/createSubscriber.dto';\nimport { ClientGrpc } from '@nestjs/microservices';\nimport SubscribersService from './subscribers.service.interface';\n\n@Controller('subscribers')\n@UseInterceptors(ClassSerializerInterceptor)\nexport default class SubscribersController implements OnModuleInit {\n  private subscribersService: SubscribersService;\n\n  constructor(@Inject('SUBSCRIBERS_PACKAGE') private client: ClientGrpc) {}\n\n  onModuleInit() {\n    this.subscribersService = this.client.getService('SubscribersService');\n  }\n\n  @Get()\n  async getSubscribers() {\n    return this.subscribersService.getAllSubscribers({});\n  }\n\n  @Post()\n  @UseGuards(JwtAuthenticationGuard)\n  async createPost(@Body() subscriber: CreateSubscriberDto) {\n    return this.subscribersService.addSubscriber(subscriber);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SubscribersModule.html":{"url":"modules/SubscribersModule.html","title":"module - SubscribersModule","body":"\n                   \n\n\n\n\n    Modules\n    SubscribersModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/subscribers/subscribers.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            SubscribersController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport SubscribersController from './subscribers.controller';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { ClientProxyFactory, Transport } from '@nestjs/microservices';\nimport { join } from \"path\";\n\n@Module({\n  imports: [ConfigModule],\n  controllers: [SubscribersController],\n  providers: [\n    {\n      provide: 'SUBSCRIBERS_PACKAGE',\n      useFactory: (configService: ConfigService) => {\n        return ClientProxyFactory.create({\n          transport: Transport.GRPC,\n          options: {\n            package: 'subscribers',\n            protoPath: join(process.cwd(), 'src/subscribers/subscribers.proto'),\n            url: configService.get('GRPC_CONNECTION_URL')\n          },\n        })\n      },\n      inject: [ConfigService],\n    }\n  ],\n})\nexport class SubscribersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SubscribersService.html":{"url":"interfaces/SubscribersService.html","title":"interface - SubscribersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SubscribersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/subscribers/subscribers.service.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        addSubscriber\n                                    \n                                \n                                \n                                    \n                                        getAllSubscribers\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addSubscriber\n                        \n                    \n                \n            \n            \n                \naddSubscriber(subscriber: CreateSubscriberDto)\n                \n            \n\n\n            \n                \n                    Defined in src/subscribers/subscribers.service.interface.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    subscriber\n                                    \n                                                CreateSubscriberDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllSubscribers\n                        \n                    \n                \n            \n            \n                \ngetAllSubscribers(params: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/subscribers/subscribers.service.interface.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import CreateSubscriberDto from './dto/createSubscriber.dto';\nimport Subscriber from './subscriber.service';\n\ninterface SubscribersService {\n  addSubscriber(subscriber: CreateSubscriberDto): Promise\n  getAllSubscribers(params: {}): Promise\n}\n\nexport default SubscribersService;\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SubscriptionsController.html":{"url":"controllers/SubscriptionsController.html","title":"controller - SubscriptionsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  SubscriptionsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/subscriptions/subscriptions.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                subscriptions\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createMonthlySubscription\n                            \n                            \n                                    Async\n                                getMonthlySubscription\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createMonthlySubscription\n                        \n                    \n                \n            \n            \n                \n                    \n                    createMonthlySubscription(request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('monthly')@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/subscriptions/subscriptions.controller.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getMonthlySubscription\n                        \n                    \n                \n            \n            \n                \n                    \n                    getMonthlySubscription(request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('monthly')@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/subscriptions/subscriptions.controller.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post, Req, UseGuards, Get } from '@nestjs/common';\nimport JwtAuthenticationGuard from '../authentication/jwt-authentication.guard';\nimport RequestWithUser from '../authentication/requestWithUser.interface';\nimport SubscriptionsService from './subscriptions.service';\n\n@Controller('subscriptions')\nexport default class SubscriptionsController {\n  constructor(\n    private readonly subscriptionsService: SubscriptionsService\n  ) {}\n\n  @Post('monthly')\n  @UseGuards(JwtAuthenticationGuard)\n  async createMonthlySubscription(@Req() request: RequestWithUser) {\n    return this.subscriptionsService.createMonthlySubscription(request.user.stripeCustomerId);\n  }\n\n  @Get('monthly')\n  @UseGuards(JwtAuthenticationGuard)\n  async getMonthlySubscription(@Req() request: RequestWithUser) {\n    return this.subscriptionsService.getMonthlySubscription(request.user.stripeCustomerId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SubscriptionsModule.html":{"url":"modules/SubscriptionsModule.html","title":"module - SubscriptionsModule","body":"\n                   \n\n\n\n\n    Modules\n    SubscriptionsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_SubscriptionsModule\n\n\n\ncluster_SubscriptionsModule_imports\n\n\n\ncluster_SubscriptionsModule_providers\n\n\n\n\nStripeModule\n\nStripeModule\n\n\n\nSubscriptionsModule\n\nSubscriptionsModule\n\nSubscriptionsModule -->\n\nStripeModule->SubscriptionsModule\n\n\n\n\n\nSubscriptionsService\n\nSubscriptionsService\n\nSubscriptionsModule -->\n\nSubscriptionsService->SubscriptionsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/subscriptions/subscriptions.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SubscriptionsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            SubscriptionsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            StripeModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { StripeModule } from '../stripe/stripe.module';\nimport { ConfigModule } from '@nestjs/config';\nimport SubscriptionsController from './subscriptions.controller';\nimport SubscriptionsService from './subscriptions.service';\n\n@Module({\n  imports: [StripeModule, ConfigModule],\n  controllers: [SubscriptionsController],\n  providers: [SubscriptionsService],\n})\nexport class SubscriptionsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SubscriptionsService.html":{"url":"injectables/SubscriptionsService.html","title":"injectable - SubscriptionsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  SubscriptionsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/subscriptions/subscriptions.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createMonthlySubscription\n                            \n                            \n                                    Public\n                                    Async\n                                getMonthlySubscription\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(stripeService: StripeService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/subscriptions/subscriptions.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        stripeService\n                                                  \n                                                        \n                                                                        StripeService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createMonthlySubscription\n                        \n                    \n                \n            \n            \n                \n                    \n                    createMonthlySubscription(customerId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/subscriptions/subscriptions.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    customerId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getMonthlySubscription\n                        \n                    \n                \n            \n            \n                \n                    \n                    getMonthlySubscription(customerId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/subscriptions/subscriptions.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    customerId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable, NotFoundException } from '@nestjs/common';\nimport StripeService from '../stripe/stripe.service';\nimport { ConfigService } from '@nestjs/config';\n\n@Injectable()\nexport default class SubscriptionsService {\n  constructor(\n    private readonly stripeService: StripeService,\n    private readonly configService: ConfigService\n  ) {}\n\n  public async createMonthlySubscription(customerId: string) {\n    const priceId = this.configService.get('MONTHLY_SUBSCRIPTION_PRICE_ID');\n\n    const subscriptions = await this.stripeService.listSubscriptions(priceId, customerId);\n    if (subscriptions.data.length) {\n      throw new BadRequestException('Customer already subscribed');\n    }\n    return this.stripeService.createSubscription(priceId, customerId);\n  }\n\n  public async getMonthlySubscription(customerId: string) {\n    const priceId = this.configService.get('MONTHLY_SUBSCRIPTION_PRICE_ID');\n    const subscriptions = await this.stripeService.listSubscriptions(priceId, customerId);\n\n    if (!subscriptions.data.length) {\n      return new NotFoundException('Customer not subscribed');\n    }\n    return subscriptions.data[0];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Timestamp.html":{"url":"classes/Timestamp.html","title":"class - Timestamp","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Timestamp\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/scalars/timestamp.scalar.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        CustomScalar\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                description\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                parseLiteral\n                            \n                            \n                                parseValue\n                            \n                            \n                                serialize\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '`Date` type as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.'\n                    \n                \n                    \n                        \n                                Defined in src/utils/scalars/timestamp.scalar.ts:6\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        parseLiteral\n                        \n                    \n                \n            \n            \n                \nparseLiteral(valueNode: ValueNode)\n                \n            \n\n\n            \n                \n                    Defined in src/utils/scalars/timestamp.scalar.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    valueNode\n                                    \n                                            ValueNode\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parseValue\n                        \n                    \n                \n            \n            \n                \nparseValue(value: string | number | null)\n                \n            \n\n\n            \n                \n                    Defined in src/utils/scalars/timestamp.scalar.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            string | number | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        serialize\n                        \n                    \n                \n            \n            \n                \nserialize(value: Date)\n                \n            \n\n\n            \n                \n                    Defined in src/utils/scalars/timestamp.scalar.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                Date\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Scalar, CustomScalar } from '@nestjs/graphql';\nimport { Kind, ValueNode } from 'graphql';\n\n@Scalar('Timestamp', () => Date)\nexport class Timestamp implements CustomScalar {\n  description = '`Date` type as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.';\n\n  serialize(value: Date) {\n    return value instanceof Date ? value.getTime() : null;\n  }\n\n  parseValue(value: string | number | null) {\n    try {\n      const number = Number(value);\n      return value !== null ? new Date(number) : null;\n    } catch {\n      return null;\n    }\n  }\n\n  parseLiteral(valueNode: ValueNode) {\n    if (\n      valueNode.kind === Kind.INT ||\n      valueNode.kind === Kind.STRING\n    ) {\n      try {\n        const number = Number(valueNode.value);\n        return new Date(number);\n      } catch {\n        return null;\n      }\n    }\n    return null;\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TokenPayload.html":{"url":"interfaces/TokenPayload.html","title":"interface - TokenPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TokenPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/tokenPayload.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            isSecondFactorAuthenticated\n                                        \n                                \n                                \n                                        \n                                            userId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        isSecondFactorAuthenticated\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isSecondFactorAuthenticated:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        userId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        userId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        interface TokenPayload {\n  userId: number;\n  isSecondFactorAuthenticated?: boolean;\n}\n\nexport default TokenPayload;\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TokenVerificationDto.html":{"url":"classes/TokenVerificationDto.html","title":"class - TokenVerificationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TokenVerificationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/googleAuthentication/tokenVerification.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/googleAuthentication/tokenVerification.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty } from 'class-validator';\n\nexport class TokenVerificationDto {\n  @IsString()\n  @IsNotEmpty()\n  token: string;\n}\n\nexport default TokenVerificationDto;\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TwoFactorAuthenticationCodeDto.html":{"url":"classes/TwoFactorAuthenticationCodeDto.html","title":"class - TwoFactorAuthenticationCodeDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TwoFactorAuthenticationCodeDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/twoFactor/dto/twoFactorAuthenticationCode.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                twoFactorAuthenticationCode\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        twoFactorAuthenticationCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/twoFactor/dto/twoFactorAuthenticationCode.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\nexport class TwoFactorAuthenticationCodeDto {\n  @IsString()\n  @IsNotEmpty()\n  twoFactorAuthenticationCode: string;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TwoFactorAuthenticationController.html":{"url":"controllers/TwoFactorAuthenticationController.html","title":"controller - TwoFactorAuthenticationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TwoFactorAuthenticationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/twoFactor/twoFactorAuthentication.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                2fa\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                authenticate\n                            \n                            \n                                    Async\n                                register\n                            \n                            \n                                    Async\n                                turnOnTwoFactorAuthentication\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        authenticate\n                        \n                    \n                \n            \n            \n                \n                    \n                    authenticate(request: RequestWithUser, undefined: TwoFactorAuthenticationCodeDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('authenticate')@HttpCode(200)@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/authentication/twoFactor/twoFactorAuthentication.controller.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                TwoFactorAuthenticationCodeDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(response: Response, request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('generate')@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/authentication/twoFactor/twoFactorAuthentication.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    response\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        turnOnTwoFactorAuthentication\n                        \n                    \n                \n            \n            \n                \n                    \n                    turnOnTwoFactorAuthentication(request: RequestWithUser, undefined: TwoFactorAuthenticationCodeDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('turn-on')@HttpCode(200)@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/authentication/twoFactor/twoFactorAuthentication.controller.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                TwoFactorAuthenticationCodeDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  ClassSerializerInterceptor,\n  Controller,\n  Post,\n  UseInterceptors,\n  Res,\n  UseGuards,\n  Req,\n  Body,\n  UnauthorizedException, HttpCode,\n} from '@nestjs/common';\nimport { TwoFactorAuthenticationService } from './twoFactorAuthentication.service';\nimport { Response } from 'express';\nimport JwtAuthenticationGuard from '../jwt-authentication.guard';\nimport RequestWithUser from '../requestWithUser.interface';\nimport { UsersService } from '../../users/users.service';\nimport { TwoFactorAuthenticationCodeDto } from './dto/twoFactorAuthenticationCode.dto';\nimport { AuthenticationService } from '../authentication.service';\n\n@Controller('2fa')\n@UseInterceptors(ClassSerializerInterceptor)\nexport class TwoFactorAuthenticationController {\n  constructor(\n    private readonly twoFactorAuthenticationService: TwoFactorAuthenticationService,\n    private readonly usersService: UsersService,\n    private readonly authenticationService: AuthenticationService\n  ) {}\n\n  @Post('generate')\n  @UseGuards(JwtAuthenticationGuard)\n  async register(@Res() response: Response, @Req() request: RequestWithUser) {\n    const { otpauthUrl } = await this.twoFactorAuthenticationService.generateTwoFactorAuthenticationSecret(request.user);\n\n    return this.twoFactorAuthenticationService.pipeQrCodeStream(response, otpauthUrl);\n  }\n\n  @Post('turn-on')\n  @HttpCode(200)\n  @UseGuards(JwtAuthenticationGuard)\n  async turnOnTwoFactorAuthentication(\n    @Req() request: RequestWithUser,\n    @Body() { twoFactorAuthenticationCode } : TwoFactorAuthenticationCodeDto\n  ) {\n    const isCodeValid = this.twoFactorAuthenticationService.isTwoFactorAuthenticationCodeValid(\n      twoFactorAuthenticationCode, request.user\n    );\n    if (!isCodeValid) {\n      throw new UnauthorizedException('Wrong authentication code');\n    }\n    await this.usersService.turnOnTwoFactorAuthentication(request.user.id);\n  }\n\n  @Post('authenticate')\n  @HttpCode(200)\n  @UseGuards(JwtAuthenticationGuard)\n  async authenticate(\n    @Req() request: RequestWithUser,\n    @Body() { twoFactorAuthenticationCode } : TwoFactorAuthenticationCodeDto\n  ) {\n    const isCodeValid = this.twoFactorAuthenticationService.isTwoFactorAuthenticationCodeValid(\n      twoFactorAuthenticationCode, request.user\n    );\n    if (!isCodeValid) {\n      throw new UnauthorizedException('Wrong authentication code');\n    }\n\n    const accessTokenCookie = this.authenticationService.getCookieWithJwtAccessToken(request.user.id, true);\n\n    request.res.setHeader('Set-Cookie', [accessTokenCookie]);\n\n    return request.user;\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TwoFactorAuthenticationService.html":{"url":"injectables/TwoFactorAuthenticationService.html","title":"injectable - TwoFactorAuthenticationService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  TwoFactorAuthenticationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/twoFactor/twoFactorAuthentication.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                generateTwoFactorAuthenticationSecret\n                            \n                            \n                                    Public\n                                isTwoFactorAuthenticationCodeValid\n                            \n                            \n                                    Public\n                                    Async\n                                pipeQrCodeStream\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/authentication/twoFactor/twoFactorAuthentication.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        generateTwoFactorAuthenticationSecret\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateTwoFactorAuthenticationSecret(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/twoFactor/twoFactorAuthentication.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        isTwoFactorAuthenticationCodeValid\n                        \n                    \n                \n            \n            \n                \n                    \n                    isTwoFactorAuthenticationCodeValid(twoFactorAuthenticationCode: string, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/twoFactor/twoFactorAuthentication.service.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    twoFactorAuthenticationCode\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        pipeQrCodeStream\n                        \n                    \n                \n            \n            \n                \n                    \n                    pipeQrCodeStream(stream: Response, otpauthUrl: string)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/twoFactor/twoFactorAuthentication.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    stream\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    otpauthUrl\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { authenticator } from 'otplib';\nimport { toFileStream } from 'qrcode';\nimport { Response } from 'express';\nimport User from '../../users/user.entity';\nimport { UsersService } from '../../users/users.service';\nimport { ConfigService } from '@nestjs/config';\n\n@Injectable()\nexport class TwoFactorAuthenticationService {\n  constructor (\n    private readonly usersService: UsersService,\n    private readonly configService: ConfigService\n  ) {}\n\n  public async generateTwoFactorAuthenticationSecret(user: User) {\n    const secret = authenticator.generateSecret();\n\n    const otpauthUrl = authenticator.keyuri(user.email, this.configService.get('TWO_FACTOR_AUTHENTICATION_APP_NAME'), secret);\n\n    await this.usersService.setTwoFactorAuthenticationSecret(secret, user.id);\n\n    return {\n      secret,\n      otpauthUrl\n    }\n  }\n\n  public isTwoFactorAuthenticationCodeValid(twoFactorAuthenticationCode: string, user: User) {\n    return authenticator.verify({\n      token: twoFactorAuthenticationCode,\n      secret: user.twoFactorAuthenticationSecret\n    })\n  }\n\n  public async pipeQrCodeStream(stream: Response, otpauthUrl: string) {\n    return toFileStream(stream, otpauthUrl);\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateCategoryDto.html":{"url":"classes/UpdateCategoryDto.html","title":"class - UpdateCategoryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateCategoryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/categories/dto/updateCategory.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/dto/updateCategory.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/dto/updateCategory.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty, IsNumber, IsOptional } from 'class-validator';\n\nexport class UpdateCategoryDto {\n  @IsNumber()\n  @IsOptional()\n  id: number;\n\n  @IsString()\n  @IsNotEmpty()\n  @IsOptional()\n  name: string;\n}\n\nexport default UpdateCategoryDto;\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdatePostDto.html":{"url":"classes/UpdatePostDto.html","title":"class - UpdatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dto/updatePost.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                paragraphs\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/updatePost.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        paragraphs\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString({each: true})@IsNotEmpty()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/updatePost.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/updatePost.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty, IsNumber, IsOptional } from 'class-validator';\n\nexport class UpdatePostDto {\n  @IsNumber()\n  @IsOptional()\n  id: number;\n\n  @IsString({each: true})\n  @IsNotEmpty()\n  @IsOptional()\n  paragraphs: string[];\n\n  @IsString()\n  @IsNotEmpty()\n  @IsOptional()\n  title: string;\n}\n\nexport default UpdatePostDto;\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                address\n                            \n                            \n                                    Public\n                                    Optional\n                                avatar\n                            \n                            \n                                    Public\n                                    Optional\n                                currentHashedRefreshToken\n                            \n                            \n                                    Public\n                                email\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                isEmailConfirmed\n                            \n                            \n                                    Public\n                                isPhoneNumberConfirmed\n                            \n                            \n                                    Public\n                                isRegisteredWithGoogle\n                            \n                            \n                                    Public\n                                isTwoFactorAuthenticationEnabled\n                            \n                            \n                                    Public\n                                    Optional\n                                monthlySubscriptionStatus\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                password\n                            \n                            \n                                    Public\n                                    Optional\n                                phoneNumber\n                            \n                            \n                                    Public\n                                    Optional\n                                posts\n                            \n                            \n                                    Public\n                                stripeCustomerId\n                            \n                            \n                                    Public\n                                    Optional\n                                twoFactorAuthenticationSecret\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Address\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, {eager: true, cascade: true})@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PublicFile\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @JoinColumn()@OneToOne(undefined, {eager: true, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        currentHashedRefreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isEmailConfirmed\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isPhoneNumberConfirmed\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isRegisteredWithGoogle\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isTwoFactorAuthenticationEnabled\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        monthlySubscriptionStatus\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        stripeCustomerId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        twoFactorAuthenticationSecret\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:55\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Column, Entity, JoinColumn, OneToMany, OneToOne, PrimaryGeneratedColumn } from 'typeorm';\nimport { Exclude } from 'class-transformer';\nimport Address from './address.entity';\nimport Post from '../posts/post.entity';\nimport PublicFile from '../files/publicFile.entity';\n\n@Entity()\nclass User {\n  @PrimaryGeneratedColumn()\n  public id: number;\n\n  @Column({ unique: true })\n  public email: string;\n\n  @Column({ nullable: true })\n  public phoneNumber?: string;\n\n  @Column()\n  public name: string;\n\n  @Column({ nullable: true })\n  @Exclude()\n  public password?: string;\n\n  @Column({ default: false })\n  public isRegisteredWithGoogle: boolean;\n\n  @OneToOne(() => Address, {\n    eager: true,\n    cascade: true\n  })\n  @JoinColumn()\n  public address: Address;\n\n  @OneToMany(() => Post, (post: Post) => post.author)\n  public posts?: Post[];\n\n  @JoinColumn()\n  @OneToOne(\n    () => PublicFile,\n    {\n      eager: true,\n      nullable: true\n    }\n  )\n  public avatar?: PublicFile;\n\n  @Column({\n    nullable: true\n  })\n  @Exclude()\n  public currentHashedRefreshToken?: string;\n\n  @Column({ nullable: true })\n  public twoFactorAuthenticationSecret?: string;\n\n  @Column({ default: false })\n  public isTwoFactorAuthenticationEnabled: boolean;\n\n  @Column()\n  public stripeCustomerId: string;\n\n  @Column({ nullable: true })\n  public monthlySubscriptionStatus?: string;\n\n  @Column({ default: false })\n  public isEmailConfirmed: boolean;\n\n  @Column({ default: false })\n  public isPhoneNumberConfirmed: boolean;\n}\n\nexport default User;\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User-1.html":{"url":"classes/User-1.html","title":"class - User-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/models/user.model.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/models/user.model.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/models/user.model.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, Int, ObjectType } from '@nestjs/graphql';\n\n@ObjectType()\nexport class User {\n  @Field(() => Int)\n  id: number;\n\n  @Field()\n  email: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addAvatar\n                            \n                            \n                                    Async\n                                deleteAvatar\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    addAvatar(request: RequestWithUser, file: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('avatar')@UseGuards(JwtAuthenticationGuard)@UseInterceptors(undefined)\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteAvatar(request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('avatar')@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { UsersService } from './users.service';\nimport { Controller, Post, Delete, Req, UploadedFile, UseGuards, UseInterceptors } from '@nestjs/common';\nimport JwtAuthenticationGuard from '../authentication/jwt-authentication.guard';\nimport RequestWithUser from '../authentication/requestWithUser.interface';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport { Express } from 'express';\n\n@Controller('users')\nexport class UsersController {\n  constructor(\n    private readonly usersService: UsersService,\n  ) {}\n\n  @Post('avatar')\n  @UseGuards(JwtAuthenticationGuard)\n  @UseInterceptors(FileInterceptor('file'))\n  async addAvatar(@Req() request: RequestWithUser, @UploadedFile() file: Express.Multer.File) {\n    return this.usersService.addAvatar(request.user.id, file.buffer, file.originalname);\n  }\n\n  @Delete('avatar')\n  @UseGuards(JwtAuthenticationGuard)\n  async deleteAvatar(@Req() request: RequestWithUser) {\n    return this.usersService.deleteAvatar(request.user.id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_imports\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsersModule_exports\n\n\n\n\nFilesModule\n\nFilesModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nFilesModule->UsersModule\n\n\n\n\n\nStripeModule\n\nStripeModule\n\nUsersModule -->\n\nStripeModule->UsersModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            FilesModule\n                        \n                        \n                            StripeModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport User from './user.entity';\nimport { FilesModule } from '../files/files.module';\nimport { UsersController } from './users.controller';\nimport { StripeModule } from '../stripe/stripe.module';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([User]),\n    FilesModule,\n    StripeModule\n  ],\n  providers: [UsersService],\n  exports: [UsersService],\n  controllers: [UsersController]\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addAvatar\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                createWithGoogle\n                            \n                            \n                                    Async\n                                deleteAvatar\n                            \n                            \n                                    Async\n                                getByEmail\n                            \n                            \n                                    Async\n                                getById\n                            \n                            \n                                    Async\n                                getByIds\n                            \n                            \n                                    Async\n                                getUserIfRefreshTokenMatches\n                            \n                            \n                                    Async\n                                markEmailAsConfirmed\n                            \n                            \n                                markPhoneNumberAsConfirmed\n                            \n                            \n                                    Async\n                                removeRefreshToken\n                            \n                            \n                                    Async\n                                setCurrentRefreshToken\n                            \n                            \n                                    Async\n                                setTwoFactorAuthenticationSecret\n                            \n                            \n                                    Async\n                                turnOnTwoFactorAuthentication\n                            \n                            \n                                    Async\n                                updateMonthlySubscriptionStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository, filesService: FilesService, connection: Connection, stripeService: StripeService)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        filesService\n                                                  \n                                                        \n                                                                        FilesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        connection\n                                                  \n                                                        \n                                                                    Connection\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        stripeService\n                                                  \n                                                        \n                                                                        StripeService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    addAvatar(userId: number, imageBuffer: Buffer, filename: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    imageBuffer\n                                    \n                                            Buffer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    filename\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(userData: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userData\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createWithGoogle\n                        \n                    \n                \n            \n            \n                \n                    \n                    createWithGoogle(email: string, name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteAvatar(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:92\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getByEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    getByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getByIds\n                        \n                    \n                \n            \n            \n                \n                    \n                    getByIds(ids: number[])\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ids\n                                    \n                                            number[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserIfRefreshTokenMatches\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserIfRefreshTokenMatches(refreshToken: string, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:122\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        markEmailAsConfirmed\n                        \n                    \n                \n            \n            \n                \n                    \n                    markEmailAsConfirmed(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:135\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        markPhoneNumberAsConfirmed\n                        \n                    \n                \n            \n            \n                \nmarkPhoneNumberAsConfirmed(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:141\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeRefreshToken(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:147\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        setCurrentRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    setCurrentRefreshToken(refreshToken: string, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:115\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        setTwoFactorAuthenticationSecret\n                        \n                    \n                \n            \n            \n                \n                    \n                    setTwoFactorAuthenticationSecret(secret: string, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:153\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    secret\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        turnOnTwoFactorAuthentication\n                        \n                    \n                \n            \n            \n                \n                    \n                    turnOnTwoFactorAuthentication(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:159\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateMonthlySubscriptionStatus\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateMonthlySubscriptionStatus(stripeCustomerId: string, monthlySubscriptionStatus: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    stripeCustomerId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    monthlySubscriptionStatus\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable, InternalServerErrorException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository, Connection, In } from 'typeorm';\nimport User from './user.entity';\nimport CreateUserDto from './dto/createUser.dto';\nimport { FilesService } from '../files/files.service';\nimport * as bcrypt from 'bcrypt';\nimport StripeService from '../stripe/stripe.service';\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    @InjectRepository(User)\n    private usersRepository: Repository,\n    private readonly filesService: FilesService,\n    private connection: Connection,\n    private stripeService: StripeService\n  ) {}\n\n  async updateMonthlySubscriptionStatus(\n    stripeCustomerId: string, monthlySubscriptionStatus: string\n  ) {\n    return this.usersRepository.update(\n      { stripeCustomerId },\n      { monthlySubscriptionStatus }\n    );\n  }\n\n  async getByEmail(email: string) {\n    const user = await this.usersRepository.findOne({ email });\n    if (user) {\n      return user;\n    }\n    throw new HttpException('User with this email does not exist', HttpStatus.NOT_FOUND);\n  }\n\n  async getByIds(ids: number[]) {\n    return this.usersRepository.find({\n      where: { id: In(ids) },\n    });\n  }\n\n  async getById(id: number) {\n    const user = await this.usersRepository.findOne({ id });\n    if (user) {\n      return user;\n    }\n    throw new HttpException('User with this id does not exist', HttpStatus.NOT_FOUND);\n  }\n\n  async create(userData: CreateUserDto) {\n    const stripeCustomer = await this.stripeService.createCustomer(userData.name, userData.email);\n\n    const newUser = await this.usersRepository.create({\n      ...userData,\n      stripeCustomerId: stripeCustomer.id\n    });\n    await this.usersRepository.save(newUser);\n    return newUser;\n  }\n\n  async createWithGoogle(email: string, name: string) {\n    const stripeCustomer = await this.stripeService.createCustomer(name, email);\n\n    const newUser = await this.usersRepository.create({\n      email,\n      name,\n      isRegisteredWithGoogle: true,\n      stripeCustomerId: stripeCustomer.id\n    });\n    await this.usersRepository.save(newUser);\n    return newUser;\n  }\n\n  async addAvatar(userId: number, imageBuffer: Buffer, filename: string) {\n    const user = await this.getById(userId);\n    if (user.avatar) {\n      await this.usersRepository.update(userId, {\n        ...user,\n        avatar: null\n      });\n      await this.filesService.deletePublicFile(user.avatar.id);\n    }\n    const avatar = await this.filesService.uploadPublicFile(imageBuffer, filename);\n    await this.usersRepository.update(userId, {\n      ...user,\n      avatar\n    });\n    return avatar;\n  }\n\n  async deleteAvatar(userId: number) {\n    const queryRunner = this.connection.createQueryRunner();\n    const user = await this.getById(userId);\n    const fileId = user.avatar?.id;\n    if (fileId) {\n      await queryRunner.connect();\n      await queryRunner.startTransaction();\n      try {\n        await queryRunner.manager.update(User, userId, {\n          ...user,\n          avatar: null\n        });\n        await this.filesService.deletePublicFileWithQueryRunner(fileId, queryRunner);\n        await queryRunner.commitTransaction();\n      } catch (error) {\n        await queryRunner.rollbackTransaction();\n        throw new InternalServerErrorException();\n      } finally {\n        await queryRunner.release();\n      }\n    }\n  }\n\n  async setCurrentRefreshToken(refreshToken: string, userId: number) {\n    const currentHashedRefreshToken = await bcrypt.hash(refreshToken, 10);\n    await this.usersRepository.update(userId, {\n      currentHashedRefreshToken\n    });\n  }\n\n  async getUserIfRefreshTokenMatches(refreshToken: string, userId: number) {\n    const user = await this.getById(userId);\n\n    const isRefreshTokenMatching = await bcrypt.compare(\n      refreshToken,\n      user.currentHashedRefreshToken\n    );\n\n    if (isRefreshTokenMatching) {\n      return user;\n    }\n  }\n\n  async markEmailAsConfirmed(email: string) {\n    return this.usersRepository.update({ email }, {\n      isEmailConfirmed: true\n    });\n  }\n\n  markPhoneNumberAsConfirmed(userId: number) {\n    return this.usersRepository.update({ id: userId }, {\n      isPhoneNumberConfirmed: true\n    });\n  }\n\n  async removeRefreshToken(userId: number) {\n    return this.usersRepository.update(userId, {\n      currentHashedRefreshToken: null\n    });\n  }\n\n  async setTwoFactorAuthenticationSecret(secret: string, userId: number) {\n    return this.usersRepository.update(userId, {\n      twoFactorAuthenticationSecret: secret\n    });\n  }\n\n  async turnOnTwoFactorAuthentication(userId: number) {\n    return this.usersRepository.update(userId, {\n      isTwoFactorAuthenticationEnabled: true\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/VerificationTokenPayload.html":{"url":"interfaces/VerificationTokenPayload.html","title":"interface - VerificationTokenPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  VerificationTokenPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/emailConfirmation/verificationTokenPayload.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        interface VerificationTokenPayload {\n  email: string;\n}\n\nexport default VerificationTokenPayload;\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/authentication/authentication.controller.ts\n            \n            controller\n            AuthenticationController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/authentication/authentication.service.ts\n            \n            injectable\n            AuthenticationService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/authentication/dto/logIn.dto.ts\n            \n            class\n            LogInDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/authentication/dto/register.dto.ts\n            \n            class\n            RegisterDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/authentication/graphql-jwt-auth.guard.ts\n            \n            injectable\n            GraphqlJwtAuthGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/authentication/jwt-authentication.guard.ts\n            \n            injectable\n            JwtAuthenticationGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/authentication/jwt-refresh-token.strategy.ts\n            \n            injectable\n            JwtRefreshTokenStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/authentication/jwt-refresh.guard.ts\n            \n            injectable\n            JwtRefreshGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/authentication/jwt-two-factor.guard.ts\n            \n            injectable\n            JwtTwoFactorGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/authentication/jwt-two-factor.strategy.ts\n            \n            injectable\n            JwtTwoFactorStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/authentication/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/authentication/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/authentication/localAuthentication.guard.ts\n            \n            injectable\n            LocalAuthenticationGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/authentication/requestWithUser.interface.ts\n            \n            interface\n            RequestWithUser\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/authentication/tests/user.mock.ts\n            \n            variable\n            mockedUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/authentication/tokenPayload.interface.ts\n            \n            interface\n            TokenPayload\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/authentication/twoFactor/dto/twoFactorAuthenticationCode.dto.ts\n            \n            class\n            TwoFactorAuthenticationCodeDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/authentication/twoFactor/twoFactorAuthentication.controller.ts\n            \n            controller\n            TwoFactorAuthenticationController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/authentication/twoFactor/twoFactorAuthentication.service.ts\n            \n            injectable\n            TwoFactorAuthenticationService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/categories/categories.controller.ts\n            \n            controller\n            CategoriesController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/categories/categories.service.ts\n            \n            injectable\n            CategoriesService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/categories/category.entity.ts\n            \n            class\n            Category\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/categories/dto/createCategory.dto.ts\n            \n            class\n            CreateCategoryDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/categories/dto/updateCategory.dto.ts\n            \n            class\n            UpdateCategoryDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/categories/exceptions/categoryNotFound.exception.ts\n            \n            class\n            CategoryNotFoundException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/charge/charge.controller.ts\n            \n            controller\n            ChargeController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/charge/dto/createCharge.dto.ts\n            \n            class\n            CreateChargeDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/chat/chat.gateway.ts\n            \n            class\n            ChatGateway\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/chat/chat.service.ts\n            \n            injectable\n            ChatService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/chat/message.entity.ts\n            \n            class\n            Message\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/comments/commands/handlers/create-comment.handler.ts\n            \n            class\n            CreateCommentHandler\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/comments/commands/implementations/createComment.command.ts\n            \n            class\n            CreateCommentCommand\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/comments/comment.entity.ts\n            \n            class\n            Comment\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/comments/comments.controller.ts\n            \n            controller\n            CommentsController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/comments/dto/createComment.dto.ts\n            \n            class\n            CreateCommentDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/comments/dto/getComments.dto.ts\n            \n            class\n            GetCommentsDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/comments/queries/handlers/getComments.handler.ts\n            \n            class\n            GetCommentsHandler\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/comments/queries/implementations/getComments.query.ts\n            \n            class\n            GetCommentsQuery\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/credit-cards/creditCards.controller.ts\n            \n            controller\n            CreditCardsController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/credit-cards/dto/addCreditCardDto.ts\n            \n            class\n            AddCreditCardDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/credit-cards/dto/setDefaultCreditCard.dto.ts\n            \n            class\n            SetDefaultCreditCardDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/database/databaseLogger.ts\n            \n            class\n            DatabaseLogger\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/email/email.service.ts\n            \n            injectable\n            EmailService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/emailConfirmation/confirmEmail.dto.ts\n            \n            class\n            ConfirmEmailDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/emailConfirmation/emailConfirmation.controller.ts\n            \n            controller\n            EmailConfirmationController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/emailConfirmation/emailConfirmation.guard.ts\n            \n            guard\n            EmailConfirmationGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/emailConfirmation/emailConfirmation.service.ts\n            \n            injectable\n            EmailConfirmationService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/emailConfirmation/verificationTokenPayload.interface.ts\n            \n            interface\n            VerificationTokenPayload\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/emailScheduling/dto/emailSchedule.dto.ts\n            \n            class\n            EmailScheduleDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/emailScheduling/emailScheduling.controller.ts\n            \n            controller\n            EmailSchedulingController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/emailScheduling/emailScheduling.service.ts\n            \n            injectable\n            EmailSchedulingService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/files/files.service.ts\n            \n            injectable\n            FilesService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/files/publicFile.entity.ts\n            \n            class\n            PublicFile\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/googleAuthentication/googleAuthentication.controller.ts\n            \n            controller\n            GoogleAuthenticationController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/googleAuthentication/googleAuthentication.service.ts\n            \n            injectable\n            GoogleAuthenticationService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/googleAuthentication/tokenVerification.dto.ts\n            \n            class\n            TokenVerificationDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/health/elasticsearchHealthIndicator.ts\n            \n            injectable\n            ElasticsearchHealthIndicator\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/health/health.controller.ts\n            \n            controller\n            HealthController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/logger/customLogger.ts\n            \n            injectable\n            CustomLogger\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/logger/dto/createLog.dto.ts\n            \n            class\n            CreateLogDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/logger/log.entity.ts\n            \n            class\n            Log\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/logger/logs.service.ts\n            \n            injectable\n            LogsService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/optimize/image.processor.ts\n            \n            function\n            imageProcessor\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/optimize/optimize.controller.ts\n            \n            controller\n            OptimizeController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/dto/createPost.dto.ts\n            \n            class\n            CreatePostDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/dto/updatePost.dto.ts\n            \n            class\n            UpdatePostDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/posts/exceptions/postNotFound.exception.ts\n            \n            class\n            PostNotFoundException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/posts/httpCache.interceptor.ts\n            \n            injectable\n            HttpCacheInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/posts/inputs/post.input.ts\n            \n            class\n            CreatePostInput\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/posts/loaders/posts.loaders.ts\n            \n            injectable\n            PostsLoaders\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/models/post.model.ts\n            \n            class\n            Post\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/posts/post.entity.ts\n            \n            class\n            Post\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/posts/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/posts/posts.resolver.ts\n            \n            class\n            PostsResolver\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/posts/posts.resolver.ts\n            \n            variable\n            POST_ADDED_EVENT\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/posts/postsCacheKey.constant.ts\n            \n            variable\n            GET_POSTS_CACHE_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/postsSearch.service.ts\n            \n            injectable\n            PostsSearchService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/posts/types/postCountBody.interface.ts\n            \n            interface\n            PostCountResult\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/posts/types/postSearchBody.interface.ts\n            \n            interface\n            PostSearchBody\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/posts/types/postSearchResponse.interface.ts\n            \n            interface\n            PostSearchResult\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/productCategories/dto/createProductCategory.dto.ts\n            \n            class\n            CreateProductCategoryDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/productCategories/productCategories.controller.ts\n            \n            controller\n            ProductCategoriesController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/productCategories/productCategories.service.ts\n            \n            injectable\n            ProductCategoriesService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/productCategories/productCategory.entity.ts\n            \n            class\n            ProductCategory\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/products/dto/createProduct.dto.ts\n            \n            class\n            CreateProductDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/products/product.entity.ts\n            \n            class\n            Product\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/products/products.controller.ts\n            \n            controller\n            ProductsController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/products/products.service.ts\n            \n            injectable\n            ProductsService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/products/types/bookProperties.interface.ts\n            \n            interface\n            BookProperties\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/products/types/carProperties.interface.ts\n            \n            interface\n            CarProperties\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/pubSub/pubSub.module.ts\n            \n            variable\n            PUB_SUB\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/sms/checkVerificationCode.dto.ts\n            \n            class\n            CheckVerificationCodeDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/sms/sms.controller.ts\n            \n            controller\n            SmsController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/sms/sms.service.ts\n            \n            injectable\n            SmsService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/stripe/stripe.service.ts\n            \n            injectable\n            StripeService\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/stripeWebhook/StripeEvent.entity.ts\n            \n            class\n            StripeEvent\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/stripeWebhook/requestWithRawBody.interface.ts\n            \n            interface\n            RequestWithRawBody\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/stripeWebhook/stripeWebhook.controller.ts\n            \n            controller\n            StripeWebhookController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/stripeWebhook/stripeWebhook.service.ts\n            \n            injectable\n            StripeWebhookService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/subscribers/dto/createSubscriber.dto.ts\n            \n            class\n            CreateSubscriberDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/subscribers/subscriber.service.ts\n            \n            interface\n            Subscriber\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/subscribers/subscribers.controller.ts\n            \n            controller\n            SubscribersController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/subscribers/subscribers.service.interface.ts\n            \n            interface\n            SubscribersService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/subscriptions/subscriptions.controller.ts\n            \n            controller\n            SubscriptionsController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/subscriptions/subscriptions.service.ts\n            \n            injectable\n            SubscriptionsService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/users/address.entity.ts\n            \n            class\n            Address\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/dto/createUser.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/users/models/user.model.ts\n            \n            class\n            User\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/user.entity.ts\n            \n            class\n            User\n            \n                0 %\n                (0/17)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/17)\n            \n        \n        \n            \n                \n                src/utils/excludeNull.interceptor.ts\n            \n            injectable\n            ExcludeNullInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/utils/findOneParams.ts\n            \n            class\n            FindOneParams\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/utils/getLogLevels.ts\n            \n            function\n            getLogLevels\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/logs.middleware.ts\n            \n            injectable\n            LogsMiddleware\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/utils/mocks/config.service.ts\n            \n            variable\n            mockedConfigService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/mocks/jwt.service.ts\n            \n            variable\n            mockedJwtService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/rawBody.middleware.ts\n            \n            function\n            rawBodyMiddleware\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/recursivelyStripNullValues.ts\n            \n            function\n            recursivelyStripNullValues\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/runInCluster.ts\n            \n            function\n            runInCluster\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/scalars/timestamp.scalar.ts\n            \n            class\n            Timestamp\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/utils/types/objectWithId.dto.ts\n            \n            class\n            ObjectWithIdDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/utils/types/paginationParams.ts\n            \n            class\n            PaginationParams\n            \n                0 %\n                (0/4)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.15\n        \n            @elastic/elasticsearch : ^7.9.0\n        \n            @grpc/grpc-js : ^1.3.7\n        \n            @grpc/proto-loader : ^0.5.5\n        \n            @hapi/joi : ^17.1.1\n        \n            @nestjs/bull : ^0.4.1\n        \n            @nestjs/common : ^8.0.9\n        \n            @nestjs/config : ^1.0.1\n        \n            @nestjs/core : ^8.0.9\n        \n            @nestjs/cqrs : ^8.0.0\n        \n            @nestjs/elasticsearch : ^8.0.0\n        \n            @nestjs/graphql : ^7.11.0\n        \n            @nestjs/jwt : ^8.0.0\n        \n            @nestjs/microservices : ^8.0.9\n        \n            @nestjs/passport : ^8.0.1\n        \n            @nestjs/platform-express : ^8.0.9\n        \n            @nestjs/platform-socket.io : ^8.0.9\n        \n            @nestjs/schedule : ^1.0.1\n        \n            @nestjs/terminus : ^8.0.1\n        \n            @nestjs/typeorm : ^8.0.2\n        \n            @nestjs/websockets : ^8.0.9\n        \n            @types/adm-zip : ^0.4.34\n        \n            @types/aws-sdk : ^2.7.0\n        \n            @types/bcrypt : ^3.0.0\n        \n            @types/bull : ^3.15.1\n        \n            @types/cache-manager : ^2.10.3\n        \n            @types/cookie : ^0.4.0\n        \n            @types/cookie-parser : ^1.4.2\n        \n            @types/cron : ^1.7.2\n        \n            @types/hapi__joi : ^17.1.0\n        \n            @types/imagemin : ^7.0.0\n        \n            @types/ioredis : ^4.19.3\n        \n            @types/multer : ^1.4.3\n        \n            @types/nodemailer : ^6.4.0\n        \n            @types/passport-google-oauth20 : ^2.0.9\n        \n            @types/passport-jwt : ^3.0.3\n        \n            @types/passport-local : ^1.0.33\n        \n            @types/qrcode : ^1.4.0\n        \n            @types/socket.io : ^2.1.12\n        \n            @types/uuid : ^8.0.0\n        \n            adm-zip : ^0.5.5\n        \n            amqp-connection-manager : ^3.2.1\n        \n            amqplib : ^0.6.0\n        \n            apollo-server-core : ^3.3.0\n        \n            apollo-server-express : ^2.19.2\n        \n            aws-sdk : ^2.724.0\n        \n            bcrypt : ^4.0.1\n        \n            bull : ^3.22.4\n        \n            cache-manager : ^3.4.0\n        \n            cache-manager-redis-store : ^2.0.0\n        \n            class-transformer : ^0.3.1\n        \n            class-validator : ^0.12.2\n        \n            cookie : ^0.4.1\n        \n            cookie-parser : ^1.4.5\n        \n            dataloader : ^2.0.0\n        \n            googleapis : ^82.0.0\n        \n            graphql : ^15.5.0\n        \n            graphql-parse-resolve-info : ^4.11.0\n        \n            graphql-redis-subscriptions : ^2.3.1\n        \n            graphql-tools : ^7.0.2\n        \n            grpc : ^1.24.4\n        \n            imagemin : ^7.0.1\n        \n            imagemin-pngquant : ^9.0.2\n        \n            nodemailer : ^6.4.17\n        \n            otplib : ^12.0.1\n        \n            passport : ^0.4.1\n        \n            passport-google-oauth20 : ^2.0.0\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            pg : ^8.2.0\n        \n            qrcode : ^1.4.4\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.3.1\n        \n            stripe : ^8.154.0\n        \n            twilio : ^3.66.0\n        \n            typeorm : ^0.2.38\n        \n            uuid : ^8.3.0\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            PostgresErrorCode   (src/.../postgresErrorCode.enum.ts)\n                        \n                        \n                            StripeError   (src/.../stripeError.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/database/postgresErrorCode.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        PostgresErrorCode\n                    \n                \n                        \n                            \n                                 UniqueViolation\n                            \n                        \n                        \n                            \n                                Value : 23505\n                            \n                        \n            \n        \n\n    src/utils/stripeError.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        StripeError\n                    \n                \n                        \n                            \n                                 InvalidRequest\n                            \n                        \n                        \n                            \n                                Value : StripeInvalidRequestError\n                            \n                        \n                        \n                            \n                                 ResourceMissing\n                            \n                        \n                        \n                            \n                                Value : resource_missing\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            getLogLevels   (src/.../getLogLevels.ts)\n                        \n                        \n                            imageProcessor   (src/.../image.processor.ts)\n                        \n                        \n                            rawBodyMiddleware   (src/.../rawBody.middleware.ts)\n                        \n                        \n                            recursivelyStripNullValues   (src/.../recursivelyStripNullValues.ts)\n                        \n                        \n                            runInCluster   (src/.../runInCluster.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/utils/getLogLevels.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getLogLevels\n                        \n                    \n                \n            \n            \n                \ngetLogLevels(isProduction: boolean)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    isProduction\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         LogLevel[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/optimize/image.processor.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        imageProcessor\n                        \n                    \n                \n            \n            \n                \nimageProcessor(job: Job, doneCallback: DoneCallback)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    job\n                                    \n                                            Job\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    doneCallback\n                                    \n                                            DoneCallback\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/utils/rawBody.middleware.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        rawBodyMiddleware\n                        \n                    \n                \n            \n            \n                \nrawBodyMiddleware()\n                \n            \n\n\n\n\n        \n    \n    src/utils/recursivelyStripNullValues.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        recursivelyStripNullValues\n                        \n                    \n                \n            \n            \n                \nrecursivelyStripNullValues(value)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/utils/runInCluster.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        runInCluster\n                        \n                    \n                \n            \n            \n                \nrunInCluster(bootstrap)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    bootstrap\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n\n  \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\n  Nest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthenticationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CategoriesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ChargeModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ChatModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CommentsModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CreditCardsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EmailConfirmationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EmailModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EmailSchedulingModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FilesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        GoogleAuthenticationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HealthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        LoggerModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        OptimizeModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ProductCategoriesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ProductsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PubSubModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SearchModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SmsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StripeModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StripeWebhookModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SubscribersModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SubscriptionsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthenticationModule\n\n\n\ncluster_AuthenticationModule_exports\n\n\n\ncluster_AuthenticationModule_providers\n\n\n\ncluster_CategoriesModule\n\n\n\ncluster_CategoriesModule_providers\n\n\n\ncluster_ChargeModule\n\n\n\ncluster_ChargeModule_imports\n\n\n\ncluster_ChatModule\n\n\n\ncluster_ChatModule_providers\n\n\n\ncluster_EmailConfirmationModule\n\n\n\ncluster_EmailConfirmationModule_imports\n\n\n\ncluster_EmailConfirmationModule_exports\n\n\n\ncluster_EmailConfirmationModule_providers\n\n\n\ncluster_EmailModule\n\n\n\ncluster_EmailModule_exports\n\n\n\ncluster_EmailModule_providers\n\n\n\ncluster_EmailSchedulingModule\n\n\n\ncluster_EmailSchedulingModule_providers\n\n\n\ncluster_FilesModule\n\n\n\ncluster_FilesModule_exports\n\n\n\ncluster_FilesModule_providers\n\n\n\ncluster_GoogleAuthenticationModule\n\n\n\ncluster_GoogleAuthenticationModule_providers\n\n\n\ncluster_HealthModule\n\n\n\ncluster_HealthModule_providers\n\n\n\ncluster_LoggerModule\n\n\n\ncluster_LoggerModule_exports\n\n\n\ncluster_LoggerModule_providers\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_ProductCategoriesModule\n\n\n\ncluster_ProductCategoriesModule_providers\n\n\n\ncluster_ProductsModule\n\n\n\ncluster_ProductsModule_providers\n\n\n\ncluster_SmsModule\n\n\n\ncluster_SmsModule_exports\n\n\n\ncluster_SmsModule_providers\n\n\n\ncluster_StripeModule\n\n\n\ncluster_StripeModule_exports\n\n\n\ncluster_StripeModule_providers\n\n\n\ncluster_StripeWebhookModule\n\n\n\ncluster_StripeWebhookModule_providers\n\n\n\ncluster_SubscriptionsModule\n\n\n\ncluster_SubscriptionsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthenticationModule\n\nAuthenticationModule\n\n\n\nChatModule\n\nChatModule\n\nChatModule -->\n\nAuthenticationModule->ChatModule\n\n\n\n\n\nGoogleAuthenticationModule\n\nGoogleAuthenticationModule\n\nGoogleAuthenticationModule -->\n\nAuthenticationModule->GoogleAuthenticationModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthenticationModule->AppModule\n\n\n\n\n\nAuthenticationService \n\nAuthenticationService \n\nAuthenticationService  -->\n\nAuthenticationModule->AuthenticationService \n\n\n\n\n\nCategoriesModule\n\nCategoriesModule\n\nAppModule -->\n\nCategoriesModule->AppModule\n\n\n\n\n\nChargeModule\n\nChargeModule\n\nAppModule -->\n\nChargeModule->AppModule\n\n\n\nAppModule -->\n\nChatModule->AppModule\n\n\n\n\n\nCommentsModule\n\nCommentsModule\n\nAppModule -->\n\nCommentsModule->AppModule\n\n\n\n\n\nCreditCardsModule\n\nCreditCardsModule\n\nAppModule -->\n\nCreditCardsModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nEmailConfirmationModule\n\nEmailConfirmationModule\n\nAuthenticationModule -->\n\nEmailConfirmationModule->AuthenticationModule\n\n\n\nAppModule -->\n\nEmailConfirmationModule->AppModule\n\n\n\n\n\nEmailConfirmationService \n\nEmailConfirmationService \n\nEmailConfirmationService  -->\n\nEmailConfirmationModule->EmailConfirmationService \n\n\n\n\n\nEmailSchedulingModule\n\nEmailSchedulingModule\n\nAppModule -->\n\nEmailSchedulingModule->AppModule\n\n\n\nAppModule -->\n\nGoogleAuthenticationModule->AppModule\n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\n\n\nLoggerModule\n\nLoggerModule\n\nAppModule -->\n\nLoggerModule->AppModule\n\n\n\n\n\nCustomLogger \n\nCustomLogger \n\nCustomLogger  -->\n\nLoggerModule->CustomLogger \n\n\n\n\n\nOptimizeModule\n\nOptimizeModule\n\nAppModule -->\n\nOptimizeModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nProductCategoriesModule\n\nProductCategoriesModule\n\nAppModule -->\n\nProductCategoriesModule->AppModule\n\n\n\n\n\nProductsModule\n\nProductsModule\n\nAppModule -->\n\nProductsModule->AppModule\n\n\n\n\n\nPubSubModule\n\nPubSubModule\n\nAppModule -->\n\nPubSubModule->AppModule\n\n\n\n\n\nSearchModule\n\nSearchModule\n\nHealthModule -->\n\nSearchModule->HealthModule\n\n\n\nPostsModule -->\n\nSearchModule->PostsModule\n\n\n\nAppModule -->\n\nSearchModule->AppModule\n\n\n\n\n\nSmsModule\n\nSmsModule\n\nAppModule -->\n\nSmsModule->AppModule\n\n\n\n\n\nSmsService \n\nSmsService \n\nSmsService  -->\n\nSmsModule->SmsService \n\n\n\n\n\nStripeWebhookModule\n\nStripeWebhookModule\n\nAppModule -->\n\nStripeWebhookModule->AppModule\n\n\n\n\n\nSubscribersModule\n\nSubscribersModule\n\nAppModule -->\n\nSubscribersModule->AppModule\n\n\n\n\n\nSubscriptionsModule\n\nSubscriptionsModule\n\nAppModule -->\n\nSubscriptionsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthenticationModule -->\n\nUsersModule->AuthenticationModule\n\n\n\nEmailConfirmationModule -->\n\nUsersModule->EmailConfirmationModule\n\n\n\nGoogleAuthenticationModule -->\n\nUsersModule->GoogleAuthenticationModule\n\n\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\nSmsModule -->\n\nUsersModule->SmsModule\n\n\n\nStripeWebhookModule -->\n\nUsersModule->StripeWebhookModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAuthenticationService\n\nAuthenticationService\n\nAuthenticationModule -->\n\nAuthenticationService->AuthenticationModule\n\n\n\n\n\nJwtRefreshTokenStrategy\n\nJwtRefreshTokenStrategy\n\nAuthenticationModule -->\n\nJwtRefreshTokenStrategy->AuthenticationModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthenticationModule -->\n\nJwtStrategy->AuthenticationModule\n\n\n\n\n\nJwtTwoFactorStrategy\n\nJwtTwoFactorStrategy\n\nAuthenticationModule -->\n\nJwtTwoFactorStrategy->AuthenticationModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthenticationModule -->\n\nLocalStrategy->AuthenticationModule\n\n\n\n\n\nTwoFactorAuthenticationService\n\nTwoFactorAuthenticationService\n\nAuthenticationModule -->\n\nTwoFactorAuthenticationService->AuthenticationModule\n\n\n\n\n\nCategoriesService\n\nCategoriesService\n\nCategoriesModule -->\n\nCategoriesService->CategoriesModule\n\n\n\n\n\nStripeModule\n\nStripeModule\n\nChargeModule -->\n\nStripeModule->ChargeModule\n\n\n\nCreditCardsModule -->\n\nStripeModule->CreditCardsModule\n\n\n\nStripeWebhookModule -->\n\nStripeModule->StripeWebhookModule\n\n\n\nSubscriptionsModule -->\n\nStripeModule->SubscriptionsModule\n\n\n\nUsersModule -->\n\nStripeModule->UsersModule\n\n\n\n\n\nStripeService \n\nStripeService \n\nStripeService  -->\n\nStripeModule->StripeService \n\n\n\n\n\nChatService\n\nChatService\n\nChatModule -->\n\nChatService->ChatModule\n\n\n\n\n\nEmailModule\n\nEmailModule\n\nEmailConfirmationModule -->\n\nEmailModule->EmailConfirmationModule\n\n\n\nEmailSchedulingModule -->\n\nEmailModule->EmailSchedulingModule\n\n\n\n\n\nEmailService \n\nEmailService \n\nEmailService  -->\n\nEmailModule->EmailService \n\n\n\n\n\nEmailConfirmationService\n\nEmailConfirmationService\n\nEmailConfirmationModule -->\n\nEmailConfirmationService->EmailConfirmationModule\n\n\n\n\n\nEmailService\n\nEmailService\n\nEmailModule -->\n\nEmailService->EmailModule\n\n\n\n\n\nEmailSchedulingService\n\nEmailSchedulingService\n\nEmailSchedulingModule -->\n\nEmailSchedulingService->EmailSchedulingModule\n\n\n\n\n\nFilesService \n\nFilesService \n\n\n\nFilesModule\n\nFilesModule\n\nUsersModule -->\n\nFilesModule->UsersModule\n\n\n\nFilesService  -->\n\nFilesModule->FilesService \n\n\n\n\n\nFilesService\n\nFilesService\n\nFilesModule -->\n\nFilesService->FilesModule\n\n\n\n\n\nGoogleAuthenticationService\n\nGoogleAuthenticationService\n\nGoogleAuthenticationModule -->\n\nGoogleAuthenticationService->GoogleAuthenticationModule\n\n\n\n\n\nElasticsearchHealthIndicator\n\nElasticsearchHealthIndicator\n\nHealthModule -->\n\nElasticsearchHealthIndicator->HealthModule\n\n\n\n\n\nCustomLogger\n\nCustomLogger\n\nLoggerModule -->\n\nCustomLogger->LoggerModule\n\n\n\n\n\nLogsService\n\nLogsService\n\nLoggerModule -->\n\nLogsService->LoggerModule\n\n\n\n\n\nPostsLoaders\n\nPostsLoaders\n\nPostsModule -->\n\nPostsLoaders->PostsModule\n\n\n\n\n\nPostsSearchService\n\nPostsSearchService\n\nPostsModule -->\n\nPostsSearchService->PostsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nProductCategoriesService\n\nProductCategoriesService\n\nProductCategoriesModule -->\n\nProductCategoriesService->ProductCategoriesModule\n\n\n\n\n\nProductsService\n\nProductsService\n\nProductsModule -->\n\nProductsService->ProductsModule\n\n\n\n\n\nSmsService\n\nSmsService\n\nSmsModule -->\n\nSmsService->SmsModule\n\n\n\n\n\nStripeService\n\nStripeService\n\nStripeModule -->\n\nStripeService->StripeModule\n\n\n\n\n\nStripeWebhookService\n\nStripeWebhookService\n\nStripeWebhookModule -->\n\nStripeWebhookService->StripeWebhookModule\n\n\n\n\n\nSubscriptionsService\n\nSubscriptionsService\n\nSubscriptionsModule -->\n\nSubscriptionsService->SubscriptionsModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        27 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    19 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    34 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    48 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    11 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            GET_POSTS_CACHE_KEY   (src/.../postsCacheKey.constant.ts)\n                        \n                        \n                            mockedConfigService   (src/.../config.service.ts)\n                        \n                        \n                            mockedJwtService   (src/.../jwt.service.ts)\n                        \n                        \n                            mockedUser   (src/.../user.mock.ts)\n                        \n                        \n                            POST_ADDED_EVENT   (src/.../posts.resolver.ts)\n                        \n                        \n                            PUB_SUB   (src/.../pubSub.module.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/posts/postsCacheKey.constant.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        GET_POSTS_CACHE_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'GET_POSTS_CACHE'\n                    \n                \n\n\n        \n    \n\n    src/utils/mocks/config.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        mockedConfigService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  get(key: string) {\n    switch (key) {\n      case 'JWT_ACCESS_TOKEN_EXPIRATION_TIME':\n        return '3600'\n    }\n  }\n}\n                    \n                \n\n\n        \n    \n\n    src/utils/mocks/jwt.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        mockedJwtService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  sign: () => ''\n}\n                    \n                \n\n\n        \n    \n\n    src/authentication/tests/user.mock.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        mockedUser\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Default value : {\n  id: 1,\n  email: 'user@email.com',\n  name: 'John',\n  password: 'hash',\n  stripeCustomerId: 'stripe_customer_id',\n  phoneNumber: '+48123123123',\n  address: {\n    id: 1,\n    street: 'streetName',\n    city: 'cityName',\n    country: 'countryName'\n  },\n  isTwoFactorAuthenticationEnabled: false,\n  isEmailConfirmed: false,\n  isPhoneNumberConfirmed: false,\n  isRegisteredWithGoogle: false,\n}\n                    \n                \n\n\n        \n    \n\n    src/posts/posts.resolver.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        POST_ADDED_EVENT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'postAdded'\n                    \n                \n\n\n        \n    \n\n    src/pubSub/pubSub.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        PUB_SUB\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'PUB_SUB'\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
